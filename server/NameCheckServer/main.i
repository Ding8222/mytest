# 1 "c:\\mytest\\server\\namecheckserver\\main.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 337 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2






# 1 "C:\\Program Files (x86)\\Visual Leak Detector\\include\\vld.h" 1
# 26 "C:\\Program Files (x86)\\Visual Leak Detector\\include\\vld.h"
# 1 "C:\\Program Files (x86)\\Visual Leak Detector\\include/vld_def.h" 1
# 49 "C:\\Program Files (x86)\\Visual Leak Detector\\include/vld_def.h"
typedef int (__cdecl * VLD_REPORT_HOOK)(int reportType, wchar_t *message, int *returnValue);
# 26 "C:\\Program Files (x86)\\Visual Leak Detector\\include\\vld.h" 2


typedef int VLD_BOOL;
typedef unsigned int VLD_UINT;
typedef size_t VLD_SIZET;
typedef void* VLD_HMODULE;
# 7 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2

# 1 "C:\\mytest\\server\\NameCheckServer/config.h" 1

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\string" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\istream" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ostream" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ios" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocnum" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\climits" 1 3




# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 1 3
# 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xkeycheck.h" 1 3
# 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\crtdefs.h" 1 3








# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\sal.h" 1 3
# 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\sal.h" 3
extern "C" {
# 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\sal.h" 3
}



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\concurrencysal.h" 1 3
# 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\concurrencysal.h" 3
extern "C" {
# 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\concurrencysal.h" 3
}
# 2970 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\sal.h" 2 3
# 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vadefs.h" 1 3
# 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vadefs.h" 3
#pragma pack(push, 8)


extern "C" {
# 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vadefs.h" 3
        typedef unsigned int uintptr_t;
# 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vadefs.h" 3
        typedef char* va_list;
# 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vadefs.h" 3
}



    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    }
# 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vadefs.h" 3
#pragma pack(pop)
# 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 2 3
# 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 3
#pragma pack(push, 8)
# 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 3
 extern "C" {
# 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 3
    typedef unsigned int size_t;
    typedef int ptrdiff_t;
    typedef int intptr_t;



    typedef bool __vcrt_bool;
# 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 3
    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];


    }
# 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 3
    void __cdecl __security_init_cookie(void);


        void __fastcall __security_check_cookie( uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(void);






extern uintptr_t __security_cookie;







}
# 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 3
#pragma pack(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\crtdefs.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 1 3
# 10 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 10 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 2 3


#pragma pack(push, 8)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
 extern "C" {
# 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}



    typedef bool __crt_bool;
# 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
               wchar_t const* _Expression,
               wchar_t const* _FunctionName,
               wchar_t const* _FileName,
               unsigned int _LineNo,
               uintptr_t _Reserved);
# 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
typedef int errno_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef long __time32_t;
typedef __int64 __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
                        int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data* locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;
# 523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
        typedef __time64_t time_t;
# 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
    typedef size_t rsize_t;
# 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
}
# 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt.h" 3
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\crtdefs.h" 2 3
# 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 2 3
# 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 3
#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)
# 677 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 3
#pragma detect_mismatch("_MSC_VER", "1900")



#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")








#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
# 802 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\use_ansi.h" 1 3
# 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\use_ansi.h" 3
#pragma comment(lib, "msvcprt" "" "")
# 802 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 2 3
# 964 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 3
namespace std {
enum _Uninitialized
 {
 _Noinit
 };


class __declspec(dllimport) _Lockit
 {
public:
# 992 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 3
 __thiscall _Lockit();
 explicit __thiscall _Lockit(int);
 __thiscall ~_Lockit() noexcept;


 static void __cdecl _Lockit_ctor(int);
 static void __cdecl _Lockit_dtor(int);

private:
 static void __cdecl _Lockit_ctor(_Lockit *);
 static void __cdecl _Lockit_ctor(_Lockit *, int);
 static void __cdecl _Lockit_dtor(_Lockit *);

public:
                    _Lockit(const _Lockit&) = delete;
 _Lockit& operator=(const _Lockit&) = delete;

private:
 int _Locktype;
 };
# 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 3
class __declspec(dllimport) _Init_locks
 {
public:
# 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\yvals.h" 3
 __thiscall _Init_locks();
 __thiscall ~_Init_locks() noexcept;


private:
 static void __cdecl _Init_locks_ctor(_Init_locks *);
 static void __cdecl _Init_locks_dtor(_Init_locks *);
 };

}







         void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;




#pragma warning(pop)
#pragma pack(pop)
# 5 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\climits" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits.h" 2 3


#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits.h" 3
 extern "C" {
# 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits.h" 3
}
# 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits.h" 3
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\climits" 2 3
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocnum" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cmath" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstdlib" 1 3







# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_malloc.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_malloc.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_malloc.h" 3
 extern "C" {
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_malloc.h" 3
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
         size_t _Count,
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
                            size_t _Count,
                            size_t _Size
    );


__declspec(dllimport) int __cdecl _callnewh(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator)
void* __cdecl _expand(
                            void* _Block,
                            size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
                                   void* _Block
    );

__declspec(dllimport)
void __cdecl free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl malloc(
                            size_t _Size
    );


__declspec(dllimport)
size_t __cdecl _msize_base(
                  void* _Block
    );


__declspec(dllimport)
size_t __cdecl _msize(
                  void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
                                    void* _Block,
                                    size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
                                   void* _Block,
                                   size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
                            size_t _Size,
                            size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
                            size_t _Size,
                            size_t _Alignment,
                            size_t _Offset
    );


__declspec(dllimport)
size_t __cdecl _aligned_msize(
                  void* _Block,
                  size_t _Alignment,
                  size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment
    );
# 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_malloc.h" 3
}
# 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_malloc.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_search.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_search.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stddef.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stddef.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stddef.h" 3
 extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;






    __declspec(dllimport) int* __cdecl _errno(void);


    __declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stddef.h" 3
__declspec(dllimport) extern unsigned long __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



}
# 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stddef.h" 3
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_search.h" 2 3


#pragma pack(push, 8)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_search.h" 3
 extern "C" {


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);





    __declspec(dllimport) void* __cdecl bsearch_s(
                                                           void const* _Key,
                                                           void const* _Base,
                                                           rsize_t _NumOfElements,
                                                           rsize_t _SizeOfElements,
                               _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                           void* _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
                                                                void* _Base,
                                                                rsize_t _NumOfElements,
                                                                rsize_t _SizeOfElements,
                                _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                                void* _Context
        );






__declspec(dllimport) void* __cdecl bsearch(
                                                       void const* _Key,
                                                       void const* _Base,
                                                       size_t _NumOfElements,
                                                       size_t _SizeOfElements,
                        _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

__declspec(dllimport) void __cdecl qsort(
                                                            void* _Base,
                                                            size_t _NumOfElements,
                                                            size_t _SizeOfElements,
                        _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );


__declspec(dllimport) void* __cdecl _lfind_s(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          size_t _SizeOfElements,
                                _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                          void* _Context
    );


__declspec(dllimport) void* __cdecl _lfind(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          unsigned int _SizeOfElements,
                             _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );


__declspec(dllimport) void* __cdecl _lsearch_s(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                size_t _SizeOfElements,
                                      _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                                void* _Context
    );


__declspec(dllimport) void* __cdecl _lsearch(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                unsigned int _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );
# 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_search.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                              void const* _Key,
                                                              void const* _Base,
                                                              unsigned int* _NumOfElements,
                                                              unsigned int _SizeOfElements,
                                 _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                   void const* _Key,
                                                                   void* _Base,
                                                                   unsigned int* _NumOfElements,
                                                                   unsigned int _SizeOfElements,
                                      _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );





}
# 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_search.h" 3
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h" 3
 extern "C" {
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h" 3
    __declspec(dllimport) errno_t __cdecl _itow_s(
                                     int _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow(int _Value, wchar_t *_Buffer, int _Radix);
# 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h" 3
    __declspec(dllimport) errno_t __cdecl _ltow_s(
                                     long _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow(long _Value, wchar_t *_Buffer, int _Radix);







    __declspec(dllimport) errno_t __cdecl _ultow_s(
                                     unsigned long _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix);







    __declspec(dllimport) double __cdecl wcstod(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


    __declspec(dllimport) double __cdecl _wcstod_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


    __declspec(dllimport) long __cdecl wcstol(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) long __cdecl _wcstol_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) long long __cdecl wcstoll(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) long long __cdecl _wcstoll_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) unsigned long __cdecl wcstoul(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) unsigned long long __cdecl wcstoull(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) long double __cdecl wcstold(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


    __declspec(dllimport) long double __cdecl _wcstold_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


    __declspec(dllimport) float __cdecl wcstof(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


    __declspec(dllimport) float __cdecl _wcstof_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


    __declspec(dllimport) double __cdecl _wtof(
               wchar_t const* _String
        );


    __declspec(dllimport) double __cdecl _wtof_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) int __cdecl _wtoi(
               wchar_t const* _String
        );


    __declspec(dllimport) int __cdecl _wtoi_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) long __cdecl _wtol(
               wchar_t const* _String
        );


    __declspec(dllimport) long __cdecl _wtol_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) long long __cdecl _wtoll(
               wchar_t const* _String
        );


    __declspec(dllimport) long long __cdecl _wtoll_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) errno_t __cdecl _i64tow_s(
                                     __int64 _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _i64tow(
                               __int64 _Value,
                               wchar_t* _Buffer,
                               int _Radix
        );


    __declspec(dllimport) errno_t __cdecl _ui64tow_s(
                                     unsigned __int64 _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _ui64tow(
                               unsigned __int64 _Value,
                               wchar_t* _Buffer,
                               int _Radix
        );


    __declspec(dllimport) __int64 __cdecl _wtoi64(
               wchar_t const* _String
        );


    __declspec(dllimport) __int64 __cdecl _wtoi64_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) __int64 __cdecl _wcstoi64(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );






    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
                                         wchar_t* _Buffer,
                                         wchar_t const* _Path,
                                         size_t _BufferCount
        );




    __declspec(dllimport) errno_t __cdecl _wmakepath_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     wchar_t const* _Drive,
                                     wchar_t const* _Dir,
                                     wchar_t const* _Filename,
                                     wchar_t const* _Ext
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }








#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath( wchar_t *_Buffer, wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext);







#pragma warning(pop)

 __declspec(dllimport) void __cdecl _wperror(
                   wchar_t const* _ErrorMessage
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) void __cdecl _wsplitpath(
                                 wchar_t const* _FullPath,
                                 wchar_t* _Drive,
                                 wchar_t* _Dir,
                                 wchar_t* _Filename,
                                 wchar_t* _Ext
        );

    __declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                           wchar_t const* _FullPath,
                                           wchar_t* _Drive,
                                           size_t _DriveCount,
                                           wchar_t* _Dir,
                                           size_t _DirCount,
                                           wchar_t* _Filename,
                                           size_t _FilenameCount,
                                           wchar_t* _Ext,
                                           size_t _ExtCount
        );

    extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s( wchar_t const* _Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h" 3
        __declspec(dllimport) errno_t __cdecl _wdupenv_s(
                                                                                        wchar_t** _Buffer,
                                                                                        size_t* _BufferCount,
                                                                                        wchar_t const* _VarName
            );



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        __declspec(dllimport) wchar_t* __cdecl _wgetenv(
                   wchar_t const* _VarName
            );



        __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                             size_t* _RequiredCount,
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _VarName
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(size_t* _RequiredCount, wchar_t (&_Buffer)[_Size], wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h" 3
        __declspec(dllimport) int __cdecl _wputenv(
                   wchar_t const* _EnvString
            );


        __declspec(dllimport) errno_t __cdecl _wputenv_s(
                   wchar_t const* _Name,
                   wchar_t const* _Value
            );

        __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                         wchar_t const* _Filename,
                                         wchar_t const* _VarName,
                                         wchar_t* _Buffer,
                                         size_t _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }






        __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t *_ResultPath);






        __declspec(dllimport) int __cdecl _wsystem(
                       wchar_t const* _Command
            );






}
# 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h" 3
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 2 3



#pragma pack(push, 8)
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
 extern "C" {
# 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) void __cdecl _swab(
                                                                     char* _Buf1,
                                                                     char* _Buf2,
                                                                     int _SizeInBytes
    );
# 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
    __declspec(dllimport) __declspec(noreturn) void __cdecl exit( int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl _exit( int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl _Exit( int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit( int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);






__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
         unsigned int _Flags,
         unsigned int _Mask
    );






    typedef int (__cdecl* _onexit_t)(void);
# 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
    int __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit( _onexit_t _Func);


int __cdecl at_quick_exit(void (__cdecl*)(void));
# 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
    typedef void (__cdecl* _purecall_handler)(void);


    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );


             _purecall_handler __cdecl _set_purecall_handler(
                 _purecall_handler _Handler
        );

             _purecall_handler __cdecl _get_purecall_handler(void);


    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
# 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
                   __declspec(dllimport) int __cdecl _set_error_mode( int _Mode);




    __declspec(dllimport) int* __cdecl _errno(void);


    __declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);

    __declspec(dllimport) unsigned long* __cdecl __doserrno(void);


    __declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
    __declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);


    __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);


    __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);


    __declspec(dllimport) void __cdecl perror( char const* _ErrMsg);





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char** __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int* __cdecl __p__fmode (void);
# 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _get_pgmptr ( char** _Value);


__declspec(dllimport) errno_t __cdecl _get_wpgmptr( wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode ( int _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode ( int* _PMode);
# 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

               int __cdecl abs ( int _Number);
               long __cdecl labs ( long _Number);
               long long __cdecl llabs ( long long _Number);
               __int64 __cdecl _abs64( __int64 _Number);

               unsigned short __cdecl _byteswap_ushort( unsigned short _Number);
               unsigned long __cdecl _byteswap_ulong ( unsigned long _Number);
               unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Number);

               __declspec(dllimport) div_t __cdecl div ( int _Numerator, int _Denominator);
               __declspec(dllimport) ldiv_t __cdecl ldiv ( long _Numerator, long _Denominator);
               __declspec(dllimport) lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);



#pragma warning(push)
#pragma warning(disable: 6540)

unsigned int __cdecl _rotl(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotl(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotl64(
         unsigned __int64 _Value,
         int _Shift
    );

unsigned int __cdecl _rotr(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotr(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotr64(
         unsigned __int64 _Value,
         int _Shift
    );

#pragma warning(pop)






__declspec(dllimport) void __cdecl srand( unsigned int _Seed);

               __declspec(dllimport) int __cdecl rand(void);
# 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
# 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
#pragma pack(push, 4)
 typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
#pragma pack(pop)
# 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








 __declspec(dllimport) double __cdecl atof ( char const* _String);
                                  __declspec(dllimport) int __cdecl atoi ( char const* _String);
                                  __declspec(dllimport) long __cdecl atol ( char const* _String);
                                  __declspec(dllimport) long long __cdecl atoll ( char const* _String);
                                  __declspec(dllimport) __int64 __cdecl _atoi64( char const* _String);

               __declspec(dllimport) double __cdecl _atof_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoi_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long __cdecl _atol_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl _atoll_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _atoi64_l( char const* _String, _locale_t _Locale);

               __declspec(dllimport) int __cdecl _atoflt ( _CRT_FLOAT* _Result, char const* _String);
               __declspec(dllimport) int __cdecl _atodbl ( _CRT_DOUBLE* _Result, char* _String);
               __declspec(dllimport) int __cdecl _atoldbl( _LDOUBLE* _Result, char* _String);


__declspec(dllimport) int __cdecl _atoflt_l(
             _CRT_FLOAT* _Result,
             char const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _atodbl_l(
             _CRT_DOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );



__declspec(dllimport) int __cdecl _atoldbl_l(
             _LDOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );


__declspec(dllimport) float __cdecl strtof(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) float __cdecl _strtof_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) double __cdecl strtod(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) double __cdecl _strtod_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long double __cdecl strtold(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) long double __cdecl _strtold_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl strtol(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long __cdecl _strtol_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl strtoll(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long long __cdecl _strtoll_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long __cdecl strtoul(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long long __cdecl strtoull(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) __int64 __cdecl _strtoi64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );
# 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _itoa_s(
                                 int _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }







#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa(int _Value, char *_Buffer, int _Radix);





#pragma warning(pop)



__declspec(dllimport) errno_t __cdecl _ltoa_s(
                                 long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa(long _Value, char *_Buffer, int _Radix);
# 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ultoa_s(
                                 unsigned long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }






#pragma warning(push)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa(unsigned long _Value, char *_Buffer, int _Radix);





#pragma warning(pop)



__declspec(dllimport) errno_t __cdecl _i64toa_s(
                                 __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _i64toa(
                           __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );



__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                                 unsigned __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ui64toa(
                           unsigned __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );
# 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ecvt_s(
                                 char* _Buffer,
          size_t _BufferCount,
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int* _PtDec, int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
# 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ecvt(
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );



__declspec(dllimport) errno_t __cdecl _fcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _FractionalDigitCount,
                                 int* _PtDec,
                                 int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
# 791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _fcvt(
          double _Value,
          int _FractionalDigitCount,
          int* _PtDec,
          int* _PtSign
    );


__declspec(dllimport) errno_t __cdecl _gcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _DigitCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _gcvt(
                           double _Value,
                           int _DigitCount,
                           char* _Buffer
    );
# 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);


    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);





__declspec(dllimport) int __cdecl mblen(
                                                char const* _Ch,
                                                size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _mblen_l(
                                                char const* _Ch,
                                                size_t _MaxCount,
                                                _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrlen(
           char const* _String
    );



__declspec(dllimport) size_t __cdecl _mbstrlen_l(
             char const* _String,
             _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen(
           char const* _String,
           size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
             char const* _String,
             size_t _MaxCount,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl mbtowc(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes
    );


__declspec(dllimport) int __cdecl _mbtowc_l(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes,
                                         _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, char const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount,
                                                              _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, char const* _Source, size_t _MaxCount, _locale_t _Locale);
# 964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl wctomb(
                                   char* _MbCh,
                                   wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wctomb_l(
                             char* _MbCh,
                             wchar_t _WCh,
                             _locale_t _Locale
    );




    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                                 int* _SizeConverted,
                                                                 char* _MbCh,
                                                                 rsize_t _SizeInBytes,
                                                                 wchar_t _WCh
        );




__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                                     int* _SizeConverted,
                                     char* _MbCh,
                                     size_t _SizeInBytes,
                                     wchar_t _WCh,
                                     _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, wchar_t const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes,
                                                                       _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l( char *_Dest, wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale);
# 1070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
                                     char* _Buffer,
                                     char const* _Path,
                                     size_t _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 char const* _Drive,
                                 char const* _Dir,
                                 char const* _Filename,
                                 char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }








#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath( char *_Buffer, char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext);







#pragma warning(pop)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _splitpath(
                             char const* _FullPath,
                             char* _Drive,
                             char* _Dir,
                             char* _Filename,
                             char* _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                       char const* _FullPath,
                                       char* _Drive,
                                       size_t _DriveCount,
                                       char* _Dir,
                                       size_t _DirCount,
                                       char* _Filename,
                                       size_t _FilenameCount,
                                       char* _Ext,
                                       size_t _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s( char const* _Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                         size_t* _RequiredCount,
                                         char* _Buffer,
                                         rsize_t _BufferCount,
                                         char const* _VarName
        );






    __declspec(dllimport) int* __cdecl __p___argc (void);
    __declspec(dllimport) char*** __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);
# 1173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
    __declspec(dllimport) char*** __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);
# 1198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        __declspec(dllimport) char* __cdecl getenv(
                   char const* _VarName
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t* _RequiredCount, char (&_Buffer)[_Size], char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
        __declspec(dllimport) errno_t __cdecl _dupenv_s(
                                                                                        char** _Buffer,
                                                                                        size_t* _BufferCount,
                                                                                        char const* _VarName
            );





        __declspec(dllimport) int __cdecl system(
                       char const* _Command
            );



#pragma warning(push)
#pragma warning(disable: 6540)


 __declspec(dllimport) int __cdecl _putenv(
                   char const* _EnvString
            );


        __declspec(dllimport) errno_t __cdecl _putenv_s(
                   char const* _Name,
                   char const* _Value
            );

#pragma warning(pop)

 __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                         char const* _Filename,
                                         char const* _VarName,
                                         char* _Buffer,
                                         size_t _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(char const* _Filename, char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }






        __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv(char const* _Filename, char const* _VarName, char *_Buffer);







        __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
        __declspec(dllimport) void __cdecl _seterrormode(
                 int _Mode
            );

        __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
        __declspec(dllimport) void __cdecl _beep(
                 unsigned _Frequency,
                 unsigned _Duration
            );

        __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
        __declspec(dllimport) void __cdecl _sleep(
                 unsigned long _Duration
            );
# 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
              double _Value,
              int _DigitCount,
              int* _PtDec,
              int* _PtSign
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
              double _Value,
              int _FractionalDigitCount,
              int* _PtDec,
              int* _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                               double _Value,
                               int _DigitCount,
                               char* _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                               int _Value,
                               char* _Buffer,
                               int _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                               long _Value,
                               char* _Buffer,
                               int _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
                                        char* _Buf1,
                                        char* _Buf2,
                                        int _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                               unsigned long _Value,
                               char* _Buffer,
                               int _Radix
        );





                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
        __declspec(dllimport) int __cdecl putenv(
                   char const* _EnvString
            );



#pragma warning(pop)

 _onexit_t __cdecl onexit( _onexit_t _Func);





}
# 1381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdlib.h" 3
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstdlib" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\math.h" 1 3
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\math.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
 extern "C" {

#pragma warning(push)
#pragma warning(disable: 4738)
#pragma warning(disable: 4820)






 struct _exception
    {
        int type;
        char* name;
        double arg1;
        double arg2;
        double retval;
    };






        struct _complex
        {
            double x, y;
        };
# 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
    typedef float float_t;
    typedef double double_t;
# 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
        extern double const _HUGE;
# 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
void __cdecl _fperrraise( int _Except);

               __declspec(dllimport) short __cdecl _dclass( double _X);
               __declspec(dllimport) short __cdecl _ldclass( long double _X);
               __declspec(dllimport) short __cdecl _fdclass( float _X);

               __declspec(dllimport) int __cdecl _dsign( double _X);
               __declspec(dllimport) int __cdecl _ldsign( long double _X);
               __declspec(dllimport) int __cdecl _fdsign( float _X);

               __declspec(dllimport) int __cdecl _dpcomp( double _X, double _Y);
               __declspec(dllimport) int __cdecl _ldpcomp( long double _X, long double _Y);
               __declspec(dllimport) int __cdecl _fdpcomp( float _X, float _Y);

               __declspec(dllimport) short __cdecl _dtest( double* _Px);
               __declspec(dllimport) short __cdecl _ldtest( long double* _Px);
               __declspec(dllimport) short __cdecl _fdtest( float* _Px);

__declspec(dllimport) short __cdecl _d_int( double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _ld_int( long double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _fd_int( float* _Px, short _Xexp);

__declspec(dllimport) short __cdecl _dscale( double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _ldscale( long double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _fdscale( float* _Px, long _Lexp);

__declspec(dllimport) short __cdecl _dunscale( short* _Pex, double* _Px);
__declspec(dllimport) short __cdecl _ldunscale( short* _Pex, long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale( short* _Pex, float* _Px);

               __declspec(dllimport) short __cdecl _dexp( double* _Px, double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _ldexp( long double* _Px, long double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _fdexp( float* _Px, float _Y, long _Eoff);

               __declspec(dllimport) short __cdecl _dnorm( unsigned short* _Ps);
               __declspec(dllimport) short __cdecl _fdnorm( unsigned short* _Ps);

               __declspec(dllimport) double __cdecl _dpoly( double _X, double const* _Tab, int _N);
               __declspec(dllimport) long double __cdecl _ldpoly( long double _X, long double const* _Tab, int _N);
               __declspec(dllimport) float __cdecl _fdpoly( float _X, float const* _Tab, int _N);

               __declspec(dllimport) double __cdecl _dlog( double _X, int _Baseflag);
               __declspec(dllimport) long double __cdecl _ldlog( long double _X, int _Baseflag);
               __declspec(dllimport) float __cdecl _fdlog( float _X, int _Baseflag);

               __declspec(dllimport) double __cdecl _dsin( double _X, unsigned int _Qoff);
               __declspec(dllimport) long double __cdecl _ldsin( long double _X, unsigned int _Qoff);
               __declspec(dllimport) float __cdecl _fdsin( float _X, unsigned int _Qoff);


typedef union
{
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
# 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
extern "C++"
{
                   inline int fpclassify( float _X) throw()
    {
        return _fdtest(&_X);
    }

                   inline int fpclassify( double _X) throw()
    {
        return _dtest(&_X);
    }

                   inline int fpclassify( long double _X) throw()
    {
        return _ldtest(&_X);
    }

                   inline bool signbit( float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

                   inline bool signbit( double _X) throw()
    {
        return _dsign(_X) != 0;
    }

                   inline bool signbit( long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

                   inline int _fpcomp( float _X, float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

                   inline int _fpcomp( double _X, double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

                   inline int _fpcomp( long double _X, long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {
        typedef double _Type;
    };

    template <> struct _Real_type<float>
    {
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {
        typedef long double _Type;
    };

    template <class _T1, class _T2>
                   inline int _fpcomp( _T1 _X, _T2 _Y) throw()
    {
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
                   inline bool isfinite( _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
                   inline bool isinf( _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
                   inline bool isnan( _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
                   inline bool isnormal( _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreaterequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isless( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isunordered( _Ty1 _X, _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}






                   int __cdecl abs( int _X);
                   long __cdecl labs( long _X);
                   long long __cdecl llabs( long long _X);

                   double __cdecl acos( double _X);
                   double __cdecl asin( double _X);
                   double __cdecl atan( double _X);
                   double __cdecl atan2( double _Y, double _X);

                   double __cdecl cos( double _X);
                   double __cdecl cosh( double _X);
                   double __cdecl exp( double _X);
                                      double __cdecl fabs( double _X);
                   double __cdecl fmod( double _X, double _Y);
                   double __cdecl log( double _X);
                   double __cdecl log10( double _X);
                   double __cdecl pow( double _X, double _Y);
                   double __cdecl sin( double _X);
                   double __cdecl sinh( double _X);
                                      double __cdecl sqrt( double _X);
                   double __cdecl tan( double _X);
                   double __cdecl tanh( double _X);

                   __declspec(dllimport) double __cdecl acosh( double _X);
                   __declspec(dllimport) double __cdecl asinh( double _X);
                   __declspec(dllimport) double __cdecl atanh( double _X);
                   __declspec(dllimport) double __cdecl atof( char const* _String);
                   __declspec(dllimport) double __cdecl _atof_l( char const* _String, _locale_t _Locale);
                   __declspec(dllimport) double __cdecl _cabs( struct _complex _Complex_value);
                   __declspec(dllimport) double __cdecl cbrt( double _X);
                   __declspec(dllimport) double __cdecl ceil( double _X);
                   __declspec(dllimport) double __cdecl _chgsign( double _X);
                   __declspec(dllimport) double __cdecl copysign( double _Number, double _Sign);
                   __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
                   __declspec(dllimport) double __cdecl erf( double _X);
                   __declspec(dllimport) double __cdecl erfc( double _X);
                   __declspec(dllimport) double __cdecl exp2( double _X);
                   __declspec(dllimport) double __cdecl expm1( double _X);
                   __declspec(dllimport) double __cdecl fdim( double _X, double _Y);
                   __declspec(dllimport) double __cdecl floor( double _X);
                   __declspec(dllimport) double __cdecl fma( double _X, double _Y, double _Z);
                   __declspec(dllimport) double __cdecl fmax( double _X, double _Y);
                   __declspec(dllimport) double __cdecl fmin( double _X, double _Y);
                   __declspec(dllimport) double __cdecl frexp( double _X, int* _Y);
                   __declspec(dllimport) double __cdecl hypot( double _X, double _Y);
                   __declspec(dllimport) double __cdecl _hypot( double _X, double _Y);
                   __declspec(dllimport) int __cdecl ilogb( double _X);
                   __declspec(dllimport) double __cdecl ldexp( double _X, int _Y);
                   __declspec(dllimport) double __cdecl lgamma( double _X);
                   __declspec(dllimport) long long __cdecl llrint( double _X);
                   __declspec(dllimport) long long __cdecl llround( double _X);
                   __declspec(dllimport) double __cdecl log1p( double _X);
                   __declspec(dllimport) double __cdecl log2( double _X);
                   __declspec(dllimport) double __cdecl logb( double _X);
                   __declspec(dllimport) long __cdecl lrint( double _X);
                   __declspec(dllimport) long __cdecl lround( double _X);

    int __cdecl _matherr( struct _exception* _Except);

                   __declspec(dllimport) double __cdecl modf( double _X, double* _Y);
                   __declspec(dllimport) double __cdecl nan( char const* _X);
                   __declspec(dllimport) double __cdecl nearbyint( double _X);
                   __declspec(dllimport) double __cdecl nextafter( double _X, double _Y);
                   __declspec(dllimport) double __cdecl nexttoward( double _X, long double _Y);
                   __declspec(dllimport) double __cdecl remainder( double _X, double _Y);
                   __declspec(dllimport) double __cdecl remquo( double _X, double _Y, int* _Z);
                   __declspec(dllimport) double __cdecl rint( double _X);
                   __declspec(dllimport) double __cdecl round( double _X);
                   __declspec(dllimport) double __cdecl scalbln( double _X, long _Y);
                   __declspec(dllimport) double __cdecl scalbn( double _X, int _Y);
                   __declspec(dllimport) double __cdecl tgamma( double _X);
                   __declspec(dllimport) double __cdecl trunc( double _X);
                   __declspec(dllimport) double __cdecl _j0( double _X );
                   __declspec(dllimport) double __cdecl _j1( double _X );
                   __declspec(dllimport) double __cdecl _jn(int _X, double _Y);
                   __declspec(dllimport) double __cdecl _y0( double _X);
                   __declspec(dllimport) double __cdecl _y1( double _X);
                   __declspec(dllimport) double __cdecl _yn( int _X, double _Y);

                   __declspec(dllimport) float __cdecl acoshf( float _X);
                   __declspec(dllimport) float __cdecl asinhf( float _X);
                   __declspec(dllimport) float __cdecl atanhf( float _X);
                   __declspec(dllimport) float __cdecl cbrtf( float _X);
                   __declspec(dllimport) float __cdecl _chgsignf( float _X);
                   __declspec(dllimport) float __cdecl copysignf( float _Number, float _Sign);
                   __declspec(dllimport) float __cdecl _copysignf( float _Number, float _Sign);
                   __declspec(dllimport) float __cdecl erff( float _X);
                   __declspec(dllimport) float __cdecl erfcf( float _X);
                   __declspec(dllimport) float __cdecl expm1f( float _X);
                   __declspec(dllimport) float __cdecl exp2f( float _X);
                   __declspec(dllimport) float __cdecl fdimf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl fmaf( float _X, float _Y, float _Z);
                   __declspec(dllimport) float __cdecl fmaxf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl fminf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl _hypotf( float _X, float _Y);
                   __declspec(dllimport) int __cdecl ilogbf( float _X);
                   __declspec(dllimport) float __cdecl lgammaf( float _X);
                   __declspec(dllimport) long long __cdecl llrintf( float _X);
                   __declspec(dllimport) long long __cdecl llroundf( float _X);
                   __declspec(dllimport) float __cdecl log1pf( float _X);
                   __declspec(dllimport) float __cdecl log2f( float _X);
                   __declspec(dllimport) float __cdecl logbf( float _X);
                   __declspec(dllimport) long __cdecl lrintf( float _X);
                   __declspec(dllimport) long __cdecl lroundf( float _X);
                   __declspec(dllimport) float __cdecl nanf( char const* _X);
                   __declspec(dllimport) float __cdecl nearbyintf( float _X);
                   __declspec(dllimport) float __cdecl nextafterf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl nexttowardf( float _X, long double _Y);
                   __declspec(dllimport) float __cdecl remainderf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl remquof( float _X, float _Y, int* _Z);
                   __declspec(dllimport) float __cdecl rintf( float _X);
                   __declspec(dllimport) float __cdecl roundf( float _X);
                   __declspec(dllimport) float __cdecl scalblnf( float _X, long _Y);
                   __declspec(dllimport) float __cdecl scalbnf( float _X, int _Y);
                   __declspec(dllimport) float __cdecl tgammaf( float _X);
                   __declspec(dllimport) float __cdecl truncf( float _X);



                       __declspec(dllimport) int __cdecl _set_SSE2_enable( int _Flag);
# 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
                       __inline float __cdecl acosf( float _X)
        {
            return (float)acos(_X);
        }

                       __inline float __cdecl asinf( float _X)
        {
            return (float)asin(_X);
        }

                       __inline float __cdecl atan2f( float _Y, float _X)
        {
            return (float)atan2(_Y, _X);
        }

                       __inline float __cdecl atanf( float _X)
        {
            return (float)atan(_X);
        }

                       __inline float __cdecl ceilf( float _X)
        {
            return (float)ceil(_X);
        }

                       __inline float __cdecl cosf( float _X)
        {
            return (float)cos(_X);
        }

                       __inline float __cdecl coshf( float _X)
        {
            return (float)cosh(_X);
        }

                       __inline float __cdecl expf( float _X)
        {
            return (float)exp(_X);
        }
# 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
                       __inline float __cdecl fabsf( float _X)
        {
            return (float)fabs(_X);
        }
# 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
                       __inline float __cdecl floorf( float _X)
        {
            return (float)floor(_X);
        }

                       __inline float __cdecl fmodf( float _X, float _Y)
        {
            return (float)fmod(_X, _Y);
        }



                   __inline float __cdecl frexpf( float _X, int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

                   __inline float __cdecl hypotf( float _X, float _Y)
    {
        return _hypotf(_X, _Y);
    }

                   __inline float __cdecl ldexpf( float _X, int _Y)
    {
        return (float)ldexp(_X, _Y);
    }
# 724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
                       __inline float __cdecl log10f( float _X)
        {
            return (float)log10(_X);
        }

                       __inline float __cdecl logf( float _X)
        {
            return (float)log(_X);
        }

                       __inline float __cdecl modff( float _X, float* _Y)
        {
            double _F, _I;
            _F = modf(_X, &_I);
            *_Y = (float)_I;
            return (float)_F;
        }

                       __inline float __cdecl powf( float _X, float _Y)
        {
            return (float)pow(_X, _Y);
        }

                       __inline float __cdecl sinf( float _X)
        {
            return (float)sin(_X);
        }

                       __inline float __cdecl sinhf( float _X)
        {
            return (float)sinh(_X);
        }

                       __inline float __cdecl sqrtf( float _X)
        {
            return (float)sqrt(_X);
        }

                       __inline float __cdecl tanf( float _X)
        {
            return (float)tan(_X);
        }

                       __inline float __cdecl tanhf( float _X)
        {
            return (float)tanh(_X);
        }



                   __declspec(dllimport) long double __cdecl acoshl( long double _X);

                   __inline long double __cdecl acosl( long double _X)
    {
        return acos((double)_X);
    }

                   __declspec(dllimport) long double __cdecl asinhl( long double _X);

                   __inline long double __cdecl asinl( long double _X)
    {
        return asin((double)_X);
    }

                   __inline long double __cdecl atan2l( long double _Y, long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

                   __declspec(dllimport) long double __cdecl atanhl( long double _X);

                   __inline long double __cdecl atanl( long double _X)
    {
        return atan((double)_X);
    }

                   __declspec(dllimport) long double __cdecl cbrtl( long double _X);

                   __inline long double __cdecl ceill( long double _X)
    {
        return ceil((double)_X);
    }

                   __inline long double __cdecl _chgsignl( long double _X)
    {
        return _chgsign((double)_X);
    }

                   __declspec(dllimport) long double __cdecl copysignl( long double _Number, long double _Sign);

                   __inline long double __cdecl _copysignl( long double _Number, long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

                   __inline long double __cdecl coshl( long double _X)
    {
        return cosh((double)_X);
    }

                   __inline long double __cdecl cosl( long double _X)
    {
        return cos((double)_X);
    }

                   __declspec(dllimport) long double __cdecl erfl( long double _X);
                   __declspec(dllimport) long double __cdecl erfcl( long double _X);

                   __inline long double __cdecl expl( long double _X)
    {
        return exp((double)_X);
    }

                   __declspec(dllimport) long double __cdecl exp2l( long double _X);
                   __declspec(dllimport) long double __cdecl expm1l( long double _X);

                   __inline long double __cdecl fabsl( long double _X)
    {
        return fabs((double)_X);
    }

                   __declspec(dllimport) long double __cdecl fdiml( long double _X, long double _Y);

                   __inline long double __cdecl floorl( long double _X)
    {
        return floor((double)_X);
    }

                   __declspec(dllimport) long double __cdecl fmal( long double _X, long double _Y, long double _Z);
                   __declspec(dllimport) long double __cdecl fmaxl( long double _X, long double _Y);
                   __declspec(dllimport) long double __cdecl fminl( long double _X, long double _Y);

                   __inline long double __cdecl fmodl( long double _X, long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

                   __inline long double __cdecl frexpl( long double _X, int *_Y)
    {
        return frexp((double)_X, _Y);
    }

                   __declspec(dllimport) int __cdecl ilogbl( long double _X);

                   __inline long double __cdecl _hypotl( long double _X, long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

                   __inline long double __cdecl hypotl( long double _X, long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

                   __inline long double __cdecl ldexpl( long double _X, int _Y)
    {
        return ldexp((double)_X, _Y);
    }

                   __declspec(dllimport) long double __cdecl lgammal( long double _X);
                   __declspec(dllimport) long long __cdecl llrintl( long double _X);
                   __declspec(dllimport) long long __cdecl llroundl( long double _X);

                   __inline long double __cdecl logl( long double _X)
    {
        return log((double)_X);
    }

                   __inline long double __cdecl log10l( long double _X)
    {
        return log10((double)_X);
    }

                   __declspec(dllimport) long double __cdecl log1pl( long double _X);
                   __declspec(dllimport) long double __cdecl log2l( long double _X);
                   __declspec(dllimport) long double __cdecl logbl( long double _X);
                   __declspec(dllimport) long __cdecl lrintl( long double _X);
                   __declspec(dllimport) long __cdecl lroundl( long double _X);

                   __inline long double __cdecl modfl( long double _X, long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

                   __declspec(dllimport) long double __cdecl nanl( char const* _X);
                   __declspec(dllimport) long double __cdecl nearbyintl( long double _X);
                   __declspec(dllimport) long double __cdecl nextafterl( long double _X, long double _Y);
                   __declspec(dllimport) long double __cdecl nexttowardl( long double _X, long double _Y);

                   __inline long double __cdecl powl( long double _X, long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

                   __declspec(dllimport) long double __cdecl remainderl( long double _X, long double _Y);
                   __declspec(dllimport) long double __cdecl remquol( long double _X, long double _Y, int* _Z);
                   __declspec(dllimport) long double __cdecl rintl( long double _X);
                   __declspec(dllimport) long double __cdecl roundl( long double _X);
                   __declspec(dllimport) long double __cdecl scalblnl( long double _X, long _Y);
                   __declspec(dllimport) long double __cdecl scalbnl( long double _X, int _Y);

                   __inline long double __cdecl sinhl( long double _X)
    {
        return sinh((double)_X);
    }

                   __inline long double __cdecl sinl( long double _X)
    {
        return sin((double)_X);
    }

                   __inline long double __cdecl sqrtl( long double _X)
    {
        return sqrt((double)_X);
    }

                   __inline long double __cdecl tanhl( long double _X)
    {
        return tanh((double)_X);
    }

                   __inline long double __cdecl tanl( long double _X)
    {
        return tan((double)_X);
    }

                   __declspec(dllimport) long double __cdecl tgammal( long double _X);
                   __declspec(dllimport) long double __cdecl truncl( long double _X);
# 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
            extern double HUGE;




        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details.")) __declspec(dllimport) double __cdecl j0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details.")) __declspec(dllimport) double __cdecl j1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details.")) __declspec(dllimport) double __cdecl jn( int _X, double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details.")) __declspec(dllimport) double __cdecl y0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details.")) __declspec(dllimport) double __cdecl y1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details.")) __declspec(dllimport) double __cdecl yn( int _X, double _Y);





#pragma warning(pop)

}
# 993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_math.h" 3
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\math.h" 2 3
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstdlib" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)




 inline double abs( double _Xx) noexcept
 {
 return (:: fabs(_Xx));
 }

               inline float abs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline long double abs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;


using :: getenv;
using :: system;


using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cmath" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



 inline double pow( double _Xx, int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: pow(_Xx, static_cast<double>(_Yx)));
 }

               inline float acos( float _Xx) noexcept
 {
 return (:: acosf(_Xx));
 }

               inline float acosh( float _Xx) noexcept
 {
 return (:: acoshf(_Xx));
 }

               inline float asin( float _Xx) noexcept
 {
 return (:: asinf(_Xx));
 }

               inline float asinh( float _Xx) noexcept
 {
 return (:: asinhf(_Xx));
 }

               inline float atan( float _Xx) noexcept
 {
 return (:: atanf(_Xx));
 }

               inline float atanh( float _Xx) noexcept
 {
 return (:: atanhf(_Xx));
 }

               inline float atan2( float _Yx, float _Xx) noexcept
 {
 return (:: atan2f(_Yx, _Xx));
 }

               inline float cbrt( float _Xx) noexcept
 {
 return (:: cbrtf(_Xx));
 }

               inline float ceil( float _Xx) noexcept
 {
 return (:: ceilf(_Xx));
 }

               inline float copysign( float _Number,
      float _Sign) noexcept
 {
 return (:: copysignf(_Number, _Sign));
 }

               inline float cos( float _Xx) noexcept
 {
 return (:: cosf(_Xx));
 }

               inline float cosh( float _Xx) noexcept
 {
 return (:: coshf(_Xx));
 }

               inline float erf( float _Xx) noexcept
 {
 return (:: erff(_Xx));
 }

               inline float erfc( float _Xx) noexcept
 {
 return (:: erfcf(_Xx));
 }

               inline float exp( float _Xx) noexcept
 {
 return (:: expf(_Xx));
 }

               inline float exp2( float _Xx) noexcept
 {
 return (:: exp2f(_Xx));
 }

               inline float expm1( float _Xx) noexcept
 {
 return (:: expm1f(_Xx));
 }

               inline float fabs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float fdim( float _Xx, float _Yx) noexcept
 {
 return (:: fdimf(_Xx, _Yx));
 }

               inline float floor( float _Xx) noexcept
 {
 return (:: floorf(_Xx));
 }

               inline float fma( float _Xx, float _Yx,
      float _Zx) noexcept
 {
 return (:: fmaf(_Xx, _Yx, _Zx));
 }

               inline float fmax( float _Xx, float _Yx) noexcept
 {
 return (:: fmaxf(_Xx, _Yx));
 }

               inline float fmin( float _Xx, float _Yx) noexcept
 {
 return (:: fminf(_Xx, _Yx));
 }

               inline float fmod( float _Xx, float _Yx) noexcept
 {
 return (:: fmodf(_Xx, _Yx));
 }

               inline float frexp( float _Xx, int* _Yx) noexcept
 {
 return (:: frexpf(_Xx, _Yx));
 }

               inline float hypot( float _Xx, float _Yx) noexcept
 {
 return (:: hypotf(_Xx, _Yx));
 }

               inline int ilogb( float _Xx) noexcept
 {
 return (:: ilogbf(_Xx));
 }

               inline float ldexp( float _Xx, int _Yx) noexcept
 {
 return (:: ldexpf(_Xx, _Yx));
 }

               inline float lgamma( float _Xx) noexcept
 {
 return (:: lgammaf(_Xx));
 }

               inline long long llrint( float _Xx) noexcept
 {
 return (:: llrintf(_Xx));
 }

               inline long long llround( float _Xx) noexcept
 {
 return (:: llroundf(_Xx));
 }

               inline float log( float _Xx) noexcept
 {
 return (:: logf(_Xx));
 }

               inline float log10( float _Xx) noexcept
 {
 return (:: log10f(_Xx));
 }

               inline float log1p( float _Xx) noexcept
 {
 return (:: log1pf(_Xx));
 }

               inline float log2( float _Xx) noexcept
 {
 return (:: log2f(_Xx));
 }

               inline float logb( float _Xx) noexcept
 {
 return (:: logbf(_Xx));
 }

               inline long lrint( float _Xx) noexcept
 {
 return (:: lrintf(_Xx));
 }

               inline long lround( float _Xx) noexcept
 {
 return (:: lroundf(_Xx));
 }

               inline float modf( float _Xx, float* _Yx) noexcept
 {
 return (:: modff(_Xx, _Yx));
 }

               inline float nearbyint( float _Xx) noexcept
 {
 return (:: nearbyintf(_Xx));
 }

               inline float nextafter( float _Xx, float _Yx) noexcept
 {
 return (:: nextafterf(_Xx, _Yx));
 }

               inline float nexttoward( float _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardf(_Xx, _Yx));
 }

               inline float pow( float _Xx,
      float _Yx) noexcept
 {
 return (:: powf(_Xx, _Yx));
 }

               inline float pow( float _Xx, int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: powf(_Xx, static_cast<float>(_Yx)));
 }

               inline float remainder( float _Xx, float _Yx) noexcept
 {
 return (:: remainderf(_Xx, _Yx));
 }

               inline float remquo( float _Xx, float _Yx,
       int *_Zx) noexcept
 {
 return (:: remquof(_Xx, _Yx, _Zx));
 }

               inline float rint( float _Xx) noexcept
 {
 return (:: rintf(_Xx));
 }

               inline float round( float _Xx) noexcept
 {
 return (:: roundf(_Xx));
 }

               inline float scalbln( float _Xx, long _Yx) noexcept
 {
 return (:: scalblnf(_Xx, _Yx));
 }

               inline float scalbn( float _Xx, int _Yx) noexcept
 {
 return (:: scalbnf(_Xx, _Yx));
 }

               inline float sin( float _Xx) noexcept
 {
 return (:: sinf(_Xx));
 }

               inline float sinh( float _Xx) noexcept
 {
 return (:: sinhf(_Xx));
 }

               inline float sqrt( float _Xx) noexcept
 {
 return (:: sqrtf(_Xx));
 }

               inline float tan( float _Xx) noexcept
 {
 return (:: tanf(_Xx));
 }

               inline float tanh( float _Xx) noexcept
 {
 return (:: tanhf(_Xx));
 }

               inline float tgamma( float _Xx) noexcept
 {
 return (:: tgammaf(_Xx));
 }

               inline float trunc( float _Xx) noexcept
 {
 return (:: truncf(_Xx));
 }

               inline long double acos( long double _Xx) noexcept
 {
 return (:: acosl(_Xx));
 }

               inline long double acosh( long double _Xx) noexcept
 {
 return (:: acoshl(_Xx));
 }

               inline long double asin( long double _Xx) noexcept
 {
 return (:: asinl(_Xx));
 }

               inline long double asinh( long double _Xx) noexcept
 {
 return (:: asinhl(_Xx));
 }

               inline long double atan( long double _Xx) noexcept
 {
 return (:: atanl(_Xx));
 }

               inline long double atanh( long double _Xx) noexcept
 {
 return (:: atanhl(_Xx));
 }

               inline long double atan2( long double _Yx,
      long double _Xx) noexcept
 {
 return (:: atan2l(_Yx, _Xx));
 }

               inline long double cbrt( long double _Xx) noexcept
 {
 return (:: cbrtl(_Xx));
 }

               inline long double ceil( long double _Xx) noexcept
 {
 return (:: ceill(_Xx));
 }

               inline long double copysign( long double _Number,
      long double _Sign) noexcept
 {
 return (:: copysignl(_Number, _Sign));
 }

               inline long double cos( long double _Xx) noexcept
 {
 return (:: cosl(_Xx));
 }

               inline long double cosh( long double _Xx) noexcept
 {
 return (:: coshl(_Xx));
 }

               inline long double erf( long double _Xx) noexcept
 {
 return (:: erfl(_Xx));
 }

               inline long double erfc( long double _Xx) noexcept
 {
 return (:: erfcl(_Xx));
 }

               inline long double exp( long double _Xx) noexcept
 {
 return (:: expl(_Xx));
 }

               inline long double exp2( long double _Xx) noexcept
 {
 return (:: exp2l(_Xx));
 }

               inline long double expm1( long double _Xx) noexcept
 {
 return (:: expm1l(_Xx));
 }

               inline long double fabs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double fdim( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fdiml(_Xx, _Yx));
 }

               inline long double floor( long double _Xx) noexcept
 {
 return (:: floorl(_Xx));
 }

               inline long double fma( long double _Xx,
      long double _Yx, long double _Zx) noexcept
 {
 return (:: fmal(_Xx, _Yx, _Zx));
 }

               inline long double fmax( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmaxl(_Xx, _Yx));
 }

               inline long double fmin( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fminl(_Xx, _Yx));
 }

               inline long double fmod( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmodl(_Xx, _Yx));
 }

               inline long double frexp( long double _Xx,
       int* _Yx) noexcept
 {
 return (:: frexpl(_Xx, _Yx));
 }

               inline long double hypot( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: hypotl(_Xx, _Yx));
 }

               inline int ilogb( long double _Xx) noexcept
 {
 return (:: ilogbl(_Xx));
 }

               inline long double ldexp( long double _Xx,
      int _Yx) noexcept
 {
 return (:: ldexpl(_Xx, _Yx));
 }

               inline long double lgamma( long double _Xx) noexcept
 {
 return (:: lgammal(_Xx));
 }

               inline long long llrint( long double _Xx) noexcept
 {
 return (:: llrintl(_Xx));
 }

               inline long long llround( long double _Xx) noexcept
 {
 return (:: llroundl(_Xx));
 }

               inline long double log( long double _Xx) noexcept
 {
 return (:: logl(_Xx));
 }

               inline long double log10( long double _Xx) noexcept
 {
 return (:: log10l(_Xx));
 }

               inline long double log1p( long double _Xx) noexcept
 {
 return (:: log1pl(_Xx));
 }

               inline long double log2( long double _Xx) noexcept
 {
 return (:: log2l(_Xx));
 }

               inline long double logb( long double _Xx) noexcept
 {
 return (:: logbl(_Xx));
 }

               inline long lrint( long double _Xx) noexcept
 {
 return (:: lrintl(_Xx));
 }

               inline long lround( long double _Xx) noexcept
 {
 return (:: lroundl(_Xx));
 }

               inline long double modf( long double _Xx,
       long double* _Yx) noexcept
 {
 return (:: modfl(_Xx, _Yx));
 }

               inline long double nearbyint( long double _Xx) noexcept
 {
 return (:: nearbyintl(_Xx));
 }

               inline long double nextafter( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nextafterl(_Xx, _Yx));
 }

               inline long double nexttoward( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: powl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: powl(_Xx, static_cast<long double>(_Yx)));
 }

               inline long double remainder( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: remainderl(_Xx, _Yx));
 }

               inline long double remquo( long double _Xx,
      long double _Yx, int *_Zx) noexcept
 {
 return (:: remquol(_Xx, _Yx, _Zx));
 }

               inline long double rint( long double _Xx) noexcept
 {
 return (:: rintl(_Xx));
 }

               inline long double round( long double _Xx) noexcept
 {
 return (:: roundl(_Xx));
 }

               inline long double scalbln( long double _Xx,
      long _Yx) noexcept
 {
 return (:: scalblnl(_Xx, _Yx));
 }

               inline long double scalbn( long double _Xx,
      int _Yx) noexcept
 {
 return (:: scalbnl(_Xx, _Yx));
 }

               inline long double sin( long double _Xx) noexcept
 {
 return (:: sinl(_Xx));
 }

               inline long double sinh( long double _Xx) noexcept
 {
 return (:: sinhl(_Xx));
 }

               inline long double sqrt( long double _Xx) noexcept
 {
 return (:: sqrtl(_Xx));
 }

               inline long double tan( long double _Xx) noexcept
 {
 return (:: tanl(_Xx));
 }

               inline long double tanh( long double _Xx) noexcept
 {
 return (:: tanhl(_Xx));
 }

               inline long double tgamma( long double _Xx) noexcept
 {
 return (:: tgammal(_Xx));
 }

               inline long double trunc( long double _Xx) noexcept
 {
 return (:: truncl(_Xx));
 }


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtgmath.h" 1 3








# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtr1common" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 using value_type = _Ty;
 using type = integral_constant;

 constexpr operator value_type() const noexcept
  {
  return (value);
  }

 constexpr value_type operator()() const noexcept
  {
  return (value);
  }
 };


template<bool _Val>
 using bool_constant = integral_constant<bool, _Val>;

using true_type = bool_constant<true>;
using false_type = bool_constant<false>;


template<bool _Test,
 class _Ty = void>
 struct enable_if
 {
 };

template<class _Ty>
 struct enable_if<true, _Ty>
 {
 using type = _Ty;
 };

template<bool _Test,
 class _Ty = void>
 using enable_if_t = typename enable_if<_Test, _Ty>::type;


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 using type = _Ty2;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 using type = _Ty1;
 };

template<bool _Test,
 class _Ty1,
 class _Ty2>
 using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;


template<class _Ty1,
 class _Ty2>
 struct is_same
  : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
  : true_type
 {
 };

template<class _Ty,
 class _Uty>
             constexpr bool is_same_v = is_same<_Ty, _Uty>::value;


template<class _Ty>
 struct remove_const
 {
 using type = _Ty;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 using type = _Ty;
 };

template<class _Ty>
 using remove_const_t = typename remove_const<_Ty>::type;


template<class _Ty>
 struct remove_volatile
 {
 using type = _Ty;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 using type = _Ty;
 };

template<class _Ty>
 using remove_volatile_t = typename remove_volatile<_Ty>::type;


template<class _Ty>
 struct remove_cv
 {
 using type = _Ty;
 };

template<class _Ty>
 struct remove_cv<const _Ty>
 {
 using type = _Ty;
 };

template<class _Ty>
 struct remove_cv<volatile _Ty>
 {
 using type = _Ty;
 };

template<class _Ty>
 struct remove_cv<const volatile _Ty>
 {
 using type = _Ty;
 };

template<class _Ty>
 using remove_cv_t = typename remove_cv<_Ty>::type;


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };


template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<char16_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<char32_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<long>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long long>
  : true_type
 {
 };

template<>
 struct _Is_integral<long long>
  : true_type
 {
 };


template<class _Ty>
 struct is_integral
  : _Is_integral<remove_cv_t<_Ty>>::type
 {
 };

template<class _Ty>
             constexpr bool is_integral_v = is_integral<_Ty>::value;


template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct is_floating_point
  : _Is_floating_point<remove_cv_t<_Ty>>::type
 {
 };

template<class _Ty>
             constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;


template<class _Ty>
 struct is_arithmetic
  : bool_constant<is_integral_v<_Ty>
   || is_floating_point_v<_Ty>>
 {
 };

template<class _Ty>
             constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;


template<class _Ty>
 struct remove_reference
 {
 using type = _Ty;
 };

template<class _Ty>
 struct remove_reference<_Ty&>
 {
 using type = _Ty;
 };

template<class _Ty>
 struct remove_reference<_Ty&&>
 {
 using type = _Ty;
 };

template<class _Ty>
 using remove_reference_t = typename remove_reference<_Ty>::type;

}

#pragma warning(pop)
#pragma pack(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtgmath.h" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {
template<class _Ty1,
 class _Ty2>
 using _Common_float_type_t =
  conditional_t<is_same_v<_Ty1, long double> || is_same_v<_Ty2, long double>, long double,
  conditional_t<is_same_v<_Ty1, float> && is_same_v<_Ty2, float>, float,
  double>>;
}
# 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtgmath.h" 3
template<class _Ty1,
 class _Ty2,
 class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline
 ::std:: _Common_float_type_t<_Ty1, _Ty2> pow(const _Ty1 _Left, const _Ty2 _Right)
 {
 typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type;
 return (:: pow(static_cast<type>(_Left), static_cast<type>(_Right)));
 }


extern "C" double __cdecl acos( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double acos(_Ty _Left) { return (:: acos(static_cast<double>(_Left))); }
extern "C" double __cdecl asin( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double asin(_Ty _Left) { return (:: asin(static_cast<double>(_Left))); }
extern "C" double __cdecl atan( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double atan(_Ty _Left) { return (:: atan(static_cast<double>(_Left))); }
extern "C" double __cdecl atan2( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> atan2(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: atan2(static_cast<type>(_Left), static_cast<type>(_Right))); }
extern "C" __declspec(dllimport) double __cdecl ceil( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double ceil(_Ty _Left) { return (:: ceil(static_cast<double>(_Left))); }
extern "C" double __cdecl cos( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double cos(_Ty _Left) { return (:: cos(static_cast<double>(_Left))); }
extern "C" double __cdecl cosh( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double cosh(_Ty _Left) { return (:: cosh(static_cast<double>(_Left))); }
extern "C" double __cdecl exp( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double exp(_Ty _Left) { return (:: exp(static_cast<double>(_Left))); }

extern "C" double __cdecl fabs( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double fabs(_Ty _Left) { return (:: fabs(static_cast<double>(_Left))); }

extern "C" __declspec(dllimport) double __cdecl floor( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double floor(_Ty _Left) { return (:: floor(static_cast<double>(_Left))); }
extern "C" double __cdecl fmod( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmod(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: fmod(static_cast<type>(_Left), static_cast<type>(_Right))); }
extern "C" __declspec(dllimport) double __cdecl frexp( double, int *); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double frexp(_Ty _Left, int * _Arg2) { return (:: frexp(static_cast<double>(_Left), _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl ldexp( double, int); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double ldexp(_Ty _Left, int _Arg2) { return (:: ldexp(static_cast<double>(_Left), _Arg2)); }
extern "C" double __cdecl log( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double log(_Ty _Left) { return (:: log(static_cast<double>(_Left))); }
extern "C" double __cdecl log10( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double log10(_Ty _Left) { return (:: log10(static_cast<double>(_Left))); }


extern "C" double __cdecl sin( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double sin(_Ty _Left) { return (:: sin(static_cast<double>(_Left))); }
extern "C" double __cdecl sinh( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double sinh(_Ty _Left) { return (:: sinh(static_cast<double>(_Left))); }
extern "C" double __cdecl sqrt( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double sqrt(_Ty _Left) { return (:: sqrt(static_cast<double>(_Left))); }
extern "C" double __cdecl tan( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double tan(_Ty _Left) { return (:: tan(static_cast<double>(_Left))); }
extern "C" double __cdecl tanh( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double tanh(_Ty _Left) { return (:: tanh(static_cast<double>(_Left))); }





inline float _Fma(float _Left, float _Middle, float _Right)
 {
 return (:: fmaf(_Left, _Middle, _Right));
 }

inline double _Fma(double _Left, double _Middle, double _Right)
 {
 return (:: fma(_Left, _Middle, _Right));
 }

inline long double _Fma(long double _Left, long double _Middle,
 long double _Right)
 {
 return (:: fmal(_Left, _Middle, _Right));
 }

template<class _Ty1,
 class _Ty2,
 class _Ty3> inline
 ::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>>
 fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
 {
 typedef ::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>> type;
 return (_Fma((type)_Left, (type)_Middle, (type)_Right));
 }



inline float _Remquo(float _Left, float _Right, int *_Pquo)
 {
 return (:: remquof(_Left, _Right, _Pquo));
 }

inline double _Remquo(double _Left, double _Right, int *_Pquo)
 {
 return (:: remquo(_Left, _Right, _Pquo));
 }

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
 {
 return (:: remquol(_Left, _Right, _Pquo));
 }

template<class _Ty1,
 class _Ty2> inline
 ::std:: _Common_float_type_t<_Ty1, _Ty2>
 remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
 {
 typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type;
 return (_Remquo((type)_Left, (type)_Right, _Pquo));
 }

extern "C" __declspec(dllimport) double __cdecl acosh( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double acosh(_Ty _Left) { return (:: acosh(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl asinh( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double asinh(_Ty _Left) { return (:: asinh(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl atanh( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double atanh(_Ty _Left) { return (:: atanh(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl cbrt( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double cbrt(_Ty _Left) { return (:: cbrt(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl copysign( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> copysign(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: copysign(static_cast<type>(_Left), static_cast<type>(_Right))); }
extern "C" __declspec(dllimport) double __cdecl erf( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double erf(_Ty _Left) { return (:: erf(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl erfc( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double erfc(_Ty _Left) { return (:: erfc(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl expm1( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double expm1(_Ty _Left) { return (:: expm1(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl exp2( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double exp2(_Ty _Left) { return (:: exp2(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl fdim( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fdim(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: fdim(static_cast<type>(_Left), static_cast<type>(_Right))); }

extern "C" __declspec(dllimport) double __cdecl fmax( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmax(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: fmax(static_cast<type>(_Left), static_cast<type>(_Right))); }
extern "C" __declspec(dllimport) double __cdecl fmin( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmin(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: fmin(static_cast<type>(_Left), static_cast<type>(_Right))); }
extern "C" __declspec(dllimport) double __cdecl hypot( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> hypot(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: hypot(static_cast<type>(_Left), static_cast<type>(_Right))); }
extern "C" __declspec(dllimport) int __cdecl ilogb( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline int ilogb(_Ty _Left) { return (:: ilogb(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl lgamma( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double lgamma(_Ty _Left) { return (:: lgamma(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) long long __cdecl llrint( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline long long llrint(_Ty _Left) { return (:: llrint(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) long long __cdecl llround( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline long long llround(_Ty _Left) { return (:: llround(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl log1p( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double log1p(_Ty _Left) { return (:: log1p(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl log2( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double log2(_Ty _Left) { return (:: log2(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl logb( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double logb(_Ty _Left) { return (:: logb(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) long __cdecl lrint( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline long lrint(_Ty _Left) { return (:: lrint(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) long __cdecl lround( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline long lround(_Ty _Left) { return (:: lround(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl nearbyint( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double nearbyint(_Ty _Left) { return (:: nearbyint(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl nextafter( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> nextafter(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: nextafter(static_cast<type>(_Left), static_cast<type>(_Right))); }
extern "C" __declspec(dllimport) double __cdecl nexttoward( double, long double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double nexttoward(_Ty _Left, long double _Arg2) { return (:: nexttoward(static_cast<double>(_Left), _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl remainder( double, double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t< ::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline ::std:: _Common_float_type_t<_Ty1, _Ty2> remainder(_Ty1 _Left, _Ty2 _Right) { typedef ::std:: _Common_float_type_t<_Ty1, _Ty2> type; return (:: remainder(static_cast<type>(_Left), static_cast<type>(_Right))); }

extern "C" __declspec(dllimport) double __cdecl rint( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double rint(_Ty _Left) { return (:: rint(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl round( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double round(_Ty _Left) { return (:: round(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl scalbln( double, long); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double scalbln(_Ty _Left, long _Arg2) { return (:: scalbln(static_cast<double>(_Left), _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl scalbn( double, int); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double scalbn(_Ty _Left, int _Arg2) { return (:: scalbn(static_cast<double>(_Left), _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl tgamma( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double tgamma(_Ty _Left) { return (:: tgamma(static_cast<double>(_Left))); }
extern "C" __declspec(dllimport) double __cdecl trunc( double); template<class _Ty, class = ::std:: enable_if_t< ::std:: is_integral_v<_Ty>>> inline double trunc(_Ty _Left) { return (:: trunc(static_cast<double>(_Left))); }
# 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtgmath.h" 3
#pragma warning(pop)
#pragma pack(pop)
# 623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cmath" 2 3


namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocnum" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstdio" 1 3





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h" 3
#pragma pack(push, 8)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h" 3
 extern "C" {
# 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h" 3
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
# 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h" 3
 __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }




    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }
# 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h" 3
}
# 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h" 3
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 2 3


#pragma pack(push, 8)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
 extern "C" {
# 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;


__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned _Ix);
# 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) wint_t __cdecl fgetwc(
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _fgetwchar(void);


    __declspec(dllimport) wint_t __cdecl fputwc(
                wchar_t _Character,
                FILE* _Stream);


    __declspec(dllimport) wint_t __cdecl _fputwchar(
             wchar_t _Character
        );


    __declspec(dllimport) wint_t __cdecl getwc(
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl getwchar(void);




    __declspec(dllimport) wchar_t* __cdecl fgetws(
                                     wchar_t* _Buffer,
                                     int _BufferCount,
                                     FILE* _Stream
        );


    __declspec(dllimport) int __cdecl fputws(
                wchar_t const* _Buffer,
                FILE* _Stream
        );



    __declspec(dllimport) wchar_t* __cdecl _getws_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline wchar_t* __cdecl _getws_s(wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }






    __declspec(dllimport) wint_t __cdecl putwc(
                wchar_t _Character,
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl putwchar(
             wchar_t _Character
        );


    __declspec(dllimport) int __cdecl _putws(
               wchar_t const* _Buffer
        );


    __declspec(dllimport) wint_t __cdecl ungetwc(
                wint_t _Character,
                FILE* _Stream
        );


    __declspec(dllimport) FILE * __cdecl _wfdopen(
               int _FileHandle,
               wchar_t const* _Mode
        );

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl _wfopen(
               wchar_t const* _FileName,
               wchar_t const* _Mode
        );


    __declspec(dllimport) errno_t __cdecl _wfopen_s(
                                  FILE** _Stream,
                                  wchar_t const* _FileName,
                                  wchar_t const* _Mode
        );


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl _wfreopen(
                wchar_t const* _FileName,
                wchar_t const* _Mode,
                FILE* _OldStream
        );


    __declspec(dllimport) errno_t __cdecl _wfreopen_s(
                                  FILE** _Stream,
                                  wchar_t const* _FileName,
                                  wchar_t const* _Mode,
                                  FILE* _OldStream
        );


    __declspec(dllimport) FILE* __cdecl _wfsopen(
               wchar_t const* _FileName,
               wchar_t const* _Mode,
               int _ShFlag
        );

    __declspec(dllimport) void __cdecl _wperror(
                   wchar_t const* _ErrorMessage
        );




        __declspec(dllimport) FILE* __cdecl _wpopen(
                   wchar_t const* _Command,
                   wchar_t const* _Mode
            );



    __declspec(dllimport) int __cdecl _wremove(
               wchar_t const* _FileName
        );





    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
                   wchar_t const* _Directory,
                   wchar_t const* _FilePrefix
        );





    __declspec(dllimport) errno_t __cdecl _wtmpnam_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }





    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wtmpnam( wchar_t *_Buffer);
# 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _fputwc_nolock(
                wchar_t _Character,
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _getwc_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _putwc_nolock(
                wchar_t _Character,
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
                wint_t _Character,
                FILE* _Stream
        );
# 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vfwprintf_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfwprintf(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vfwprintf_s_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfwprintf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        }





    __inline int __cdecl _vfwprintf_p_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vfwprintf_p(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _vwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vwprintf_s(
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }





    __inline int __cdecl _vwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vwprintf_p(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _fwprintf_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl fwprintf(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fwprintf_s_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl fwprintf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





    __inline int __cdecl _fwprintf_p_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fwprintf_p(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _wprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl wprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _wprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl wprintf_s(
                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





    __inline int __cdecl _wprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _wprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                               unsigned __int64 _Options,
                                               FILE* _Stream,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );


    __inline int __cdecl _vfwscanf_l(
                FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfwscanf(
                FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vfwscanf_s_l(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfwscanf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        }




    __inline int __cdecl _vwscanf_l(
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vwscanf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _vwscanf_s_l(
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vwscanf_s(
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fwscanf_l(
                                               FILE* const _Stream,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fwscanf(
                                     FILE* const _Stream,
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fwscanf_s_l(
                                                 FILE* const _Stream,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl fwscanf_s(
                                           FILE* const _Stream,
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _wscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl wscanf(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _wscanf_s_l(
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl wscanf_s(
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
# 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



    __declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



    __declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                size_t _MaxCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



    __declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf_l(
                                                     wchar_t* const _Buffer,
                                                     size_t const _BufferCount,
                                                     wchar_t const* const _Format,
                                                     _locale_t const _Locale,
                                                     va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }


#pragma warning(push)
#pragma warning(disable: 4793)



 __inline int __cdecl _vsnwprintf_s_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnwprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _snwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vsnwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, va_list _Args);








#pragma warning(pop)


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf(
                                                     wchar_t* _Buffer,
                                                     size_t _BufferCount,
                                                     wchar_t const* _Format,
                                                     va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
 }


    extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _vswprintf_c_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vswprintf_c(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vswprintf_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)
 }




    __inline int __cdecl __vswprintf_l(
                                                wchar_t* const _Buffer,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl _vswprintf(
                                         wchar_t* const _Buffer,
                                         wchar_t const* const _Format,
                                         va_list _ArgList
        )



    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    }




    __inline int __cdecl vswprintf(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vswprintf_s_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }





        __inline int __cdecl vswprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
            )



        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }




    extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _vswprintf_p_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vswprintf_p(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      va_list _ArgList
        )



    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vscwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vscwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscwprintf_l(_Format, 0, _ArgList);
    }




    __inline int __cdecl _vscwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vscwprintf_p(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscwprintf_p_l(_Format, 0, _ArgList);
    }




    __inline int __cdecl __swprintf_l(
                                                wchar_t* const _Buffer,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf(
                                         wchar_t* const _Buffer,
                                         wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl swprintf(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


#pragma warning(push)


#pragma warning(disable: 4793 4996)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __swprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __vswprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, va_list _Args);
# 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _swprintf( wchar_t *_Buffer, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vswprintf( wchar_t *_Buffer, wchar_t const* _Format, va_list _Args);






#pragma warning(pop)



 __inline int __cdecl _swprintf_s_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl swprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




    extern "C++" {
# 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
#pragma warning(push)
# 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
;
# 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
#pragma warning(disable: 4793)
# 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
; template <size_t _Size> inline int __cdecl swprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
#pragma warning(pop)
# 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
; }
# 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _swprintf_p_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf_p(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf_c_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf_c(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwprintf_l(
                                                     wchar_t* const _Buffer,
                                                     size_t const _BufferCount,
                                                     wchar_t const* const _Format,
                                                     _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwprintf(
                                                     wchar_t* _Buffer,
                                                     size_t _BufferCount,
                                                     wchar_t const* _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwprintf_s_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    extern "C++" {
# 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
#pragma warning(push)
# 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
;
# 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
#pragma warning(disable: 4793)
# 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
; template <size_t _Size> inline int __cdecl _snwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
#pragma warning(pop)
# 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
; }
# 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _scwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _scwprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _scwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _scwprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)



 extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int swprintf(
                                              wchar_t* const _Buffer,
                                              wchar_t const* const _Format,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int __cdecl vswprintf(
                                              wchar_t* const _Buffer,
                                              wchar_t const* const _Format,
                                              va_list _ArgList
                ) throw()
            {
#pragma warning(suppress: 28719)
 return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int _swprintf_l(
                                                        wchar_t* const _Buffer,
                                                        wchar_t const* const _Format,
                                                        _locale_t const _Locale,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
                _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int __cdecl _vswprintf_l(
                                                        wchar_t* const _Buffer,
                                                        wchar_t const* const _Format,
                                                        _locale_t const _Locale,
                                                        va_list _ArgList
                ) throw()
            {
                return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            }



#pragma warning(pop)
# 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
 __declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                               unsigned __int64 _Options,
                                               wchar_t const* _Buffer,
                                               size_t _BufferCount,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );



    __inline int __cdecl _vswscanf_l(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl vswscanf(
                                      wchar_t const* _Buffer,
                                      wchar_t const* _Format,
                                      va_list _ArgList
        )



    {
        return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vswscanf_s_l(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }






        __inline int __cdecl vswscanf_s(
                                          wchar_t const* const _Buffer,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }




    extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswscanf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwscanf_l(
                                               wchar_t const* const _Buffer,
                                               size_t const _BufferCount,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl _vsnwscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
                                                 va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _swscanf_l(
                                               wchar_t const* const _Buffer,
                                               wchar_t const* const _Format,
                                               _locale_t _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl swscanf(
                                     wchar_t const* const _Buffer,
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






        __inline int __cdecl swscanf_s(
                                           wchar_t const* const _Buffer,
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf_l(
                                               wchar_t const* const _Buffer,
                                               size_t const _BufferCount,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf(
                                         wchar_t const* const _Buffer,
                                         size_t const _BufferCount,
                                         wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwscanf_s(
                                          wchar_t const* const _Buffer,
                                          size_t const _BufferCount,
                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
}
# 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 2 3


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
 extern "C" {
# 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
typedef __int64 fpos_t;






    __declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
                  FILE* _Stream,
                  char*** _Base,
                  char*** _Pointer,
                  int** _Count
        );
# 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
        __declspec(dllimport) errno_t __cdecl clearerr_s(
                    FILE* _Stream
            );


        __declspec(dllimport) errno_t __cdecl fopen_s(
                                      FILE** _Stream,
                                      char const* _FileName,
                                      char const* _Mode
            );



        __declspec(dllimport) size_t __cdecl fread_s(
                                                                               void* _Buffer,
                                                                               size_t _BufferSize,
                                                                               size_t _ElementSize,
                                                                               size_t _ElementCount,
                                                                               FILE* _Stream
            );


        __declspec(dllimport) errno_t __cdecl freopen_s(
                                      FILE** _Stream,
                                      char const* _FileName,
                                      char const* _Mode,
                                      FILE* _OldStream
            );


        __declspec(dllimport) char* __cdecl gets_s(
                                  char* _Buffer,
                                  rsize_t _Size
            );


        __declspec(dllimport) errno_t __cdecl tmpfile_s(
                                         FILE** _Stream
            );



        __declspec(dllimport) errno_t __cdecl tmpnam_s(
                                  char* _Buffer,
                                  rsize_t _Size
            );



    __declspec(dllimport) void __cdecl clearerr(
                FILE* _Stream
        );



    __declspec(dllimport) int __cdecl fclose(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fcloseall(void);


    __declspec(dllimport) FILE* __cdecl _fdopen(
               int _FileHandle,
               char const* _Mode
        );


    __declspec(dllimport) int __cdecl feof(
             FILE* _Stream
        );


    __declspec(dllimport) int __cdecl ferror(
             FILE* _Stream
        );


    __declspec(dllimport) int __cdecl fflush(
                    FILE* _Stream
        );



    __declspec(dllimport) int __cdecl fgetc(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fgetchar(void);



    __declspec(dllimport) int __cdecl fgetpos(
                FILE* _Stream,
                fpos_t* _Position
        );



    __declspec(dllimport) char* __cdecl fgets(
                                  char* _Buffer,
                                  int _MaxCount,
                                  FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fileno(
             FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _flushall(void);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl fopen(
               char const* _FileName,
               char const* _Mode
        );




    __declspec(dllimport) int __cdecl fputc(
                int _Character,
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fputchar(
             int _Character
        );



    __declspec(dllimport) int __cdecl fputs(
                char const* _Buffer,
                FILE* _Stream
        );


    __declspec(dllimport) size_t __cdecl fread(
                                                         void* _Buffer,
                                                         size_t _ElementSize,
                                                         size_t _ElementCount,
                                                         FILE* _Stream
        );


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl freopen(
                char const* _FileName,
                char const* _Mode,
                FILE* _Stream
        );


    __declspec(dllimport) FILE* __cdecl _fsopen(
               char const* _FileName,
               char const* _Mode,
               int _ShFlag
        );



    __declspec(dllimport) int __cdecl fsetpos(
                FILE* _Stream,
                fpos_t const* _Position
        );



    __declspec(dllimport) int __cdecl fseek(
                FILE* _Stream,
                long _Offset,
                int _Origin
        );



    __declspec(dllimport) int __cdecl _fseeki64(
                FILE* _Stream,
                __int64 _Offset,
                int _Origin
        );



    __declspec(dllimport) long __cdecl ftell(
                FILE* _Stream
        );



    __declspec(dllimport) __int64 __cdecl _ftelli64(
                FILE* _Stream
        );


    __declspec(dllimport) size_t __cdecl fwrite(
                                                       void const* _Buffer,
                                                       size_t _ElementSize,
                                                       size_t _ElementCount,
                                                       FILE* _Stream
        );



    __declspec(dllimport) int __cdecl getc(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl getchar(void);


    __declspec(dllimport) int __cdecl _getmaxstdio(void);

    extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }




    __declspec(dllimport) int __cdecl _getw(
                FILE* _Stream
        );

    __declspec(dllimport) void __cdecl perror(
                   char const* _ErrorMessage
        );





        __declspec(dllimport) int __cdecl _pclose(
                    FILE* _Stream
            );


        __declspec(dllimport) FILE* __cdecl _popen(
                   char const* _Command,
                   char const* _Mode
            );





    __declspec(dllimport) int __cdecl putc(
                int _Character,
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl putchar(
             int _Character
        );


    __declspec(dllimport) int __cdecl puts(
               char const* _Buffer
        );



    __declspec(dllimport) int __cdecl _putw(
                int _Word,
                FILE* _Stream
        );

    __declspec(dllimport) int __cdecl remove(
               char const* _FileName
        );


    __declspec(dllimport) int __cdecl rename(
               char const* _OldFileName,
               char const* _NewFileName
        );

    __declspec(dllimport) int __cdecl _unlink(
               char const* _FileName
        );



        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
        __declspec(dllimport) int __cdecl unlink(
                   char const* _FileName
            );



    __declspec(dllimport) void __cdecl rewind(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _rmtmp(void);

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) void __cdecl setbuf(
                                                            FILE* _Stream,
                                                            char* _Buffer
        );


    __declspec(dllimport) int __cdecl _setmaxstdio(
             int _Maximum
        );



    __declspec(dllimport) int __cdecl setvbuf(
                                     FILE* _Stream,
                                     char* _Buffer,
                                     int _Mode,
                                     size_t _Size
        );







    __declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
                   char const* _DirectoryName,
                   char const* _FilePrefix
        );





                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl tmpfile(void);

    extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }





#pragma warning(push)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl tmpnam( char *_Buffer);




#pragma warning(pop)



 __declspec(dllimport) int __cdecl ungetc(
                int _Character,
                FILE* _Stream
        );
# 460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __declspec(dllimport) void __cdecl _lock_file(
                FILE* _Stream
        );

    __declspec(dllimport) void __cdecl _unlock_file(
                FILE* _Stream
        );



    __declspec(dllimport) int __cdecl _fclose_nolock(
                FILE* _Stream
        );



    __declspec(dllimport) int __cdecl _fflush_nolock(
                    FILE* _Stream
        );



    __declspec(dllimport) int __cdecl _fgetc_nolock(
                FILE* _Stream
        );



    __declspec(dllimport) int __cdecl _fputc_nolock(
                int _Character,
                FILE* _Stream
        );


    __declspec(dllimport) size_t __cdecl _fread_nolock(
                                                         void* _Buffer,
                                                         size_t _ElementSize,
                                                         size_t _ElementCount,
                                                         FILE* _Stream
        );



    __declspec(dllimport) size_t __cdecl _fread_nolock_s(
                                                                         void* _Buffer,
                                                                         size_t _BufferSize,
                                                                         size_t _ElementSize,
                                                                         size_t _ElementCount,
                                                                         FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fseek_nolock(
                FILE* _Stream,
                long _Offset,
                int _Origin
        );


    __declspec(dllimport) int __cdecl _fseeki64_nolock(
                FILE* _Stream,
                __int64 _Offset,
                int _Origin
        );


    __declspec(dllimport) long __cdecl _ftell_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) size_t __cdecl _fwrite_nolock(
                                                       void const* _Buffer,
                                                       size_t _ElementSize,
                                                       size_t _ElementCount,
                                                       FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _getc_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _putc_nolock(
                int _Character,
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _ungetc_nolock(
                int _Character,
                FILE* _Stream
        );
# 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __declspec(dllimport) int* __cdecl __p__commode(void);
# 605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );

    __declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vfprintf_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfprintf(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vfprintf_s_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfprintf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        }





    __inline int __cdecl _vfprintf_p_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vfprintf_p(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vprintf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _vprintf_s_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vprintf_s(
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }





    __inline int __cdecl _vprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vprintf_p(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _fprintf_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl fprintf(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    __declspec(dllimport) int __cdecl _set_printf_count_output(
             int _Value
        );

    __declspec(dllimport) int __cdecl _get_printf_count_output(void);


    __inline int __cdecl _fprintf_s_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl fprintf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





    __inline int __cdecl _fprintf_p_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fprintf_p(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _printf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl printf(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _printf_s_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl printf_s(
                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





    __inline int __cdecl _printf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _printf_p(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                               unsigned __int64 _Options,
                                               FILE* _Stream,
                                               char const* _Format,
                                               _locale_t _Locale,
                                               va_list _Arglist
        );


    __inline int __cdecl _vfscanf_l(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfscanf(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vfscanf_s_l(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }






        __inline int __cdecl vfscanf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        }





    __inline int __cdecl _vscanf_l(
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vscanf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _vscanf_s_l(
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vscanf_s(
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fscanf_l(
                                               FILE* const _Stream,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fscanf(
                                     FILE* const _Stream,
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fscanf_s_l(
                                                 FILE* const _Stream,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl fscanf_s(
                                           FILE* const _Stream,
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _scanf_l(
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl scanf(
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _scanf_s_l(
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl scanf_s(
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
# 1335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                size_t _MaxCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnprintf_l(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
                                                     _locale_t const _Locale,
                                                     va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf(
                                                     char* const _Buffer,
                                                    size_t const _BufferCount,
                                                    char const* const _Format,
                                                    va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
 }
# 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __inline int __cdecl vsnprintf(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsprintf_l(
                                         char* const _Buffer,
                                         char const* const _Format,
                                         _locale_t const _Locale,
                                         va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
#pragma warning(pop)
 }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl vsprintf(
                                         char* const _Buffer,
                                         char const* const _Format,
                                         va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
#pragma warning(pop)
 }




    __inline int __cdecl _vsprintf_s_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }






        __inline int __cdecl vsprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
            )



        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }


        extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _vsprintf_p_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsprintf_p(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      va_list _ArgList
        )



    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vsnprintf_s_l(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
        __inline int __cdecl vsnprintf_s(
                                                              char* const _Buffer,
                                                              size_t const _BufferCount,
                                                              size_t const _MaxCount,
                                                              char const* const _Format,
                                                              va_list _ArgList
            )



        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        }


        extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _vscprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



    __inline int __cdecl _vscprintf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscprintf_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vscprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



    __inline int __cdecl _vscprintf_p(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscprintf_p_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vsnprintf_c_l(
                                                char* const _Buffer,
                                                size_t const _BufferCount,
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf_c(
                                       char* const _Buffer,
                                       size_t const _BufferCount,
                                       char const* const _Format,
                                       va_list _ArgList
        )



    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sprintf_l(
                                                char* const _Buffer,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl sprintf(
                                         char* const _Buffer,
                                         char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }


#pragma warning(push)
#pragma warning(disable: 4996)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl sprintf( char *_Buffer, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl vsprintf( char *_Buffer, char const* _Format, va_list _Args);





#pragma warning(pop)



 __inline int __cdecl _sprintf_s_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






        __inline int __cdecl sprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




    extern "C++" {
# 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
#pragma warning(push)
# 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
;
# 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
#pragma warning(disable: 4793)
# 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
; template <size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
#pragma warning(pop)
# 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
; }
# 1860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _sprintf_p_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _sprintf_p(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snprintf_l(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
                                                     _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __inline int __cdecl snprintf(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snprintf(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _snprintf( char *_Buffer, size_t _BufferCount, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _vsnprintf( char *_Buffer, size_t _BufferCount, char const* _Format, va_list _Args);
# 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _snprintf_c_l(
                                                char* const _Buffer,
                                                size_t const _BufferCount,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snprintf_c(
                                       char* const _Buffer,
                                       size_t const _BufferCount,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snprintf_s_l(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    extern "C++" {
# 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
#pragma warning(push)
# 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
;
# 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
#pragma warning(disable: 4793)
# 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
; template <size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
#pragma warning(pop)
# 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
; }
# 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _scprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _scprintf(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _scprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _scprintf_p(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_p(_Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }







    __declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                               unsigned __int64 _Options,
                                               char const* _Buffer,
                                               size_t _BufferCount,
                                               char const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );


    __inline int __cdecl _vsscanf_l(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vsscanf(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vsscanf_s_l(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




#pragma warning(push)
#pragma warning(disable: 6530)


 __inline int __cdecl vsscanf_s(
                                          char const* const _Buffer,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }


        extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(char const (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }






#pragma warning(pop)



 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sscanf_l(
                                               char const* const _Buffer,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl sscanf(
                                     char const* const _Buffer,
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _sscanf_s_l(
                                                 char const* const _Buffer,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl sscanf_s(
                                           char const* const _Buffer,
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = vsscanf_s(_Buffer, _Format, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
            return _Result;
        }




#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf_l(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snscanf_s_l(
                                                 char const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _snscanf_s(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


#pragma warning(pop)
# 2444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
        __declspec(dllimport) char* __cdecl tempnam(
                       char const* _Directory,
                       char const* _FilePrefix
            );





                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details.")) __declspec(dllimport) FILE* __cdecl fdopen( int _FileHandle, char const* _Format);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details.")) __declspec(dllimport) int __cdecl fileno( FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details.")) __declspec(dllimport) int __cdecl flushall(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fputchar( int _Ch);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details.")) __declspec(dllimport) int __cdecl getw( FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details.")) __declspec(dllimport) int __cdecl putw( int _Ch, FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(void);






}
# 2469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\stdio.h" 3
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstdio" 2 3
# 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstdio" 3
typedef FILE FILE;


namespace std {
#pragma warning(push)
#pragma warning(disable: 4995)

using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;

#pragma warning(pop)
}
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocnum" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\streambuf" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xiosbase" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocale" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstring" 1 3





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memory.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memory.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h" 1 3
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\errno.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\errno.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\errno.h" 3
 extern "C" {




    __declspec(dllimport) int* __cdecl _errno(void);


    __declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);

    __declspec(dllimport) unsigned long* __cdecl __doserrno(void);


    __declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
    __declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);
# 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\errno.h" 3
}
# 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\errno.h" 3
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_string.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_string.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_string.h" 2 3




#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_string.h" 3
 extern "C" {




         void const* __cdecl memchr(
                                    void const* _Buf,
                                    int _Val,
                                    size_t _MaxCount
    );


int __cdecl memcmp(
                            void const* _Buf1,
                            void const* _Buf2,
                            size_t _Size
    );
# 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_string.h" 3
void* __cdecl memcpy(
                                  void* _Dst,
                                  void const* _Src,
                                  size_t _Size
    );


         void* __cdecl memmove(
                                      void* _Dst,
                                      void const* _Src,
                                      size_t _Size
    );
# 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_string.h" 3
void* __cdecl memset(
                                  void* _Dst,
                                  int _Val,
                                  size_t _Size
    );


         char const* __cdecl strchr(
           char const* _Str,
           int _Val
    );


         char const* __cdecl strrchr(
           char const* _Str,
           int _Ch
    );


         char const* __cdecl strstr(
           char const* _Str,
           char const* _SubStr
    );



         wchar_t const* __cdecl wcschr(
           wchar_t const* _Str,
           wchar_t _Ch
    );


         wchar_t const* __cdecl wcsrchr(
           wchar_t const* _Str,
           wchar_t _Ch
    );



         wchar_t const* __cdecl wcsstr(
           wchar_t const* _Str,
           wchar_t const* _SubStr
    );



}
# 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_string.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h" 2 3


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h" 3
 extern "C" {
# 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h" 3
    static __inline errno_t __cdecl memcpy_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };


            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }


    static __inline errno_t __cdecl memmove_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }





}
# 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h" 3
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memory.h" 2 3





#pragma pack(push, 8)
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memory.h" 3
 extern "C" {




__declspec(dllimport) int __cdecl _memicmp(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size
    );


__declspec(dllimport) int __cdecl _memicmp_l(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size,
                                _locale_t _Locale
    );
# 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memory.h" 3
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _Size
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
                                    void const* _Buf1,
                                    void const* _Buf2,
                                    size_t _Size
        );







    extern "C++"
    inline void* __cdecl memchr(
                                 void* _Pv,
                                 int _C,
                                 size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }





}
# 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_memory.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 1 3
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
#pragma pack(push, 8)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
 extern "C" {
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
    __declspec(dllimport) errno_t __cdecl wcscat_s(
                                        wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcscpy_s(
                                     wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcsncat_s(
                                        wchar_t* _Destination,
                                        rsize_t _SizeInWords,
                                        wchar_t const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
                                     wchar_t* _Destination,
                                     rsize_t _SizeInWords,
                                     wchar_t const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
        );
# 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
           wchar_t const* _String
    );







extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }







#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination, wchar_t const* _Source);




#pragma warning(pop)



__declspec(dllimport) int __cdecl wcscmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }





#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination, wchar_t const* _Source);




#pragma warning(pop)


__declspec(dllimport) size_t __cdecl wcscspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcslen(
           wchar_t const* _String
    );
# 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) size_t __cdecl wcsnlen(
                               wchar_t const* _Source,
                               size_t _MaxCount
    );
# 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
    static __inline size_t __cdecl wcsnlen_s(
                                   wchar_t const* _Source,
                                   size_t _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) int __cdecl wcsncmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcsspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl wcstok(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
    );
# 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
#pragma warning(push)
#pragma warning(disable: 4141 4996)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
                      wchar_t* const _String,
                      wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }






        extern "C++" __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
                          wchar_t* _String,
                          wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }


#pragma warning(pop)






 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wcserror(
         int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     int _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl __wcserror(
               wchar_t const* _String
    );

                   __declspec(dllimport) errno_t __cdecl __wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size], wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }





               __declspec(dllimport) int __cdecl _wcsicmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

               __declspec(dllimport) int __cdecl _wcsicmp_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );

               __declspec(dllimport) int __cdecl _wcsnicmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

               __declspec(dllimport) int __cdecl _wcsnicmp_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

                   __declspec(dllimport) errno_t __cdecl _wcsnset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t (&_Destination)[_Size], wchar_t _Value, size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset( wchar_t *_String, wchar_t _Value, size_t _MaxCount);







__declspec(dllimport) wchar_t* __cdecl _wcsrev(
              wchar_t* _String
    );

                   __declspec(dllimport) errno_t __cdecl _wcsset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t (&_String)[_Size], wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset( wchar_t *_String, wchar_t _Value);






                   __declspec(dllimport) errno_t __cdecl _wcslwr_s(
                                    wchar_t* _String,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
                                    wchar_t* _String,
                                    size_t _SizeInWords,
                                    _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);







__declspec(dllimport) errno_t __cdecl _wcsupr_s(
                             wchar_t* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
                             wchar_t* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
# 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) size_t __cdecl wcsxfrm(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );


__declspec(dllimport) int __cdecl wcscoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcscoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsicoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcsicoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsncoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsncoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsnicoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsnicoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );
# 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
extern "C++" {



    inline wchar_t* __cdecl wcschr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }


    inline wchar_t* __cdecl wcspbrk( wchar_t* _String, wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }


    inline wchar_t* __cdecl wcsrchr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }



    inline wchar_t* __cdecl wcsstr( wchar_t* _String, wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
# 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
               wchar_t const* _String
        );
# 591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
               wchar_t const* _String1,
               wchar_t const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
                                   wchar_t const* _String1,
                                   wchar_t const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsnset(
                                     wchar_t* _String,
                                     wchar_t _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsrev(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsset(
                  wchar_t* _String,
                  wchar_t _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcslwr(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsupr(
                  wchar_t* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
               wchar_t const* _String1,
               wchar_t const* _String2
        );





}
# 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wstring.h" 3
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 2 3





#pragma pack(push, 8)
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
 extern "C" {
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
    __declspec(dllimport) errno_t __cdecl strcpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strcat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strerror_s(
                                     char* _Buffer,
                                     size_t _SizeInBytes,
                                     int _ErrorNumber);


    __declspec(dllimport) errno_t __cdecl strncat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl strncpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) char* __cdecl strtok_s(
                                      char* _String,
                                      char const* _Delimiter,
                                      char** _Context
        );



__declspec(dllimport) void* __cdecl _memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }







#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcat( char *_Destination, char const* _Source);




#pragma warning(pop)




int __cdecl strcmp(
           char const* _Str1,
           char const* _Str2
    );


__declspec(dllimport) int __cdecl _strcmpi(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl strcoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _strcoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }





#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcpy( char *_Destination, char const* _Source);




#pragma warning(pop)


__declspec(dllimport) size_t __cdecl strcspn(
           char const* _Str,
           char const* _Control
    );







__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
               char const* _Source
    );







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _strerror(
               char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }






               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strerror(
         int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }






__declspec(dllimport) int __cdecl _stricmp(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _stricmp_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


size_t __cdecl strlen(
           char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr( char *_String);





__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l( char *_String, _locale_t _Locale);






extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat( char *_Destination, char const* _Source, size_t _Count);
# 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
__declspec(dllimport) int __cdecl strncmp(
                               char const* _Str1,
                               char const* _Str2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strnicoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strncoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strncoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
                            char const* _String,
                            size_t _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy( char *_Destination, char const* _Source, size_t _Count);
# 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
__declspec(dllimport) size_t __cdecl strnlen(
                               char const* _String,
                               size_t _MaxCount
    );
# 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
    static __inline size_t __cdecl strnlen_s(
                                   char const* _String,
                                   size_t _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }




__declspec(dllimport) errno_t __cdecl _strnset_s(
                                    char* _String,
                                    size_t _SizeInBytes,
                                    int _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset( char *_Destination, int _Value, size_t _Count);
# 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
__declspec(dllimport) char const* __cdecl strpbrk(
           char const* _Str,
           char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
              char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
                                        char* _Destination,
                                        size_t _DestinationSize,
                                        int _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strset( char *_Destination, int _Value);






__declspec(dllimport) size_t __cdecl strspn(
           char const* _Str,
           char const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strtok(
                  char* _String,
                  char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr( char *_String);





__declspec(dllimport) errno_t __cdecl _strupr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l( char *_String, _locale_t _Locale);
# 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
__declspec(dllimport) size_t __cdecl strxfrm(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _strxfrm_l(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );




extern "C++"
{

    inline char* __cdecl strchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strpbrk( char* const _String, char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }


    inline char* __cdecl strrchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strstr( char* const _String, char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
# 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
                   char const* _String
        );






                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
               char const* _String1,
               char const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
               char const* _String1,
               char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
                  char* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
                                   char const* _String1,
                                   char const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
                                     char* _String,
                                     int _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
                  char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
                  char* _String,
                  int _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
                  char* _String
        );





}
# 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\string.h" 3
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstring" 2 3



namespace std {
#pragma warning(push)
#pragma warning(disable: 4995)

using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;

#pragma warning(pop)
}
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocale" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\exception" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstddef" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstddef" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstddef" 3
#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {
using :: ptrdiff_t; using :: size_t;
typedef double max_align_t;
# 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstddef" 3
}

using ::std:: max_align_t;


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstddef" 2 3



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\initializer_list" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Elem>
 class initializer_list
 {
public:
 typedef _Elem value_type;
 typedef const _Elem& reference;
 typedef const _Elem& const_reference;
 typedef size_t size_type;

 typedef const _Elem* iterator;
 typedef const _Elem* const_iterator;

 constexpr initializer_list() noexcept
  : _First(0), _Last(0)
  {
  }

 constexpr initializer_list(const _Elem *_First_arg,
  const _Elem *_Last_arg) noexcept
  : _First(_First_arg), _Last(_Last_arg)
  {
  }

 constexpr const _Elem *begin() const noexcept
  {
  return (_First);
  }

 constexpr const _Elem *end() const noexcept
  {
  return (_Last);
  }

 constexpr size_t size() const noexcept
  {
  return ((size_t)(_Last - _First));
  }

private:
 const _Elem *_First;
 const _Elem *_Last;
 };


template<class _Elem>
 constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Elem>
 constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.end());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstddef" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {
# 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstddef" 3
template<class _Ty>
 struct _Always_false
  : false_type
 {
 };





template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };



template<class _Ty = void>
 struct plus
 {
                                   typedef _Ty first_argument_type;
                                   typedef _Ty second_argument_type;
                                   typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left + _Right);
  }
 };


template<class _Ty = void>
 struct minus
 {
                                   typedef _Ty first_argument_type;
                                   typedef _Ty second_argument_type;
                                   typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left - _Right);
  }
 };


template<class _Ty = void>
 struct multiplies
 {
                                   typedef _Ty first_argument_type;
                                   typedef _Ty second_argument_type;
                                   typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left * _Right);
  }
 };


template<class _Ty = void>
 struct equal_to
 {
                                   typedef _Ty first_argument_type;
                                   typedef _Ty second_argument_type;
                                   typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left == _Right);
  }
 };


template<class _Ty = void>
 struct less
 {
                                   typedef _Ty first_argument_type;
                                   typedef _Ty second_argument_type;
                                   typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left < _Right);
  }
 };


template<>
 struct plus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct minus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct multiplies<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct equal_to<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct less<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right));
  }
 };


template<class _Ty>
 constexpr _Ty *addressof(_Ty& _Val) noexcept
 {
 return (__builtin_addressof(_Val));
 }

template<class _Ty>
 const _Ty *addressof(const _Ty&&) = delete;


template<class _Ptrty> inline
 auto _Unfancy(_Ptrty _Ptr)
 {
 return (::std:: addressof(*_Ptr));
 }

template<class _Ty> inline
 _Ty * _Unfancy(_Ty * _Ptr)
 {
 return (_Ptr);
 }
}
# 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstddef" 3
#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



#pragma warning(disable: 4180)

namespace std {

template<class _Ty,
 _Ty... _Vals>
 struct integer_sequence
 {
 static_assert(is_integral_v<_Ty>,
  "integer_sequence<T, I...> requires T to be an integral type.");

 using value_type = _Ty;

 static constexpr size_t size() noexcept
  {
  return (sizeof...(_Vals));
  }
 };


template<class _Ty,
 _Ty _Size>
 using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;

template<size_t... _Vals>
 using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
 using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
 using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


template<bool... _Bools>
             constexpr bool _None_of_v = is_same_v<
  integer_sequence<bool, false, _Bools...>,
  integer_sequence<bool, _Bools..., false>>;

template<class _Ty,
 class... _Types>
             constexpr bool _Is_any_of_v = !_None_of_v<is_same<_Ty, _Types>::value...>;


template<class... _Types>
 struct _Arg_types
 {
 };

template<class _Ty1>
 struct _Arg_types<_Ty1>
 {
                                   typedef _Ty1 argument_type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Arg_types<_Ty1, _Ty2>
 {
                                   typedef _Ty1 first_argument_type;
                                   typedef _Ty2 second_argument_type;
 };


template<class _Ty>
 struct _Is_function
 {
 using _Bool_type = false_type;
 };
# 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) > : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) > : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { using _Bool_type = true_type; typedef _Ret result_type; };
# 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { using _Bool_type = true_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { using _Bool_type = true_type; typedef _Ret result_type; };


template<class _Ty>
 struct is_function
  : _Is_function<_Ty>::_Bool_type
 {
 };

template<class _Ty>
             constexpr bool is_function_v = is_function<_Ty>::value;


template<class _Ty>
 struct _Is_memfunptr
 {
 using _Bool_type = false_type;
 };
# 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; };
# 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; };



template<class _Ty>
 struct is_void
  : false_type
 {
 };
# 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };


template<class _Ty>
             constexpr bool is_void_v = is_void<_Ty>::value;


template<class... _Types>
 using void_t = void;



template<class _Ty>
 struct add_const
 {
 using type = const _Ty;
 };

template<class _Ty>
 using add_const_t = typename add_const<_Ty>::type;


template<class _Ty>
 struct add_volatile
 {
 using type = volatile _Ty;
 };

template<class _Ty>
 using add_volatile_t = typename add_volatile<_Ty>::type;


template<class _Ty>
 struct add_cv
 {
 using type = const volatile _Ty;
 };

template<class _Ty>
 using add_cv_t = typename add_cv<_Ty>::type;


template<class _Ty,
 class = void>
 struct _Add_reference
 {
 using _Lvalue = _Ty;
 using _Rvalue = _Ty;
 };

template<class _Ty>
 struct _Add_reference<_Ty, void_t<_Ty&>>
 {
 using _Lvalue = _Ty&;
 using _Rvalue = _Ty&&;
 };


template<class _Ty>
 struct add_lvalue_reference
 {
 using type = typename _Add_reference<_Ty>::_Lvalue;
 };

template<class _Ty>
 using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;


template<class _Ty>
 struct add_rvalue_reference
 {
 using type = typename _Add_reference<_Ty>::_Rvalue;
 };

template<class _Ty>
 using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;


template<class _Ty>
 add_rvalue_reference_t<_Ty> declval() noexcept;


template<class _Ty>
 struct remove_extent
 {
 using type = _Ty;
 };

template<class _Ty, size_t _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 using type = _Ty;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 using type = _Ty;
 };

template<class _Ty>
 using remove_extent_t = typename remove_extent<_Ty>::type;


template<class _Ty>
 struct remove_all_extents
 {
 using type = _Ty;
 };

template<class _Ty, size_t _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 using type = typename remove_all_extents<_Ty>::type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 using type = typename remove_all_extents<_Ty>::type;
 };

template<class _Ty>
 using remove_all_extents_t = typename remove_all_extents<_Ty>::type;


template<class _Ty>
 struct remove_pointer
 {
 using type = _Ty;
 };
# 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Ty> struct remove_pointer<_Ty *> { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty *const> { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { using type = _Ty; };


template<class _Ty>
 using remove_pointer_t = typename remove_pointer<_Ty>::type;


template<class _Ty,
 class = void>
 struct _Add_pointer
 {
 using type = _Ty;
 };

template<class _Ty>
 struct _Add_pointer<_Ty, void_t<remove_reference_t<_Ty> *>>
 {
 using type = remove_reference_t<_Ty> *;
 };

template<class _Ty>
 struct add_pointer
 {
 using type = typename _Add_pointer<_Ty>::type;
 };

template<class _Ty>
 using add_pointer_t = typename add_pointer<_Ty>::type;



template<class _Ty>
 struct is_array
  : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
  : true_type
 {
 };

template<class _Ty>
             constexpr bool is_array_v = is_array<_Ty>::value;


template<class _Ty>
 struct is_lvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
  : true_type
 {
 };

template<class _Ty>
             constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;


template<class _Ty>
 struct is_rvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_rvalue_reference<_Ty&&>
  : true_type
 {
 };

template<class _Ty>
             constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;


template<class _Ty>
 struct is_reference
  : bool_constant<is_lvalue_reference_v<_Ty>
  || is_rvalue_reference_v<_Ty>>
 {
 };

template<class _Ty>
             constexpr bool is_reference_v = is_reference<_Ty>::value;


template<class _Ty,
 bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
 struct _Is_member_object_pointer
  : false_type
 {
 };

template<class _Ty1,
 class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
  : true_type
 {
 using _Class_type = _Ty2;
 };

template<class _Ty>
 struct is_member_object_pointer
  : _Is_member_object_pointer<remove_cv_t<_Ty>>::type
 {
 };

template<class _Ty>
             constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;


template<class _Ty>
 struct is_member_function_pointer
  : _Is_memfunptr<remove_cv_t<_Ty>>::_Bool_type
 {
 };

template<class _Ty>
             constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;


template<class _Ty>
 struct _Is_pointer
  : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
  : true_type
 {
 };

template<class _Ty>
 struct is_pointer
  : _Is_pointer<remove_cv_t<_Ty>>
 {
 };

template<class _Ty>
             constexpr bool is_pointer_v = is_pointer<_Ty>::value;


template<class _Ty>
 struct is_null_pointer
  : bool_constant<is_same_v<remove_cv_t<_Ty>, nullptr_t>>
 {
 };

template<class _Ty>
             constexpr bool is_null_pointer_v = is_null_pointer<_Ty>::value;


template<class _Ty>
 struct is_union
  : bool_constant<__is_union(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_union_v = is_union<_Ty>::value;


template<class _Ty>
 struct is_class
  : bool_constant<__is_class(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_class_v = is_class<_Ty>::value;


template<class _Ty>
 struct is_fundamental
  : bool_constant<is_arithmetic_v<_Ty>
  || is_void_v<_Ty>
  || is_null_pointer_v<_Ty>>
 {
 };

template<class _Ty>
             constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;


template<class _Ty>
 struct is_object
  : bool_constant<!is_function_v<_Ty>
  && !is_reference_v<_Ty>
  && !is_void_v<_Ty>>
 {
 };

template<class _Ty>
             constexpr bool is_object_v = is_object<_Ty>::value;


template<class _From,
 class _To>
 struct is_convertible
  : bool_constant<__is_convertible_to(_From, _To)>
 {
 };

template<class _From,
 class _To>
             constexpr bool is_convertible_v = is_convertible<_From, _To>::value;


template<class _Ty>
 struct is_enum
  : bool_constant<__is_enum(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_enum_v = is_enum<_Ty>::value;


template<class _Ty>
 struct is_compound
  : bool_constant<!is_fundamental_v<_Ty>>
 {
 };

template<class _Ty>
             constexpr bool is_compound_v = is_compound<_Ty>::value;


template<class _Ty>
 struct is_member_pointer
  : bool_constant<is_member_object_pointer_v<_Ty>
  || is_member_function_pointer_v<_Ty>>
 {
 };

template<class _Ty>
             constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;


template<class _Ty>
 struct is_scalar
  : bool_constant<is_arithmetic_v<_Ty>
  || is_enum_v<_Ty>
  || is_pointer_v<_Ty>
  || is_member_pointer_v<_Ty>
  || is_null_pointer_v<_Ty>>
 {
 };

template<class _Ty>
             constexpr bool is_scalar_v = is_scalar<_Ty>::value;


template<class _Ty>
 struct is_const
  : false_type
 {
 };

template<class _Ty>
 struct is_const<const _Ty>
  : true_type
 {
 };

template<class _Ty>
             constexpr bool is_const_v = is_const<_Ty>::value;


template<class _Ty>
 struct is_volatile
  : false_type
 {
 };

template<class _Ty>
 struct is_volatile<volatile _Ty>
  : true_type
 {
 };

template<class _Ty>
             constexpr bool is_volatile_v = is_volatile<_Ty>::value;


template<class _Ty>
 struct is_pod
  : bool_constant<__is_pod(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_pod_v = is_pod<_Ty>::value;


template<class _Ty>
 struct is_empty
  : bool_constant<__is_empty(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_empty_v = is_empty<_Ty>::value;


template<class _Ty>
 struct is_polymorphic
  : bool_constant<__is_polymorphic(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_polymorphic_v = is_polymorphic<_Ty>::value;


template<class _Ty>
 struct is_abstract
  : bool_constant<__is_abstract(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_abstract_v = is_abstract<_Ty>::value;


template<class _Ty>
 struct is_final
  : bool_constant<__is_final(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_final_v = is_final<_Ty>::value;


template<class _Ty>
 struct is_standard_layout
  : bool_constant<__is_standard_layout(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_standard_layout_v = is_standard_layout<_Ty>::value;


template<class _Ty>
 struct is_literal_type
  : bool_constant<__is_literal_type(_Ty)>
 {
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
                                              constexpr bool is_literal_type_v = is_literal_type<_Ty>::value;
#pragma warning(pop)


template<class _Ty>
 struct is_trivial
  : bool_constant<__is_trivial(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_trivial_v = is_trivial<_Ty>::value;


template<class _Ty>
 struct is_trivially_copyable
  : bool_constant<__is_trivially_copyable(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Ty>::value;


template<class _Ty>
 struct has_virtual_destructor
  : bool_constant<__has_virtual_destructor(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Ty>::value;
# 719 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Ty,
 class... _Args>
 struct is_constructible
  : bool_constant<__is_constructible(_Ty, _Args...)>
 {
 };

template<class _Ty,
 class... _Args>
             constexpr bool is_constructible_v = is_constructible<_Ty, _Args...>::value;


template<class _Ty>
 struct is_copy_constructible
  : is_constructible<
   _Ty,
   add_lvalue_reference_t<const _Ty>
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_copy_constructible_v = is_copy_constructible<_Ty>::value;


template<class _Ty>
 struct is_default_constructible
  : is_constructible<_Ty>::type
 {
 };

template<class _Ty>
             constexpr bool is_default_constructible_v = is_default_constructible<_Ty>::value;


template<class _Ty>
 struct is_move_constructible
  : is_constructible<_Ty, _Ty>::type
 {
 };

template<class _Ty>
             constexpr bool is_move_constructible_v = is_move_constructible<_Ty>::value;


template<class _To,
 class _From>
 struct is_assignable
  : bool_constant<__is_assignable(_To, _From)>
 {
 };

template<class _Ty,
 class _Uty>
             constexpr bool is_assignable_v = is_assignable<_Ty, _Uty>::value;


template<class _Ty>
 struct is_copy_assignable
  : is_assignable<
   add_lvalue_reference_t<_Ty>,
   add_lvalue_reference_t<const _Ty>
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_copy_assignable_v = is_copy_assignable<_Ty>::value;


template<class _Ty>
 struct is_move_assignable
  : is_assignable<
   add_lvalue_reference_t<_Ty>,
   _Ty
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_move_assignable_v = is_move_assignable<_Ty>::value;


template<class _Ty>
 struct is_destructible
  : bool_constant<__is_destructible(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_destructible_v = is_destructible<_Ty>::value;



template<class _Ty,
 class... _Args>
 struct is_trivially_constructible
  : bool_constant<__is_trivially_constructible(_Ty, _Args...)>
 {
 };

template<class _Ty,
 class... _Args>
             constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Ty, _Args...>::value;


template<class _Ty>
 struct is_trivially_copy_constructible
  : is_trivially_constructible<
   _Ty,
   add_lvalue_reference_t<const _Ty>
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Ty>::value;


template<class _Ty>
 struct is_trivially_default_constructible
  : is_trivially_constructible<_Ty>::type
 {
 };

template<class _Ty>
             constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Ty>::value;


template<class _Ty>
 struct is_trivially_move_constructible
  : is_trivially_constructible<_Ty, _Ty>::type
 {
 };

template<class _Ty>
             constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Ty>::value;


template<class _To,
 class _From>
 struct is_trivially_assignable
  : bool_constant<__is_trivially_assignable(_To, _From)>
 {
 };

template<class _Ty,
 class _Uty>
             constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Ty, _Uty>::value;


template<class _Ty>
 struct is_trivially_copy_assignable
  : is_trivially_assignable<
   add_lvalue_reference_t<_Ty>,
   add_lvalue_reference_t<const _Ty>
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Ty>::value;


template<class _Ty>
 struct is_trivially_move_assignable
  : is_trivially_assignable<
   add_lvalue_reference_t<_Ty>,
   _Ty
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Ty>::value;


template<class _Ty>
 struct is_trivially_destructible
  : bool_constant<__is_trivially_destructible(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Ty>::value;



template<class _Ty,
 class... _Args>
 struct is_nothrow_constructible
  : bool_constant<__is_nothrow_constructible(_Ty, _Args...)>
 {
 };

template<class _Ty,
 class... _Args>
             constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Ty, _Args...>::value;


template<class _Ty>
 struct is_nothrow_copy_constructible
  : is_nothrow_constructible<
   _Ty,
   add_lvalue_reference_t<const _Ty>
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Ty>::value;


template<class _Ty>
 struct is_nothrow_default_constructible
  : is_nothrow_constructible<_Ty>::type
 {
 };

template<class _Ty>
             constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Ty>::value;


template<class _Ty>
 struct is_nothrow_move_constructible
  : is_nothrow_constructible<_Ty, _Ty>::type
 {
 };

template<class _Ty>
             constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Ty>::value;


template<class _To,
 class _From>
 struct is_nothrow_assignable
  : bool_constant<__is_nothrow_assignable(_To, _From)>
 {
 };

template<class _Ty,
 class _Uty>
             constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Ty, _Uty>::value;


template<class _Ty>
 struct is_nothrow_copy_assignable
  : is_nothrow_assignable<
   add_lvalue_reference_t<_Ty>,
   add_lvalue_reference_t<const _Ty>
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Ty>::value;


template<class _Ty>
 struct is_nothrow_move_assignable
  : is_nothrow_assignable<
   add_lvalue_reference_t<_Ty>,
   _Ty
  >::type
 {
 };

template<class _Ty>
             constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Ty>::value;


template<class _Ty>
 struct is_nothrow_destructible
  : bool_constant<__is_nothrow_destructible(_Ty)>
 {
 };

template<class _Ty>
             constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Ty>::value;


#pragma warning(push)
#pragma warning(disable: 4296)
template<class _Ty,
 bool = is_integral_v<_Ty>>
 struct _Sign_base
 {
 using _Uty = remove_cv_t<_Ty>;
 using _Signed = bool_constant<_Uty(-1) < _Uty(0)>;
 using _Unsigned = bool_constant<_Uty(0) < _Uty(-1)>;
 };
#pragma warning(pop)

template<class _Ty>
 struct _Sign_base<_Ty, false>
 {

 using _Signed = typename is_floating_point<_Ty>::type;
 using _Unsigned = false_type;
 };

template<class _Ty>
 struct is_signed
  : _Sign_base<_Ty>::_Signed
 {
 };

template<class _Ty>
             constexpr bool is_signed_v = is_signed<_Ty>::value;


template<class _Ty>
 struct is_unsigned
  : _Sign_base<_Ty>::_Unsigned
 {
 };

template<class _Ty>
             constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;


template<class _Ty>
 using _Is_nonbool_integral =
  bool_constant<is_integral_v<_Ty>
   && !is_same_v<remove_cv_t<_Ty>, bool>>;


template<class _Ty>
 struct _Change_sign
 {
 static_assert(_Is_nonbool_integral<_Ty>::value || is_enum_v<_Ty>,
  "make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
  "cv-qualified) integral type or enumeration but not a bool type.");

 using _Signed =
  conditional_t<_Is_any_of_v<_Ty, long, unsigned long>, long,
  conditional_t<sizeof(_Ty) == 1, signed char,
  conditional_t<sizeof(_Ty) == 2, short,
  conditional_t<sizeof(_Ty) == 4, int,
   long long
  >>>>;

 using _Unsigned =
  conditional_t<_Is_any_of_v<_Ty, long, unsigned long>, unsigned long,
  conditional_t<sizeof(_Ty) == 1, unsigned char,
  conditional_t<sizeof(_Ty) == 2, unsigned short,
  conditional_t<sizeof(_Ty) == 4, unsigned int,
   unsigned long long
  >>>>;
 };

template<class _Ty>
 struct _Change_sign<const _Ty>
 {
 using _Signed = const typename _Change_sign<_Ty>::_Signed;
 using _Unsigned = const typename _Change_sign<_Ty>::_Unsigned;
 };

template<class _Ty>
 struct _Change_sign<volatile _Ty>
 {
 using _Signed = volatile typename _Change_sign<_Ty>::_Signed;
 using _Unsigned = volatile typename _Change_sign<_Ty>::_Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const volatile _Ty>
 {
 using _Signed = const volatile typename _Change_sign<_Ty>::_Signed;
 using _Unsigned = const volatile typename _Change_sign<_Ty>::_Unsigned;
 };


template<class _Ty>
 struct make_signed
 {
 using type = typename _Change_sign<_Ty>::_Signed;
 };

template<class _Ty>
 using make_signed_t = typename make_signed<_Ty>::type;


template<class _Ty>
 struct make_unsigned
 {
 using type = typename _Change_sign<_Ty>::_Unsigned;
 };

template<class _Ty>
 using make_unsigned_t = typename make_unsigned<_Ty>::type;


template<class _Rep>
 constexpr make_unsigned_t<_Rep> _Unsigned_value(_Rep _Val)
 {
 return (static_cast<make_unsigned_t<_Rep>>(_Val));
 }


template<class _Ty>
 struct alignment_of
  : integral_constant<size_t, alignof(_Ty)>
 {
 };

template<class _Ty>
             constexpr size_t alignment_of_v = alignof(_Ty);






template<class _Ty,
 size_t _Len>
 union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len,
 size_t _Align,
 class _Ty,
 bool _Ok>
 struct _Aligned;

template<size_t _Len,
 size_t _Align,
 class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 using type = _Align_type<_Ty, _Len>;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, double, false>
 {
 using type = _Align_type<max_align_t, _Len>;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 using type = typename _Aligned<_Len, _Align, double, _Align <= alignof(double)>::type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 using type = typename _Aligned<_Len, _Align, int, _Align <= alignof(int)>::type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 using type = typename _Aligned<_Len, _Align, short, _Align <= alignof(short)>::type;
 };

template<size_t _Len,
 size_t _Align = alignof(max_align_t)>
 struct aligned_storage
 {
 using type = typename _Aligned<_Len, _Align, char, _Align <= alignof(char)>::type;
 };




template<size_t _Len,
 size_t _Align = alignof(max_align_t)>
 using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;


template<size_t... _Vals>
 struct _Maximum;

template<>
 struct _Maximum<>
  : integral_constant<size_t, 0>
 {
 };

template<size_t _Val>
 struct _Maximum<_Val>
  : integral_constant<size_t, _Val>
 {
 };

template<size_t _First,
 size_t _Second,
 size_t... _Rest>
 struct _Maximum<_First, _Second, _Rest...>
  : _Maximum<(_First < _Second ? _Second : _First), _Rest...>::type
 {
 };

template<size_t _Len,
 class... _Types>
 struct aligned_union
 {
 static constexpr size_t _Max_len = _Maximum<_Len, sizeof(_Types)...>::value;
 static constexpr size_t alignment_value = _Maximum<alignof(_Types)...>::value;
 using type = aligned_storage_t<_Max_len, alignment_value>;
 };

template<size_t _Len,
 class... _Types>
 using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


template<class _Ty>
 struct underlying_type
 {
 using type = __underlying_type(_Ty);
 };

template<class _Ty>
 using underlying_type_t = typename underlying_type<_Ty>::type;


template<class _Ty>
 struct rank
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct rank<_Ty[_Ix]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
             constexpr size_t rank_v = rank<_Ty>::value;


template<class _Ty, unsigned int _Nx>
 struct _Extent
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct _Extent<_Ty[_Ix], 0>
  : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, size_t _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
  : _Extent<_Ty, _Nx>
 {
 };

template<class _Ty,
 unsigned int _Ix = 0>
             constexpr size_t extent_v = extent<_Ty, _Ix>::value;


template<class _Base,
 class _Der>
 struct is_base_of
  : bool_constant<__is_base_of(_Base, _Der)>
 {
 };

template<class _Base,
 class _Derived>
             constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;


template<class _Ty>
 struct decay
 {
 using _Ty1 = remove_reference_t<_Ty>;

 using type = conditional_t<is_array_v<_Ty1>,
  add_pointer_t<remove_extent_t<_Ty1>>,
  conditional_t<is_function_v<_Ty1>,
   add_pointer_t<_Ty1>,
   remove_cv_t<_Ty1>>>;
 };

template<class _Ty>
 using decay_t = typename decay<_Ty>::type;


template<bool _First_value,
 class _First,
 class... _Rest>
 struct _Conjunction
 {
 using type = _First;
 };

template<class _True,
 class _Next,
 class... _Rest>
 struct _Conjunction<true, _True, _Next, _Rest...>
 {
 using type = typename _Conjunction<_Next::value, _Next, _Rest...>::type;
 };

template<class... _Traits>
 struct conjunction
  : true_type
 {
 };

template<class _First,
 class... _Rest>
 struct conjunction<_First, _Rest...>
  : _Conjunction<_First::value, _First, _Rest...>::type
 {

 };

template<class... _Traits>
             constexpr bool conjunction_v = conjunction<_Traits...>::value;

template<class... _Traits>
 using _Conjunction_t = typename conjunction<_Traits...>::type;


template<bool _First_value,
 class _First,
 class... _Rest>
 struct _Disjunction
 {
 using type = _First;
 };

template<class _False,
 class _Next,
 class... _Rest>
 struct _Disjunction<false, _False, _Next, _Rest...>
 {
 using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
 };

template<class... _Traits>
 struct disjunction
  : false_type
 {
 };

template<class _First,
 class... _Rest>
 struct disjunction<_First, _Rest...>
  : _Disjunction<_First::value, _First, _Rest...>::type
 {

 };

template<class... _Traits>
             constexpr bool disjunction_v = disjunction<_Traits...>::value;

template<class... _Traits>
 using _Disjunction_t = typename disjunction<_Traits...>::type;


template<class _Trait>
 struct negation
  : bool_constant<!static_cast<bool>(_Trait::value)>
 {
 };

template<class _Trait>
             constexpr bool negation_v = negation<_Trait>::value;


struct _Unique_tag_common_type
 {
 };

template<class _Ty1,
 class _Ty2,
 class = void>
 struct _Decayed_cond_oper
 {
 };

template<class _Ty1,
 class _Ty2>
 struct _Decayed_cond_oper<_Ty1, _Ty2, void_t<
  _Unique_tag_common_type,
  decltype(false ? ::std:: declval<_Ty1>() : ::std:: declval<_Ty2>())>>
 {
 using type = decay_t<decltype(false ? ::std:: declval<_Ty1>() : ::std:: declval<_Ty2>())>;
 };

template<class... _Ty>
 struct common_type;

template<class... _Ty>
 using common_type_t = typename common_type<_Ty...>::type;

template<>
 struct common_type<>
 {
 };

template<class _Ty1>
 struct common_type<_Ty1>
  : common_type<_Ty1, _Ty1>
 {
 };

template<class _Ty1,
 class _Ty2,
 class _Decayed1 = decay_t<_Ty1>,
 class _Decayed2 = decay_t<_Ty2>>
 struct _Common_type2
  : common_type<_Decayed1, _Decayed2>
 {
 };

template<class _Ty1,
 class _Ty2>
 struct _Common_type2<_Ty1, _Ty2, _Ty1, _Ty2>
  : _Decayed_cond_oper<_Ty1, _Ty2>
 {
 };

template<class _Ty1,
 class _Ty2>
 struct common_type<_Ty1, _Ty2>
  : _Common_type2<_Ty1, _Ty2>
 {
 };

template<class _Void,
 class _Ty1,
 class _Ty2,
 class... _Rest>
 struct _Common_type3
 {
 };

template<class _Ty1,
 class _Ty2,
 class... _Rest>
 struct _Common_type3<void_t<common_type_t<_Ty1, _Ty2>>, _Ty1, _Ty2, _Rest...>
  : common_type<common_type_t<_Ty1, _Ty2>, _Rest...>
 {
 };

template<class _Ty1,
 class _Ty2,
 class... _Rest>
 struct common_type<_Ty1, _Ty2, _Rest...>
  : _Common_type3<void, _Ty1, _Ty2, _Rest...>
 {
 };



template<class _Ty>
 struct [[deprecated("warning STL4003: " "The non-Standard std::identity struct is deprecated and will be REMOVED. You can " "define _SILENCE_IDENTITY_STRUCT_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] identity
 {
 using type = _Ty;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };



template<class _Ty>
 struct _Identity
 {
 using type = _Ty;
 };
template<class _Ty>
 using _Identity_t = typename _Identity<_Ty>::type;



template<class _Type,
 template <class...> class _Template>
 struct _Is_specialization
  : false_type
 {};
template<template <class...> class _Template,
 class... _Types>
 struct _Is_specialization<_Template<_Types...>, _Template>
  : true_type
 {};


template<class _Ty>
 constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept
 {
 return (static_cast<_Ty&&>(_Arg));
 }

template<class _Ty>
 constexpr _Ty&& forward(remove_reference_t<_Ty>&& _Arg) noexcept
 {
 static_assert(!is_lvalue_reference_v<_Ty>, "bad forward call");
 return (static_cast<_Ty&&>(_Arg));
 }


template<class _Ty>
 constexpr remove_reference_t<_Ty>&&
  move(_Ty&& _Arg) noexcept
 {
 return (static_cast<remove_reference_t<_Ty>&&>(_Arg));
 }


template<class _Ty>
 constexpr conditional_t<!is_nothrow_move_constructible_v<_Ty> && is_copy_constructible_v<_Ty>,
  const _Ty&, _Ty&&>
 move_if_noexcept(_Ty& _Arg) noexcept
 {
 return (::std:: move(_Arg));
 }

template<class _Ty>
 struct _Unrefwrap;
# 1735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Callable,
 class... _Types>
 struct _Invoker;

template<class _Callable,
 class... _Types> inline
 auto invoke(_Callable&& _Obj, _Types&&... _Args)
 noexcept(noexcept(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)))

 -> decltype(_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));

struct _Unforced
 {
 };


template<class _To>
 void _Implicitly_convert_to(_To) noexcept;

template<class _From,
 class _To,
 bool = is_convertible_v<_From, _To>>
 struct _Is_nothrow_convertible
  : bool_constant<noexcept(_Implicitly_convert_to<_To>(::std:: declval<_From>()))>
 {
 };

template<class _From,
 class _To>
 struct _Is_nothrow_convertible<_From, _To, false>
  : false_type
 {
 };

struct _Unique_tag_invoke_traits
 {
 };

template<class _Void,
 class... _Types>
 struct _Invoke_traits
 {
 using _Is_invocable = false_type;
 using _Is_nothrow_invocable = false_type;
 template<class _Rx>
  using _Is_invocable_r = false_type;
 template<class _Rx>
  using _Is_nothrow_invocable_r = false_type;
 };

template<class... _Types>
 struct _Invoke_traits<
  void_t<
   _Unique_tag_invoke_traits,
   decltype(::std:: invoke(::std:: declval<_Types>()...))>,
  _Types...>
 {
 using type = decltype(::std:: invoke(::std:: declval<_Types>()...));
 using _Is_invocable = true_type;
 using _Is_nothrow_invocable = bool_constant<noexcept(::std:: invoke(::std:: declval<_Types>()...))>;
 template<class _Rx>
  using _Is_invocable_r = _Disjunction_t<is_void<_Rx>, is_convertible<type, _Rx>>;
 template<class _Rx>
  using _Is_nothrow_invocable_r = _Conjunction_t<
   _Is_nothrow_invocable,
   disjunction<is_void<_Rx>, _Is_nothrow_convertible<type, _Rx>>>;
 };


template<class _Fty>
 struct result_of
 {
 static_assert(_Always_false<_Fty>::value,
  "result_of<CallableType> is invalid; use "
  "result_of<CallableType(zero or more argument types)> instead.");
 };
# 1821 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Callable, class... _Args> struct result_of<_Callable __cdecl (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { }; template<class _Callable, class... _Args> struct result_of<_Callable __fastcall (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { }; template<class _Callable, class... _Args> struct result_of<_Callable __stdcall (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { }; template<class _Callable, class... _Args> struct result_of<_Callable __vectorcall (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { };


#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
 using result_of_t = typename result_of<_Ty>::type;
#pragma warning(pop)

template<class _Callable,
 class... _Args>
 using _Invoke_result_t = typename _Invoke_traits<void, _Callable, _Args...>::type;

template<class _Rx,
 class _Callable,
 class... _Args>
 using _Is_invocable_r_ = typename _Invoke_traits<void, _Callable, _Args...>::template _Is_invocable_r<_Rx>;

template<class _Rx,
 class _Callable,
 class... _Args>
 struct _Is_invocable_r
  : _Is_invocable_r_<_Rx, _Callable, _Args...>
 {
 };
# 1917 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
template<class _Ty,
 class = void>
 struct _Weak_result_type
 {
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
 struct _Weak_result_type<_Ty, void_t<
  typename _Ty::result_type>>
 {
                                   typedef typename _Ty::result_type result_type;
 };
#pragma warning(pop)

template<class _Ty,
 class = void>
 struct _Weak_argument_type
  : _Weak_result_type<_Ty>
 {
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
 struct _Weak_argument_type<_Ty, void_t<
  typename _Ty::argument_type>>
  : _Weak_result_type<_Ty>
 {
                                   typedef typename _Ty::argument_type argument_type;
 };
#pragma warning(pop)

template<class _Ty,
 class = void>
 struct _Weak_binary_args
  : _Weak_argument_type<_Ty>
 {
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
 struct _Weak_binary_args<_Ty, void_t<
  typename _Ty::first_argument_type,
  typename _Ty::second_argument_type>>
  : _Weak_argument_type<_Ty>
 {
                                   typedef typename _Ty::first_argument_type first_argument_type;
                                   typedef typename _Ty::second_argument_type second_argument_type;
 };
#pragma warning(pop)

template<class _Ty>
 struct _Weak_types
 {
 using _Is_f_or_pf = _Is_function<remove_pointer_t<_Ty>>;
 using _Is_pmf = _Is_memfunptr<remove_cv_t<_Ty>>;
 using type = conditional_t<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
  conditional_t<_Is_pmf::_Bool_type::value, _Is_pmf,
  _Weak_binary_args<_Ty>>>;
 };


template<class _Ty>
 class reference_wrapper
  : public _Weak_types<_Ty>::type
 {
public:
 static_assert(is_object_v<_Ty> || is_function_v<_Ty>,
  "reference_wrapper<T> requires T to be an object type "
  "or a function type.");

 using type = _Ty;

 reference_wrapper(_Ty& _Val) noexcept
  : _Ptr(::std:: addressof(_Val))
  {
  }

 operator _Ty&() const noexcept
  {
  return (*_Ptr);
  }

 _Ty& get() const noexcept
  {
  return (*_Ptr);
  }

 template<class... _Types>
  auto operator()(_Types&&... _Args) const
  -> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
  }

 reference_wrapper(_Ty&&) = delete;

private:
 _Ty *_Ptr;
 };


template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(_Ty& _Val) noexcept
 {
 return (reference_wrapper<_Ty>(_Val));
 }

template<class _Ty>
 void ref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: ref(_Val.get()));
 }

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(const _Ty& _Val) noexcept
 {
 return (reference_wrapper<const _Ty>(_Val));
 }

template<class _Ty>
 void cref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: cref(_Val.get()));
 }


template<class _Ty>
 struct _Unrefwrap_helper
 {
 using type = _Ty;
 static constexpr bool _Is_refwrap = false;
 };

template<class _Ty>
 struct _Unrefwrap_helper<reference_wrapper<_Ty>>
 {
 using type = _Ty&;
 static constexpr bool _Is_refwrap = true;
 };

template<class _Ty>
 struct _Unrefwrap
 {
 using _Ty1 = decay_t<_Ty>;
 using type = typename _Unrefwrap_helper<_Ty1>::type;
 static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
 };


template<class _Ty>
 struct _Is_swappable;


template<class _Ty>
 struct _Is_nothrow_swappable;







template<class _Ty,
 class = void> inline

 void swap(_Ty&, _Ty&)
  noexcept(is_nothrow_move_constructible_v<_Ty> && is_nothrow_move_assignable_v<_Ty>);


template<class _Ty,
 size_t _Size,
 class = enable_if_t<_Is_swappable<_Ty>::value>> inline
 void swap(_Ty (&)[_Size], _Ty (&)[_Size])
  noexcept(_Is_nothrow_swappable<_Ty>::value);


template<class _Ty1,
 class _Ty2,
 class = void>
 struct _Swappable_with_helper
  : false_type
 {
 };

struct _Swappable_with_helper_unique_type
 {
 };

template<class _Ty1,
 class _Ty2>
 struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
  _Swappable_with_helper_unique_type,
  decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
  : true_type
 {
 };


template<class _Ty1,
 class _Ty2>
 struct _Is_swappable_with
  : _Conjunction_t<
   _Swappable_with_helper<_Ty1, _Ty2>,
   _Swappable_with_helper<_Ty2, _Ty1>>
 {

 };


template<class _Ty>
 struct _Is_swappable
  : _Is_swappable_with<
   add_lvalue_reference_t<_Ty>,
   add_lvalue_reference_t<_Ty>>::type
 {
 };


template<class _Ty1,
 class _Ty2>
 struct _Swap_cannot_throw
  : bool_constant<noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
     && noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()))>
 {


 };


template<class _Ty1,
 class _Ty2>
 struct _Is_nothrow_swappable_with
  : _Conjunction_t<
   _Is_swappable_with<_Ty1, _Ty2>,
   _Swap_cannot_throw<_Ty1, _Ty2>>
 {

 };


template<class _Ty>
 struct _Is_nothrow_swappable
  : _Is_nothrow_swappable_with<
   add_lvalue_reference_t<_Ty>,
   add_lvalue_reference_t<_Ty>>::type
 {
 };
# 2228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
namespace _Has_ADL_swap_detail {
 void swap();

 struct _Has_ADL_swap_unique_type
  {
  };

 template<class,
  class = void>
  struct _Has_ADL_swap
   : false_type
  {};
 template<class _Ty>
  struct _Has_ADL_swap<_Ty,
   void_t<_Has_ADL_swap_unique_type,
    decltype(swap(::std:: declval<_Ty&>(), ::std:: declval<_Ty&>()))>>
   : true_type
  {};
}
using _Has_ADL_swap_detail::_Has_ADL_swap;

template<class _Ty>
 struct _Is_trivially_swappable
  : _Conjunction_t<
   is_trivially_destructible<_Ty>,
   is_trivially_move_constructible<_Ty>,
   is_trivially_move_assignable<_Ty>,
   negation<_Has_ADL_swap<_Ty>>>
 {

 };

template<class _Ty>
             constexpr bool _Is_trivially_swappable_v = _Is_trivially_swappable<_Ty>::value;
# 2305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits" 3
inline size_t _Hash_bytes(const unsigned char *_First, size_t _Count) noexcept
 {






 static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
 const size_t _FNV_offset_basis = 2166136261U;
 const size_t _FNV_prime = 16777619U;


 size_t _Val = _FNV_offset_basis;
 for (size_t _Next = 0; _Next < _Count; ++_Next)
  {
  _Val ^= (size_t)_First[_Next];
  _Val *= _FNV_prime;
  }
 return (_Val);
 }


template<class _Kty> inline
 size_t _Hash_representation(const _Kty& _Keyval) noexcept
 {
 return (_Hash_bytes(&reinterpret_cast<const unsigned char&>(_Keyval), sizeof(_Kty)));
 }


template<class _Kty> inline
 size_t _Hash_array_representation(const _Kty * const _First, const size_t _Count) noexcept
 {
 return (_Hash_bytes(reinterpret_cast<const unsigned char *>(_First), _Count * sizeof(_Kty)));
 }


template<class _Kty>
 struct hash;

template<class _Kty,
 bool _Enabled>
 struct _Conditionally_enabled_hash
 {
                                   typedef _Kty argument_type;
                                   typedef size_t result_type;

 size_t operator()(const _Kty& _Keyval) const noexcept(noexcept(hash<_Kty>::_Do_hash(_Keyval)))
  {
  return (hash<_Kty>::_Do_hash(_Keyval));
  }
 };

template<class _Kty>
 struct _Conditionally_enabled_hash<_Kty, false>
 {
 _Conditionally_enabled_hash() = delete;
 _Conditionally_enabled_hash(const _Conditionally_enabled_hash&) = delete;
 _Conditionally_enabled_hash(_Conditionally_enabled_hash&&) = delete;
 _Conditionally_enabled_hash& operator=(const _Conditionally_enabled_hash&) = delete;
 _Conditionally_enabled_hash& operator=(_Conditionally_enabled_hash&&) = delete;
 };


template<class _Kty>
 struct hash
  : _Conditionally_enabled_hash<_Kty, !is_const_v<_Kty> && !is_volatile_v<_Kty>
   && (is_enum_v<_Kty> || is_integral_v<_Kty> || is_pointer_v<_Kty>)>
 {
 static size_t _Do_hash(const _Kty& _Keyval) noexcept
  {
  return (_Hash_representation(_Keyval));
  }
 };

template<>
 struct hash<float>
 {
                                   typedef float argument_type;
                                   typedef size_t result_type;
 size_t operator()(const float _Keyval) const noexcept
  {
  return (_Hash_representation(_Keyval == 0.0F ? 0.0F : _Keyval));
  }
 };

template<>
 struct hash<double>
 {
                                   typedef double argument_type;
                                   typedef size_t result_type;
 size_t operator()(const double _Keyval) const noexcept
  {
  return (_Hash_representation(_Keyval == 0.0 ? 0.0 : _Keyval));
  }
 };

template<>
 struct hash<long double>
 {
                                   typedef long double argument_type;
                                   typedef size_t result_type;
 size_t operator()(const long double _Keyval) const noexcept
  {
  return (_Hash_representation(_Keyval == 0.0L ? 0.0L : _Keyval));
  }
 };

template<>
 struct hash<nullptr_t>
 {
                                   typedef nullptr_t argument_type;
                                   typedef size_t result_type;
 size_t operator()(nullptr_t) const noexcept
  {
  void * _Null{};
  return (_Hash_representation(_Null));
  }
 };


struct _Unique_tag_is_nothrow_hashable
 {
 };

template<class _Kty,
 class = void>
 struct _Is_nothrow_hashable
  : false_type
 {
 };

template<class _Kty>
 struct _Is_nothrow_hashable<_Kty, void_t<
  _Unique_tag_is_nothrow_hashable,
  decltype(hash<_Kty>{}(::std:: declval<const _Kty&>()))>>
  : bool_constant<noexcept(hash<_Kty>{}(::std:: declval<const _Kty&>()))>
 {
 };


#pragma warning(push)
#pragma warning(disable: 4996)
namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
using ::std:: hash;
}
#pragma warning(pop)
# 16707564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


struct _Invoker_pmf_object { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmf_refwrap { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return ((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmf_pointer { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmd_object { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std:: forward<_Ty1>(_Arg1).*_Pmd)) -> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd) { return (::std:: forward<_Ty1>(_Arg1).*_Pmd); } }; struct _Invoker_pmd_refwrap { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std:: forward<_Ty1>(_Arg1).get().*_Pmd)) -> decltype(::std:: forward<_Ty1>(_Arg1).get().*_Pmd) { return (::std:: forward<_Ty1>(_Arg1).get().*_Pmd); } }; struct _Invoker_pmd_pointer { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)) -> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd) { return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd); } }; struct _Invoker_functor { template<class _Callable, class... _Types> static inline auto _Call(_Callable&& _Obj, _Types&&... _Args) noexcept(noexcept(::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...))) -> decltype(::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...)) { return (::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...)); } }; template<class _Callable, class _Ty1, class _Decayed = decay_t<_Callable>, bool _Is_pmf = is_member_function_pointer_v<_Decayed>, bool _Is_pmd = is_member_object_pointer_v<_Decayed>> struct _Invoker1; template<class _Callable, class _Ty1, class _Decayed> struct _Invoker1<_Callable, _Ty1, _Decayed, true, false> : conditional_t<is_base_of_v< typename _Is_memfunptr<_Decayed>::_Class_type, decay_t<_Ty1>>, _Invoker_pmf_object, conditional_t<_Unrefwrap<_Ty1>::_Is_refwrap, _Invoker_pmf_refwrap, _Invoker_pmf_pointer >> { }; template<class _Callable, class _Ty1, class _Decayed> struct _Invoker1<_Callable, _Ty1, _Decayed, false, true> : conditional_t<is_base_of_v< typename _Is_member_object_pointer<_Decayed>::_Class_type, decay_t<_Ty1>>, _Invoker_pmd_object, conditional_t<_Unrefwrap<_Ty1>::_Is_refwrap, _Invoker_pmd_refwrap, _Invoker_pmd_pointer >> { }; template<class _Callable, class _Ty1, class _Decayed> struct _Invoker1<_Callable, _Ty1, _Decayed, false, false> : _Invoker_functor { }; template<class _Callable, class... _Types> struct _Invoker; template<class _Callable> struct _Invoker<_Callable> : _Invoker_functor { }; template<class _Callable, class _Ty1, class... _Types2> struct _Invoker<_Callable, _Ty1, _Types2...> : _Invoker1<_Callable, _Ty1> { }; template<class _Callable, class... _Types> inline auto invoke(_Callable&& _Obj, _Types&&... _Args) noexcept(noexcept(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))) -> decltype(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)) { return (_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)); }
# 16707578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"
template<class _Rx,
 bool = is_void_v<_Rx>>
 struct _Invoker_ret
 {
 };

template<class _Cv_void>
 struct _Invoker_ret<_Cv_void, true>
 {
 template<class... _Valtys>
  static void _Call(_Valtys&&... _Vals)
# 15732478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  {
# 16707564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  ::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
# 15732478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  }
 };

template<class _Rx>
 struct _Invoker_ret<_Rx, false>
 {
 template<class... _Valtys>
  static _Rx _Call(_Valtys&&... _Vals)
# 15732478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  {
# 16707564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
# 15732478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  }
 };

template<>
 struct _Invoker_ret<_Unforced, false>
 {
 template<class... _Valtys>
  static auto _Call(_Valtys&&... _Vals)
  -> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
# 15732478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  {
# 16707564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
# 15732478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\type_traits"


  }
 };

}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\exception" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

                                                  bool __cdecl uncaught_exception() noexcept;
              int __cdecl uncaught_exceptions() noexcept;

}




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 3
 extern "C" {
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 3
typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 3
void* __cdecl _alloca( size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);


    __declspec(dllimport) int __cdecl _heapmin(void);


        __declspec(dllimport) int __cdecl _heapwalk( _HEAPINFO* _EntryInfo);



                       __declspec(dllimport) int __cdecl _heapchk(void);


    __declspec(dllimport) int __cdecl _resetstkoflw(void);
# 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 3
    typedef char __static_assert_t[(sizeof(unsigned int) <= 8) != 0];


#pragma warning(push)
#pragma warning(disable: 6540)

 __inline void* _MarkAllocaS( void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 8;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 8;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

#pragma warning(pop)
# 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 3
#pragma warning(push)
#pragma warning(disable: 6014)
 __inline void __cdecl _freea( void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 8;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }






        }
    }
#pragma warning(pop)
# 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 3
}
# 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\malloc.h" 3
#pragma pack(pop)
# 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\exception" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_exception.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_exception.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\eh.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\eh.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_terminate.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_terminate.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_terminate.h" 3
 extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_terminate.h" 3
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();



        __declspec(dllimport) terminate_handler __cdecl set_terminate(
                     terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();





}
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_terminate.h" 3
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\eh.h" 2 3




#pragma pack(push, 8)
# 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\eh.h" 3
 extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;



             __declspec(noreturn) void __cdecl unexpected() noexcept(false);



                 unexpected_handler __cdecl set_unexpected(
                     unexpected_handler _NewUnexpectedHandler
            ) throw();

                 unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

                 _se_translator_function __cdecl _set_se_translator(
                     _se_translator_function _NewSETranslator
            );



    class type_info;

             int __cdecl _is_exception_typeof(
             type_info const& _Type,
             _EXCEPTION_POINTERS* _ExceptionPtr
        );

             bool __cdecl __uncaught_exception();
             int __cdecl __uncaught_exceptions();



}
# 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\eh.h" 3
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_exception.h" 2 3






#pragma pack(push, 8)


#pragma pack(push, 8)
# 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_exception.h" 3
 extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool _DoFree;
};

         void __cdecl __std_exception_copy(
          __std_exception_data const* _From,
          __std_exception_data* _To
    );

         void __cdecl __std_exception_destroy(
            __std_exception_data* _Data
    );

}
# 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_exception.h" 3
#pragma pack(pop)



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

}


#pragma pack(pop)
# 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\exception" 2 3


namespace std {

using ::terminate;


using ::set_terminate;
using ::terminate_handler;

inline terminate_handler __cdecl get_terminate() noexcept
 {
 return (_get_terminate());
 }



using ::unexpected;


using ::set_unexpected;
using ::unexpected_handler;

inline unexpected_handler __cdecl get_unexpected() noexcept
 {
 return (_get_unexpected());
 }



}
# 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\exception" 3
              void __cdecl __ExceptionPtrCreate( void*);
              void __cdecl __ExceptionPtrDestroy( void*);
              void __cdecl __ExceptionPtrCopy( void*, const void*);
              void __cdecl __ExceptionPtrAssign( void*, const void*);
              bool __cdecl __ExceptionPtrCompare( const void*, const void*);
              bool __cdecl __ExceptionPtrToBool( const void*);
              void __cdecl __ExceptionPtrSwap( void*, void*);
              void __cdecl __ExceptionPtrCurrentException( void*);
[[noreturn]] void __cdecl __ExceptionPtrRethrow( const void*);
              void __cdecl __ExceptionPtrCopyException(
         void*, const void*, const void*);

namespace std {

class exception_ptr
 {
public:
 exception_ptr() noexcept
  {
  __ExceptionPtrCreate(this);
  }

 exception_ptr(nullptr_t) noexcept
  {
  __ExceptionPtrCreate(this);
  }

 ~exception_ptr() noexcept
  {
  __ExceptionPtrDestroy(this);
  }

 exception_ptr(const exception_ptr& _Rhs) noexcept
  {
  __ExceptionPtrCopy(this, &_Rhs);
  }

 exception_ptr& operator=(const exception_ptr& _Rhs) noexcept
  {
  __ExceptionPtrAssign(this, &_Rhs);
  return *this;
  }

 exception_ptr& operator=(nullptr_t) noexcept
  {
  exception_ptr _Ptr;
  __ExceptionPtrAssign(this, &_Ptr);
  return *this;
  }

 explicit operator bool() const noexcept
  {
  return __ExceptionPtrToBool(this);
  }

 [[noreturn]] void _RethrowException() const
  {
  __ExceptionPtrRethrow(this);
  }

 static exception_ptr _Current_exception() noexcept
  {
  exception_ptr _Retval;
  __ExceptionPtrCurrentException(&_Retval);
  return _Retval;
  }

 static exception_ptr _Copy_exception( void* _Except, const void* _Ptr)
  {
  exception_ptr _Retval;
  if (!_Ptr)
   {

   return _Retval;
   }
  __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
  return _Retval;
  }

private:




 void* _Data1;
 void* _Data2;



 };

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) noexcept
 {
 __ExceptionPtrSwap(&_Lhs, &_Rhs);
 }

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept
 {
 return __ExceptionPtrCompare(&_Lhs, &_Rhs);
 }

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) noexcept
 {
 return !_Rhs;
 }

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) noexcept
 {
 return !_Lhs;
 }

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) noexcept
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) noexcept
 {
 return !(_Lhs == _Rhs);
 }

inline exception_ptr current_exception() noexcept
 {
 return exception_ptr::_Current_exception();
 }

[[noreturn]] inline void rethrow_exception( exception_ptr _Ptr)
 {
 _Ptr._RethrowException();
 }

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
 {
 return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
 }


class nested_exception
 {
public:
 nested_exception() noexcept
  : _Exc(::std:: current_exception())
  {
  }

 nested_exception(const nested_exception&) noexcept = default;
 nested_exception& operator=(const nested_exception&) noexcept = default;
 virtual ~nested_exception() noexcept
  {
  }

 [[noreturn]] void rethrow_nested() const
  {
  if (_Exc)
   ::std:: rethrow_exception(_Exc);
  else
   ::std:: terminate();
  }

 exception_ptr nested_ptr() const noexcept
  {
  return (_Exc);
  }

private:
 exception_ptr _Exc;
 };


template<class _Ty,
 class _Uty>
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested(_Ty&& _Arg)
  : _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
  {
  }
 };

template<class _Ty>
 [[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
 {
 using _Uty = decay_t<_Ty>;
 using _Glued = _With_nested<_Ty, _Uty>;

 throw _Glued(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty>
 [[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
 {
 throw ::std:: forward<_Ty>(_Arg);
 }

template<class _Ty>
 [[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
 {
 typedef decay_t<_Ty> _Uty;

 bool_constant<
  is_class_v<_Uty>
  && !is_base_of_v<nested_exception, _Uty>
  && !is_final_v<_Uty>> _Tag;

 _Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
 }



template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
 {
 const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

 if (_Nested)
  _Nested->rethrow_nested();
 }

template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *, false_type)
 {
 }

template<class _Ty> inline
 void rethrow_if_nested(const _Ty& _Arg)
 {
 bool_constant<is_polymorphic_v<_Ty> && (!is_base_of_v<nested_exception, _Ty>
  || is_convertible_v<_Ty *, nested_exception *>)> _Tag;

 _Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
 }





}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstdint" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdint.h" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdint.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdint.h" 2 3




typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cstdint" 2 3



namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
}

}
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ymath.h" 1 3






#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)






extern "C" {
# 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ymath.h" 3
void __cdecl _Feraise(int);

typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


              double __cdecl _Cosh(double, double);
              short __cdecl _Dtest(double *);
              double __cdecl _Sinh(double, double);

              short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport) _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


              float __cdecl _FCosh(float, float);
              short __cdecl _FDtest(float *);
              float __cdecl _FSinh(float, float);

              short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport) _Dconst _FDenorm, _FInf, _FNan, _FSnan;


              long double __cdecl _LCosh(long double, long double);
              short __cdecl _LDtest(long double *);
              long double __cdecl _LSinh(long double, long double);

              short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport) _Dconst _LDenorm, _LInf, _LNan, _LSnan;



}




#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cfloat" 1 3






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\float.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\float.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\float.h" 3
 extern "C" {
# 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\float.h" 3
__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) unsigned int __cdecl _controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
              unsigned int* _CurrentState,
              unsigned int _NewValue,
              unsigned int _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);




    __declspec(dllimport) void __cdecl _statusfp2(
                  unsigned int* _X86Status,
                  unsigned int* _SSE2Status
        );







__declspec(dllimport) unsigned int __cdecl _control87(
         unsigned int _NewValue,
         unsigned int _Mask
    );



    __declspec(dllimport) int __cdecl __control87_2(
                  unsigned int _NewValue,
                  unsigned int _Mask,
                  unsigned int* _X86ControlWord,
                  unsigned int* _Sse2ControlWord
        );




__declspec(dllimport) int* __cdecl __fpecode(void);




__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);
# 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\float.h" 3
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl _scalb( double _X, long _Y);
               __declspec(dllimport) double __cdecl _logb( double _X);
               __declspec(dllimport) double __cdecl _nextafter( double _X, double _Y);
               __declspec(dllimport) int __cdecl _finite( double _X);
               __declspec(dllimport) int __cdecl _isnan( double _X);
               __declspec(dllimport) int __cdecl _fpclass( double _X);
# 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\float.h" 3
    __declspec(dllimport) void __cdecl fpreset(void);
# 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\float.h" 3
}
# 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\float.h" 3
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cfloat" 2 3
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits" 2 3



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cwchar" 1 3





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 1 3
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wconio.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wconio.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wconio.h" 3
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
                                                  wchar_t* _Buffer,
                                                  size_t _BufferCount,
                                                  size_t* _SizeRead
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(wchar_t (&_Buffer)[_Size], size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }







    __declspec(dllimport) int __cdecl _cputws(
               wchar_t const* _Buffer
        );

                       __declspec(dllimport) wint_t __cdecl _getwch (void);
                       __declspec(dllimport) wint_t __cdecl _getwche (void);
                       __declspec(dllimport) wint_t __cdecl _putwch ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch( wint_t _Character);

                       __declspec(dllimport) wint_t __cdecl _getwch_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _putwch_nolock ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch_nolock( wint_t _Character);
# 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vcwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p(
                                      const wchar_t* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _cwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                               unsigned __int64 _Options,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );

                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)
 }



    __inline int __cdecl _vcwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwscanf_s(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






}
# 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wconio.h" 3
#pragma pack(pop)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wctype.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wctype.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wctype.h" 3
 extern "C" {
# 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wctype.h" 3
    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t* __cdecl __pwctype_func(void);
# 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wctype.h" 3
               __declspec(dllimport) int __cdecl iswalnum ( wint_t _C);
               __declspec(dllimport) int __cdecl iswalpha ( wint_t _C);
               __declspec(dllimport) int __cdecl iswascii ( wint_t _C);
               __declspec(dllimport) int __cdecl iswblank ( wint_t _C);
               __declspec(dllimport) int __cdecl iswcntrl ( wint_t _C);


               __declspec(dllimport) int __cdecl iswdigit ( wint_t _C);

               __declspec(dllimport) int __cdecl iswgraph ( wint_t _C);
               __declspec(dllimport) int __cdecl iswlower ( wint_t _C);
               __declspec(dllimport) int __cdecl iswprint ( wint_t _C);
               __declspec(dllimport) int __cdecl iswpunct ( wint_t _C);
               __declspec(dllimport) int __cdecl iswspace ( wint_t _C);
               __declspec(dllimport) int __cdecl iswupper ( wint_t _C);
               __declspec(dllimport) int __cdecl iswxdigit ( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsymf( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsym ( wint_t _C);

               __declspec(dllimport) int __cdecl _iswalnum_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswalpha_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswblank_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcntrl_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswdigit_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswgraph_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswlower_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswprint_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswpunct_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswspace_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswupper_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsymf_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsym_l ( wint_t _C, _locale_t _Locale);


               __declspec(dllimport) wint_t __cdecl towupper( wint_t _C);
               __declspec(dllimport) wint_t __cdecl towlower( wint_t _C);
               __declspec(dllimport) int __cdecl iswctype( wint_t _C, wctype_t _Type);

               __declspec(dllimport) wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);



                   __declspec(dllimport) int __cdecl isleadbyte( int _C);
                   __declspec(dllimport) int __cdecl _isleadbyte_l( int _C, _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype( wint_t _C, wctype_t _Type);
# 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wctype.h" 3
}
# 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wctype.h" 3
#pragma pack(pop)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h" 3
 extern "C" {
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h" 3
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );



__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                     int _Drive,
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );







__declspec(dllimport) int __cdecl _wchdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wmkdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wrmdir(
           wchar_t const* _Path
    );



}
# 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h" 3
#pragma pack(pop)
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wio.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wio.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_share.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wio.h" 2 3


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wio.h" 3
 extern "C" {


#pragma warning(push)
#pragma warning(disable: 4820)
# 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wio.h" 3
typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata32i64_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __int64 size;
    wchar_t name[260];
};

struct _wfinddata64i32_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata64_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __int64 size;
    wchar_t name[260];
};
# 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wio.h" 3
__declspec(dllimport) int __cdecl _waccess(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) int __cdecl _wchmod(
           wchar_t const* _FileName,
           int _Mode
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wcreat(
           wchar_t const* _FileName,
           int _PermissionMode
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
           wchar_t const* _FileName,
           struct _wfinddata32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32(
          intptr_t _FindHandle,
          struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
           wchar_t const* _FileName
    );


__declspec(dllimport) int __cdecl _wrename(
           wchar_t const* _OldFileName,
           wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
                                    wchar_t* _TemplateName,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);






__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
           wchar_t const* _FileName,
           struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
           wchar_t const* _FileName,
           struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
           wchar_t const* _FileName,
           struct _wfinddata64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32i64(
          intptr_t _FindHandle,
          struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64i32(
          intptr_t _FindHandle,
          struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64(
          intptr_t _FindHandle,
          struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
           int* _FileHandle,
           wchar_t const* _FileName,
           int _OpenFlag,
           int _ShareFlag,
           int _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
           wchar_t const* _FileName,
           int _OFlag,
           int _ShFlag,
           int _PMode,
           int* _PFileHandle,
           int _BSecure
    );






    extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wsopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _ShFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }
# 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wio.h" 3
#pragma warning(pop)


}
# 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wio.h" 3
#pragma pack(pop)
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h" 3
 extern "C" {






        __declspec(dllimport) intptr_t __cdecl _wexecl(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexecle(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexeclp(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexeclpe(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexecv(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wexecve(
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wexecvp(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wexecvpe(
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnl(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnle(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnlp(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnv(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnve(
                       int _Mode,
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnvp(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                       int _Mode,
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

        __declspec(dllimport) int __cdecl _wsystem(
                       wchar_t const* _Command
            );






}
# 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h" 3
#pragma pack(pop)
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 2 3




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wtime.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wtime.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wtime.h" 3
 extern "C" {
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wtime.h" 3
struct tm
{
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))


__declspec(dllimport) wchar_t* __cdecl _wasctime(
         struct tm const* _Tm
    );



__declspec(dllimport) errno_t __cdecl _wasctime_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(wchar_t (&_Buffer)[_Size], struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wtime.h" 3
__declspec(dllimport) size_t __cdecl wcsftime(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _wcsftime_l(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) errno_t __cdecl _wstrdate_s(
                                                                                   wchar_t* _Buffer,
                                                                                   size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);





__declspec(dllimport) errno_t __cdecl _wstrtime_s(
                                                                                   wchar_t* _Buffer,
                                                                                   size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
# 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wtime.h" 3
#pragma warning(push)
#pragma warning(disable: 4996)
# 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wtime.h" 3
 static __inline wchar_t * __cdecl _wctime(
                 time_t const* const _Time)
        {
            return _wctime64(_Time);
        }


        static __inline errno_t __cdecl _wctime_s(
                                                                wchar_t* const _Buffer,
                                                                size_t const _SizeInWords,
                                                                time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }



#pragma warning(pop)




}
# 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\corecrt_wtime.h" 3
#pragma pack(pop)
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/stat.h" 1 3
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/stat.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/types.h" 1 3
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/types.h" 3
    typedef unsigned short _ino_t;


        typedef _ino_t ino_t;
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/types.h" 3
    typedef unsigned int _dev_t;


        typedef _dev_t dev_t;
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/types.h" 3
    typedef long _off_t;


        typedef _off_t off_t;
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/stat.h" 2 3


#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/stat.h" 3
 extern "C" {


#pragma warning(push)
#pragma warning(disable: 4820)







struct _stat32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat32i64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat64i32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};

struct _stat64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};




    struct stat
    {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
    };
# 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/stat.h" 3
__declspec(dllimport) int __cdecl _fstat32(
          int _FileHandle,
          struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
          int _FileHandle,
          struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
          int _FileHandle,
          struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
          int _FileHandle,
          struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
           char const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
           char const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
           char const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
           char const* _FileName,
           struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
           wchar_t const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
           wchar_t const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
           wchar_t const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
           wchar_t const* _FileName,
           struct _stat64* _Stat
    );
# 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/stat.h" 3
        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }





#pragma warning(pop)


}
# 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\sys/stat.h" 3
#pragma pack(pop)
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 2 3




#pragma pack(push, 8)
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 3
 extern "C" {
# 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 3
typedef wchar_t _Wint_t;






    __declspec(dllimport) wchar_t* __cdecl _wsetlocale(
                   int _Category,
                   wchar_t const* _Locale
        );


    __declspec(dllimport) _locale_t __cdecl _wcreate_locale(
               int _Category,
               wchar_t const* _Locale
        );



    __declspec(dllimport) wint_t __cdecl btowc(
             int _Ch
        );

    __declspec(dllimport) size_t __cdecl mbrlen(
                                                       char const* _Ch,
                                                       size_t _SizeInBytes,
                                                       mbstate_t* _State
        );

    __declspec(dllimport) size_t __cdecl mbrtowc(
                                                       wchar_t* _DstCh,
                                                       char const* _SrcCh,
                                                       size_t _SizeInBytes,
                                                       mbstate_t* _State
        );


    __declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                                          size_t* _Retval,
                                          wchar_t* _Dst,
                                          size_t _Size,
                                          char const** _PSrc,
                                          size_t _N,
                                          mbstate_t* _State
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(size_t* _Retval, wchar_t (&_Dest)[_Size], char const** _PSource, size_t _Count, mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
# 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest, char const** _PSrc, size_t _Count, mbstate_t* _State);
# 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 3
    __declspec(dllimport) errno_t __cdecl wcrtomb_s(
                                         size_t* _Retval,
                                         char* _Dst,
                                         size_t _SizeInBytes,
                                         wchar_t _Ch,
                                         mbstate_t* _State
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t _Source, mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
# 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb( char *_Dest, wchar_t _Source, mbstate_t* _State);







    __declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                                          size_t* _Retval,
                                                          char* _Dst,
                                                          size_t _SizeInBytes,
                                                          wchar_t const** _Src,
                                                          size_t _Size,
                                                          mbstate_t* _State
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t const** _PSrc, size_t _Count, mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
# 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs( char *_Dest, wchar_t const** _PSource, size_t _Count, mbstate_t* _State);







    __declspec(dllimport) int __cdecl wctob(
             wint_t _WCh
        );




        errno_t __cdecl wmemcpy_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );


        errno_t __cdecl wmemmove_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );



    __inline int __cdecl fwide(
                 FILE* _F,
                 int _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
                 mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
                       wchar_t const* _S,
                       wchar_t _C,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
                       wchar_t const* _S1,
                       wchar_t const* _S2,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }



    __inline
    wchar_t* __cdecl wmemcpy(
                             wchar_t* _S1,
                             wchar_t const* _S2,
                             size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4995 4996 6386)
 return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }

    __inline
    wchar_t* __cdecl wmemmove(
                                 wchar_t* _S1,
                                 wchar_t const* _S2,
                                 size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
 return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }



    __inline wchar_t* __cdecl wmemset(
                             wchar_t* _S,
                             wchar_t _C,
                             size_t _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }



        extern "C++" inline wchar_t* __cdecl wmemchr(
                           wchar_t* _S,
                           wchar_t _C,
                           size_t _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }







}
# 283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\wchar.h" 3
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cwchar" 2 3


typedef mbstate_t _Mbstatet;


namespace std {
#pragma warning(push)
#pragma warning(disable: 4995)

using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;

#pragma warning(pop)
}
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {
# 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits" 3
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static constexpr bool has_denorm_loss = (bool)(false);
 static constexpr bool has_infinity = (bool)(false);
 static constexpr bool has_quiet_NaN = (bool)(false);
 static constexpr bool has_signaling_NaN = (bool)(false);
 static constexpr bool is_bounded = (bool)(false);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(false);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr bool is_specialized = (bool)(false);
 static constexpr bool tinyness_before = (bool)(false);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_toward_zero);
 static constexpr int digits = (int)(0);
 static constexpr int digits10 = (int)(0);

 static constexpr int max_digits10 = (int)(0);

 static constexpr int max_exponent = (int)(0);
 static constexpr int max_exponent10 = (int)(0);
 static constexpr int min_exponent = (int)(0);
 static constexpr int min_exponent10 = (int)(0);
 static constexpr int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static constexpr _Ty (min)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty (max)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty lowest() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty round_error() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty infinity() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (_Ty());
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct _Num_int_base
 : public _Num_base
 {
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(true);
 static constexpr bool is_integer = (bool)(true);
 static constexpr bool is_modulo = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr int radix = (int)(2);
 };


struct _Num_float_base
 : public _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static constexpr bool has_denorm_loss = (bool)(true);
 static constexpr bool has_infinity = (bool)(true);
 static constexpr bool has_quiet_NaN = (bool)(true);
 static constexpr bool has_signaling_NaN = (bool)(true);
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(true);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr bool tinyness_before = (bool)(true);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_to_nearest);
 static constexpr int radix = (int)(2);
 };


template<> class numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)((-128) != 0);
 static constexpr int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
 static constexpr int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((_Ty)0x0000);
  }

 static constexpr _Ty (max)() noexcept
  {
  return ((_Ty)0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(0x0000 != 0);
 static constexpr int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));

 static constexpr int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (false);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (true);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(1);
 static constexpr int digits10 = (int)(0);
 };


template<> class numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 - 1);
 static constexpr int digits10 = (int)((8 - 1) * 301L / 1000);
 };


template<> class numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8);
 static constexpr int digits10 = (int)(8 * 301L / 1000);
 };


template<> class numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-32768));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (32767);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (short) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);

 };



template<> class numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned short));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);

 };



template<> class numeric_limits<char16_t>
 : public _Num_int_base
 {
public:
 typedef char16_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char16_t));
 static constexpr int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000);

 };


template<> class numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647 - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (int) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned int));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);

 };


template<> class numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647L - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647L);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffUL);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);

 };


template<> class numeric_limits<char32_t>
 : public _Num_int_base
 {
public:
 typedef char32_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char32_t));
 static constexpr int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000);

 };


template<> class numeric_limits<long long>
 : public _Num_int_base
 {
public:
 typedef long long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-9223372036854775807i64 - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (9223372036854775807i64);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long long>
 : public _Num_int_base
 {
public:
 typedef unsigned long long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffffffffffui64);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long long) * 301L / 1000);

 };


template<> class numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (1.175494351e-38F);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (3.402823466e+38F);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (1.192092896e-07F);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5F);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (1.401298464e-45F);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_valf());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nanf("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nansf("1"));
  }

 static constexpr int digits = (int)(24);
 static constexpr int digits10 = (int)(6);

 static constexpr int max_digits10 = (int)(2 + 24 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)128);
 static constexpr int max_exponent10 = (int)((int)38);
 static constexpr int min_exponent = (int)((int)(-125));
 static constexpr int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_val());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nan("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nans("1"));
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };


template<> class numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5L);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_val());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nan("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nans("1"));
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };
# 1482 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\limits" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\new" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_new.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_new.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_new.h" 2 3



extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985)
# 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_new.h" 3
 namespace std
    {
        struct nothrow_t { };




            extern nothrow_t const nothrow;

    }



__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new(
    size_t _Size,
    std::nothrow_t const&
    ) throw();


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();
# 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_new.h" 3
    inline void* __cdecl operator new(size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }





    inline void* __cdecl operator new[](size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }




#pragma warning(pop)
#pragma pack(pop)

}
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\new" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)




namespace std {
# 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\new" 3
typedef void (__cdecl * new_handler) ();



         new_handler __cdecl set_new_handler( new_handler) noexcept;
         new_handler __cdecl get_new_handler() noexcept;
}


#pragma warning(pop)
#pragma pack(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 1 3







# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\utility" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\iosfwd" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\iosfwd" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\crtdbg.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\crtdbg.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_new_debug.h" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_new_debug.h" 3
extern "C++" {

#pragma pack(push, 8)







 __declspec(allocator) void* __cdecl operator new(
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );


    __declspec(allocator) void* __cdecl operator new[](
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );

    void __cdecl operator delete(
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();

    void __cdecl operator delete[](
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();





#pragma pack(pop)

}
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\crtdbg.h" 2 3


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\crtdbg.h" 3
 extern "C" {



typedef void* _HFILE;
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\crtdbg.h" 3
typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*, int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);
# 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\crtdbg.h" 3
typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;
# 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\crtdbg.h" 3
}
# 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\crtdbg.h" 3
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\iosfwd" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

using streamoff = long long;
using streamsize = long long;





extern __declspec(dllimport) const streamoff _BADOFF;



template<class _Statetype>
 class fpos
 {
public:
                    fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(0), _Mystate()
  {
  }

                    fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

                    operator streamoff() const
  {
  return (_Myoff + _Fpos);
  }

 streamoff operator-(const fpos& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 fpos& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 fpos& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 fpos operator+(streamoff _Off) const
  {
  fpos _Tmp = *this;
  return (_Tmp += _Off);
  }

 fpos operator-(streamoff _Off) const
  {
  fpos _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const fpos& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const fpos& _Right) const
  {
  return (!(*this == _Right));
  }

private:
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };





using streampos = fpos<_Mbstatet>;

using wstreampos = streampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 using char_type = _Elem;
 using int_type = _Int_type;
 using pos_type = streampos;
 using off_type = streamoff;
 using state_type = _Mbstatet;

 static int compare( const _Elem * _First1,
                     const _Elem * _First2, size_t _Count) noexcept
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   {
   if (*_First1 != *_First2)
    {
    return (*_First1 < *_First2 ? -1 : +1);
    }
   }

  return (0);
  }

 static size_t length( const _Elem * _First) noexcept
  {
  size_t _Count = 0;
  while (*_First != _Elem())
   {
   ++_Count;
   ++_First;
   }

  return (_Count);
  }

 static _Elem * copy( _Elem * const _First1,
                     const _Elem * _First2, size_t _Count) noexcept
  {
  return (static_cast<_Elem *>(:: memcpy(_First1, _First2, _Count * sizeof(_Elem))));
  }

                                       static _Elem * _Copy_s(
                               _Elem * const _First1, const size_t _Dest_size,
                     const _Elem * const _First2, const size_t _Count) noexcept
  {
  { if (!(_Count <= _Dest_size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (nullptr); } };
  return (copy(_First1, _First2, _Count));
  }

 static const _Elem * find( const _Elem * _First,
  size_t _Count, const _Elem& _Ch) noexcept
  {
  for (; 0 < _Count; --_Count, ++_First)
   {
   if (*_First == _Ch)
    {
    return (_First);
    }
   }

  return (nullptr);
  }

 static _Elem * move( _Elem * const _First1,
                     const _Elem * _First2, size_t _Count) noexcept
  {
  return (static_cast<_Elem *>(:: memmove(_First1, _First2, _Count * sizeof(_Elem))));
  }

 static _Elem * assign( _Elem * const _First,
  size_t _Count, const _Elem _Ch) noexcept
  {
  _Elem * _Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   {
   *_Next = _Ch;
   }

  return (_First);
  }

 static void assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem to_char_type(const int_type& _Meta) noexcept
  {
  return (static_cast<_Elem>(_Meta));
  }

 static constexpr int_type to_int_type(const _Elem& _Ch) noexcept
  {
  return (static_cast<int_type>(_Ch));
  }

 static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type not_eof(const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type eof() noexcept
  {
  return (static_cast<int_type>((-1)));
  }
 };


template<class _Elem>
 struct _WChar_traits
 {
 using char_type = _Elem;
 using int_type = unsigned short;
 using pos_type = streampos;
 using off_type = streamoff;
 using state_type = _Mbstatet;

 static int compare( const _Elem * const _First1,
                      const _Elem * const _First2, const size_t _Count) noexcept
  {
  return (:: wmemcmp(reinterpret_cast<const wchar_t *>(_First1),
   reinterpret_cast<const wchar_t *>(_First2), _Count));
  }

 static size_t length( const _Elem * _First) noexcept
  {
  return (:: wcslen(reinterpret_cast<const wchar_t *>(_First)));
  }

 static _Elem * copy( _Elem * const _First1,
                      const _Elem * const _First2, const size_t _Count) noexcept
  {
  return (reinterpret_cast<_Elem *>(:: wmemcpy(reinterpret_cast<wchar_t *>(_First1),
   reinterpret_cast<const wchar_t *>(_First2), _Count)));
  }

                                           static _Elem * _Copy_s(
                                    _Elem * const _First1, const size_t _Size_in_words,
                      const _Elem * const _First2, const size_t _Count) noexcept
  {
  ::wmemcpy_s((reinterpret_cast<wchar_t *>(_First1)), (_Size_in_words), (reinterpret_cast<const wchar_t *>(_First2)), (_Count));

  return (_First1);
  }

 static const _Elem * find( const _Elem * _First,
   const size_t _Count, const _Elem& _Ch) noexcept
  {
  return (reinterpret_cast<const _Elem *>(:: wmemchr(
   reinterpret_cast<const wchar_t *>(_First), _Ch, _Count)));
  }

 static _Elem * move( _Elem * const _First1,
                      const _Elem * const _First2, const size_t _Count) noexcept
  {
  return (reinterpret_cast<_Elem *>(:: wmemmove(reinterpret_cast<wchar_t *>(_First1),
   reinterpret_cast<const wchar_t *>(_First2), _Count)));
  }

 static _Elem * assign( _Elem * const _First, size_t _Count, _Elem _Ch)
   noexcept
  {
  return (reinterpret_cast<_Elem *>(:: wmemset(reinterpret_cast<wchar_t *>(_First), _Ch, _Count)));
  }

 static void assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem to_char_type(const int_type& _Meta) noexcept
  {
  return (_Meta);
  }

 static constexpr int_type to_int_type(const _Elem& _Ch) noexcept
  {
  return (_Ch);
  }

 static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type not_eof(const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };


template<class _Elem>
 struct char_traits
  : _Char_traits<_Elem, long>
 {
 };


template<>
 struct char_traits<char16_t>
  : _WChar_traits<char16_t>
 {
 };

using u16streampos = streampos;


template<>
 struct char_traits<char32_t>
  : _Char_traits<char32_t, unsigned int>
 {
 };

using u32streampos = streampos;


template<>
 struct char_traits<wchar_t>
  : _WChar_traits<wchar_t>
 {
 };



template<>
 struct char_traits<unsigned short>
  : _WChar_traits<unsigned short>
 {
 };



template<> struct char_traits<char>
 {
 using char_type = char;
 using int_type = int;
 using pos_type = streampos;
 using off_type = streamoff;
 using state_type = _Mbstatet;

 static int compare( const char * const _First1,
                     const char * const _First2, const size_t _Count) noexcept
  {
  return (:: memcmp(_First1, _First2, _Count));
  }

 static size_t length( const char * const _First) noexcept
  {
  return (:: strlen(_First));
  }

 static char * copy( char * const _First1,
                     const char * const _First2, const size_t _Count) noexcept
  {
  return (static_cast<char *>(:: memcpy(_First1, _First2, _Count)));
  }

                                           static char * _Copy_s(
                                   char * const _First1, const size_t _Size_in_bytes,
                     const char * const _First2, const size_t _Count) noexcept
  {
  ::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
  return (_First1);
  }

 static const char * find( const char * const _First,
  const size_t _Count, const char& _Ch) noexcept
  {
  return (static_cast<const char *>(:: memchr(_First, _Ch, _Count)));
  }

 static char * move( char * const _First1,
                     const char * const _First2, const size_t _Count) noexcept
  {
  return (static_cast<char *>(:: memmove(_First1, _First2, _Count)));
  }

 static char * assign( char * const _First,
  const size_t _Count, const char _Ch) noexcept
  {
  return (static_cast<char *>(:: memset(_First, _Ch, _Count)));
  }

 static void assign(char& _Left, const char& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool eq(const char& _Left, const char& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool lt(const char& _Left, const char& _Right) noexcept
  {
  return (static_cast<unsigned char>(_Left) < static_cast<unsigned char>(_Right));
  }

 static constexpr char to_char_type(const int_type& _Meta) noexcept
  {
  return (static_cast<char>(_Meta));
  }

 static constexpr int_type to_int_type(const char& _Ch) noexcept
  {
  return (static_cast<unsigned char>(_Ch));
  }

 static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type not_eof(const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type eof() noexcept
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem>>
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem>>
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem>>
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem>>
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>>
 class basic_fstream;


template<class _Elem,
 class _InIt >
 class num_get;
template<class _Elem,
 class _OutIt >
 class num_put;
template<class _Elem>
 class collate;



using ios = basic_ios<char, char_traits<char>>;
using streambuf = basic_streambuf<char, char_traits<char>>;
using istream = basic_istream<char, char_traits<char>>;
using ostream = basic_ostream<char, char_traits<char>>;
using iostream = basic_iostream<char, char_traits<char>>;
using stringbuf = basic_stringbuf<char, char_traits<char>, allocator<char>>;
using istringstream = basic_istringstream<char, char_traits<char>, allocator<char>>;
using ostringstream = basic_ostringstream<char, char_traits<char>, allocator<char>>;
using stringstream = basic_stringstream<char, char_traits<char>, allocator<char>>;
using filebuf = basic_filebuf<char, char_traits<char>>;
using ifstream = basic_ifstream<char, char_traits<char>>;
using ofstream = basic_ofstream<char, char_traits<char>>;
using fstream = basic_fstream<char, char_traits<char>>;


using wios = basic_ios<wchar_t, char_traits<wchar_t>>;
using wstreambuf = basic_streambuf<wchar_t, char_traits<wchar_t>>;
using wistream = basic_istream<wchar_t, char_traits<wchar_t>>;
using wostream = basic_ostream<wchar_t, char_traits<wchar_t>>;
using wiostream = basic_iostream<wchar_t, char_traits<wchar_t>>;
using wstringbuf = basic_stringbuf<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wistringstream = basic_istringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wostringstream = basic_ostringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wstringstream = basic_stringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wfilebuf = basic_filebuf<wchar_t, char_traits<wchar_t>>;
using wifstream = basic_ifstream<wchar_t, char_traits<wchar_t>>;
using wofstream = basic_ofstream<wchar_t, char_traits<wchar_t>>;
using wfstream = basic_fstream<wchar_t, char_traits<wchar_t>>;







}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\utility" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Ty>

 constexpr const _Ty& _Min_value(const _Ty& _Left, const _Ty& _Right)
  noexcept(noexcept(_Right < _Left))
 {
 return (_Right < _Left ? _Right : _Left);
 }


template<class _Ty>

 constexpr const _Ty& _Max_value(const _Ty& _Left, const _Ty& _Right)
  noexcept(noexcept(_Left < _Right))
 {
 return (_Left < _Right ? _Right : _Left);
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _Ty,
 size_t _Size,
 class> inline
 void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
  noexcept(_Is_nothrow_swappable<_Ty>::value)
 {
 if (&_Left != &_Right)
  {
  _Ty *_First1 = _Left;
  _Ty *_Last1 = _First1 + _Size;
  _Ty *_First2 = _Right;
  for (; _First1 != _Last1; ++_First1, ++_First2)
   ::std:: iter_swap(_First1, _First2);
  }
 }

template<class _Ty,
 class> inline
 void swap(_Ty& _Left, _Ty& _Right)
  noexcept(is_nothrow_move_constructible_v<_Ty> && is_nothrow_move_assignable_v<_Ty>)

 {
 _Ty _Tmp = ::std:: move(_Left);
 _Left = ::std:: move(_Right);
 _Right = ::std:: move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
  noexcept(_Is_nothrow_swappable<_Ty>::value)
 {
 swap(_Left, _Right);
 }


struct piecewise_construct_t
 {
 };

            constexpr piecewise_construct_t piecewise_construct{};


template<class...>
 class tuple;

template<class _Ty1,
 class _Ty2>
 struct pair
 {
 using first_type = _Ty1;
 using second_type = _Ty2;

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  enable_if_t<conjunction_v<
   is_default_constructible<_Uty1>,
   is_default_constructible<_Uty2>
  >, int> = 0>
  constexpr pair()
  : first(), second()
  {
  }

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  enable_if_t<conjunction_v<
   is_copy_constructible<_Uty1>,
   is_copy_constructible<_Uty2>,
   is_convertible<const _Uty1&, _Uty1>,
   is_convertible<const _Uty2&, _Uty2>
  >, int> = 0>
  constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  enable_if_t<conjunction_v<
   is_copy_constructible<_Uty1>,
   is_copy_constructible<_Uty2>,
   negation<conjunction<
    is_convertible<const _Uty1&, _Uty1>,
    is_convertible<const _Uty2&, _Uty2>>>
  >, int> = 0>
  constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 pair(const pair&) = default;
 pair(pair&&) = default;

 template<class _Other1,
  class _Other2,
  enable_if_t<conjunction_v<
   is_constructible<_Ty1, const _Other1&>,
   is_constructible<_Ty2, const _Other2&>,
   is_convertible<const _Other1&, _Ty1>,
   is_convertible<const _Other2&, _Ty2>
  >, int> = 0>
  constexpr pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2,
  enable_if_t<conjunction_v<
   is_constructible<_Ty1, const _Other1&>,
   is_constructible<_Ty2, const _Other2&>,
   negation<conjunction<
    is_convertible<const _Other1&, _Ty1>,
    is_convertible<const _Other2&, _Ty2>>>
  >, int> = 0>
  constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  pair& operator=(const pair<_Other1, _Other2>& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   index_sequence<_Indexes1...>,
   index_sequence<_Indexes2...>);

 template<class... _Types1,
  class... _Types2> inline
  pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2);

 template<class _Other1,
  class _Other2,
  enable_if_t<conjunction_v<
   is_constructible<_Ty1, _Other1>,
   is_constructible<_Ty2, _Other2>,
   is_convertible<_Other1, _Ty1>,
   is_convertible<_Other2, _Ty2>
  >, int> = 0>
  constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  enable_if_t<conjunction_v<
   is_constructible<_Ty1, _Other1>,
   is_constructible<_Ty2, _Other2>,
   negation<conjunction<
    is_convertible<_Other1, _Ty1>,
    is_convertible<_Other2, _Ty2>>>
  >, int> = 0>
  constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  enable_if_t<conjunction_v<
   is_constructible<_Ty1, _Other1>,
   is_constructible<_Ty2, _Other2>,
   is_convertible<_Other1, _Ty1>,
   is_convertible<_Other2, _Ty2>
  >, int> = 0>
  constexpr pair(pair<_Other1, _Other2>&& _Right)
   noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2,
  enable_if_t<conjunction_v<
   is_constructible<_Ty1, _Other1>,
   is_constructible<_Ty2, _Other2>,
   negation<conjunction<
    is_convertible<_Other1, _Ty1>,
    is_convertible<_Other2, _Ty2>>>
  >, int> = 0>
  constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
   noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2>
  pair& operator=(pair<_Other1, _Other2>&& _Right)
  {
  first = ::std:: forward<_Other1>(_Right.first);
  second = ::std:: forward<_Other2>(_Right.second);
  return (*this);
  }

 pair& operator=(pair&& _Right)
  noexcept(is_nothrow_move_assignable_v<_Ty1> && is_nothrow_move_assignable_v<_Ty2>)

  {
  first = ::std:: forward<_Ty1>(_Right.first);
  second = ::std:: forward<_Ty2>(_Right.second);
  return (*this);
  }

 pair& operator=(const pair& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 void swap(pair& _Right)
  noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)

  {
  if (this != ::std:: addressof(_Right))
   {
   _Swap_adl(first, _Right.first);
   _Swap_adl(second, _Right.second);
   }
  }

 _Ty1 first;
 _Ty2 second;
 };

template<class _Ty1,
 class _Ty2,
 class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2>
 constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2>
 constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2>
 constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  (!(_Right.first < _Left.first) && _Left.second < _Right.second));
 }

template<class _Ty1,
 class _Ty2>
 constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2>
 constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2>
 constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _Ty1,
 class _Ty2>
 constexpr pair<typename _Unrefwrap<_Ty1>::type, typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
 {
 using _Mypair = pair<typename _Unrefwrap<_Ty1>::type, typename _Unrefwrap<_Ty2>::type>;
 return (_Mypair(::std:: forward<_Ty1>(_Val1), ::std:: forward<_Ty2>(_Val2)));
 }

 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }
}

namespace std {

template<class _Tuple>
 struct tuple_size;

struct _Unique_tag_tuple_size_sfinae
 {
 };

template<class _Tuple,
 class = void>
 struct _Tuple_size_sfinae
 {
 };

template<class _Tuple>
 struct _Tuple_size_sfinae<_Tuple,
  void_t<
   _Unique_tag_tuple_size_sfinae,
   decltype(tuple_size<_Tuple>::value)>>
  : integral_constant<size_t, tuple_size<_Tuple>::value>
 {
 };

template<class _Tuple>
 struct tuple_size<const _Tuple>
 : _Tuple_size_sfinae<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<volatile _Tuple>
 : _Tuple_size_sfinae<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<const volatile _Tuple>
 : _Tuple_size_sfinae<_Tuple>
 {
 };

template<class _Ty>
             constexpr size_t tuple_size_v = tuple_size<_Ty>::value;

template<size_t _Index,
 class _Tuple>
 struct tuple_element;

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 using _Mybase = tuple_element<_Index, _Tuple>;
 using type = add_const_t<typename _Mybase::type>;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 using _Mybase = tuple_element<_Index, _Tuple>;
 using type = add_volatile_t<typename _Mybase::type>;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 using _Mybase = tuple_element<_Index, _Tuple>;
 using type = add_cv_t<typename _Mybase::type>;
 };

template<size_t _Index,
 class _Tuple>
 using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;


template<class _Ty,
 size_t _Size>
 class array;

template<class _Ty,
 size_t _Size>
 struct tuple_size<array<_Ty, _Size> >
  : integral_constant<size_t, _Size>
 {
 };

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 struct tuple_element<_Idx, array<_Ty, _Size>>
 {
 static_assert(_Idx < _Size, "array index out of bounds");

 using type = _Ty;
 };



template<class... _Types>
 struct tuple_size<tuple<_Types...>>
 : integral_constant<size_t, sizeof...(_Types)>
 {
 };

template<size_t _Index>
 struct tuple_element<_Index, tuple<>>
 {
 static_assert(_Always_false<integral_constant<size_t, _Index>>::value,
  "tuple index out of bounds");
 };

template<class _This,
 class... _Rest>
 struct tuple_element<0, tuple<_This, _Rest...>>
 {
 using type = _This;
 using _Ttype = tuple<_This, _Rest...>;
 };

template<size_t _Index,
 class _This,
 class... _Rest>
 struct tuple_element<_Index, tuple<_This, _Rest...>>
  : public tuple_element<_Index - 1, tuple<_Rest...>>
 {
 };


template<class _Ty1,
 class _Ty2>
 struct tuple_size<pair<_Ty1, _Ty2>>
 : integral_constant<size_t, 2>
 {
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, pair<_Ty1, _Ty2>>
 {
 using type = _Ty1;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, pair<_Ty1, _Ty2>>
 {
 using type = _Ty2;
 };

template<class _Ret,
 class _Pair>
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 0>) noexcept
 {
 return (_Pr.first);
 }

template<class _Ret,
 class _Pair>
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 1>) noexcept
 {
 return (_Pr.second);
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2>
 constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&
  get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 using _Rtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&;
 return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2>
 constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1>
 constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2>
 constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&
  get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 using _Ctype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&;
 return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2>
 constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1>
 constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2>
 constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&
  get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 using _RRtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&;
 return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
 }

template<class _Ty1,
 class _Ty2>
 constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<0>(::std:: move(_Pr)));
 }

template<class _Ty2,
 class _Ty1>
 constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<1>(::std:: move(_Pr)));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2>
 constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&
  get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 using _RRtype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&;
 return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
 }

template<class _Ty1,
 class _Ty2>
 constexpr const _Ty1&& get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<0>(::std:: move(_Pr)));
 }

template<class _Ty2,
 class _Ty1>
 constexpr const _Ty2&& get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<1>(::std:: move(_Pr)));
 }


template<class _Ty,
 class _Other = _Ty> inline
 _Ty exchange(_Ty& _Val, _Other&& _New_val)
 {
 _Ty _Old_val = ::std:: move(_Val);
 _Val = ::std:: forward<_Other>(_New_val);
 return (_Old_val);
 }


template<class _Ty>
 constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
 {
 return (_Val);
 }

template<class _Ty>
 void as_const(const _Ty&&) = delete;
# 704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\utility" 3
namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}


}


#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)




extern "C" {
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void * _First, void * _Last) noexcept;
}


namespace std {
# 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
 {
 void _Orphan_all() noexcept
  {
  }

 void _Swap_all(_Container_base0&) noexcept
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *) noexcept
  {
  }

 const _Container_base0 *_Getcont() const noexcept
  {
  return (0);
  }
 };


struct _Container_proxy
 {
 _Container_proxy() noexcept
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&) noexcept
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&) noexcept
  {
  return (*this);
  }

 ~_Container_base12() noexcept
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const noexcept
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all() noexcept;
 void _Swap_all(_Container_base12&) noexcept;

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12() noexcept
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right) noexcept
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept
  {
  if (_Myproxy == _Right._Myproxy)
   ;
  else if (_Right._Myproxy != 0)
   _Adopt(_Right._Myproxy->_Mycont);
  else
   {




   }

  return (*this);
  }

 ~_Iterator_base12() noexcept
  {




  }

 void _Adopt(const _Container_base12 *_Parent) noexcept
  {
  if (_Parent == 0)
   {




   }
  else
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;
# 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
   _Myproxy = _Parent_proxy;

   }
  }

 void _Clrcont() noexcept
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const noexcept
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext() noexcept
  {
  return (&_Mynextiter);
  }

 void _Orphan_me() noexcept
  {
# 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all() noexcept
 {
# 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right) noexcept
 {




 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }


using _Container_base = _Container_base0;
using _Iterator_base = _Iterator_base0;







struct _Zero_then_variadic_args_t
 {
 };

struct _One_then_variadic_args_t
 {
 };

template<class _Ty1,
 class _Ty2,
 bool = is_empty_v<_Ty1> && !is_final_v<_Ty1>>
 class _Compressed_pair final
  : private _Ty1
 {
private:
 _Ty2 _Myval2;

 using _Mybase = _Ty1;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Ty1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (*this);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (*this);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (*this);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (*this);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };

template<class _Ty1,
 class _Ty2>
 class _Compressed_pair<_Ty1, _Ty2, false> final
 {
private:
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Myval1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (_Myval1);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (_Myval1);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (_Myval1);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (_Myval1);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };


template<class _Ty,
 class = void>
 struct _Is_checked_helper
  : false_type
 {
 };

template<class _Ty>
 struct _Is_checked_helper<_Ty, void_t<
  typename _Ty::_Unchecked_type>>
  : true_type
 {
 };


template<class _Iter> inline
 typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
 {
 return {};
 }


template<class _Iter>
 constexpr _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }


template<class _Iter>
 using _Unchecked_t = decltype(_Unchecked(::std:: declval<_Iter>()));




template<class _Iter> inline
 _Unchecked_t<_Iter> _Unchecked_idl0(_Iter _Src)
 {
 return (_Unchecked(_Src));
 }
# 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Iter,
 class _UIter>
 constexpr _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }
# 517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Fx>
 struct _Ref_fn
 {
 template<class... _Args>
  constexpr decltype(auto) operator()(_Args&&... _Vals)
  {
  return (_Fn(::std:: forward<_Args>(_Vals)...));
  }

 _Fx& _Fn;
 };

template<class _Fn>
             constexpr bool _Pass_functor_by_value_v = sizeof(_Fn) <= sizeof(void *)
  && conjunction_v<
   is_trivially_copy_constructible<_Fn>,
   is_trivially_destructible<_Fn>>;

template<class _Fn,
 enable_if_t<_Pass_functor_by_value_v<_Fn>, int> = 0>
 constexpr _Fn _Pass_fn(_Fn _Val)
 {
 return (_Val);
 }

template<class _Fn,
 enable_if_t<!_Pass_functor_by_value_v<_Fn>, int> = 0>
 constexpr _Ref_fn<_Fn> _Pass_fn(_Fn& _Val)
 {
 return {_Val};
 }



struct input_iterator_tag
 {
 };

struct output_iterator_tag
 {
 };

struct forward_iterator_tag
 : input_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : bidirectional_iterator_tag
 {
 };


struct _General_ptr_iterator_tag
 {
 };

struct _Trivially_copyable_ptr_iterator_tag
 : _General_ptr_iterator_tag
 {
 };

struct _Really_trivial_ptr_iterator_tag
 : _Trivially_copyable_ptr_iterator_tag
 {
 };


struct _Unused_parameter
 {
 constexpr _Unused_parameter() noexcept = default;
 template<class _Ty>
  constexpr _Unused_parameter(_Ty&&) noexcept {}
 };


using _Any_tag = _Unused_parameter;


template<class _Ty>
 using _Algorithm_int_t = conditional_t<is_integral_v<_Ty>, _Ty, ptrdiff_t>;


template<class,
 class = void>
 struct _Iterator_traits_base
 {
 };

template<class _Iter>
 struct _Iterator_traits_base<_Iter, void_t<
  typename _Iter::iterator_category,
  typename _Iter::value_type,
  typename _Iter::difference_type,
  typename _Iter::pointer,
  typename _Iter::reference
  >>
 {
 using iterator_category = typename _Iter::iterator_category;
 using value_type = typename _Iter::value_type;
 using difference_type = typename _Iter::difference_type;

 using pointer = typename _Iter::pointer;
 using reference = typename _Iter::reference;
 };

template<class _Ty,
 bool = is_object_v<_Ty>>
 struct _Iterator_traits_pointer_base
 {
 using iterator_category = random_access_iterator_tag;
 using value_type = remove_cv_t<_Ty>;
 using difference_type = ptrdiff_t;

 using pointer = _Ty *;
 using reference = _Ty&;
 };

template<class _Ty>
 struct _Iterator_traits_pointer_base<_Ty, false>
 {

 };

template<class _Iter>
 struct iterator_traits
  : _Iterator_traits_base<_Iter>
 {
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
  : _Iterator_traits_pointer_base<_Ty>
 {
 };


template<class _Iter>
 using _Iter_value_t = typename iterator_traits<_Iter>::value_type;


template<class _Iter>
 using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;


template<class _Iter>
 using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;


template<class _Ty,
 class = void>
 struct _Is_iterator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_iterator<_Ty, void_t<
  typename iterator_traits<_Ty>::iterator_category
  >>
  : true_type
 {
 };

template<class _Ty>
             constexpr bool _Is_iterator_v = _Is_iterator<_Ty>::value;


template<class _Iter>
             constexpr bool _Is_fwdit_v = is_base_of_v<forward_iterator_tag, _Iter_cat_t<_Iter>>;


template<class _Iter>
             constexpr bool _Is_ranit_v = is_base_of_v<random_access_iterator_tag, _Iter_cat_t<_Iter>>;
# 735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
struct _Distance_unknown {};


template<class _Checked,
 class _Iter> inline
 _Distance_unknown _Idl_distance(const _Iter&, const _Iter&)
 {
 return {};
 }
# 770 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n(_Iter _Src, _Diff)
 {
 return (_Unchecked(_Src));
 }
# 814 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n_backward(_Iter _Src, _Diff)
 {
 return (_Unchecked(_Src));
 }
# 857 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Ty1,
 class _Ty2>
 struct _Is_same_size
  : bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
 {
 };


template<class _Elem,
 bool _Is_enum = is_enum_v<_Elem>>
 struct _Unwrap_enum
 {
 using type = underlying_type_t<_Elem>;
 };

template<class _Elem>
 struct _Unwrap_enum<_Elem, false>
 {
 using type = _Elem;
 };

template<class _Elem>
 using _Unwrap_enum_t = typename _Unwrap_enum<_Elem>::type;


template<class _Ty1,
 class _Ty2>
 struct _Both_or_neither_bool
  : bool_constant<is_same_v<bool, _Ty1> == is_same_v<bool, _Ty2>>
 {
 };


template<class _Source,
 class _Dest>
 struct _Ptr_cat_helper
 {
 using _USource = _Unwrap_enum_t<_Source>;
 using _UDest = _Unwrap_enum_t<_Dest>;
 using type = conditional_t<conjunction_v<
   _Is_same_size<_USource, _UDest>,
   is_integral<_USource>,
   is_integral<_UDest>,
   _Both_or_neither_bool<_USource, _UDest>
  >, _Really_trivial_ptr_iterator_tag, _General_ptr_iterator_tag>;
 };

template<class _Elem>
 struct _Ptr_cat_helper<_Elem, _Elem>
 {
 using type = conditional_t<
  is_trivially_copyable_v<_Elem>,
  conditional_t<is_trivial_v<_Elem>,
   _Really_trivial_ptr_iterator_tag,
   _Trivially_copyable_ptr_iterator_tag>,
  _General_ptr_iterator_tag>;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const _Anything *>
 {
 using type = _Really_trivial_ptr_iterator_tag;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, volatile _Anything *>
 {
 using type = _Really_trivial_ptr_iterator_tag;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const volatile _Anything *>
 {
 using type = _Really_trivial_ptr_iterator_tag;
 };

template<class _Source,
 class _Dest> inline
 _General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 conditional_t<is_trivially_assignable_v<_Dest&, _Source&>,
  typename _Ptr_cat_helper<remove_cv_t<_Source>, remove_cv_t<_Dest>>::type,
  _General_ptr_iterator_tag>
  _Ptr_copy_cat(_Source * const&, _Dest * const&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 _General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 conditional_t<is_trivially_assignable_v<_Dest&, _Source>,
  typename _Ptr_cat_helper<remove_cv_t<_Source>, remove_cv_t<_Dest>>::type,
  _General_ptr_iterator_tag>
  _Ptr_move_cat(_Source * const&, _Dest * const&)
 {
 return {};
 }
# 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _InIt,
 class _Diff>
 inline void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {
# 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
 for (; 0 < _Off; --_Off)
  {
  ++_Where;
  }
 }

template<class _BidIt,
 class _Diff>
 inline void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  {
  ++_Where;
  }


#pragma warning(suppress: 6294)

 for (; _Off < 0; ++_Off)
  {
  --_Where;
  }
 }

template<class _RanIt,
 class _Diff>
 inline void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }

template<class _InIt,
 class _Diff>
 inline void advance(_InIt& _Where, _Diff _Off)
 {

 _Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
 }


template<class _InIt>
 inline _Iter_diff_t<_InIt> _Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
 {
 _Iter_diff_t<_InIt> _Off = 0;
 for (; _First != _Last; ++_First)
  ++_Off;

 return (_Off);
 }

template<class _RanIt>
 inline _Iter_diff_t<_RanIt> _Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
 {
 return (_Last - _First);
 }

template<class _InIt>
 inline _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last)
 {
 return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
 }


template<class _InIt1,
 class _InIt2> inline
 _Iter_diff_t<_InIt1> _Distance_any1(_InIt1 _First1, _InIt1 _Last1, _InIt2, _InIt2,
  input_iterator_tag, input_iterator_tag)
 {
 return (_Distance1(_First1, _Last1, _Iter_cat_t<_InIt1>()));
 }

template<class _InIt1,
 class _InIt2> inline
 _Iter_diff_t<_InIt2> _Distance_any1(_InIt1, _InIt1, _InIt2 _First2, _InIt2 _Last2,
  input_iterator_tag, random_access_iterator_tag)
 {
 return (_Last2 - _First2);
 }

template<class _InIt1,
 class _InIt2,
 class _Anything> inline
 _Iter_diff_t<_InIt1> _Distance_any1(_InIt1 _First1, _InIt1 _Last1, _InIt2, _InIt2,
  random_access_iterator_tag, _Anything)
 {
 return (_Last1 - _First1);
 }

template<class _InIt1,
 class _InIt2> inline
 auto _Distance_any(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2)
 {
 return (static_cast<common_type_t<_Iter_diff_t<_InIt1>, _Iter_diff_t<_InIt2>>>(
  _Distance_any1(_First1, _Last1, _First2, _Last2,
   _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>())));
 }


template<class _InIt>
 constexpr _InIt _Next_iter(_InIt _First)
 {
 return (++_First);
 }


template<class _InIt>
 inline _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
 {
 static_assert(is_base_of_v<input_iterator_tag, _Iter_cat_t<_InIt>>,
  "next requires input iterator");

 ::std:: advance(_First, _Off);
 return (_First);
 }


template<class _BidIt>
 constexpr _BidIt _Prev_iter(_BidIt _First)
 {
 return (--_First);
 }


template<class _BidIt>
 inline _BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
 {
 static_assert(is_base_of_v<bidirectional_iterator_tag, _Iter_cat_t<_BidIt>>,
  "prev requires bidirectional iterator");

 ::std:: advance(_First, -_Off);
 return (_First);
 }


template<class _Ty>
 struct pointer_traits;

template<class _Iterator>
 constexpr _Iterator _Operator_arrow(_Iterator _Target, true_type)
 {
 return (_Target);
 }

template<class _Iterator>
 constexpr decltype(auto) _Operator_arrow(_Iterator&& _Target, false_type)
 {
 return (::std:: forward<_Iterator>(_Target).operator->());
 }

template<class _RanIt>
 class reverse_iterator
 {
public:
 using iterator_category = typename iterator_traits<_RanIt>::iterator_category;
 using value_type = typename iterator_traits<_RanIt>::value_type;
 using difference_type = typename iterator_traits<_RanIt>::difference_type;
 using pointer = typename iterator_traits<_RanIt>::pointer;
 using reference = typename iterator_traits<_RanIt>::reference;

 using iterator_type = _RanIt;

 inline reverse_iterator()
  : current()
  {
  }

 inline explicit reverse_iterator(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _Other>
  inline reverse_iterator(const reverse_iterator<_Other>& _Right)
  : current(_Right.base())
  {
  }

 template<class _Other>
  inline reverse_iterator& operator=(const reverse_iterator<_Other>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 inline _RanIt base() const
  {
  return (current);
  }

 inline reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 inline pointer operator->() const
  {
  _RanIt _Tmp = current;
  --_Tmp;
  return (_Operator_arrow(_Tmp, is_pointer<_RanIt>()));
  }

 inline reverse_iterator& operator++()
  {
  --current;
  return (*this);
  }

 inline reverse_iterator operator++(int)
  {
  reverse_iterator _Tmp = *this;
  --current;
  return (_Tmp);
  }

 inline reverse_iterator& operator--()
  {
  ++current;
  return (*this);
  }

 inline reverse_iterator operator--(int)
  {
  reverse_iterator _Tmp = *this;
  ++current;
  return (_Tmp);
  }



 inline reverse_iterator& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 inline reverse_iterator operator+(difference_type _Off) const
  {
  return (reverse_iterator(current - _Off));
  }

 inline reverse_iterator& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 inline reverse_iterator operator-(difference_type _Off) const
  {
  return (reverse_iterator(current + _Off));
  }

 inline reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

protected:
 _RanIt current;
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt>>
  : public _Is_checked_helper<_RanIt>
 {
 };

template<class _RanIt>
 inline reverse_iterator<_RanIt> operator+(
  typename reverse_iterator<_RanIt>::difference_type _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 inline auto operator-(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left.base() == _Right.base());
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right.base() < _Left.base());
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt>
 inline reverse_iterator<_RanIt> make_reverse_iterator(_RanIt _Iter)
 {
 return (reverse_iterator<_RanIt>(_Iter));
 }


template<class _Container>
 inline auto begin(_Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 inline auto begin(const _Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 inline auto end(_Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Container>
 inline auto end(const _Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size>
 constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Ty,
 size_t _Size>
 constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array + _Size);
 }


template<class _Container>
 constexpr auto cbegin(const _Container& _Cont)
  noexcept(noexcept(::std:: begin(_Cont)))
  -> decltype(::std:: begin(_Cont))
 {
 return (::std:: begin(_Cont));
 }

template<class _Container>
 constexpr auto cend(const _Container& _Cont)
  noexcept(noexcept(::std:: end(_Cont)))
  -> decltype(::std:: end(_Cont))
 {
 return (::std:: end(_Cont));
 }


template<class _Container>
 inline auto rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 inline auto rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 inline auto rend(_Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Container>
 inline auto rend(const _Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Ty,
 size_t _Size>
 inline reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array + _Size));
 }

template<class _Ty,
 size_t _Size>
 inline reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array));
 }

template<class _Elem>
 inline reverse_iterator<const _Elem *>
  rbegin(initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.end()));
 }

template<class _Elem>
 inline reverse_iterator<const _Elem *>
  rend(initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.begin()));
 }


template<class _Container>
 inline auto crbegin(const _Container& _Cont)
  -> decltype(::std:: rbegin(_Cont))
 {
 return (::std:: rbegin(_Cont));
 }

template<class _Container>
 inline auto crend(const _Container& _Cont)
  -> decltype(::std:: rend(_Cont))
 {
 return (::std:: rend(_Cont));
 }


template<class _Container>
 constexpr auto size(const _Container& _Cont)
  -> decltype(_Cont.size())
 {
 return (_Cont.size());
 }

template<class _Ty,
 size_t _Size>
 constexpr size_t size(const _Ty(&)[_Size]) noexcept
 {
 return (_Size);
 }

template<class _Container>
 constexpr auto empty(const _Container& _Cont)
  -> decltype(_Cont.empty())
 {
 return (_Cont.empty());
 }

template<class _Ty,
 size_t _Size>
 constexpr bool empty(const _Ty(&)[_Size]) noexcept
 {
 return (false);
 }

template<class _Elem>
 constexpr bool empty(
  initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.size() == 0);
 }

template<class _Container>
 constexpr auto data(_Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Container>
 constexpr auto data(const _Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Ty,
 size_t _Size>
 constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Elem>
 constexpr const _Elem *data(
  initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }
# 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Ty,
 size_t _Size>
 class _Array_const_iterator



 {
public:
 using iterator_category = random_access_iterator_tag;

 using value_type = _Ty;
 using difference_type = ptrdiff_t;
 using pointer = const _Ty *;
 using reference = const _Ty&;
 enum {_EEN_SIZE = _Size};

 inline _Array_const_iterator()
  : _Ptr()
  {
  }

 inline explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  : _Ptr(_Parg + _Off)
  {
  }

 using _Unchecked_type = pointer;

 inline reference operator*() const
  {
  return (*_Ptr);
  }

 inline pointer operator->() const
  {
  return (_Ptr);
  }

 inline _Array_const_iterator& operator++()
  {
  ++_Ptr;
  return (*this);
  }

 inline _Array_const_iterator operator++(int)
  {
  _Array_const_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 inline _Array_const_iterator& operator--()
  {
  --_Ptr;
  return (*this);
  }

 inline _Array_const_iterator operator--(int)
  {
  _Array_const_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 inline _Array_const_iterator& operator+=(ptrdiff_t _Off)
  {
  _Ptr += _Off;
  return (*this);
  }

 inline _Array_const_iterator operator+(ptrdiff_t _Off) const
  {
  _Array_const_iterator _Tmp = *this;
  return (_Tmp += _Off);
  }

 inline _Array_const_iterator& operator-=(ptrdiff_t _Off)
  {
  return (*this += -_Off);
  }

 inline _Array_const_iterator operator-(ptrdiff_t _Off) const
  {
  _Array_const_iterator _Tmp = *this;
  return (_Tmp -= _Off);
  }

 inline ptrdiff_t operator-(const _Array_const_iterator& _Right) const
  {
  return (_Ptr - _Right._Ptr);
  }

 inline reference operator[](ptrdiff_t _Off) const
  {
  return (*(*this + _Off));
  }

 inline bool operator==(const _Array_const_iterator& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 inline bool operator!=(const _Array_const_iterator& _Right) const
  {
  return (!(*this == _Right));
  }

 inline bool operator<(const _Array_const_iterator& _Right) const
  {
  return (_Ptr < _Right._Ptr);
  }

 inline bool operator>(const _Array_const_iterator& _Right) const
  {
  return (_Right < *this);
  }

 inline bool operator<=(const _Array_const_iterator& _Right) const
  {
  return (!(_Right < *this));
  }

 inline bool operator>=(const _Array_const_iterator& _Right) const
  {
  return (!(*this < _Right));
  }

 pointer _Ptr;
# 1986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
 };

template<class _Ty,
 size_t _Size>
 inline _Array_const_iterator<_Ty, _Size> operator+(
  ptrdiff_t _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }

template<class _Ty,
 size_t _Size>
 inline _Array_const_iterator<_Ty, _Size>& _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
  const typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type _Right)
 {

 _Iter._Ptr = _Right;



 return (_Iter);
 }

template<class _Ty,
 size_t _Size>
 inline typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type _Unchecked(
  const _Array_const_iterator<_Ty, _Size>& _Iter)
 {

 return (_Iter._Ptr);



 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 using _Mybase = _Array_const_iterator<_Ty, _Size>;
 using iterator_category = random_access_iterator_tag;

 using value_type = _Ty;
 using difference_type = ptrdiff_t;
 using pointer = _Ty *;
 using reference = _Ty&;

 inline _Array_iterator()
  {
  }

 inline explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }
 enum {_EEN_SIZE = _Size};
 using _Unchecked_type = pointer;

 inline reference operator*() const
  {
  return (const_cast<reference>(_Mybase::operator*()));
  }

 inline pointer operator->() const
  {
  return (const_cast<pointer>(_Mybase::operator->()));
  }

 inline _Array_iterator& operator++()
  {
  ++*static_cast<_Mybase *>(this);
  return (*this);
  }

 inline _Array_iterator operator++(int)
  {
  _Array_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 inline _Array_iterator& operator--()
  {
  --*static_cast<_Mybase *>(this);
  return (*this);
  }

 inline _Array_iterator operator--(int)
  {
  _Array_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 inline _Array_iterator& operator+=(ptrdiff_t _Off)
  {
  *static_cast<_Mybase *>(this) += _Off;
  return (*this);
  }

 inline _Array_iterator operator+(ptrdiff_t _Off) const
  {
  _Array_iterator _Tmp = *this;
  return (_Tmp += _Off);
  }

 inline _Array_iterator& operator-=(ptrdiff_t _Off)
  {
  return (*this += -_Off);
  }

 inline _Array_iterator operator-(ptrdiff_t _Off) const
  {
  _Array_iterator _Tmp = *this;
  return (_Tmp -= _Off);
  }

 inline ptrdiff_t operator-(const _Mybase& _Right) const
  {
  return (*static_cast<const _Mybase *>(this) - _Right);
  }

 inline reference operator[](ptrdiff_t _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size>
 inline _Array_iterator<_Ty, _Size> operator+(
  ptrdiff_t _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }

template<class _Ty,
 size_t _Size>
 inline _Array_iterator<_Ty, _Size>& _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
  const typename _Array_iterator<_Ty, _Size>::_Unchecked_type _Right)
 {

 _Iter._Ptr = _Right;



 return (_Iter);
 }

template<class _Ty,
 size_t _Size>
 inline typename _Array_iterator<_Ty, _Size>::_Unchecked_type _Unchecked(
  const _Array_iterator<_Ty, _Size>& _Iter)
 {

 return (const_cast<_Ty *>(_Iter._Ptr));



 }


template<class _RanIt>
 class move_iterator
 {
public:
 using iterator_category = typename iterator_traits<_RanIt>::iterator_category;
 using value_type = typename iterator_traits<_RanIt>::value_type;
 using difference_type = typename iterator_traits<_RanIt>::difference_type;
 using pointer = _RanIt;
 using _Ref0 = typename iterator_traits<_RanIt>::reference;
 using reference = conditional_t<is_reference_v<_Ref0>, remove_reference_t<_Ref0>&&, _Ref0>;
 using iterator_type = _RanIt;

 inline move_iterator()
  : current()
  {
  }

 inline explicit move_iterator(iterator_type _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2>
  inline move_iterator(const move_iterator<_RanIt2>& _Right)
  : current(_Right.base())
  {
  }

 template<class _RanIt2>
  inline move_iterator& operator=(const move_iterator<_RanIt2>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 inline _RanIt base() const
  {
  return (current);
  }

 inline reference operator*() const
  {
  return (static_cast<reference>(*current));
  }

 inline pointer operator->() const
  {
  return (current);
  }

 inline move_iterator& operator++()
  {
  ++current;
  return (*this);
  }

 inline move_iterator operator++(int)
  {
  move_iterator _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 inline move_iterator& operator--()
  {
  --current;
  return (*this);
  }

 inline move_iterator operator--(int)
  {
  move_iterator _Tmp = *this;
  --current;
  return (_Tmp);
  }



 inline move_iterator& operator+=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 inline move_iterator operator+(difference_type _Off) const
  {
  return (move_iterator(current + _Off));
  }

 inline move_iterator& operator-=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 inline move_iterator operator-(difference_type _Off) const
  {
  return (move_iterator(current - _Off));
  }

 inline reference operator[](difference_type _Off) const
  {
  return (::std:: move(current[_Off]));
  }

protected:
 iterator_type current;
 };

template<class _RanIt>
 struct _Is_checked_helper<move_iterator<_RanIt>>
  : public _Is_checked_helper<_RanIt>
 {
 };

template<class _RanIt>
 inline move_iterator<_RanIt> operator+(
  typename move_iterator<_RanIt>::difference_type _Off,
  const move_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 inline auto operator-(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
   -> decltype(_Left.base() - _Right.base())
 {
 return (_Left.base() - _Right.base());
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator==(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left.base() == _Right.base());
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator!=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator<(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left.base() < _Right.base());
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator>(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator<=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2>
 inline bool operator>=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt>
 inline move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
 {
 return (move_iterator<_RanIt>(_Iter));
 }


template<class _Traits>
 struct _Char_traits_eq
 {
 using _Elem = typename _Traits::char_type;

 bool operator()(_Elem _Left, _Elem _Right) const
  {
  return (_Traits::eq(_Left, _Right));
  }
 };


template<class _Traits>
 struct _Char_traits_lt
 {
 using _Elem = typename _Traits::char_type;

 bool operator()(_Elem _Left, _Elem _Right) const
  {
  return (_Traits::lt(_Left, _Right));
  }
 };


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest)
 {
 const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
 const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
 char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
 const size_t _Count = _Last_ch - _First_ch;
 :: memmove(_Dest_ch, _First_ch, _Count);
 return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {

 return (_Copy_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 const auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
 return (_Rechecked(_Dest,
  _Copy_unchecked(_UFirst, _ULast, _UDest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Copy_no_deprecate(_First, _Last, _Dest));
 }
# 2476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 if (0 < _Count)
  {
  *_Dest = *_First;
  while (0 < --_Count)
   *++_Dest = *++_First;
  return (++_Dest);
  }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {


 return (_Copy_n_unchecked2(_First, _Count,
  _Dest, _Iter_cat_t<_InIt>()));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 if (0 < _Count)
  return (_Copy_memmove(_First, _First + _Count, _Dest));
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n_unchecked1(_First, _Count,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count_raw, _OutIt _Dest)
 {

 const _Algorithm_int_t<_Diff> _Count = _Count_raw;
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Rechecked(_Dest,
  _Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
 }
# 2649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
 {
 const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
 const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
 char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
 const size_t _Count = _Last_ch - _First_ch;
 return (static_cast<_BidIt2>(
  :: memmove(_Dest_ch - _Count, _First_ch, _Count)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_backward_memmove(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 const auto _UDest = _Unchecked_n_backward(_Dest, _Idl_distance<_BidIt1>(_UFirst, _ULast));
 return (_Rechecked(_Dest,
  _Copy_backward_unchecked(_UFirst, _ULast, _UDest, _Ptr_copy_cat(_UFirst, _UDest))));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = ::std:: move(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {

 return (_Move_unchecked1(_First, _Last,
  _Dest, _Ptr_move_cat(_First, _Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {

                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 const auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
 return (_Rechecked(_Dest,
  _Move_unchecked(_UFirst, _ULast, _UDest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Move_no_deprecate(_First, _Last, _Dest));
 }
# 2787 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = ::std:: move(*--_Last);
 return (_Dest);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_backward_memmove(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {

 return (_Move_backward_unchecked1(_First, _Last,
  _Dest, _Ptr_move_cat(_First, _Dest)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 const auto _UDest = _Unchecked_n_backward(_Dest, _Idl_distance<_BidIt1>(_UFirst, _ULast));
 return (_Rechecked(_Dest,
  _Move_backward_unchecked(_UFirst, _ULast, _UDest)));
 }


template<class _Ty>
 struct _Is_character
  : false_type
  {
  };

template<>
 struct _Is_character<char>
  : true_type
  {
  };

template<>
 struct _Is_character<signed char>
  : true_type
  {
  };

template<>
 struct _Is_character<unsigned char>
  : true_type
  {
  };

template<class _FwdIt,
 class _Ty>
 struct _Fill_memset_is_safe_helper
 {
 using _Value_type = _Iter_value_t<_FwdIt>;

 using _Raw_ty = _Unwrap_enum_t<_Ty>;
 using _Raw_value_type = _Unwrap_enum_t<_Value_type>;

 using type = _Conjunction_t<
  is_pointer<_FwdIt>,
  disjunction<
   conjunction<
    _Is_character<_Raw_ty>,
    _Is_character<_Raw_value_type>>,
   conjunction<
    is_same<bool, _Raw_ty>,
    is_same<bool, _Raw_value_type>>>,
  is_convertible<_Ty, _Value_type>>;
 };

template<class _FwdIt,
 class _Ty> inline
 typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
 _Fill_memset_is_safe(const _FwdIt&, const _Ty&)
 {
 return {};
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
 {
 :: memset(_First, static_cast<unsigned char>(_Val), _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
                            ;
 _Fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
 }
# 2927 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest)
  *_Dest = _Val;
 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
 {
 if (0 < _Count)
  {
  :: memset(_Dest, static_cast<unsigned char>(_Val), _Count);
  return (_Dest + _Count);
  }

 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {

 return (_Fill_n_unchecked1(_Dest, _Count, _Val, _Fill_memset_is_safe(_Dest, _Val)));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt fill_n(_OutIt _Dest, _Diff _Count_raw, const _Ty& _Val)
 {
 const _Algorithm_int_t<_Diff> _Count = _Count_raw;
 return (_Rechecked(_Dest,
  _Fill_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Val)));
 }
# 2985 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Elem1,
 class _Elem2>
 struct _Value_equality_is_bitwise_equality
  : bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
 {



 };

template<class _Elem1,
 class _Elem2,
 class _Pr>
 struct _Equal_memcmp_is_safe_helper
  : false_type
 {

 };

template<class _Elem1,
 class _Elem2>
 struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
  : _Conjunction_t<
   _Is_same_size<_Elem1, _Elem2>,
   _Is_nonbool_integral<_Elem1>,
   _Is_nonbool_integral<_Elem2>,
   negation<is_volatile<_Elem1>>,
   negation<is_volatile<_Elem2>>,


   _Value_equality_is_bitwise_equality<_Elem1, _Elem2>
  >
 {
 };

template<class _Elem1,
 class _Elem2>
 struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
  : is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
 {
 };
# 3035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Elem>
 struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
  : _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
 {
 };

template<class _Elem>
 struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
  : _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
 {

 };

template<class _Iter1,
 class _Iter2,
 class _Pr> inline
 false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
 {
 return {};
 }

template<class _Obj1,
 class _Obj2,
 class _Pr> inline
 typename _Equal_memcmp_is_safe_helper<
  remove_const_t<_Obj1>,
  remove_const_t<_Obj2>,
  _Pr>::type
  _Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
 {
 return {};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred, false_type)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  {
  if (!_Pred(*_First1, *_First2))
   {
   return (false);
   }
  }

 return (true);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr, true_type)
 {
 const char * const _First1_ch = reinterpret_cast<const char *>(_First1);
 const char * const _First2_ch = reinterpret_cast<const char *>(_First2);
 const size_t _Count = reinterpret_cast<const char *>(_Last1) - _First1_ch;
 return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
  _Equal_memcmp_is_safe(_First1, _First2, _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
                              ;
 const auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 const auto _UFirst2 = _Unchecked_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
 return (_Equal_unchecked(_UFirst1, _ULast1, _UFirst2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Equal_no_deprecate(_First1, _Last1, _First2, _Pass_fn(_Pred)));
 }
# 3163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
 {
 return (::std:: equal(_First1, _Last1, _First2, equal_to<>()));
 }
# 3204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred,
   input_iterator_tag, input_iterator_tag)
 {

 for (;;)
  {
  if (_First1 == _Last1)
   {
   return (_First2 == _Last2);
   }

  if (_First2 == _Last2)
   {
   return (false);
   }

  if (!_Pred(*_First1, *_First2))
   {
   return (false);
   }

  ++_First1;
  ++_First2;
  }
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred,
   random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  {
  return (false);
  }

 return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
 return (_Equal_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pass_fn(_Pred),
   _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }
# 3273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: equal(_First1, _Last1, _First2, _Last2, equal_to<>()));
 }
# 3293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Elem1,
 class _Elem2,
 class _FTy>
 struct _Lex_compare_check_element_types_helper
  : _Conjunction_t<
   _Is_character<_Elem1>,
   _Is_character<_Elem2>,
   _Is_character<_FTy>,
   is_unsigned<_FTy>
  >
 {
 };

template<class _Elem1,
 class _Elem2>
 struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
  : _Conjunction_t<
   _Is_character<_Elem1>,
   _Is_character<_Elem2>,
   is_unsigned<_Elem1>,
   is_unsigned<_Elem2>
  >
 {
 };
# 3332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Memcmp_pr>
 struct _Lex_compare_optimize
 {
 };

template<class _Memcmp_pr,
 class _Obj1,
 class _Obj2,
 class _FTy>
 using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
  _Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
  _Memcmp_pr, void>>;

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 _Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
 {

 return {};
 }

template<class _Obj1,
 class _Obj2,
 class _FTy> inline
 _Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
  _Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
 {
 return {};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred, _Lex_compare_optimize<void>)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  {
  if (_Pred(*_First1, *_First2))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
  }

 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr,
 class _Memcmp_pr> inline
 bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr, _Lex_compare_optimize<_Memcmp_pr>)
 {
 const size_t _Num1 = _Last1 - _First1;
 const size_t _Num2 = _Last2 - _First2;
 const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Memcmp_pr{}(_Ans, 0) || (_Ans == 0 && _Num1 < _Num2));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
 const auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 const auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
 return (_Lex_compare_unchecked(_UFirst1, _ULast1, _UFirst2, _ULast2, _Pass_fn(_Pred),
  _Lex_compare_memcmp_classify(_UFirst1, _UFirst2, _Pred)));
 }


template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: lexicographical_compare(_First1, _Last1,
  _First2, _Last2, less<>()));
 }


template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
 {
 return ((-128) <= _Val && _Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
 {
 return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
 {
 return (_Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
 {
 return (0 <= _Val && _Val <= 0xff);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
 {
 return (_Val <= 0xff);
 }

template<class _InIt,
 class _Ty> inline
 bool _Within_limits(_InIt, const _Ty& _Val)
 {
 using _Elem = remove_pointer_t<_InIt>;
 return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
  bool_constant<-1 == static_cast<_Ty>(-1)>()));
 }

template<class _InIt> inline
 bool _Within_limits(_InIt, const bool&)
 {
 return (true);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
 {
 if (!_Within_limits(_First, _Val))
  return (_Last);
 _First = static_cast<_InIt>(:: memchr(
  _First, static_cast<unsigned char>(_Val), _Last - _First));
 return (_First ? _First : _Last);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   break;
 return (_First);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
 {

 using _Memchr_opt = bool_constant<is_integral_v<_Ty> && _Is_any_of_v<_InIt,
  char *, signed char *, unsigned char *, const char *, const signed char *, const unsigned char *>>;

 return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt()));
 }

template<class _InIt,
 class _Ty> inline
 _InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
                            ;
 return (_Rechecked(_First,
  _Find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  {
  if (_Pred(*_First, _Val))
   {
   break;
   }
  }

 return (_First);
 }


template<class _InIt,
 class _Ty> inline
 _Iter_diff_t<_InIt>
  _Count_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Iter_diff_t<_InIt> _Count = 0;

 for (; _First != _Last; ++_First)
  {
  if (*_First == _Val)
   {
   ++_Count;
   }
  }

 return (_Count);
 }

template<class _InIt,
 class _Ty> inline
 _Iter_diff_t<_InIt>
  count(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
                            ;
 return (_Count_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _Iter_diff_t<_InIt>
  _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
 {
 _Iter_diff_t<_InIt> _Count = 0;

 for (; _First != _Last; ++_First)
  {
  if (_Pred(*_First, _Val))
   {
   ++_Count;
   }
  }

 return (_Count);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr,
  forward_iterator_tag, forward_iterator_tag)
 {
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag)
 {

 while (_Pred(*--_Last1, *--_Last2))
  ;
 ++_Last1;
 ++_Last2;
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Trim_matching_suffixes(_Last1, _Last2, _Pred,
  _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
 for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
  {
  if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
   {
   _Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
   if (_Count2 == 0)
    {
    return (false);
    }

   _FwdIt1 _Skip1 = _Next_iter(_Next1);
   _Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
   if (_Count2 != _Count1)
    {
    return (false);
    }
   }
  }

 return (true);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked_n(_First2, _Idl_distance<_FwdIt1>(_UFirst1, _ULast1));
 for (; _UFirst1 != _ULast1; ++_UFirst1, (void)++_UFirst2)
  {
  if (!_Pred(*_UFirst1, *_UFirst2))
   {
   auto _ULast2 = ::std:: next(_UFirst2, ::std:: distance(_UFirst1, _ULast1));
   return (_Check_match_counts(_UFirst1, _ULast1, _UFirst2, _ULast2, _Pred));
   }
  }

 return (true);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Is_permutation_no_deprecate(_First1, _Last1, _First2, _Pass_fn(_Pred)));
 }
# 3672 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, equal_to<>()));
 }
# 3693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
  forward_iterator_tag, forward_iterator_tag)
 {

 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  {
  if (!_Pred(*_First1, *_First2))
   {
   if (::std:: distance(_First1, _Last1) == ::std:: distance(_First2, _Last2))
    {
    return (_Check_match_counts(_First1, _Last1, _First2, _Last2, _Pred));
    }
   else
    {
    return (false);
    }
   }
  }

 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
  random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  {
  return (false);
  }

 return (_Is_permutation_no_deprecate(_First1, _Last1, _First2, _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {

                              ;
                              ;
 return (_Is_permutation_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pass_fn(_Pred),
  _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, _Last2, equal_to<>()));
 }


template<class _BidIt> inline
 void _Reverse_unchecked1(_BidIt _First, _BidIt _Last, integral_constant<size_t, 0>)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  {
  ::std:: iter_swap(_First, _Last);
  }
 }


template<class _BidIt> inline
 void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 1>)
 {
 __std_reverse_trivially_swappable_1(_First, _Last);
 }

template<class _BidIt> inline
 void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 2>)
 {
 __std_reverse_trivially_swappable_2(_First, _Last);
 }

template<class _BidIt> inline
 void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 4>)
 {
 __std_reverse_trivially_swappable_4(_First, _Last);
 }

template<class _BidIt> inline
 void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 8>)
 {
 __std_reverse_trivially_swappable_8(_First, _Last);
 }


template<class _BidIt> inline
 void _Reverse_unchecked(const _BidIt _First, const _BidIt _Last)
 {

 using _Val = _Iter_value_t<_BidIt>;
 constexpr size_t _Opt = is_pointer_v<_BidIt>
  && _Is_trivially_swappable_v<_Val>
  && !is_volatile_v<_Val>
  && (sizeof(_Val) == 1
   || sizeof(_Val) == 2
   || sizeof(_Val) == 4
   || sizeof(_Val) == 8) ? sizeof(_Val) : 0;



 _Reverse_unchecked1(_First, _Last, integral_constant<size_t, _Opt>{});
 }

template<class _BidIt> inline
 void reverse(const _BidIt _First, const _BidIt _Last)
 {
                            ;
 _Reverse_unchecked(_Unchecked(_First), _Unchecked(_Last));
 }
# 3832 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _FwdIt> inline
 _FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid, _Res = _Last; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   {
   if (++_Next == _Last)
    return (_Res == _Last ? _Mid : _Res);
   else
    _Mid = _Next;
   }
  else if (++_Next == _Last)
   {
   if (_Res == _Last)
    _Res = _First;
   _Next = _Mid;
   }
  }
 }

template<class _BidIt> inline
 pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last)
 {
 while (_First != _Sentinel && _Last != _Sentinel)
  {
  ::std:: iter_swap(_First, --_Last);
  ++_First;
  }

 return (::std:: make_pair(_First, _Last));
 }

template<class _BidIt> inline
 _BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 _Reverse_unchecked(_First, _Mid);
 _Reverse_unchecked(_Mid, _Last);
 pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
 _Reverse_unchecked(_Tmp.first, _Tmp.second);
 return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
 }

template<class _RanIt> inline
 _RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 _Reverse_unchecked(_First, _Mid);
 _Reverse_unchecked(_Mid, _Last);
 _Reverse_unchecked(_First, _Last);
 return (_First + (_Last - _Mid));
 }

template<class _FwdIt> inline
 _FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 if (_First == _Mid)
  return (_Last);
 if (_Mid == _Last)
  return (_First);
 return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {


                           ;
                          ;
 return (_Rechecked(_First,
  _Rotate_unchecked(_Unchecked(_First), _Unchecked(_Mid),
  _Unchecked(_Last))));
 }
# 3923 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xutility" 3
template<class _Diff,
 class _Urng>
 class _Rng_from_urng
 {
public:
 using _Ty0 = make_unsigned_t<_Diff>;
 using _Ty1 = typename _Urng::result_type;

 using _Udiff = conditional_t<sizeof (_Ty1) < sizeof (_Ty0), _Ty0, _Ty1>;

 explicit _Rng_from_urng(_Urng& _Func)
  : _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
  {
  for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
   --_Bits;
  }

 _Diff operator()(_Diff _Index)
  {
  for (;;)
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while (_Mask < _Udiff(_Index - 1))
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits();
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if (_Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff(_Index - 1))
    return (_Ret % _Index);
   }
  }

 _Udiff _Get_all_bits()
  {
  _Udiff _Ret = 0;

  for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
   _Num += _Bits)
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits();
   }

  return (_Ret);
  }

 _Rng_from_urng(const _Rng_from_urng&) = delete;
 _Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
 _Udiff _Get_bits()
  {
  for (;;)
   {
   _Udiff _Val = _Ref() - (_Urng::min)();

   if (_Val <= _Bmask)
    return (_Val);
   }
  }

 _Urng& _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };


template<class _Elem>
 class __declspec(dllimport) _Yarn
 {
public:
                    _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

                    _Yarn(const _Yarn& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

                    _Yarn(const _Elem * _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Yarn& operator=(const _Yarn& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Yarn& operator=(const _Elem * _Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right);






    _Myptr = (_Elem *):: malloc(_Count);


    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }

  return (*this);
  }

                    ~_Yarn() noexcept
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

         const _Elem * c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

 bool _Empty() const
  {
  return (_Myptr == 0);
  }

         const _Elem * _C_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)





   :: free(_Myptr);


  _Myptr = 0;
  }

 _Elem * _Myptr;
 _Elem _Nul;
 };



template<class _Container>
 class back_insert_iterator
 {
public:
 using iterator_category = output_iterator_tag;
 using value_type = void;
 using difference_type = void;
 using pointer = void;
 using reference = void;

 using container_type = _Container;

 explicit back_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 back_insert_iterator& operator=(const typename _Container::value_type& _Val)
  {
  container->push_back(_Val);
  return (*this);
  }

 back_insert_iterator& operator=(typename _Container::value_type&& _Val)
  {
  container->push_back(::std:: move(_Val));
  return (*this);
  }

 back_insert_iterator& operator*()
  {
  return (*this);
  }

 back_insert_iterator& operator++()
  {
  return (*this);
  }

 back_insert_iterator operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<back_insert_iterator<_Container>>
  : public true_type
 {
 };



template<class _Container> inline
 back_insert_iterator<_Container> back_inserter(_Container& _Cont)
 {
 return (back_insert_iterator<_Container>(_Cont));
 }



template<class _Ty,
 class _Alloc,
 class = void>
 struct _Has_allocator_type
  : false_type
 {
 };

template<class _Ty,
 class _Alloc>
 struct _Has_allocator_type<_Ty, _Alloc, void_t<typename _Ty::allocator_type>>
  : is_convertible<_Alloc, typename _Ty::allocator_type>::type
 {
 };


struct allocator_arg_t
 {
 };

            constexpr allocator_arg_t allocator_arg{};

[[noreturn]] void __cdecl _Xbad_alloc();
[[noreturn]] void __cdecl _Xinvalid_argument( const char *);
[[noreturn]] void __cdecl _Xlength_error( const char *);
[[noreturn]] void __cdecl _Xout_of_range( const char *);
[[noreturn]] void __cdecl _Xoverflow_error( const char *);
[[noreturn]] void __cdecl _Xruntime_error( const char *);


template<class _Ty,
 class _Alloc>
 struct uses_allocator
  : _Has_allocator_type<_Ty, _Alloc>::type
 {
 };

template<class _Ty,
 class _Alloc>
             constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 using iterator_category = _Category;
 using value_type = _Ty;
 using difference_type = _Diff;
 using pointer = _Pointer;
 using reference = _Reference;
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

constexpr size_t _Big_allocation_threshold = 4096;
constexpr size_t _Big_allocation_alignment = 32;

static_assert(2 * sizeof(void *) <= _Big_allocation_alignment,
 "Big allocation alignment should at least match vector register alignment");
static_assert((_Big_allocation_alignment & (_Big_allocation_alignment - 1)) == 0,
 "Big allocation alignment must be a power of two");




constexpr size_t _Non_user_size = sizeof(void *) + _Big_allocation_alignment - 1;
# 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 3
template<bool _Try_aligned = true>
 struct _Default_allocate_traits
 {
 static constexpr bool _Try_aligned_allocation = _Try_aligned;

 [[noreturn]] static void _Fail()
  {
  _Xbad_alloc();
  }

 __declspec(allocator) static void * _Get_bytes(const size_t _Bytes, const size_t _Align)
  {
  (void)_Align;

  void * _Ptr = nullptr;







   {
   _Ptr = ::operator new(_Bytes);
   }

  { if (!(_Ptr != nullptr)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
  return (_Ptr);
  }
 };

template<class _Traits = _Default_allocate_traits<>> inline
 __declspec(allocator) void *_Allocate(const size_t _Count, const size_t _Sz, size_t _Align)
 {
 if (_Count == 0)
  {
  return (nullptr);
  }


 if (static_cast<size_t>(-1) / _Sz < _Count)
  {
  _Traits::_Fail();
  }

 const size_t _User_size = _Count * _Sz;



#pragma warning(push)
#pragma warning(disable: 4127)
#pragma warning(disable: 6326)
 if (_Traits::_Try_aligned_allocation && _User_size >= _Big_allocation_threshold)
  {
# 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 3
   {
   const size_t _Block_size = _Non_user_size + _User_size;
   if (_Block_size <= _User_size)
    {
    _Traits::_Fail();
    }

   const uintptr_t _Ptr_container =
    reinterpret_cast<uintptr_t>(::operator new(_Block_size));
   { if (!(_Ptr_container != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
   void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
    & ~(_Big_allocation_alignment - 1));
   static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;




   return (_Ptr);
   }
  }
#pragma warning(pop)


 return (_Traits::_Get_bytes(_User_size, _Align));
 }


inline void _Deallocate(void * _Ptr, const size_t _Count, const size_t _Sz, size_t _Align)
 {
 (void)_Align;

 if (_Count > static_cast<size_t>(-1) / _Sz)
  {
  goto _Invalid_parameter;
  }

  {
  size_t _Allocated_size = _Count * _Sz;



#pragma warning(push)
#pragma warning(disable: 4127)
#pragma warning(disable: 6326)
 if (_Allocated_size >= _Big_allocation_threshold)
   {
# 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 3
    {
    if (_Allocated_size + _Non_user_size <= _Allocated_size)
     {
     goto _Invalid_parameter;
     }
    _Allocated_size += _Non_user_size;

    const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
    if ((_Ptr_user & (_Big_allocation_alignment - 1)) != 0)
     {
     goto _Invalid_parameter;
     }

    const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
    const uintptr_t _Ptr_container =
     *reinterpret_cast<uintptr_t *>(_Ptr_ptr);
# 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 3
    if (_Ptr_container >= _Ptr_user)
     {
     goto _Invalid_parameter;
     }




    if (sizeof(void *) > _Ptr_user - _Ptr_container)

     {
     goto _Invalid_parameter;
     }

    if (_Ptr_user - _Ptr_container > _Non_user_size)
     {
     goto _Invalid_parameter;
     }

    _Ptr = reinterpret_cast<void *>(_Ptr_container);
    }
   }
#pragma warning(pop)
# 237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 3
 {
   ::operator delete(_Ptr, _Allocated_size);
   }
  return;
  }

_Invalid_parameter:
 ::_invalid_parameter_noinfo_noreturn();
 }


template<class _Ty,
 class... _Types> inline
 void _Construct_in_place(_Ty& _Obj, _Types&&... _Args)
  noexcept(is_nothrow_constructible_v<_Ty, _Types...>)
 {
 ::new (const_cast<void *>(static_cast<const volatile void *>(::std:: addressof(_Obj))))
  _Ty(::std:: forward<_Types>(_Args)...);
 }


template<class _Ty,
 class... _Types> inline
 _Ty * _Global_new(_Types&&... _Args)
 {
 void * const _Result = _Allocate(1, sizeof(_Ty), alignof(_Ty));
 try {
 ::new (_Result) _Ty(::std:: forward<_Types>(_Args)...);
 } catch (...) {
 _Deallocate(_Result, 1, sizeof(_Ty), alignof(_Ty));
 throw;
 }
 return (static_cast<_Ty *>(_Result));
 }


template<class _Ty>
 struct _Get_first_parameter;

template<template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Get_first_parameter<_Ty<_First, _Rest...>>
 {
 using type = _First;
 };


template<class _Newfirst,
 class _Ty>
 struct _Replace_first_parameter;

template<class _Newfirst,
 template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...>>
 {
 using type = _Ty<_Newfirst, _Rest...>;
 };


template<class _Ty,
 class = void>
 struct _Get_element_type
 {
 using type = typename _Get_first_parameter<_Ty>::type;
 };

template<class _Ty>
 struct _Get_element_type<_Ty, void_t<typename _Ty::element_type>>
 {
 using type = typename _Ty::element_type;
 };


template<class _Ty,
 class = void>
 struct _Get_ptr_difference_type
 {
 using type = ptrdiff_t;
 };

template<class _Ty>
 struct _Get_ptr_difference_type<_Ty, void_t<typename _Ty::difference_type>>
 {
 using type = typename _Ty::difference_type;
 };


template<class _Ty,
 class _Other,
 class = void>
 struct _Get_rebind_alias
 {
 using type = typename _Replace_first_parameter<_Other, _Ty>::type;
 };

template<class _Ty,
 class _Other>
 struct _Get_rebind_alias<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>>>
 {
 using type = typename _Ty::template rebind<_Other>;
 };


template<class _Ty>
 struct pointer_traits
 {
 using element_type = typename _Get_element_type<_Ty>::type;
 using pointer = _Ty;
 using difference_type = typename _Get_ptr_difference_type<_Ty>::type;

 template<class _Other>
  using rebind = typename _Get_rebind_alias<_Ty, _Other>::type;

 using _Reftype = conditional_t<is_void_v<element_type>,
  char&,
  add_lvalue_reference_t<element_type>>;

 static pointer pointer_to(_Reftype _Val)
  {
  return (_Ty::pointer_to(_Val));
  }
 };

template<class _Ty>
 struct pointer_traits<_Ty *>
 {
 using element_type = _Ty;
 using pointer = _Ty *;
 using difference_type = ptrdiff_t;

 template<class _Other>
  using rebind = _Other *;

 using _Reftype = conditional_t<is_void_v<_Ty>,
  char&,
  add_lvalue_reference_t<_Ty>>;

 static pointer pointer_to(_Reftype _Val)
  {
  return (::std:: addressof(_Val));
  }
 };


template<class _Ptr,
 class _Ty>
 using _Rebind_pointer_t = typename pointer_traits<_Ptr>::template rebind<_Ty>;


template<class _Pointer,
 enable_if_t<!is_pointer_v<_Pointer>, int> = 0> inline
 _Pointer _Refancy(typename pointer_traits<_Pointer>::element_type * _Ptr)
 {
 return (pointer_traits<_Pointer>::pointer_to(*_Ptr));
 }

template<class _Pointer,
 enable_if_t<is_pointer_v<_Pointer>, int> = 0> inline
 _Pointer _Refancy(_Pointer _Ptr)
 {
 return (_Ptr);
 }


template<class _Ty> inline
 void _Destroy_in_place(_Ty& _Obj) noexcept
 {
 _Obj.~_Ty();
 }


template<class _Ptrty> inline
 auto _Const_cast(_Ptrty _Ptr)
 {
 using _Elem = typename pointer_traits<_Ptrty>::element_type;
 using _Modifiable = remove_const_t<_Elem>;
 using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

 return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
 }

template<class _Ty> inline
 auto _Const_cast(_Ty * _Ptr)
 {
 return (const_cast<remove_const_t<_Ty> *>(_Ptr));
 }


template<class _Ty,
 class = void>
 struct _Get_pointer_type
 {
 using type = typename _Ty::value_type *;
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
 struct _Get_pointer_type<_Ty, void_t<typename _Ty::pointer>>
 {
 using type = typename _Ty::pointer;
 };
#pragma warning(pop)


template<class _Ty,
 class = void>
 struct _Get_const_pointer_type
 {
 using _Ptrty = typename _Get_pointer_type<_Ty>::type;
 using _Valty = typename _Ty::value_type;
 using type = typename pointer_traits<_Ptrty>::template rebind<const _Valty>;
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
 struct _Get_const_pointer_type<_Ty, void_t<typename _Ty::const_pointer>>
 {
 using type = typename _Ty::const_pointer;
 };
#pragma warning(pop)


template<class _Ty,
 class = void>
 struct _Get_void_pointer_type
 {
 using _Ptrty = typename _Get_pointer_type<_Ty>::type;
 using type = typename pointer_traits<_Ptrty>::template rebind<void>;
 };

template<class _Ty>
 struct _Get_void_pointer_type<_Ty, void_t<typename _Ty::void_pointer>>
 {
 using type = typename _Ty::void_pointer;
 };


template<class _Ty,
 class = void>
 struct _Get_const_void_pointer_type
 {
 using _Ptrty = typename _Get_pointer_type<_Ty>::type;
 using type = typename pointer_traits<_Ptrty>::template rebind<const void>;
 };

template<class _Ty>
 struct _Get_const_void_pointer_type<_Ty, void_t<typename _Ty::const_void_pointer>>
 {
 using type = typename _Ty::const_void_pointer;
 };


template<class _Ty,
 class = void>
 struct _Get_difference_type
 {
 using _Ptrty = typename _Get_pointer_type<_Ty>::type;
 using type = typename pointer_traits<_Ptrty>::difference_type;
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
 struct _Get_difference_type<_Ty, void_t<typename _Ty::difference_type>>
 {
 using type = typename _Ty::difference_type;
 };
#pragma warning(pop)


template<class _Ty,
 class = void>
 struct _Get_size_type
 {
 using type = make_unsigned_t<typename _Get_difference_type<_Ty>::type>;
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty>
 struct _Get_size_type<_Ty, void_t<typename _Ty::size_type>>
 {
 using type = typename _Ty::size_type;
 };
#pragma warning(pop)


template<class _Ty,
 class = void>
 struct _Get_propagate_on_container_copy
 {
 using type = false_type;
 };

template<class _Ty>
 struct _Get_propagate_on_container_copy<_Ty, void_t<typename _Ty::propagate_on_container_copy_assignment>>
 {
 using type = typename _Ty::propagate_on_container_copy_assignment;
 };


template<class _Ty,
 class = void>
 struct _Get_propagate_on_container_move
 {
 using type = false_type;
 };

template<class _Ty>
 struct _Get_propagate_on_container_move<_Ty, void_t<typename _Ty::propagate_on_container_move_assignment>>
 {
 using type = typename _Ty::propagate_on_container_move_assignment;
 };


template<class _Ty,
 class = void>
 struct _Get_propagate_on_container_swap
 {
 using type = false_type;
 };

template<class _Ty>
 struct _Get_propagate_on_container_swap<_Ty, void_t<typename _Ty::propagate_on_container_swap>>
 {
 using type = typename _Ty::propagate_on_container_swap;
 };


template<class _Ty,
 class = void>
 struct _Get_is_always_equal
 {
 using type = typename is_empty<_Ty>::type;
 };

template<class _Ty>
 struct _Get_is_always_equal<_Ty, void_t<typename _Ty::is_always_equal>>
 {
 using type = typename _Ty::is_always_equal;
 };


template<class _Ty,
 class _Other,
 class = void>
 struct _Get_rebind_type
 {
 using type = typename _Replace_first_parameter<_Other, _Ty>::type;
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Ty,
 class _Other>
 struct _Get_rebind_type<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>::other>>
 {
 using type = typename _Ty::template rebind<_Other>::other;
 };
#pragma warning(pop)


template<class _Ty>
 class allocator;

template<class _Alloc,
 class = void>
 struct _Is_default_allocator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
  : true_type
 {
 };


struct _Has_no_alloc_construct_tag
 {
 };

template<class _Void,
 class... _Types>
 struct _Has_no_alloc_construct
  : true_type
 {
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Alloc,
 class _Ptr,
 class... _Args>
 struct _Has_no_alloc_construct<
  void_t<
   _Has_no_alloc_construct_tag,
   decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
  _Alloc, _Ptr, _Args...>
  : false_type
 {
 };
#pragma warning(pop)

template<class _Alloc,
 class _Ptr,
 class... _Args>
 using _Uses_default_construct = disjunction<
  _Is_default_allocator<_Alloc>,
  _Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
 class _Ptr,
 class... _Args>
 using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;



struct _Has_no_alloc_destroy_tag
 {
 };

template<class _Alloc,
 class _Ptr,
 class = void>
 struct _Has_no_alloc_destroy
  : true_type
 {
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Alloc,
 class _Ptr>
 struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<
   _Has_no_alloc_destroy_tag,
   decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
  : false_type
 {
 };
#pragma warning(pop)

template<class _Alloc,
 class _Ptr>
 using _Uses_default_destroy = disjunction<
  _Is_default_allocator<_Alloc>,
  _Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
 class _Ptr>
 using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;



struct _Has_allocate_hint_tag
 {
 };

template<class _Alloc,
 class _Size_type,
 class _Const_void_pointer,
 class = void>
 struct _Has_allocate_hint
  : false_type
 {
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Alloc,
 class _Size_type,
 class _Const_void_pointer>
 struct _Has_allocate_hint<_Alloc, _Size_type, _Const_void_pointer, void_t<
   _Has_allocate_hint_tag,
   decltype(::std:: declval<_Alloc&>().allocate(
    ::std:: declval<const _Size_type&>(), ::std:: declval<const _Const_void_pointer&>()))>>
  : true_type
 {
 };
#pragma warning(pop)


struct _Has_max_size_tag
 {
 };

template<class _Alloc,
 class = void>
 struct _Has_max_size
  : false_type
 {
 };

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Alloc>
 struct _Has_max_size<_Alloc, void_t<
   _Has_max_size_tag,
   decltype(::std:: declval<const _Alloc&>().max_size())>>
  : true_type
 {
 };
#pragma warning(pop)


struct _Has_select_on_container_copy_construction_tag
 {
 };

template<class _Alloc,
 class = void>
 struct _Has_select_on_container_copy_construction
  : false_type
 {
 };

template<class _Alloc>
 struct _Has_select_on_container_copy_construction<_Alloc, void_t<
   _Has_select_on_container_copy_construction_tag,
   decltype(::std:: declval<const _Alloc&>().select_on_container_copy_construction())>>
  : true_type
 {
 };



template<class _Alloc>
 struct allocator_traits;

#pragma warning(push)
#pragma warning(disable: 4996)
template<class _Alloc>
 struct _Normal_allocator_traits
 {
 using allocator_type = _Alloc;
 using value_type = typename _Alloc::value_type;

 using pointer = typename _Get_pointer_type<_Alloc>::type;
 using const_pointer = typename _Get_const_pointer_type<_Alloc>::type;
 using void_pointer = typename _Get_void_pointer_type<_Alloc>::type;
 using const_void_pointer = typename _Get_const_void_pointer_type<_Alloc>::type;

 using size_type = typename _Get_size_type<_Alloc>::type;
 using difference_type = typename _Get_difference_type<_Alloc>::type;

 using propagate_on_container_copy_assignment = typename _Get_propagate_on_container_copy<_Alloc>::type;
 using propagate_on_container_move_assignment = typename _Get_propagate_on_container_move<_Alloc>::type;
 using propagate_on_container_swap = typename _Get_propagate_on_container_swap<_Alloc>::type;
 using is_always_equal = typename _Get_is_always_equal<_Alloc>::type;

 template<class _Other>
  using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

 template<class _Other>
  using rebind_traits = allocator_traits<rebind_alloc<_Other>>;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, const size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer _Allocate1(_Alloc& _Al, const size_type _Count,
  const const_void_pointer _Hint, true_type)
  {
  return (_Al.allocate(_Count, _Hint));
  }

 static __declspec(allocator) pointer _Allocate1(_Alloc& _Al, const size_type _Count,
  const_void_pointer, false_type)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, const size_type _Count,
  const const_void_pointer _Hint)
  {
  return (_Allocate1(_Al, _Count, _Hint, _Has_allocate_hint<_Alloc, size_type, const_void_pointer>{}));
  }

 static void deallocate(_Alloc& _Al, pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  static void _Construct1(true_type, _Alloc&, _Ty *_Ptr, _Types&&... _Args)
  {
  ::new (static_cast<void *>(_Ptr)) _Ty(::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class... _Types>
  static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr, _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class... _Types>
  static void construct(_Alloc& _Al, _Ty *_Ptr, _Types&&... _Args)
  {
  _Construct1(_Uses_default_construct_t<_Alloc, _Ty *, _Types...>(),
   _Al, _Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty>
  static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
  {
  _Ptr->~_Ty();
  }

 template<class _Ty>
  static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
  {
  _Al.destroy(_Ptr);
  }

 template<class _Ty>
  static void destroy(_Alloc& _Al, _Ty *_Ptr)
  {
  _Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Alloc, _Ty *>());
  }

 static size_type _Max_size1(const _Alloc& _Al, true_type) noexcept
  {
  return (_Al.max_size());
  }

 static size_type _Max_size1(const _Alloc&, false_type) noexcept
  {
  return ((numeric_limits<size_type>::max)() / sizeof(value_type));
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Max_size1(_Al, _Has_max_size<_Alloc>{}));
  }

 static _Alloc _Select_on_container_copy_construction1(const _Alloc& _Al, true_type)
  {
  return (_Al.select_on_container_copy_construction());
  }

 static _Alloc _Select_on_container_copy_construction1(const _Alloc& _Al, false_type)
  {
  return (_Al);
  }

 static _Alloc select_on_container_copy_construction(const _Alloc& _Al)
  {
  return (_Select_on_container_copy_construction1(_Al, _Has_select_on_container_copy_construction<_Alloc>{}));
  }
 };
#pragma warning(pop)

template<class _Alloc>
 struct _Default_allocator_traits
 {
 using allocator_type = _Alloc;
 using value_type = typename _Alloc::value_type;

 using pointer = value_type *;
 using const_pointer = const value_type *;
 using void_pointer = void *;
 using const_void_pointer = const void *;

 using size_type = size_t;
 using difference_type = ptrdiff_t;

 using propagate_on_container_copy_assignment = false_type;
 using propagate_on_container_move_assignment = true_type;
 using propagate_on_container_swap = false_type;
 using is_always_equal = true_type;

 template<class _Other>
  using rebind_alloc = allocator<_Other>;

 template<class _Other>
  using rebind_traits = allocator_traits<allocator<_Other>>;

 static __declspec(allocator) pointer allocate(_Alloc&, const size_type _Count)
  {
  return (static_cast<pointer>(_Allocate(_Count, sizeof(value_type), alignof(value_type))));
  }

 static __declspec(allocator) pointer allocate(_Alloc&, const size_type _Count,
  const_void_pointer)
  {
  return (static_cast<pointer>(_Allocate(_Count, sizeof(value_type), alignof(value_type))));
  }

 static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count)
  {
  _Deallocate(_Ptr, _Count, sizeof(value_type), alignof(value_type));
  }

 template<class _Objty,
  class... _Types>
  static void construct(_Alloc&, _Objty * const _Ptr, _Types&&... _Args)
  {
  ::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
   _Objty(::std:: forward<_Types>(_Args)...);
  }

 template<class _Uty>
  static void destroy(_Alloc&, _Uty * const _Ptr)
  {
  _Ptr->~_Uty();
  }

 static size_type max_size(const _Alloc&) noexcept
  {
  return (static_cast<size_t>(-1) / sizeof(value_type));
  }

 static _Alloc select_on_container_copy_construction(const _Alloc& _Al)
  {
  return (_Al);
  }
 };

template<class _Alloc>
 struct allocator_traits
  : conditional_t<_Is_default_allocator<_Alloc>::value,
   _Default_allocator_traits<_Alloc>, _Normal_allocator_traits<_Alloc>>
 {
 };


template<class _Alloc,
 class _Value_type>
 using _Rebind_alloc_t = typename allocator_traits<_Alloc>::template rebind_alloc<_Value_type>;


template<class _Alloc>
             constexpr bool _Is_simple_alloc_v =
  is_same_v<typename allocator_traits<_Alloc>::size_type, size_t>
  && is_same_v<typename allocator_traits<_Alloc>::difference_type, ptrdiff_t>
  && is_same_v<typename allocator_traits<_Alloc>::pointer, typename _Alloc::value_type *>
  && is_same_v<typename allocator_traits<_Alloc>::const_pointer, const typename _Alloc::value_type *>;


template<class _Value_type>
 struct _Simple_types
 {

 using value_type = _Value_type;
 using size_type = size_t;
 using difference_type = ptrdiff_t;
 using pointer = value_type *;
 using const_pointer = const value_type *;
 };


template<class _Ty>
 class allocator
 {
public:
 static_assert(!is_const_v<_Ty>,
  "The C++ Standard forbids containers of const elements "
  "because allocator<const T> is ill-formed.");

 using _Not_user_specialized = void;

 using value_type = _Ty;

                                        typedef _Ty * pointer;
                                        typedef const _Ty * const_pointer;

                                        typedef _Ty& reference;
                                        typedef const _Ty& const_reference;

                                        typedef size_t size_type;
                                        typedef ptrdiff_t difference_type;

 using propagate_on_container_move_assignment = true_type;
 using is_always_equal = true_type;

 template<class _Other>
  struct rebind
  {
  using other = allocator<_Other>;
  };

                                        _Ty * address(_Ty& _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

                                        const _Ty * address(const _Ty& _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 allocator() noexcept
  {
  }

 allocator(const allocator&) noexcept = default;
 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 void deallocate(_Ty * const _Ptr, const size_t _Count)
  {
  _Deallocate(_Ptr, _Count, sizeof(_Ty), alignof(_Ty));
  }

 __declspec(allocator) _Ty * allocate( const size_t _Count)
  {
  return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));
  }

                                        __declspec(allocator) _Ty * allocate(
                     const size_t _Count, const void *)
  {
  return (allocate(_Count));
  }

 template<class _Objty,
  class... _Types>
                                         void construct(_Objty * const _Ptr, _Types&&... _Args)
  {
  ::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
   _Objty(::std:: forward<_Types>(_Args)...);
  }

 template<class _Uty>
                                         void destroy(_Uty * const _Ptr)
  {
  _Ptr->~_Uty();
  }

                                        size_t max_size() const noexcept
  {
  return (static_cast<size_t>(-1) / sizeof(_Ty));
  }
 };


template<>
 class allocator<void>
 {
public:
 using value_type = void;
 using pointer = void *;
 using const_pointer = const void *;

 template<class _Other>
  struct rebind
  {
  using other = allocator<_Other>;
  };
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) noexcept
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>&,
  const allocator<_Other>&) noexcept
 {
 return (false);
 }


template<class _Alloc> inline
 void _Pocca(_Alloc& _Left, const _Alloc& _Right, true_type) noexcept
 {
 _Left = _Right;
 }

template<class _Alloc> inline
 void _Pocca(_Alloc&, const _Alloc&, false_type) noexcept
 {
 }

template<class _Alloc> inline
 void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept
 {
 typename allocator_traits<_Alloc>::propagate_on_container_copy_assignment _Tag;
 _Pocca(_Left, _Right, _Tag);
 }


template<class _Alloc> inline
 void _Pocma(_Alloc& _Left, _Alloc& _Right, true_type) noexcept
 {
 _Left = ::std:: move(_Right);
 }

template<class _Alloc> inline
 void _Pocma(_Alloc&, _Alloc&, false_type) noexcept
 {
 }

template<class _Alloc> inline
 void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept
 {
 typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
 _Pocma(_Left, _Right, _Tag);
 }


template<class _Alloc> inline
 void _Pocs(_Alloc& _Left, _Alloc& _Right, true_type) noexcept
 {
 _Swap_adl(_Left, _Right);
 }

template<class _Alloc> inline
 void _Pocs(_Alloc& _Left, _Alloc& _Right, false_type) noexcept
 {
 if (_Left != _Right)
  {



  ::std:: terminate();

  }
 }

template<class _Alloc> inline
 void _Pocs(_Alloc& _Left, _Alloc& _Right) noexcept
 {
 typename allocator_traits<_Alloc>::propagate_on_container_swap _Tag;
 _Pocs(_Left, _Right, _Tag);
 }



template<class _Alloc> inline
 void _Destroy_range1(
  typename allocator_traits<_Alloc>::pointer _First,
  typename allocator_traits<_Alloc>::pointer _Last,
  _Alloc& _Al, false_type)
 {
 for (; _First != _Last; ++_First)
  {
  allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
  }
 }

template<class _Alloc> inline
 void _Destroy_range1(
  typename allocator_traits<_Alloc>::pointer,
  typename allocator_traits<_Alloc>::pointer,
  _Alloc&, true_type)
 {

 }

template<class _Alloc> inline
 void _Destroy_range(
  typename allocator_traits<_Alloc>::pointer _First,
  typename allocator_traits<_Alloc>::pointer _Last,
  _Alloc& _Al)
 {


 using _Val = typename _Alloc::value_type;
 _Destroy_range1(_First, _Last, _Al, _Conjunction_t<
  is_trivially_destructible<_Val>,
  _Uses_default_destroy<_Alloc, _Val *>>());
 }



template<class _FwdIt> inline
 void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
 {
 for (; _First != _Last; ++_First)
  {
  _Destroy_in_place(*_First);
  }
 }

template<class _FwdIt> inline
 void _Destroy_range1(_FwdIt, _FwdIt, true_type)
 {

 }

template<class _FwdIt> inline
 void _Destroy_range(_FwdIt _First, _FwdIt _Last)
 {


 _Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
 }



template<class _Size_type> inline
 _Size_type _Convert_size(const size_t _Len)
 {
 if (_Len > (numeric_limits<_Size_type>::max)())
  {
  _Xlength_error("size_t too long for _Size_type");
  }

 return (static_cast<_Size_type>(_Len));
 }

template<> inline
 size_t _Convert_size<size_t>(const size_t _Len)
 {
 return (_Len);
 }


template<class _Iter1,
 class _Iter2,
 class _UIter1,
 class _UIter2>
 constexpr pair<_Iter1, _Iter2>
  _Rechecked_both(_Iter1 _Dest1, _Iter2 _Dest2, pair<_UIter1, _UIter2> _Src)
 {
 return {_Rechecked(_Dest1, _Src.first), _Rechecked(_Dest2, _Src.second)};
 }
# 1313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 3
template<class _Alloc,
 enable_if_t<is_same_v<typename allocator_traits<_Alloc>::pointer,
  typename _Alloc::value_type *>, int> = 0> inline
 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type * const _Ptr)
 {
 allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);
 }

template<class _Alloc,
 enable_if_t<!is_same_v<typename allocator_traits<_Alloc>::pointer,
  typename _Alloc::value_type *>, int> = 0> inline
 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type * const _Ptr)
 {
 using _Alloc_traits = allocator_traits<_Alloc>;
 using _Ptr_traits = pointer_traits<typename _Alloc_traits::pointer>;
 _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
 }
}



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xatomic0.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

typedef enum memory_order {
 memory_order_relaxed,
 memory_order_consume,
 memory_order_acquire,
 memory_order_release,
 memory_order_acq_rel,
 memory_order_seq_cst
 } memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;
# 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xatomic0.h" 3
typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
 _Get_atomic_count(const _Atomic_counter_t& _Counter)
 {
 return (_Counter);
 }
# 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xatomic0.h" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 2 3



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\intrin0.h" 1 3
# 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\intrin0.h" 3
extern "C" {
# 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\intrin0.h" 3
unsigned char _bittest(long const *, long);
long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);







char _InterlockedAnd8(char volatile * _Value, char _Mask);






long __cdecl _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);



__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);



char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);






long __cdecl _InterlockedDecrement(long volatile * _Addend);

long __cdecl _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);







char _InterlockedExchange8(char volatile * _Target, char _Value);



long __cdecl _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);







char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);
# 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\intrin0.h" 3
long __cdecl _InterlockedIncrement(long volatile * _Addend);

long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);







char _InterlockedOr8(char volatile * _Value, char _Mask);






long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);







char _InterlockedXor8(char volatile * _Value, char _Mask);






void _ReadWriteBarrier(void);
# 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\intrin0.h" 3
unsigned char _interlockedbittestandset(long volatile *, long);
# 244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\intrin0.h" 3
}
# 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 2 3
# 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory0" 3
#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {
template<class _Traits>
 using _Traits_ch_t = typename _Traits::char_type;

template<class _Traits>
 using _Traits_ptr_t = const typename _Traits::char_type *;

template<class _Traits>
 constexpr bool _Traits_equal( const _Traits_ptr_t<_Traits> _Left, const size_t _Left_size,
                          const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept
 {
 return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);
 }

template<class _Traits>
 constexpr int _Traits_compare( const _Traits_ptr_t<_Traits> _Left, const size_t _Left_size,
                          const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept
 {
 const int _Ans = _Traits::compare(_Left, _Right, _Min_value(_Left_size, _Right_size));

 if (_Ans != 0)
  {
  return (_Ans);
  }

 if (_Left_size < _Right_size)
  {
  return (-1);
  }

 if (_Left_size > _Right_size)
  {
  return (1);
  }

 return (0);
 }

template<class _Traits>
 constexpr size_t _Traits_find(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
                           const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
 {
 if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size)
  {







  return (static_cast<size_t>(-1));
  }

 if (_Needle_size == 0)
  {
  return (_Start_at);
  }

 const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;
 for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)
  {
  _Match_try = _Traits::find(_Match_try, _Possible_matches_end - _Match_try, *_Needle);
  if (!_Match_try)
   {
   return (static_cast<size_t>(-1));
   }

  if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0)
   {
   return (_Match_try - _Haystack);
   }
  }
 }

template<class _Traits>
 constexpr size_t _Traits_find_ch(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
  const _Traits_ch_t<_Traits> _Ch) noexcept
 {
 if (_Start_at < _Hay_size)
  {
  const auto _Found_at = _Traits::find(_Haystack + _Start_at, _Hay_size - _Start_at, _Ch);
  if (_Found_at)
   {
   return (_Found_at - _Haystack);
   }
  }

 return (static_cast<size_t>(-1));
 }

template<class _Traits>
 constexpr size_t _Traits_rfind(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
                           const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
 {
 if (_Needle_size == 0)
  {
  return (_Min_value(_Start_at, _Hay_size));
  }

 if (_Needle_size <= _Hay_size)
  {
  for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - _Needle_size); ; --_Match_try)
   {
   if (_Traits::eq(*_Match_try, *_Needle)
    && _Traits::compare(_Match_try, _Needle, _Needle_size) == 0)
    {
    return (_Match_try - _Haystack);
    }

   if (_Match_try == _Haystack)
    {
    break;
    }
   }
  }

 return (static_cast<size_t>(-1));
 }

template<class _Traits>
 constexpr size_t _Traits_rfind_ch(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
  const _Traits_ch_t<_Traits> _Ch) noexcept
 {
 if (_Hay_size != 0)
  {
  for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
   {
   if (_Traits::eq(*_Match_try, _Ch))
    {
    return (_Match_try - _Haystack);
    }

   if (_Match_try == _Haystack)
    {
    break;
    }
   }
  }

 return (static_cast<size_t>(-1));
 }

template<class _Traits>
 constexpr size_t _Traits_find_first_of(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
                           const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
 {
 if (_Needle_size != 0 && _Start_at < _Hay_size)
  {
  const auto _End = _Haystack + _Hay_size;
  for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
   {
   if (_Traits::find(_Needle, _Needle_size, *_Match_try))
    {
    return (_Match_try - _Haystack);
    }
   }
  }

 return (static_cast<size_t>(-1));
 }

template<class _Traits>
 constexpr size_t _Traits_find_last_of(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
                           const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
 {
 if (_Needle_size != 0 && _Hay_size != 0)
  {
  for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
   {
   if (_Traits::find(_Needle, _Needle_size, *_Match_try))
    {
    return (_Match_try - _Haystack);
    }

   if (_Match_try == _Haystack)
    {
    break;
    }
   }
  }

 return (static_cast<size_t>(-1));
 }

template<class _Traits>
 constexpr size_t _Traits_find_first_not_of(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
                           const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
 {
 if (_Start_at < _Hay_size)
  {
  const auto _End = _Haystack + _Hay_size;
  for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
   {
   if (!_Traits::find(_Needle, _Needle_size, *_Match_try))
    {
    return (_Match_try - _Haystack);
    }
   }
  }

 return (static_cast<size_t>(-1));
 }

template<class _Traits>
 constexpr size_t _Traits_find_not_ch(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
  const _Traits_ch_t<_Traits> _Ch) noexcept
 {
 if (_Start_at < _Hay_size)
  {
  const auto _End = _Haystack + _Hay_size;
  for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
   {
   if (!_Traits::eq(*_Match_try, _Ch))
    {
    return (_Match_try - _Haystack);
    }
   }
  }

 return (static_cast<size_t>(-1));
 }

template<class _Traits>
 constexpr size_t _Traits_find_last_not_of(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
                           const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
 {
 if (_Hay_size != 0)
  {
  for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
   {
   if (!_Traits::find(_Needle, _Needle_size, *_Match_try))
    {
    return (_Match_try - _Haystack);
    }

   if (_Match_try == _Haystack)
    {
    break;
    }
   }
  }

 return (static_cast<size_t>(-1));
 }

template<class _Traits>
 constexpr size_t _Traits_rfind_not_ch(
                        const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
  const _Traits_ch_t<_Traits> _Ch) noexcept
 {
 if (_Hay_size != 0)
  {
  for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
   {
   if (!_Traits::eq(*_Match_try, _Ch))
    {
    return (_Match_try - _Haystack);
    }

   if (_Match_try == _Haystack)
    {
    break;
    }
   }
  }

 return (static_cast<size_t>(-1));
 }
# 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
template<class _Mystr>
 class _String_const_iterator
  : public _Iterator_base
 {
public:
 using iterator_category = random_access_iterator_tag;

 using value_type = typename _Mystr::value_type;
 using difference_type = typename _Mystr::difference_type;
 using pointer = typename _Mystr::const_pointer;
 using reference = const value_type&;

 _String_const_iterator()
  : _Ptr()
  {
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pstring);
  }

 using _Unchecked_type = pointer;

 reference operator*() const
  {
# 1222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
                         ;
  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _String_const_iterator& operator++()
  {
# 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
  ++_Ptr;
  return (*this);
  }

 _String_const_iterator operator++(int)
  {
  _String_const_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _String_const_iterator& operator--()
  {
# 1263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
  --_Ptr;
  return (*this);
  }

 _String_const_iterator operator--(int)
  {
  _String_const_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _String_const_iterator& operator+=(const difference_type _Off)
  {
# 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
  _Ptr += _Off;
  return (*this);
  }

 _String_const_iterator operator+(const difference_type _Off) const
  {
  _String_const_iterator _Tmp = *this;
  return (_Tmp += _Off);
  }

 _String_const_iterator& operator-=(const difference_type _Off)
  {
  return (*this += -_Off);
  }

 _String_const_iterator operator-(const difference_type _Off) const
  {
  _String_const_iterator _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _String_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](const difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _String_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _String_const_iterator& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _String_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _String_const_iterator& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _String_const_iterator& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _String_const_iterator& _Right) const
  {
  return (!(*this < _Right));
  }
# 1363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 void _Compat(const _String_const_iterator&) const
  {
  }


 pointer _Ptr;
 };

template<class _Mystr> inline
 _String_const_iterator<_Mystr> operator+(
  typename _String_const_iterator<_Mystr>::difference_type _Off,
  _String_const_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr>& _Rechecked(_String_const_iterator<_Mystr>& _Iter,
  const typename _String_const_iterator<_Mystr>::_Unchecked_type _Right)
 {
 _Iter._Ptr = _Right;
 return (_Iter);
 }

template<class _Mystr> inline
 typename _String_const_iterator<_Mystr>::_Unchecked_type _Unchecked(
  const _String_const_iterator<_Mystr>& _Iter)
 {
 return (_Iter._Ptr);
 }


template<class _Mystr>
 class _String_iterator
  : public _String_const_iterator<_Mystr>
 {
public:
 using _Mybase = _String_const_iterator<_Mystr>;
 using iterator_category = random_access_iterator_tag;

 using value_type = typename _Mystr::value_type;
 using difference_type = typename _Mystr::difference_type;
 using pointer = typename _Mystr::pointer;
 using reference = value_type&;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 using _Unchecked_type = pointer;

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _String_iterator& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _String_iterator operator++(int)
  {
  _String_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _String_iterator& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _String_iterator operator--(int)
  {
  _String_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _String_iterator& operator+=(const difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _String_iterator operator+(const difference_type _Off) const
  {
  _String_iterator _Tmp = *this;
  return (_Tmp += _Off);
  }

 _String_iterator& operator-=(const difference_type _Off)
  {
  return (*this += -_Off);
  }

 _String_iterator operator-(const difference_type _Off) const
  {
  _String_iterator _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](const difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mystr> inline
 _String_iterator<_Mystr> operator+(
  typename _String_iterator<_Mystr>::difference_type _Off,
  _String_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }

template<class _Mystr> inline
 _String_iterator<_Mystr>& _Rechecked(_String_iterator<_Mystr>& _Iter,
  const typename _String_iterator<_Mystr>::_Unchecked_type _Right)
 {
 _Iter._Ptr = _Right;
 return (_Iter);
 }

template<class _Mystr> inline
 typename _String_iterator<_Mystr>::_Unchecked_type _Unchecked(
  const _String_iterator<_Mystr>& _Iter)
 {
 return (_Const_cast(_Iter._Ptr));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _String_iter_types
 {
 using value_type = _Value_type;
 using size_type = _Size_type;
 using difference_type = _Difference_type;
 using pointer = _Pointer;
 using const_pointer = _Const_pointer;
 };

template<class _Ty,
 class _Alloc>
 struct _String_base_types
 {
 using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
 using _Alty_traits = allocator_traits<_Alty>;

 using _Val_types = conditional_t<_Is_simple_alloc_v<_Alty>,
  _Simple_types<_Ty>,
  _String_iter_types<_Ty,
   typename _Alty_traits::size_type,
   typename _Alty_traits::difference_type,
   typename _Alty_traits::pointer,
   typename _Alty_traits::const_pointer,
   _Ty&,
   const _Ty&>>;
 };


template<class _Val_types>
 class _String_val
  : public _Container_base
 {
public:
 using value_type = typename _Val_types::value_type;
 using size_type = typename _Val_types::size_type;
 using difference_type = typename _Val_types::difference_type;
 using pointer = typename _Val_types::pointer;
 using const_pointer = typename _Val_types::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 _String_val()
  : _Bx(),
  _Mysize(0),
  _Myres(0)
  {
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
   : 16 / sizeof (value_type)};
 enum
  {
  _ALLOC_MASK = sizeof (value_type) <= 1 ? 15
   : sizeof (value_type) <= 2 ? 7
   : sizeof (value_type) <= 4 ? 3
   : sizeof (value_type) <= 8 ? 1 : 0
  };

 value_type *_Myptr()
  {
  value_type * _Result = _Bx._Buf;
  if (_Large_string_engaged())
   {
   _Result = _Unfancy(_Bx._Ptr);
   }

  return (_Result);
  }

 const value_type *_Myptr() const
  {
  const value_type * _Result = _Bx._Buf;
  if (_Large_string_engaged())
   {
   _Result = _Unfancy(_Bx._Ptr);
   }

  return (_Result);
  }

 bool _Large_string_engaged() const
  {
  return (_BUF_SIZE <= _Myres);
  }

 void _Check_offset(const size_type _Off) const
  {
  if (_Mysize < _Off)
   {
   _Xran();
   }
  }

 void _Check_offset_exclusive(const size_type _Off) const
  {
  if (_Mysize <= _Off)
   {
   _Xran();
   }
  }

 [[noreturn]] static void _Xran()
  {
  _Xout_of_range("invalid string position");
  }

 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept
  {
  return (_Min_value(_Size, _Mysize - _Off));
  }

 union _Bxty
  {
  _Bxty()
   {
   }

  ~_Bxty() noexcept
   {
   }

  value_type _Buf[_BUF_SIZE];
  pointer _Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };


template<class _Alloc_types>
 class _String_alloc
 {
public:
 using _Alty = typename _Alloc_types::_Alty;
 using _Alty_traits = typename _Alloc_types::_Alty_traits;
 using _Alproxy = _Rebind_alloc_t<_Alty, _Container_proxy>;
 using _Alproxy_traits = allocator_traits<_Alproxy>;
 using _Val_types = typename _Alloc_types::_Val_types;
 using _Mydata_t = _String_val<_Val_types>;
 using _Bxty = typename _Mydata_t::_Bxty;

 using value_type = typename _Val_types::value_type;
 using size_type = typename _Val_types::size_type;
 using difference_type = typename _Val_types::difference_type;
 using pointer = typename _Val_types::pointer;
 using const_pointer = typename _Val_types::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 using iterator = _String_iterator<_Mydata_t>;
 using const_iterator = _String_const_iterator<_Mydata_t>;

 enum
  {
  _BUF_SIZE = _Mydata_t::_BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _Mydata_t::_ALLOC_MASK
  };


 _String_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same_v<decay_t<_Any_alloc>, _String_alloc>>>
  _String_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Pocca(_Getal(), _Al);
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Pocma(_Getal(), _Al);
  }
# 1800 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_String_alloc& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Mydata_t& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Mydata_t& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

private:
 _Compressed_pair<_Alty, _Mydata_t> _Mypair;
 };



template<class _Ty>
 constexpr size_t _Size_after_ebco_v
  = is_empty_v<_Ty> ? 0 : sizeof(_Ty);

template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem>>
 class basic_string
  : public _String_alloc<_String_base_types<_Elem, _Alloc>>
 {
public:
 static_assert(!0 || is_same_v<_Elem, typename _Alloc::value_type>,
  "basic_string<T, Traits, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

 static_assert(is_same_v<_Elem, typename _Traits::char_type>,
  "N4659 24.3.2.1 [string.require]/3 requires that the supplied "
  "char_traits character type match the string's character type.");

 using _Mybase = _String_alloc<_String_base_types<_Elem, _Alloc>>;
 using traits_type = _Traits;
 using allocator_type = _Alloc;

 using _Alty = typename _Mybase::_Alty;
 using _Alty_traits = typename _Mybase::_Alty_traits;
 using _Mydata_t = typename _Mybase::_Mydata_t;

 using value_type = typename _Mybase::value_type;
 using size_type = typename _Mybase::size_type;
 using difference_type = typename _Mybase::difference_type;
 using pointer = typename _Mybase::pointer;
 using const_pointer = typename _Mybase::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 using iterator = typename _Mybase::iterator;
 using const_iterator = typename _Mybase::const_iterator;

 using reverse_iterator = ::std:: reverse_iterator<iterator>;
 using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;
# 1886 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 using _Use_memcpy_move = bool_constant<
  _Is_specialization<_Traits, char_traits>::value && is_trivial_v<pointer>>;

 static constexpr size_t _Memcpy_move_offset = _Size_after_ebco_v<_Container_base>;
 static constexpr size_t _Memcpy_move_size = sizeof(_Mydata_t) - _Memcpy_move_offset;

 template<class _Iter>
  using _Is_elem_cptr = _Disjunction_t<
   is_same<_Iter, const _Elem * const>,
   is_same<_Iter, _Elem * const>,
   is_same<_Iter, const _Elem *>,
   is_same<_Iter, _Elem *>>;
# 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string(const basic_string& _Right)
  : _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
  {
  _Construct_lv_contents(_Right);
  }

 basic_string(const basic_string& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_lv_contents(_Right);
  }

 basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>)
  : _Mybase()
  {
  _Tidy_init();
  }

 explicit basic_string(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  _Tidy_init();
  }

 basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  _Tidy_init();
  assign(_Right, _Roff, npos);
  }

 basic_string(const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  _Tidy_init();
  assign(_Right, _Roff, _Count);
  }

 basic_string( const _Elem * const _Ptr, const size_type _Count)
  : _Mybase()
  {
  _Tidy_init();
  assign(_Ptr, _Count);
  }

 basic_string( const _Elem * const _Ptr, const size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy_init();
  assign(_Ptr, _Count);
  }

 basic_string( const _Elem * const _Ptr)
  : _Mybase()
  {
  _Tidy_init();
  assign(_Ptr);
  }

 basic_string( const _Elem * const _Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy_init();
  assign(_Ptr);
  }

 basic_string( const size_type _Count, const _Elem _Ch)
  : _Mybase()
  {
  _Tidy_init();
  assign(_Count, _Ch);
  }

 basic_string( const size_type _Count, const _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy_init();
  assign(_Count, _Ch);
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
                             ;
  _Tidy_init();
  _Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Construct(_Iter _First, const _Iter _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   {
   push_back(static_cast<_Elem>(*_First));
   }

  } catch (...) {
  _Tidy_deallocate();
  throw;
  }
  }

 template<class _Iter>
  void _Construct(const _Iter _First, const _Iter _Last, forward_iterator_tag)
  {
  const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
  reserve(_Count);
  _Construct(_First, _Last, input_iterator_tag());
  }

 void _Construct(_Elem * const _First, _Elem * const _Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   {
   assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
   }
  }

 void _Construct(const _Elem * const _First, const _Elem * const _Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   {
   assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
   }
  }

 basic_string(basic_string&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
  }

 basic_string(basic_string&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv_contents(::std:: move(_Right), typename _Alty_traits::is_always_equal{});
  }
# 2067 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string& operator=(basic_string&& _Right)
  noexcept(_Alty_traits::propagate_on_container_move_assignment::value || _Alty_traits::is_always_equal::value)

  {
  if (this != ::std:: addressof(_Right))
   {
   _Tidy_deallocate();
   this->_Move_alloc(_Right._Getal());


   _Assign_rv_contents(::std:: move(_Right),
    bool_constant<_Alty_traits::propagate_on_container_move_assignment::value
    || _Alty_traits::is_always_equal::value>{});
   }

  return (*this);
  }

 basic_string& assign(basic_string&& _Right) noexcept(_Alty_traits::propagate_on_container_move_assignment::value || _Alty_traits::is_always_equal::value)

  {
  *this = ::std:: move(_Right);
  return (*this);
  }

 void _Assign_rv_contents(basic_string&& _Right, true_type)
  {



  _Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
  }

 void _Assign_rv_contents(basic_string&& _Right, false_type)
  {



  if (this->_Getal() == _Right._Getal())
   {
   _Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
   }
  else
   {
   _Construct_lv_contents(_Right);
   }
  }

 void _Assign_rv_contents_with_alloc_always_equal(basic_string&& _Right, true_type)
  {



  auto& _Right_data = _Right._Get_data();
# 2133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
  const auto _My_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(this->_Get_data()))
   + _Memcpy_move_offset;
  const auto _Right_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(_Right_data))
   + _Memcpy_move_offset;
  :: memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);
  _Right._Tidy_init();
  }

 void _Assign_rv_contents_with_alloc_always_equal(basic_string&& _Right, false_type)
  {



  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  if (_Right_data._Large_string_engaged())
   {
   _Alty_traits::construct(this->_Getal(), ::std:: addressof(_My_data._Bx._Ptr), _Right_data._Bx._Ptr);
   _Right_data._Bx._Ptr = pointer();
   this->_Swap_all(_Right);
   }
  else
   {
   _Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);
   _Right._Orphan_all();
   }

  _My_data._Mysize = _Right_data._Mysize;
  _My_data._Myres = _Right_data._Myres;
  _Right._Tidy_init();
  }

 void _Construct_lv_contents(const basic_string& _Right)
  {


  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  const size_type _Right_size = _Right_data._Mysize;
  const _Elem * const _Right_ptr = _Right_data._Myptr();
  if (_Right_size < this->_BUF_SIZE)
   {
   _Traits::copy(_My_data._Bx._Buf, _Right_ptr, this->_BUF_SIZE);
   _My_data._Mysize = _Right_size;
   _My_data._Myres = this->_BUF_SIZE - 1;
   return;
   }

  auto& _Al = this->_Getal();
  const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());
  const pointer _New_array = _Al.allocate(_New_capacity + 1);
  _Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_array);
  _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);
  _My_data._Mysize = _Right_size;
  _My_data._Myres = _New_capacity;
  }

 basic_string(initializer_list<_Elem> _Ilist, const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Tidy_init();
  assign(_Ilist.begin(), _Ilist.size());
  }

 basic_string& operator=(initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.size()));
  }

 basic_string& operator+=(initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.size()));
  }

 basic_string& assign(initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.size()));
  }

 basic_string& append(initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.size()));
  }

 iterator insert(const const_iterator _Where, const initializer_list<_Elem> _Ilist)
  {
  const size_type _Off = _Where - begin();
  insert(_Off, _Ilist.begin(), _Ilist.size());
  return (begin() + _Off);
  }

 basic_string& replace(const const_iterator _First, const const_iterator _Last, const initializer_list<_Elem> _Ilist)
  {
  return (replace(_First - begin(), _Last - _First, _Ilist.begin(), _Ilist.size()));
  }

 ~basic_string() noexcept
  {
  _Tidy_deallocate();
  }

 static constexpr auto npos{static_cast<size_type>(-1)};

 basic_string& operator=(const basic_string& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
#pragma warning(push)
#pragma warning(disable: 4127)
 if (_Alty_traits::propagate_on_container_copy_assignment::value
    && this->_Getal() != _Right._Getal())
    {
    _Tidy_deallocate();
    }
#pragma warning(pop)

 this->_Copy_alloc(_Right._Getal());

   auto& _Right_data = _Right._Get_data();
   assign(_Right_data._Myptr(), _Right_data._Mysize);
   }

  return (*this);
  }
# 2265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string& operator=( const _Elem * const _Ptr)
  {
  return (assign(_Ptr));
  }

 basic_string& operator=(const _Elem _Ch)
  {
  auto& _My_data = this->_Get_data();
  _My_data._Mysize = 1;
  _Elem * const _Ptr = _My_data._Myptr();
  _Traits::assign(_Ptr[0], _Ch);
  _Traits::assign(_Ptr[1], _Elem());
  return (*this);
  }

 basic_string& operator+=(const basic_string& _Right)
  {
  return (append(_Right));
  }
# 2292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string& operator+=( const _Elem * const _Ptr)
  {
  return (append(_Ptr));
  }

 basic_string& operator+=(_Elem _Ch)
  {
  push_back(_Ch);
  return (*this);
  }

 basic_string& append(const basic_string& _Right)
  {
  auto& _Right_data = _Right._Get_data();
  return (append(_Right_data._Myptr(), _Right_data._Mysize));
  }

 basic_string& append(const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
  {
  auto& _Right_data = _Right._Get_data();
  _Right_data._Check_offset(_Roff);
  _Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
  return (append(_Right_data._Myptr() + _Roff, _Count));
  }
# 2332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string& append( const _Elem * const _Ptr, const size_type _Count)
  {
  auto& _My_data = this->_Get_data();
  const size_type _Old_size = _My_data._Mysize;
  if (_Count <= _My_data._Myres - _Old_size)
   {
   _My_data._Mysize = _Old_size + _Count;
   _Elem * const _Old_ptr = _My_data._Myptr();
   _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);
   _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());
   return (*this);
   }

  return (_Reallocate_grow_by(_Count,
   [](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const _Elem * const _Ptr, const size_type _Count) {
   _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
   _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
   _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
   }, _Ptr, _Count));
  }

 basic_string& append( const _Elem * const _Ptr)
  {
  return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
  }

 basic_string& append( const size_type _Count, const _Elem _Ch)
  {
  auto& _My_data = this->_Get_data();
  const size_type _Old_size = _My_data._Mysize;
  if (_Count <= _My_data._Myres - _Old_size)
   {
   _My_data._Mysize = _Old_size + _Count;
   _Elem * const _Old_ptr = _My_data._Myptr();
   _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);
   _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());
   return (*this);
   }

  return (_Reallocate_grow_by(_Count,
   [](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Count, const _Elem _Ch) {
   _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
   _Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
   _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
   }, _Count, _Ch));
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  basic_string& append(const _Iter _First, const _Iter _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 basic_string& assign(const basic_string& _Right)
  {
  *this = _Right;
  return (*this);
  }

 basic_string& assign(const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
  {
  auto& _Right_data = _Right._Get_data();
  _Right_data._Check_offset(_Roff);
  _Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
  return (assign(_Right_data._Myptr() + _Roff, _Count));
  }
# 2417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string& assign( const _Elem * const _Ptr, const size_type _Count)
  {
  auto& _My_data = this->_Get_data();
  if (_Count <= _My_data._Myres)
   {
   _Elem * const _Old_ptr = _My_data._Myptr();
   _My_data._Mysize = _Count;
   _Traits::move(_Old_ptr, _Ptr, _Count);
   _Traits::assign(_Old_ptr[_Count], _Elem());
   return (*this);
   }

  return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {
   _Traits::copy(_New_ptr, _Ptr, _Count);
   _Traits::assign(_New_ptr[_Count], _Elem());
   }, _Ptr));
  }

 basic_string& assign( const _Elem * const _Ptr)
  {
  return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
  }

 basic_string& assign( const size_type _Count, const _Elem _Ch)
  {
  auto& _My_data = this->_Get_data();
  if (_Count <= _My_data._Myres)
   {
   _Elem * const _Old_ptr = _My_data._Myptr();
   _My_data._Mysize = _Count;
   _Traits::assign(_Old_ptr, _Count, _Ch);
   _Traits::assign(_Old_ptr[_Count], _Elem());
   return (*this);
   }

  return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {
   _Traits::assign(_New_ptr, _Count, _Ch);
   _Traits::assign(_New_ptr[_Count], _Elem());
   }, _Ch));
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  basic_string& assign(const _Iter _First, const _Iter _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 basic_string& insert(const size_type _Off, const basic_string& _Right)
  {
  auto& _Right_data = _Right._Get_data();
  return (insert(_Off, _Right_data._Myptr(), _Right_data._Mysize));
  }

 basic_string& insert(const size_type _Off, const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
  {
  auto& _Right_data = _Right._Get_data();
  _Right_data._Check_offset(_Roff);
  _Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
  return (insert(_Off, _Right_data._Myptr() + _Roff, _Count));
  }
# 2495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string& insert(const size_type _Off, const _Elem * const _Ptr,
                     const size_type _Count)
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  const size_type _Old_size = _My_data._Mysize;
  if (_Count <= _My_data._Myres - _Old_size)
   {
   _My_data._Mysize = _Old_size + _Count;
   _Elem * const _Old_ptr = _My_data._Myptr();
   _Elem * const _Insert_at = _Old_ptr + _Off;


   size_type _Ptr_shifted_after;
   if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)
    {
    _Ptr_shifted_after = _Count;
    }
   else if (_Insert_at <= _Ptr)
    {
    _Ptr_shifted_after = 0;
    }
   else
    {
    _Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);
    }

   _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1);
   _Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);
   _Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after,
    _Count - _Ptr_shifted_after);
   return (*this);
   }

  return (_Reallocate_grow_by(_Count,
   [](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Off, const _Elem * const _Ptr, const size_type _Count) {
   _Traits::copy(_New_ptr, _Old_ptr, _Off);
   _Traits::copy(_New_ptr + _Off, _Ptr, _Count);
   _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
   }, _Off, _Ptr, _Count));
  }

 basic_string& insert(const size_type _Off, const _Elem * const _Ptr)
  {
  return (insert(_Off, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
  }

 basic_string& insert(const size_type _Off, const size_type _Count, const _Elem _Ch)
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  const size_type _Old_size = _My_data._Mysize;
  if (_Count <= _My_data._Myres - _Old_size)
   {
   _My_data._Mysize = _Old_size + _Count;
   _Elem * const _Old_ptr = _My_data._Myptr();
   _Elem * const _Insert_at = _Old_ptr + _Off;
   _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1);
   _Traits::assign(_Insert_at, _Count, _Ch);
   return (*this);
   }

  return (_Reallocate_grow_by(_Count,
   [](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Off, const size_type _Count, const _Elem _Ch) {
   _Traits::copy(_New_ptr, _Old_ptr, _Off);
   _Traits::assign(_New_ptr + _Off, _Count, _Ch);
   _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
   }, _Off, _Count, _Ch));
  }

 iterator insert(const const_iterator _Where, const _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 iterator insert(const const_iterator _Where, const size_type _Count, const _Elem _Ch)
  {
  const size_type _Off = _Where - begin();
  insert(_Off, _Count, _Ch);
  return (begin() + _Off);
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  iterator insert(const const_iterator _Where, const _Iter _First, const _Iter _Last)
  {
  const size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 basic_string& erase(const size_type _Off = 0)
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  _Eos(_Off);
  return (*this);
  }

 basic_string& erase(const size_type _Off, size_type _Count)
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  _Count = _My_data._Clamp_suffix_size(_Off, _Count);
  const size_type _Old_size = _My_data._Mysize;
  _Elem * const _My_ptr = _My_data._Myptr();
  _Elem * const _Erase_at = _My_ptr + _Off;
  const size_type _New_size = _Old_size - _Count;
  _My_data._Mysize = _New_size;
  _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1);
  return (*this);
  }

 iterator erase(const const_iterator _Where)
  {
  const size_type _Off = _Where - begin();
  erase(_Off, 1);
  return (begin() + _Off);
  }

 iterator erase(const const_iterator _First, const const_iterator _Last)
  {
                             ;
  const size_type _Off = _First - begin();
  erase(_Off, _Last - _First);
  return (begin() + _Off);
  }

 void clear() noexcept
  {
  _Eos(0);
  }

 basic_string& replace(const size_type _Off, const size_type _N0, const basic_string& _Right)
  {
  auto& _Right_data = _Right._Get_data();
  return (replace(_Off, _N0, _Right_data._Myptr(), _Right_data._Mysize));
  }

 basic_string& replace(const size_type _Off, size_type _N0,
  const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
  {
  auto& _Right_data = _Right._Get_data();
  _Right_data._Check_offset(_Roff);
  _Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
  return (replace(_Off, _N0, _Right_data._Myptr() + _Roff, _Count));
  }
# 2663 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string& replace(const size_type _Off, size_type _N0,
                     const _Elem * const _Ptr, const size_type _Count)
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  _N0 = _My_data._Clamp_suffix_size(_Off, _N0);
  if (_N0 == _Count)
   {
   _Traits::move(_My_data._Myptr() + _Off, _Ptr, _Count);
   return (*this);
   }

  const size_type _Old_size = _My_data._Mysize;
  const size_type _Suffix_size = _Old_size - _N0 - _Off + 1;
  if (_Count < _N0)
   {
   _My_data._Mysize = _Old_size - (_N0 - _Count);
   _Elem * const _Old_ptr = _My_data._Myptr();
   _Elem * const _Insert_at = _Old_ptr + _Off;
   _Traits::move(_Insert_at, _Ptr, _Count);
   _Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Suffix_size);
   return (*this);
   }

  const size_type _Growth = static_cast<size_type>(_Count - _N0);
  if (_Growth <= _My_data._Myres - _Old_size)
   {
   _My_data._Mysize = _Old_size + _Growth;
   _Elem * const _Old_ptr = _My_data._Myptr();
   _Elem * const _Insert_at = _Old_ptr + _Off;
   _Elem * const _Suffix_at = _Insert_at + _N0;

   size_type _Ptr_shifted_after;
   if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)
    {
    _Ptr_shifted_after = _Count;
    }
   else if (_Suffix_at <= _Ptr)
    {
    _Ptr_shifted_after = 0;
    }
   else
    {
    _Ptr_shifted_after = static_cast<size_type>(_Suffix_at - _Ptr);
    }

   _Traits::move(_Suffix_at + _Growth, _Suffix_at, _Suffix_size);



   _Traits::move(_Insert_at, _Ptr, _Ptr_shifted_after);


   _Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after,
    _Count - _Ptr_shifted_after);
   return (*this);
   }

  return (_Reallocate_grow_by(_Growth,
   [](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Off, const size_type _N0, const _Elem * const _Ptr, const size_type _Count) {
   _Traits::copy(_New_ptr, _Old_ptr, _Off);
   _Traits::copy(_New_ptr + _Off, _Ptr, _Count);
   _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
   }, _Off, _N0, _Ptr, _Count));
  }

 basic_string& replace(const size_type _Off, const size_type _N0, const _Elem * const _Ptr)
  {
  return (replace(_Off, _N0, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
  }

 basic_string& replace(const size_type _Off, size_type _N0, const size_type _Count, const _Elem _Ch)
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  _N0 = _My_data._Clamp_suffix_size(_Off, _N0);
  if (_Count == _N0)
   {
   _Traits::assign(_My_data._Myptr() + _Off, _Count, _Ch);
   return (*this);
   }

  const size_type _Old_size = _My_data._Mysize;
  if (_Count < _N0 || _Count - _N0 <= _My_data._Myres - _Old_size)
   {
   _My_data._Mysize = _Old_size + _Count - _N0;

   _Elem * const _Old_ptr = _My_data._Myptr();
   _Elem * const _Insert_at = _Old_ptr + _Off;
   _Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Old_size - _N0 - _Off + 1);
   _Traits::assign(_Insert_at, _Count, _Ch);
   return (*this);
   }

  return (_Reallocate_grow_by(_Count - _N0,
   [](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Off, const size_type _N0, const size_type _Count, const _Elem _Ch) {
   _Traits::copy(_New_ptr, _Old_ptr, _Off);
   _Traits::assign(_New_ptr + _Off, _Count, _Ch);
   _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
   }, _Off, _N0, _Count, _Ch));
  }

 basic_string& replace(const const_iterator _First, const const_iterator _Last, const basic_string& _Right)
  {
  return (replace(_First - begin(), _Last - _First, _Right));
  }
# 2780 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 basic_string& replace(const const_iterator _First, const const_iterator _Last,
                     const _Elem * const _Ptr, const size_type _Count)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
  }

 basic_string& replace(const const_iterator _First, const const_iterator _Last, const _Elem * const _Ptr)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr));
  }

 basic_string& replace(const const_iterator _First, const const_iterator _Last,
  const size_type _Count, const _Elem _Ch)
  {
  return (replace(_First - begin(), _Last - _First, _Count, _Ch));
  }

 template<class _Iter>
  basic_string& _Replace_range(const const_iterator _First, const const_iterator _Last,
  const _Iter _First2, const _Iter _Last2, false_type)
  {
  const basic_string _Right(_First2, _Last2, get_allocator());
  replace(_First, _Last, _Right);
  return (*this);
  }

 template<class _Ptr>
  basic_string& _Replace_range(const const_iterator _First, const const_iterator _Last,
  const _Ptr _First2, const _Ptr _Last2, true_type)
  {
  return (replace(_First - cbegin(), _Last - _First, _First2, _Last2 - _First2));
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  basic_string& replace(const const_iterator _First, const const_iterator _Last,
   const _Iter _First2, const _Iter _Last2)
  {
                               ;
  const auto _UFirst2 = _Unchecked(_First2);
  const auto _ULast2 = _Unchecked(_Last2);
  return (_Replace_range(_First, _Last, _UFirst2, _ULast2, _Is_elem_cptr<decltype(_UFirst2)>()));
  }

 iterator begin() noexcept
  {
  auto _My_data = ::std:: addressof(this->_Get_data());
  return (iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data));
  }

 const_iterator begin() const noexcept
  {
  auto _My_data = ::std:: addressof(this->_Get_data());
  return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));
  }

 iterator end() noexcept
  {
  auto _My_data = ::std:: addressof(this->_Get_data());
  return (iterator(_Refancy<pointer>(_My_data->_Myptr()) + _My_data->_Mysize, _My_data));
  }

 const_iterator end() const noexcept
  {
  auto _My_data = ::std:: addressof(this->_Get_data());
  return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()) + _My_data->_Mysize, _My_data));
  }

 _Elem * _Unchecked_begin() noexcept
  {
  return (this->_Get_data()._Myptr());
  }

 const _Elem * _Unchecked_begin() const noexcept
  {
  return (this->_Get_data()._Myptr());
  }

 _Elem * _Unchecked_end() noexcept
  {
  auto& _My_data = this->_Get_data();
  return (_My_data._Myptr() + _My_data._Mysize);
  }

 const _Elem * _Unchecked_end() const noexcept
  {
  const auto& _My_data = this->_Get_data();
  return (_My_data._Myptr() + _My_data._Mysize);
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  auto& _My_data = this->_Get_data();
  if (!_My_data._Large_string_engaged())
   {
   return;
   }

  if (_My_data._Mysize < this->_BUF_SIZE)
   {
   _Become_small();
   return;
   }

  const size_type _Target_capacity = _Min_value(_My_data._Mysize | this->_ALLOC_MASK, max_size());
  if (_Target_capacity < _My_data._Myres)
   {
   auto& _Al = this->_Getal();
   const pointer _New_ptr = _Al.allocate(_Target_capacity + 1);
   this->_Orphan_all();
   _Traits::copy(_Unfancy(_New_ptr), _Unfancy(_My_data._Bx._Ptr), _My_data._Mysize + 1);
   _Al.deallocate(_My_data._Bx._Ptr, _My_data._Myres + 1);
   _My_data._Bx._Ptr = _New_ptr;
   _My_data._Myres = _Target_capacity;
   }
  }

 reference at(const size_type _Off)
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset_exclusive(_Off);
  return (_My_data._Myptr()[_Off]);
  }

 const_reference at(const size_type _Off) const
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset_exclusive(_Off);
  return (_My_data._Myptr()[_Off]);
  }

 reference operator[](const size_type _Off)
  {
  auto& _My_data = this->_Get_data();
                                                                        ;
  return (_My_data._Myptr()[_Off]);
  }

 const_reference operator[](const size_type _Off) const
  {
  auto& _My_data = this->_Get_data();
                                                                        ;
  return (_My_data._Myptr()[_Off]);
  }
# 2973 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 void push_back(const _Elem _Ch)
  {
  auto& _My_data = this->_Get_data();
  const size_type _Old_size = _My_data._Mysize;
  if (_Old_size < _My_data._Myres)
   {
   _My_data._Mysize = _Old_size + 1;
   _Elem * const _Ptr = _My_data._Myptr();
   _Traits::assign(_Ptr[_Old_size], _Ch);
   _Traits::assign(_Ptr[_Old_size + 1], _Elem());
   return;
   }

  _Reallocate_grow_by(1,
   [](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const _Elem _Ch) {
   _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
   _Traits::assign(_New_ptr[_Old_size], _Ch);
   _Traits::assign(_New_ptr[_Old_size + 1], _Elem());
   }, _Ch);
  }

 void pop_back()
  {
  auto& _My_data = this->_Get_data();
  const size_type _Old_size = _My_data._Mysize;
                                                                 ;
  _Eos(_Old_size - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

         const _Elem * c_str() const noexcept
  {
  return (this->_Get_data()._Myptr());
  }

         const _Elem * data() const noexcept
  {
  return (this->_Get_data()._Myptr());
  }
# 3040 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 size_type length() const noexcept
  {
  return (this->_Get_data()._Mysize);
  }

 size_type size() const noexcept
  {
  return (this->_Get_data()._Mysize);
  }

 size_type max_size() const noexcept
  {
  const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());
  const size_type _Storage_max =
   _Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));
  return (_Min_value(
   static_cast<size_type>((numeric_limits<difference_type>::max)()),
   _Storage_max - 1
   ));

  }

 void resize( const size_type _Newsize, const _Elem _Ch = _Elem())
  {
  const size_type _Old_size = size();
  if (_Newsize <= _Old_size)
   {
   _Eos(_Newsize);
   }
  else
   {
   append(_Newsize - _Old_size, _Ch);
   }
  }

 size_type capacity() const noexcept
  {
  return (this->_Get_data()._Myres);
  }

 void reserve( const size_type _Newcap = 0)
  {
  auto& _My_data = this->_Get_data();
  if (_My_data._Mysize > _Newcap)
   {
   return;
   }

  if (_My_data._Myres == _Newcap)
   {
   return;
   }

  if (_My_data._Myres < _Newcap)
   {
   const size_type _Old_size = _My_data._Mysize;
   _Reallocate_grow_by(_Newcap - _Old_size,
    [](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {
    _Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);
    });

   _My_data._Mysize = _Old_size;
   return;
   }

  if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())
   {
   _Become_small();
   return;
   }


  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }


 size_type copy( _Elem * const _Ptr,
  size_type _Count, const size_type _Off = 0) const
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  _Count = _My_data._Clamp_suffix_size(_Off, _Count);
  _Traits::copy(_Ptr, _My_data._Myptr() + _Off, _Count);
  return (_Count);
  }

                                       size_type _Copy_s(
                               _Elem * const _Dest, const size_type _Dest_size,
  size_type _Count, const size_type _Off = 0) const
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  _Count = _My_data._Clamp_suffix_size(_Off, _Count);
  _Traits::_Copy_s(_Dest, _Dest_size, _My_data._Myptr() + _Off, _Count);
  return (_Count);
  }

 void _Swap_data(basic_string& _Right, true_type)
  {
  const auto _My_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(this->_Get_data()))
   + _Memcpy_move_offset;
  const auto _Right_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(_Right._Get_data()))
   + _Memcpy_move_offset;
  unsigned char _Temp_mem[_Memcpy_move_size];
  :: memcpy(_Temp_mem, _My_data_mem, _Memcpy_move_size);
  :: memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);
  :: memcpy(_Right_data_mem, _Temp_mem, _Memcpy_move_size);
  }

 void _Swap_bx_large_with_small(_Mydata_t& _Starts_large, _Mydata_t& _Starts_small)
  {
  const pointer _Ptr = _Starts_large._Bx._Ptr;
  auto& _Al = this->_Getal();
  _Alty_traits::destroy(_Al, ::std:: addressof(_Starts_large._Bx._Ptr));
  _Traits::copy(_Starts_large._Bx._Buf, _Starts_small._Bx._Buf, this->_BUF_SIZE);
  _Alty_traits::construct(_Al, ::std:: addressof(_Starts_small._Bx._Ptr), _Ptr);
  }

 void _Swap_data(basic_string& _Right, false_type)
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  const bool _My_large = _My_data._Large_string_engaged();
  const bool _Right_large = _Right_data._Large_string_engaged();
  if (_My_large)
   {
   if (_Right_large)
    {
    _Swap_adl(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);
    }
   else
    {
    _Swap_bx_large_with_small(_My_data, _Right_data);
    }
   }
  else
   {
   if (_Right_large)
    {
    _Swap_bx_large_with_small(_Right_data, _My_data);
    }
   else
    {
    _Elem _Temp_buf[this->_BUF_SIZE];
    _Traits::copy(_Temp_buf, _My_data._Bx._Buf, this->_BUF_SIZE);
    _Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, this->_BUF_SIZE);
    _Traits::copy(_Right_data._Bx._Buf, _Temp_buf, this->_BUF_SIZE);
    }
   }

  ::std:: swap(_My_data._Mysize, _Right_data._Mysize);
  ::std:: swap(_My_data._Myres, _Right_data._Myres);
  }

 void swap(basic_string& _Right) noexcept
  {
  if (this != ::std:: addressof(_Right))
   {
   _Pocs(this->_Getal(), _Right._Getal());
# 3224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
   }

  _Swap_data(_Right, _Use_memcpy_move{});
  }
# 3238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 size_type find(const basic_string& _Right, const size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  return (static_cast<size_type>(
   _Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
    _Right_data._Myptr(), _Right_data._Mysize)));
  }

 size_type find( const _Elem * const _Ptr, const size_type _Off, const size_type _Count) const
  noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
  }

 size_type find( const _Elem * const _Ptr, const size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
  }

 size_type find(const _Elem _Ch, const size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
  }
# 3278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 size_type rfind(const basic_string& _Right, const size_type _Off = npos) const noexcept
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  return (static_cast<size_type>(
   _Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
    _Right_data._Myptr(), _Right_data._Mysize)));
  }

 size_type rfind( const _Elem * const _Ptr, const size_type _Off, const size_type _Count) const
  noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
  }

 size_type rfind( const _Elem * const _Ptr, const size_type _Off = npos) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
  }

 size_type rfind(const _Elem _Ch, const size_type _Off = npos) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_rfind_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
  }
# 3318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 size_type find_first_of(const basic_string& _Right, const size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  return (static_cast<size_type>(_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
   _Right_data._Myptr(), _Right_data._Mysize)));
  }

 size_type find_first_of( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
  }

 size_type find_first_of( const _Elem * const _Ptr, const size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
  }

 size_type find_first_of(const _Elem _Ch, const size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
  }
# 3357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 size_type find_last_of(const basic_string& _Right, size_type _Off = npos) const noexcept
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  return (static_cast<size_type>(_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
   _Right_data._Myptr(), _Right_data._Mysize)));
  }

 size_type find_last_of( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
  }

 size_type find_last_of( const _Elem * const _Ptr, const size_type _Off = npos) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
  }

 size_type find_last_of(const _Elem _Ch, const size_type _Off = npos) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(_Traits_rfind_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
  }
# 3396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 size_type find_first_not_of(const basic_string& _Right, const size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  return (static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
   _Right_data._Myptr(), _Right_data._Mysize)));
  }

 size_type find_first_not_of( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
  }

 size_type find_first_not_of( const _Elem * const _Ptr, size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
  }

 size_type find_first_not_of(const _Elem _Ch, const size_type _Off = 0) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(_Traits_find_not_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
  }
# 3435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 size_type find_last_not_of(const basic_string& _Right, const size_type _Off = npos) const noexcept
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  return (static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
   _Right_data._Myptr(), _Right_data._Mysize)));
  }

 size_type find_last_not_of( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
  }

 size_type find_last_not_of( const _Elem * const _Ptr, const size_type _Off = npos) const
  noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
   _Ptr, _Traits::length(_Ptr))));
  }

 size_type find_last_not_of(const _Elem _Ch, const size_type _Off = npos) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (static_cast<size_type>(
   _Traits_rfind_not_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
  }

 basic_string substr(const size_type _Off = 0, const size_type _Count = npos) const
  {
  return (basic_string(*this, _Off, _Count, get_allocator()));
  }

 bool _Equal(const basic_string& _Right) const noexcept
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Right_data._Myptr(), _Right_data._Mysize));
  }

 bool _Equal( const _Elem * const _Ptr) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));
  }
# 3515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring" 3
 int compare(const basic_string& _Right) const noexcept
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  return (_Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize,
   _Right_data._Myptr(), _Right_data._Mysize));
  }

 int compare(size_type _Off, size_type _N0, const basic_string& _Right) const
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  auto& _Right_data = _Right._Get_data();
  return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
   _Right_data._Myptr(), _Right_data._Mysize));
  }

 int compare(const size_type _Off, const size_type _N0, const basic_string& _Right,
  const size_type _Roff, const size_type _Count = npos) const
  {
  auto& _My_data = this->_Get_data();
  auto& _Right_data = _Right._Get_data();
  _My_data._Check_offset(_Off);
  _Right_data._Check_offset(_Roff);
  return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
   _Right_data._Myptr() + _Roff, _Right_data._Clamp_suffix_size(_Roff, _Count)));
  }

 int compare( const _Elem * const _Ptr) const noexcept
  {
  auto& _My_data = this->_Get_data();
  return (_Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize,
   _Ptr, _Traits::length(_Ptr)));
  }

 int compare(const size_type _Off, const size_type _N0, const _Elem * const _Ptr) const
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
   _Ptr, _Traits::length(_Ptr)));
  }

 int compare(const size_type _Off, const size_type _N0, const _Elem * const _Ptr,
  const size_type _Count) const
  {
  auto& _My_data = this->_Get_data();
  _My_data._Check_offset(_Off);
  return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
   _Ptr, _Count));
  }

 allocator_type get_allocator() const noexcept
  {
  return (static_cast<allocator_type>(this->_Getal()));
  }

 size_type _Calculate_growth(const size_type _Requested) const
  {
  const size_type _Max = max_size();
  auto& _My_data = this->_Get_data();
  const size_type _Masked = _Requested | this->_ALLOC_MASK;
  if (_Masked > _Max)
   {
   return (_Max);
   }

  const size_type _Old = _My_data._Myres;
  if (_Old > _Max - _Old / 2)
   {
   return (_Max);
   }

  return (_Max_value(_Masked, _Old + _Old / 2));
  }

 template<class _Fty,
  class... _ArgTys>
  basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args)
  {

  if (_New_size > max_size())
   {
   _Xlen();
   }

  auto& _My_data = this->_Get_data();
  const size_type _Old_capacity = _My_data._Myres;
  const size_type _New_capacity = _Calculate_growth(_New_size);
  auto& _Al = this->_Getal();
  const pointer _New_ptr = _Al.allocate(_New_capacity + 1);
  _My_data._Orphan_all();
  _My_data._Mysize = _New_size;
  _My_data._Myres = _New_capacity;
  _Fn(_Unfancy(_New_ptr), _New_size, _Args...);
  if (this->_BUF_SIZE <= _Old_capacity)
   {
   _Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);
   _My_data._Bx._Ptr = _New_ptr;
   }
  else
   {
   _Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_ptr);
   }

  return (*this);
  }

 template<class _Fty,
  class... _ArgTys>
  basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args)
  {

  auto& _My_data = this->_Get_data();
  const size_type _Old_size = _My_data._Mysize;
  if (max_size() - _Old_size < _Size_increase)
   {
   _Xlen();
   }

  const size_type _New_size = _Old_size + _Size_increase;
  const size_type _Old_capacity = _My_data._Myres;
  const size_type _New_capacity = _Calculate_growth(_New_size);
  auto& _Al = this->_Getal();
  const pointer _New_ptr = _Al.allocate(_New_capacity + 1);
  _My_data._Orphan_all();
  _My_data._Mysize = _New_size;
  _My_data._Myres = _New_capacity;
  _Elem * const _Raw_new = _Unfancy(_New_ptr);
  if (this->_BUF_SIZE <= _Old_capacity)
   {
   const pointer _Old_ptr = _My_data._Bx._Ptr;
   _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
   _Al.deallocate(_Old_ptr, _Old_capacity + 1);
   _My_data._Bx._Ptr = _New_ptr;
   }
  else
   {
   _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);
   _Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_ptr);
   }

  return (*this);
  }

 void _Become_small()
  {


  auto& _My_data = this->_Get_data();
  _My_data._Orphan_all();
  const pointer _Ptr = _My_data._Bx._Ptr;
  auto& _Al = this->_Getal();
  _Alty_traits::destroy(_Al, ::std:: addressof(_My_data._Bx._Ptr));
  _Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);
  _Al.deallocate(_Ptr, _My_data._Myres + 1);
  _My_data._Myres = this->_BUF_SIZE - 1;
  }

 void _Eos(const size_type _Newsize)
  {
  auto& _My_data = this->_Get_data();
  _Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());
  }

 void _Tidy_init()
  {
  auto& _My_data = this->_Get_data();
  _My_data._Mysize = 0;
  _My_data._Myres = this->_BUF_SIZE - 1;


  _Traits::assign(_My_data._Bx._Buf[0], _Elem());
  }

 void _Tidy_deallocate()
  {
  this->_Orphan_all();
  auto& _My_data = this->_Get_data();
  if (_My_data._Large_string_engaged())
   {
   const pointer _Ptr = _My_data._Bx._Ptr;
   auto& _Al = this->_Getal();
   _Alty_traits::destroy(_Al, ::std:: addressof(_My_data._Bx._Ptr));
   _Al.deallocate(_Ptr, _My_data._Myres + 1);
   }

  _My_data._Mysize = 0;
  _My_data._Myres = this->_BUF_SIZE - 1;


  _Traits::assign(_My_data._Bx._Buf[0], _Elem());
  }

 [[noreturn]] static void _Xlen()
  {
  _Xlength_error("string too long");
  }
 };

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
         const _Elem * const _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 using _String_type = basic_string<_Elem, _Traits, _Alloc>;
 using _Size_type = typename _String_type::size_type;
 _String_type _Ans;
 _Ans.reserve(_Convert_size<_Size_type>(_Traits::length(_Left) + _Right.size()));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(1 + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
         const _Elem * const _Right)
 {
 using _String_type = basic_string<_Elem, _Traits, _Alloc>;
 using _Size_type = typename _String_type::size_type;
 _String_type _Ans;
 _Ans.reserve(_Convert_size<_Size_type>(_Left.size() + _Traits::length(_Right)));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + 1);
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 if (_Right.size() <= _Left.capacity() - _Left.size()
  || _Right.capacity() - _Right.size() < _Left.size())
  return (::std:: move(_Left.append(_Right)));
 else
  return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
         const _Elem * const _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 using size_type = typename allocator_traits<_Alloc>::size_type;
 return (::std:: move(_Right.insert(static_cast<size_type>(0), static_cast<size_type>(1), _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
         const _Elem * const _Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem _Right)
 {
 _Left.push_back(_Right);
 return (::std:: move(_Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Left._Equal(_Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
         const _Elem * const _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right._Equal(_Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
         const _Elem * const _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
         const _Elem * const _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
         const _Elem * const _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
         const _Elem * const _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) > 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
         const _Elem * const _Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
         const _Elem * const _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
         const _Elem * const _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
         const _Elem * const _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
         const _Elem * const _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
         const _Elem * const _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
         const _Elem * const _Right)
 {
 return (!(_Left < _Right));
 }

using string = basic_string<char, char_traits<char>, allocator<char>>;
using wstring = basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using u16string = basic_string<char16_t, char_traits<char16_t>, allocator<char16_t>>;
using u32string = basic_string<char32_t, char_traits<char32_t>, allocator<char32_t>>;


template<class _Elem,
 class _Traits,
 class _Alloc>
 struct hash<basic_string<_Elem, _Traits, _Alloc>>
 {
                                   typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
                                   typedef size_t result_type;

 size_t operator()(const basic_string<_Elem, _Traits, _Alloc>& _Keyval) const noexcept
  {
  return (_Hash_array_representation(_Keyval.c_str(), _Keyval.size()));
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)


namespace std {

class logic_error
 : public exception
 {
public:
 typedef exception _Mybase;

 explicit logic_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit logic_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };


class runtime_error
 : public exception
 {
public:
 typedef exception _Mybase;

 explicit runtime_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit runtime_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdexcept" 3
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocale" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\typeinfo" 1 3
# 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\typeinfo" 3
#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



#pragma warning(disable: 4275)


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_typeinfo.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_typeinfo.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_typeinfo.h" 2 3



#pragma pack(push, 8)







 struct __type_info_node;





    extern __type_info_node __type_info_root_node;




#pragma pack(push, 8)
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_typeinfo.h" 3
 extern "C" {

struct __std_type_info_data
{
    const char * _UndecoratedName;
    const char _DecoratedName[1];
    __std_type_info_data() = delete;
    __std_type_info_data(const __std_type_info_data&) = delete;
    __std_type_info_data(__std_type_info_data&&) = delete;

    __std_type_info_data& operator=(const __std_type_info_data&) = delete;
    __std_type_info_data& operator=(__std_type_info_data&&) = delete;
};

         int __cdecl __std_type_info_compare(
         const __std_type_info_data* _Lhs,
         const __std_type_info_data* _Rhs
    );

         size_t __cdecl __std_type_info_hash(
         const __std_type_info_data* _Data
    );

         const char* __cdecl __std_type_info_name(
            __std_type_info_data* _Data,
            __type_info_node* _RootNode
    );

}
# 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime_typeinfo.h" 3
#pragma pack(pop)



class type_info
{
public:

    type_info(const type_info&) = delete;
    type_info& operator=(const type_info&) = delete;

    size_t hash_code() const throw()
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(const type_info& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(const type_info& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(const type_info& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    const char* name() const throw()
    {



        return __std_type_info_name(&_Data, &__type_info_root_node);

    }

    const char* raw_name() const throw()
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() throw();

private:

    mutable __std_type_info_data _Data;
};

namespace std {
 using ::type_info;
}



namespace std {

class bad_cast
    : public exception
{
public:

    bad_cast() throw()
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(const char* const _Message) throw()
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(const char* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() throw()
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(const char* const _Message) throw()
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(const char* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(const char* const _Message) throw()
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(const char* const _Message, int) throw()
        : bad_typeid(_Message, 1)
    {
    }
};

}



#pragma pack(pop)
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\typeinfo" 2 3


 namespace std {


constexpr int _Small_object_num_ptrs = 6 + 16 / sizeof (void *);
# 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\typeinfo" 3
 }


#pragma pack(pop)
#pragma warning(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocale" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocinfo" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocinfo.h" 1 3





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\ctype.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\ctype.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\ctype.h" 3
 extern "C" {
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\ctype.h" 3
               __declspec(dllimport) int __cdecl _isctype( int _C, int _Type);
               __declspec(dllimport) int __cdecl _isctype_l( int _C, int _Type, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalpha( int _C);
               __declspec(dllimport) int __cdecl _isalpha_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isupper( int _C);
               __declspec(dllimport) int __cdecl _isupper_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl islower( int _C);
               __declspec(dllimport) int __cdecl _islower_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isdigit( int _C);

               __declspec(dllimport) int __cdecl _isdigit_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isxdigit( int _C);
               __declspec(dllimport) int __cdecl _isxdigit_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isspace( int _C);

               __declspec(dllimport) int __cdecl _isspace_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl ispunct( int _C);
               __declspec(dllimport) int __cdecl _ispunct_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isblank( int _C);
               __declspec(dllimport) int __cdecl _isblank_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalnum( int _C);
               __declspec(dllimport) int __cdecl _isalnum_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isprint( int _C);
               __declspec(dllimport) int __cdecl _isprint_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isgraph( int _C);
               __declspec(dllimport) int __cdecl _isgraph_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iscntrl( int _C);
               __declspec(dllimport) int __cdecl _iscntrl_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl toupper( int _C);


                                  __declspec(dllimport) int __cdecl tolower( int _C);

                                  __declspec(dllimport) int __cdecl _tolower( int _C);
               __declspec(dllimport) int __cdecl _tolower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl _toupper( int _C);
               __declspec(dllimport) int __cdecl _toupper_l( int _C, _locale_t _Locale);

               __declspec(dllimport) int __cdecl __isascii( int _C);
               __declspec(dllimport) int __cdecl __toascii( int _C);
               __declspec(dllimport) int __cdecl __iscsymf( int _C);
               __declspec(dllimport) int __cdecl __iscsym( int _C);
# 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\ctype.h" 3
    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }





    __inline int __cdecl _chvalidchk_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {



        if (_Locale)
        {
            return __acrt_get_locale_data_prefix(_Locale)->_locale_pctype[_C] & _Mask;
        }

        return (__pctype_func()[(_C)] & (_Mask));

    }




    __inline int __cdecl _ischartype_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }
# 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\ctype.h" 3
}
# 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\ctype.h" 3
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocinfo.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\locale.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\locale.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\locale.h" 3
 extern "C" {
# 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\locale.h" 3
struct lconv
{
    char* decimal_point;
    char* thousands_sep;
    char* grouping;
    char* int_curr_symbol;
    char* currency_symbol;
    char* mon_decimal_point;
    char* mon_thousands_sep;
    char* mon_grouping;
    char* positive_sign;
    char* negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};

struct tm;
# 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\locale.h" 3
    __declspec(dllimport) void __cdecl _lock_locales(void);
    __declspec(dllimport) void __cdecl _unlock_locales(void);


    __declspec(dllimport) int __cdecl _configthreadlocale(
             int _Flag
        );


    __declspec(dllimport) char* __cdecl setlocale(
                   int _Category,
                   char const* _Locale
        );


    __declspec(dllimport) struct lconv* __cdecl localeconv(void);


    __declspec(dllimport) _locale_t __cdecl _get_current_locale(void);


    __declspec(dllimport) _locale_t __cdecl _create_locale(
               int _Category,
               char const* _Locale
        );

    __declspec(dllimport) void __cdecl _free_locale(
                 _locale_t _Locale
        );



    __declspec(dllimport) wchar_t* __cdecl _wsetlocale(
                   int _Category,
                   wchar_t const* _Locale
        );


    __declspec(dllimport) _locale_t __cdecl _wcreate_locale(
               int _Category,
               wchar_t const* _Locale
        );



    __declspec(dllimport) wchar_t** __cdecl ___lc_locale_name_func(void);
    __declspec(dllimport) unsigned int __cdecl ___lc_codepage_func (void);
    __declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);







    __declspec(dllimport) char* __cdecl _Getdays(void);



    __declspec(dllimport) char* __cdecl _Getmonths(void);

    __declspec(dllimport) void* __cdecl _Gettnames(void);



    __declspec(dllimport) wchar_t* __cdecl _W_Getdays(void);



    __declspec(dllimport) wchar_t* __cdecl _W_Getmonths(void);

    __declspec(dllimport) void* __cdecl _W_Gettnames(void);


    __declspec(dllimport) size_t __cdecl _Strftime(
                                  char* _Buffer,
                                 size_t _Max_size,
                                 char const* _Format,
                                 struct tm const* _Timeptr,
                                 void* _Lc_time_arg);


    __declspec(dllimport) size_t __cdecl _Wcsftime(
                                  wchar_t* _Buffer,
                                 size_t _Max_size,
                                 wchar_t const* _Format,
                                 struct tm const* _Timeptr,
                                 void* _Lc_time_arg
        );




}
# 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\locale.h" 3
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocinfo.h" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)





extern "C" {
# 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocinfo.h" 3
typedef struct _Collvec
 {
 unsigned int _Page;
 wchar_t *_LocaleName;
 } _Collvec;

typedef struct _Ctypevec
 {
 unsigned int _Page;
 const short *_Table;
 int _Delfl;
 wchar_t *_LocaleName;
 } _Ctypevec;

typedef struct _Cvtvec
 {
 unsigned int _Page;
 unsigned int _Mbcurmax;
 int _Isclocale;
 unsigned char _Isleadbyte[32];
 } _Cvtvec;


              _Collvec __cdecl _Getcoll(void);
              _Ctypevec __cdecl _Getctype(void);
              _Cvtvec __cdecl _Getcvt(void);



extern "C"

              int __cdecl _Getdateorder(void);
# 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocinfo.h" 3
         int __cdecl _Mbrtowc( wchar_t *, const char *, size_t,
 mbstate_t *, const _Cvtvec *);


              float __cdecl _Stof(const char *,
                                  char **, long);
              double __cdecl _Stod(const char *,
                                  char **, long);
              long double __cdecl _Stold(const char *,
                                  char **, long);

              int __cdecl _Strcoll(const char *, const char *,
 const char *, const char *, const _Collvec *);
              size_t __cdecl _Strxfrm(
                                                             char *_String1,
        char *_End1, const char *, const char *, const _Collvec *);
              int __cdecl _Tolower(int, const _Ctypevec *);
              int __cdecl _Toupper(int, const _Ctypevec *);
              int __cdecl _Wcrtomb( char *, wchar_t, mbstate_t *,
 const _Cvtvec *);
              int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
 const wchar_t *, const wchar_t *, const _Collvec *);
              size_t __cdecl _Wcsxfrm(
                                                             wchar_t *_String1,
        wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

              short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
              const wchar_t *__cdecl _Getwctypes(const wchar_t *,
 const wchar_t *, short *, const _Ctypevec *);
              wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
              wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);



}



extern "C" {


__declspec(dllimport) char *__cdecl _Getdays(void);



__declspec(dllimport) char *__cdecl _Getmonths(void);

__declspec(dllimport) void *__cdecl _Gettnames(void);


__declspec(dllimport) size_t __cdecl _Strftime( char *,
      size_t _Maxsize, const char *, const struct tm *,
          void *);



__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);



__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);

__declspec(dllimport) void *__cdecl _W_Gettnames(void);


__declspec(dllimport) size_t __cdecl _Wcsftime( wchar_t *,
      size_t _Maxsize, const wchar_t *, const struct tm *,
          void *);
}
# 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocinfo.h" 3
         _locale_t __cdecl _GetLocaleForCP(unsigned int);



#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocinfo" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

class __declspec(dllimport) _Timevec
 {
public:
                    _Timevec(void *_Ptr = 0)
  : _Timeptr(_Ptr)
  {
  }

                    _Timevec(const _Timevec& _Right)
  {
  *this = _Right;
  }

                    ~_Timevec() noexcept
  {
  free(_Timeptr);
  }

 _Timevec& operator=(const _Timevec& _Right)
  {
  _Timeptr = _Right._Timeptr;
  ((_Timevec *)&_Right)->_Timeptr = 0;
  return (*this);
  }

 void * _Getptr() const
  {
  return (_Timeptr);
  }

private:
 void *_Timeptr;
 };


class __declspec(dllimport) _Locinfo
 {
public:
 typedef ::_Collvec _Collvec;
 typedef ::_Ctypevec _Ctypevec;
 typedef ::_Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

 static void __cdecl _Locinfo_ctor(
  _Locinfo *, const char *);
 static void __cdecl _Locinfo_ctor(
  _Locinfo *, int, const char *);
 static void __cdecl _Locinfo_dtor(
  _Locinfo *);
 static _Locinfo& __cdecl _Locinfo_Addcats(
  _Locinfo *, int, const char *);

                    _Locinfo(const char *_Pch = "C")

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Pch);
  }

                    _Locinfo(int _Cat, const char *_Pch)

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Cat, _Pch);
  }

                    ~_Locinfo() noexcept
  {
  _Locinfo_dtor(this);
  }

 _Locinfo& _Addcats(int _Cat, const char *_Pch)
  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  return (_Locinfo_Addcats(this, _Cat, _Pch));
  }

 const char * _Getname() const
  {
  return (_Newlocname._C_str());
  }

 _Collvec _Getcoll() const
  {
  return (::_Getcoll());
  }

 _Ctypevec _Getctype() const
  {
  return (::_Getctype());
  }

 _Cvtvec _Getcvt() const
  {
  return (::_Getcvt());
  }

 const lconv * _Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timevec(::_Gettnames()));
  }

 const char * _Getdays() const
  {
  const char *_Ptr = ::_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Days = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Days._Empty() ? _Days._C_str()
   : ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    ":Thu:Thursday:Fri:Friday:Sat:Saturday");
  }

 const char * _Getmonths() const
  {
  const char *_Ptr = ::_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Months = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Months._Empty() ? _Months._C_str()
   : ":Jan:January:Feb:February:Mar:March"
    ":Apr:April:May:May:Jun:June"
    ":Jul:July:Aug:August:Sep:September"
    ":Oct:October:Nov:November:Dec:December");
  }

 const char * _Getfalse() const
  {
  return ("false");
  }

 const char * _Gettrue() const
  {
  return ("true");
  }

 int _Getdateorder() const
  {
  return (::_Getdateorder());
  }

 _Timevec _W_Gettnames() const
  {
  return (_Timevec(::_W_Gettnames()));
  }

 const unsigned short * _W_Getdays() const
  {
  const wchar_t *_Ptr = ::_W_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Days = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Days._Empty()
   ? _W_Days._C_str()
   : L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
  }

 const unsigned short * _W_Getmonths() const
  {
  const wchar_t *_Ptr = ::_W_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Months = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Months._Empty()
   ? _W_Months._C_str()
   : L":Jan:January:Feb:February:Mar:March"
    L":Apr:April:May:May:Jun:June"
    L":Jul:July:Aug:August:Sep:September"
    L":Oct:October:Nov:November:Dec:December"));
  }

 _Locinfo(const _Locinfo&) = delete;
 _Locinfo& operator=(const _Locinfo&) = delete;

private:




 _Lockit _Lock;


 _Yarn<char> _Days;
 _Yarn<char> _Months;
 _Yarn<wchar_t> _W_Days;
 _Yarn<wchar_t> _W_Months;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };


template<class _Elem> inline
 int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);
 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
 }


template<class _Elem> inline
 size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;
 if (_Count <= (size_t)(_Last1 - _First1))
  ::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));

 return (_Count);
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               char *_First1, char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               wchar_t *_First1, wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocale" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xfacet" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)








namespace std {

class __declspec(dllimport) _Facet_base
 {
public:
 virtual ~_Facet_base() noexcept
  {
  }


 virtual void _Incref() = 0;


 virtual _Facet_base * _Decref() = 0;
 };





void __cdecl _Facet_Register(_Facet_base *);

}

#pragma warning(pop)
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocale" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
          static const int collate = ((1 << (1)) >> 1);
          static const int ctype = ((1 << (2)) >> 1);
          static const int monetary = ((1 << (3)) >> 1);
          static const int numeric = ((1 << (4)) >> 1);
          static const int time = ((1 << (5)) >> 1);
          static const int messages = ((1 << (6)) >> 1);
          static const int all = (((1 << ((6 + 1))) >> 1) - 1);
          static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
 class collate;

struct __declspec(dllimport) _Crt_new_delete
 {
# 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocale" 3
 };

class locale
 : public _Locbase<int>, public _Crt_new_delete
 {
public:
 typedef int category;


 class __declspec(dllimport) id
  {
 public:
                     id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

                     operator size_t()
   {
   if (_Id == 0)
    {
    { ::std:: _Lockit _Lock(0);
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

                          static int _Id_cnt;

 public:
                     id(const id&) = delete;
  id& operator=(const id&) = delete;
  };

 class _Locimp;


 class __declspec(dllimport) facet
  : public _Facet_base, public _Crt_new_delete
  {
 public:
  static size_t __cdecl _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }

  virtual void _Incref()
   {
   _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
   }

  virtual _Facet_base * _Decref()
   {
   if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
    return (this);
   else
    return (0);
   }

 private:
  _Atomic_counter_t _Myrefs;

 protected:
  explicit facet(size_t _Initrefs = 0)
   : _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))
   {
   }

  virtual ~facet() noexcept
   {
   }

 public:
                     facet(const facet&) = delete;
  facet& operator=(const facet&) = delete;
  };


 class __declspec(dllimport) _Locimp
  : public facet
  {
 protected:
                     ~_Locimp() noexcept
  {
  _Locimp_dtor(this);
  }

 private:
  static _Locimp *__cdecl
   _New_Locimp(bool _Transparent = false);
  static _Locimp *__cdecl
   _New_Locimp(const _Locimp& _Right);

  static void __cdecl
   _Locimp_dtor(_Locimp *);
  static void __cdecl
   _Locimp_Addfac(_Locimp *, facet *, size_t);
  static void __cdecl
   _Locimp_ctor(_Locimp *, const _Locimp&);

  friend locale;

                     _Locimp(bool _Transparent)
   : locale::facet(1), _Facetvec(0), _Facetcount(0),
    _Catmask(none), _Xparent(_Transparent),
     _Name("*")
   {
   }

                     _Locimp(const _Locimp& _Right)
   : locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
    _Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
     _Name(_Right._Name.c_str())
   {
   _Locimp_ctor(this, _Right);
   }

  void _Addfac(facet *_Pfacet, size_t _Id)
   {
   _Locimp_Addfac(this, _Pfacet, _Id);
   }

  static _Locimp *__cdecl _Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void __cdecl _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makeushloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;
  _Yarn<char> _Name;

                          static _Locimp *_Clocptr;

public:
  _Locimp& operator=(const _Locimp&) = delete;
  };

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
   const basic_string<_Elem, _Traits, _Alloc>& _Right) const
  {
  const auto& _Coll_fac = use_facet< ::std:: collate<_Elem>>(*this);

  return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
   _Right.c_str(), _Right.c_str() + _Right.size()) < 0);
  }

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = none;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   _Ptr->_Catmask = none;
   _Ptr->_Name = "*";
   }
  }

 locale(_Uninitialized)
  {
  }

 locale(const locale& _Right) noexcept
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() noexcept
  : _Ptr(_Init(true))
  {
  }


 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj;
     _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
     _Lobj._Addcats(_Loc._Ptr->_Catmask,
      _Loc.name().c_str());
     _Lobj._Addcats(_Other._Ptr->_Catmask,
      _Other.name().c_str());
     _Ptr->_Catmask = _Loc._Ptr->_Catmask
      | _Other._Ptr->_Catmask;
     _Ptr->_Name = _Lobj._Getname();
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }
  }

private:
 void _Construct(const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  _Init();
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj(_Cat, _Str.c_str());
     if (_Badname(_Lobj))
      _Bad = true;
     else
      {
      _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
      _Ptr->_Catmask = _Cat;
      _Ptr->_Name = _Str.c_str();
      }
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }

  if (_Bad)
   {
   delete _Ptr->_Decref();
   _Xruntime_error("bad locale name");
   }
  }

public:
 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {
  _Construct(_Str, _Cat);
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  _Construct(_Str, _Cat);
  }


 ~locale() noexcept
  {
  if (_Ptr != 0)
   delete _Ptr->_Decref();
  }

 locale& operator=(const locale& _Right) noexcept
  {
  if (_Ptr != _Right._Ptr)
   {
   delete _Ptr->_Decref();
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }

 string name() const
  {
  return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
  }

         const char *c_str() const
  {
  return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr0 = _Getgloballocale();
   return (_Id < _Ptr0->_Facetcount
    ? _Ptr0->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || (name().compare("*") != 0
    && name().compare(_Loc.name()) == 0));
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static const locale& __cdecl
  classic();

 static locale __cdecl
  global(const locale&);

 static locale __cdecl
  empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

 static _Locimp *__cdecl
  _Init(bool _Do_incref = false);
 static _Locimp *__cdecl
  _Getgloballocale();
 static void __cdecl
  _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };


template<class _Facet>
 struct _Facetptr
 {
                         static const locale::facet *_Psave;
 };

template<class _Facet>
                         const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& __cdecl use_facet(const locale& _Loc)

 {
 { ::std:: _Lockit _Lock(0);
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))



   throw bad_cast{};





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();





   _Facet_Register(_Pfmod);

   }

  return ((const _Facet&)(*_Pf));
 }
 }


template<class _Elem,
 class _InIt> inline
 int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char __cdecl _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char __cdecl _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }


template<> inline
 char __cdecl _Maklocbyte(unsigned short _Char,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }






template<class _Elem> inline
 _Elem __cdecl _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 mbstate_t _Mbst1 = {};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }


template<> inline
 unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 unsigned short _Wc = (unsigned short)0;
 mbstate_t _Mbst1 = {};
 _Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }






template<class _Elem> inline
 _Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;

 _Elem *_Ptrdest = (_Elem *)calloc(_Count, sizeof (_Elem));


 if (!_Ptrdest)
  _Xbad_alloc();

 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;

 return (_Ptrdest);
 }

template<> inline
 wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));


 if (!_Ptrdest)
  _Xbad_alloc();
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};

 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';

 return (_Ptrdest);
 }


template<> inline
 unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 unsigned short _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes =
   _Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));


 if (!_Ptrdest)
  _Xbad_alloc();

 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return ((unsigned short *)_Ptrdest);
 }



class __declspec(dllimport) codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

                    codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const noexcept
  {
  return (do_always_noconv());
  }

 int max_length() const noexcept
  {
  return (do_max_length());
  }

 int encoding() const noexcept
  {
  return (do_encoding());
  }

                    ~codecvt_base() noexcept
  {
  }

protected:
 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (1);
  }

 virtual int do_encoding() const noexcept
  {
  return (1);
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (is_same_v<_Byte, _Elem>);
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Mid1 = _First1;
  _Mid2 = _First2;
  if (is_same_v<_Byte, _Elem>)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Elem)*_Mid1;
   return (ok);
   }
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Mid1 = _First1;
  _Mid2 = _First2;
  if (is_same_v<_Byte, _Elem>)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Byte)*_Mid1;
   return (ok);
   }
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (ok);
  }

 virtual int do_length(_Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };







template<class _Elem,
 class _Byte,
 class _Statype>
                         locale::id codecvt<_Elem, _Byte, _Statype>::id;






enum _Codecvt_mode {
 _Consume_header = 4,
 _Generate_header = 2
 };


template<>
 class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
 typedef char16_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra, _Nskip;

   if (*_Pstate <= 1)
    ;
   else if (_By < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    {
    ++_Mid1;
    *_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
    *_Pstate = 1;
    continue;
    }

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   _Nskip = _Nextra < 3 ? 0 : 1;
   _First1 = _Mid1;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
    break;
   else
    for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);
   if (0 < _Nskip)
    _Ch <<= 6;

   if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
    return (_Mybase::error);
   else if (0xffff < _Ch)
    {
    unsigned short _Ch0 =
     (unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

    *_Mid2++ = (_Elem)_Ch0;
    *_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
    continue;
    }

   if (_Nskip == 0)
    ;
   else if (_Mid1 == _Last1)
    {
    _Mid1 = _First1;
    break;
    }
   else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    _Ch |= _By & 0x3f;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   {
   unsigned long _Ch;
   unsigned short _Ch1 = (unsigned short)*_Mid1;
   bool _Save = false;

   if (1 < *_Pstate)
    {
    if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
     return (_Mybase::error);
    _Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
    }
   else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
    {
    _Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
    _Save = true;
    }
   else
    _Ch = _Ch1;

   _Byte _By;
   int _Nextra;

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x10000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;

   int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

   if (_Last2 - _Mid2 < _Nput)
    break;
   else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
    ;
   else if (_Last2 - _Mid2 < 3 + _Nput)
    break;
   else
    {
    *_Mid2++ = (_Byte)(unsigned char)0xef;
    *_Mid2++ = (_Byte)(unsigned char)0xbb;
    *_Mid2++ = (_Byte)(unsigned char)0xbf;
    }

   ++_Mid1;
   if (_Save || _Nextra < 3)
    {
    *_Mid2++ = _By;
    --_Nput;
    }
   for (; 0 < _Nput; --_Nput)
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);

   *_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid2 = _First2;

  return (1 < *_Pstate
   ? _Mybase::error : _Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  size_t _Wchars = 0;
  _Statype _Mystate = _State;

  while (_Wchars < _Count && _First1 != _Last1)
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & _Consume_header) != 0 ? 9
   : (_Mode & _Generate_header) != 0 ? 7
   : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
 typedef char32_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra;

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1)
    break;
   else
    for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   if (_Maxcode < _Ch)
    return (_Mybase::error);
   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   {
   _Byte _By;
   int _Nextra;
   unsigned long _Ch = (unsigned long)*_Mid1;

   if (_Maxcode < _Ch)
    return (_Mybase::error);

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x00010000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else if (_Ch < 0x00200000)
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
   else if (_Ch < 0x04000000)
    _By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
   else
    _By = (_Byte)(0xfc | (_Ch >> 30 & 0x03)), _Nextra = 5;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;
    if ((_Mode & _Generate_header) == 0)
     ;
    else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
     return (_Mybase::partial);
    else
     {
     *_Mid2++ = (_Byte)(unsigned char)0xef;
     *_Mid2++ = (_Byte)(unsigned char)0xbb;
     *_Mid2++ = (_Byte)(unsigned char)0xbf;
     }
    }

   if (_Last2 - _Mid2 < 1 + _Nextra)
    break;

   ++_Mid1;
   for (*_Mid2++ = _By; 0 < _Nextra; )
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
   }
  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  _Mid2 = _First2;
  return (_Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  int _Wchars = 0;
  _Statype _Mystate = _State;

  while ((size_t)_Wchars < _Count && _First1 != _Last1)
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (int)(_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? 9 : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? -1 : 0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1;
  _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1;
  _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   {
   if ((int)5 <= _Last2 - _Mid2)
    {
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     {
     return (error);
     }
    else
     {
     ++_Mid1;
     _Mid2 += _Bytes;
     }
    }
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     {
     return (error);
     }
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1;
     _Mid2 += _Bytes;
     }
    }
   }

  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
                               ;
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef unsigned short _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1;
  _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1;
  _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   {
   if ((int)5 <= _Last2 - _Mid2)
    {
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     {
     return (error);
     }
    else
     {
     ++_Mid1;
     _Mid2 += _Bytes;
     }
    }
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     {
     return (error);
     }
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1;
     _Mid2 += _Bytes;
     }
    }
   }

  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
                               ;
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~codecvt_byname() noexcept
  {
  }
 };


struct __declspec(dllimport) ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
  cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
  lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
  punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
  xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
 typedef short mask;

                    ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~ctype_base() noexcept
  {
  }
 };


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
                             ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                             ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                             ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };







template<class _Elem>
 locale::id ctype<_Elem>::id;






template<>
 class __declspec(dllimport) ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem * is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                             ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem * scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem * scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }

  _Tidy();
  if (_Table != 0)
   {
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  else
   {
   _Ctype._Table = classic_table();
   _Ctype._Delfl = 0;
   }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask * table() const noexcept
  {
  return (_Ctype._Table);
  }

 static const mask *__cdecl classic_table() noexcept
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

          static const size_t table_size =
  1 << 8;

protected:
 virtual ~ctype() noexcept
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   :: free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] _Ctype._Table;

  :: free(_Ctype._LocaleName);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                             ;
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
                             ;
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class __declspec(dllimport) ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                             ;
  return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                             ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                             ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) ctype<unsigned short>
 : public ctype_base
 {
 typedef ctype<unsigned short> _Myt;

public:
 typedef unsigned short _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                             ;
  return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
   (const wchar_t *)_Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  unsigned short _Wc;
  return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                             ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                             ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };




template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;


}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xiosbase" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\system_error" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\cerrno" 1 3
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\system_error" 2 3



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xcall_once.h" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

struct once_flag
 {
 constexpr once_flag() noexcept
  : _Opaque(0)
  {
  }

 once_flag(const once_flag&) = delete;
 once_flag& operator=(const once_flag&) = delete;

 void *_Opaque;
 };

typedef int (__stdcall *_Execute_once_fp_t)(void *, void *, void **);
              int __cdecl _Execute_once(
 once_flag& _Flag, _Execute_once_fp_t _Callback, void *_Pv) noexcept;

}


#pragma warning(pop)
#pragma pack(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\system_error" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)
# 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\system_error" 3
namespace std {

enum class errc {
 address_family_not_supported = 102,
 address_in_use = 100,
 address_not_available = 101,
 already_connected = 113,
 argument_list_too_long = 7,
 argument_out_of_domain = 33,
 bad_address = 14,
 bad_file_descriptor = 9,
 bad_message = 104,
 broken_pipe = 32,
 connection_aborted = 106,
 connection_already_in_progress = 103,
 connection_refused = 107,
 connection_reset = 108,
 cross_device_link = 18,
 destination_address_required = 109,
 device_or_resource_busy = 16,
 directory_not_empty = 41,
 executable_format_error = 8,
 file_exists = 17,
 file_too_large = 27,
 filename_too_long = 38,
 function_not_supported = 40,
 host_unreachable = 110,
 identifier_removed = 111,
 illegal_byte_sequence = 42,
 inappropriate_io_control_operation = 25,
 interrupted = 4,
 invalid_argument = 22,
 invalid_seek = 29,
 io_error = 5,
 is_a_directory = 21,
 message_size = 115,
 network_down = 116,
 network_reset = 117,
 network_unreachable = 118,
 no_buffer_space = 119,
 no_child_process = 10,
 no_link = 121,
 no_lock_available = 39,
 no_message_available = 120,
 no_message = 122,
 no_protocol_option = 123,
 no_space_on_device = 28,
 no_stream_resources = 124,
 no_such_device_or_address = 6,
 no_such_device = 19,
 no_such_file_or_directory = 2,
 no_such_process = 3,
 not_a_directory = 20,
 not_a_socket = 128,
 not_a_stream = 125,
 not_connected = 126,
 not_enough_memory = 12,
 not_supported = 129,
 operation_canceled = 105,
 operation_in_progress = 112,
 operation_not_permitted = 1,
 operation_not_supported = 130,
 operation_would_block = 140,
 owner_dead = 133,
 permission_denied = 13,
 protocol_error = 134,
 protocol_not_supported = 135,
 read_only_file_system = 30,
 resource_deadlock_would_occur = 36,
 resource_unavailable_try_again = 11,
 result_out_of_range = 34,
 state_not_recoverable = 127,
 stream_timeout = 137,
 text_file_busy = 139,
 timed_out = 138,
 too_many_files_open_in_system = 23,
 too_many_files_open = 24,
 too_many_links = 31,
 too_many_symbolic_link_levels = 114,
 value_too_large = 132,
 wrong_protocol_type = 136
 };


enum class io_errc {
 stream = 1
 };


template<class _Enum>
 struct is_error_code_enum
  : false_type
 {
 };

template<>
 struct is_error_code_enum<io_errc>
  : true_type
 {
 };

template<class _Ty>
             constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;


template<class _Enum>
 struct is_error_condition_enum
  : false_type
 {
 };

template<>
 struct is_error_condition_enum<errc>
  : true_type
 {
 };

template<class _Ty>
             constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;

class error_code;
class error_condition;
error_code make_error_code(errc) noexcept;
error_code make_error_code(io_errc) noexcept;
error_condition make_error_condition(errc) noexcept;
error_condition make_error_condition(io_errc) noexcept;


class error_category;

const error_category& generic_category() noexcept;
const error_category& iostream_category() noexcept;
const error_category& system_category() noexcept;

class error_category
 {
public:
                 error_category() noexcept
  {
  _Addr = reinterpret_cast<uintptr_t>(this);
  }

 virtual ~error_category() noexcept
  {
  }

 virtual const char *name() const noexcept = 0;

 virtual string message(int _Errval) const = 0;

 virtual error_condition default_error_condition(int _Errval) const noexcept;

 virtual bool equivalent(int _Errval, const error_condition& _Cond) const noexcept;

 virtual bool equivalent(const error_code& _Code, int _Errval) const noexcept;

 bool operator==(const error_category& _Right) const noexcept
  {
  return (_Addr == _Right._Addr);
  }

 bool operator!=(const error_category& _Right) const noexcept
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const noexcept
  {
  return (_Addr < _Right._Addr);
  }

 error_category(const error_category&) = delete;
 error_category& operator=(const error_category&) = delete;

protected:
 uintptr_t _Addr;

 enum : uintptr_t
  {
  _Future_addr = 1,
  _Generic_addr = 3,
  _Iostream_addr = 5,
  _System_addr = 7
  };
 };


class error_code
 {
public:
 typedef error_code _Myt;

 error_code() noexcept
  : _Myval(0),
  _Mycat(&system_category())
  {
  }

 error_code(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val),
  _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = enable_if_t<is_error_code_enum_v<_Enum>>>
  error_code(_Enum _Errcode) noexcept
  : _Myval(0),
  _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum,
  class = enable_if_t<is_error_code_enum_v<_Enum>>>
  error_code& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const noexcept;

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef error_condition _Myt;

 error_condition() noexcept
  : _Myval(0),
  _Mycat(&generic_category())
  {
  }

 error_condition(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val),
  _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = enable_if_t<is_error_condition_enum_v<_Enum>>>
  error_condition(_Enum _Errcode) noexcept
  : _Myval(0),
  _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum,
  class = enable_if_t<is_error_condition_enum_v<_Enum>>>
  error_condition& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category * _Mycat;
 };


inline bool operator==(const error_code& _Left, const error_code& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }

inline bool operator==(const error_code& _Left, const error_condition& _Right) noexcept
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(const error_condition& _Left, const error_code& _Right) noexcept
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }

inline bool operator==(const error_condition& _Left, const error_condition& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }


inline bool operator!=(const error_code& _Left, const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(const error_code& _Left, const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(const error_condition& _Left, const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(const error_condition& _Left, const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


inline bool operator<(const error_code& _Left, const error_code& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }

inline bool operator<(const error_condition& _Left, const error_condition& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }


inline error_condition error_category::default_error_condition(int _Errval) const noexcept
 {
 return (error_condition(_Errval, *this));
 }

inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const noexcept
 {
 return (category().default_error_condition(value()));
 }


inline error_code make_error_code(errc _Errno) noexcept
 {
 return (error_code((int)_Errno, generic_category()));
 }

inline error_code make_error_code(io_errc _Errno) noexcept
 {
 return (error_code((int)_Errno, iostream_category()));
 }


inline error_condition make_error_condition(errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, generic_category()));
 }

inline error_condition make_error_condition(io_errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, iostream_category()));
 }


template<>
 struct hash<error_code>
 {
                                   typedef error_code argument_type;
                                   typedef size_t result_type;

 size_t operator()(const error_code& _Keyval) const noexcept
  {
  return (hash<int>{}(_Keyval.value()));
  }
 };

template<>
 struct hash<error_condition>
 {
                                   typedef error_condition argument_type;
                                   typedef size_t result_type;

 size_t operator()(const error_condition& _Keyval) const noexcept
  {
  return (hash<int>{}(_Keyval.value()));
  }
 };


class _System_error
 : public runtime_error
 {
private:
 static string _Makestr(error_code _Errcode, string _Message)
  {
  if (!_Message.empty())
   {
   _Message.append(": ");
   }

  _Message.append(_Errcode.message());
  return (_Message);
  }

protected:
 _System_error(error_code _Errcode, const string& _Message)
  : runtime_error(_Makestr(_Errcode, _Message)),
  _Mycode(_Errcode)
  {
  }

 error_code _Mycode;
 };

class system_error
 : public _System_error
 {
private:
 typedef _System_error _Mybase;

public:
 system_error(error_code _Errcode)
  : _Mybase(_Errcode, "")
  {
  }

 system_error(error_code _Errcode, const string& _Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(error_code _Errcode, const char *_Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat)
  : _Mybase(error_code(_Errval, _Errcat), "")
  {
  }

 system_error(int _Errval, const error_category& _Errcat, const string& _Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat, const char *_Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 const error_code& code() const noexcept
  {
  return (_Mycode);
  }
# 562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\system_error" 3
 };

              const char *__cdecl _Syserror_map(int);
              int __cdecl _Winerror_map(int);
              unsigned long __cdecl _Winerror_message(
 unsigned long _Message_id, char *_Narrow, unsigned long _Size);


class _Generic_error_category
 : public error_category
 {
public:
 _Generic_error_category() noexcept
  {
  _Addr = _Generic_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("generic");
  }

 virtual string message(int _Errcode) const
  {
  return (_Syserror_map(_Errcode));
  }
 };


class _Iostream_error_category
 : public _Generic_error_category
 {
public:
 _Iostream_error_category() noexcept
  {
  _Addr = _Iostream_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("iostream");
  }

 virtual string message(int _Errcode) const
  {
  if (_Errcode == (int)io_errc::stream)
   {
   return ("iostream stream error");
   }
  else
   {
   return (_Generic_error_category::message(_Errcode));
   }
  }
 };


class _System_error_category
 : public error_category
 {
public:
 _System_error_category() noexcept
  {
  _Addr = _System_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("system");
  }

 virtual string message(int _Errcode) const
  {
  const unsigned long _Size = 32767;
  string _Narrow(_Size, '\0');

  const unsigned long _Val = _Winerror_message(static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);
  if (_Val == 0)
   {
   _Narrow = "unknown error";
   }
  else
   {
   _Narrow.resize(_Val);
   }

  _Narrow.shrink_to_fit();
  return (_Narrow);
  }

 virtual error_condition
  default_error_condition(int _Errval) const noexcept
  {
  int _Posv = _Winerror_map(_Errval);
  if (_Posv == 0)
   {
   return (error_condition(_Errval, system_category()));
   }
  else
   {
   return (error_condition(_Posv, generic_category()));
   }
  }
 };
# 689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\system_error" 3
template<class _Ty> inline
 int __stdcall _Immortalize_impl(void *, void * _Storage_ptr, void **) noexcept
 {
 ::new (_Storage_ptr) _Ty();
 return (1);
 }

template<class _Ty> inline
 _Ty& _Immortalize()
 {
 static_assert(sizeof(void *) == sizeof(once_flag), "TRANSITION, VSO#406237");
 static_assert(alignof(void *) == alignof(once_flag), "TRANSITION, VSO#406237");
 static void * _Flag = nullptr;
 static aligned_union_t<1, _Ty> _Storage;
 if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)
  {
  ::std:: terminate();
  }

 return (reinterpret_cast<_Ty&>(_Storage));
 }


inline const error_category& generic_category() noexcept
 {
 return (_Immortalize<_Generic_error_category>());
 }

inline const error_category& iostream_category() noexcept
 {
 return (_Immortalize<_Iostream_error_category>());
 }

inline const error_category& system_category() noexcept
 {
 return (_Immortalize<_System_error_category>());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xiosbase" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\share.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xiosbase" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)





namespace std {
# 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xiosbase" 3
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
 static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
 static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
 static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
 static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
 static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
 static constexpr _Fmtflags left = (_Fmtflags)0x0040;
 static constexpr _Fmtflags right = (_Fmtflags)0x0080;
 static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
 static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
 static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
 static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
 static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
 static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

 static constexpr _Fmtflags hexfloat =
  (_Fmtflags)0x3000;

 static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
 static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
 static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
  | 0x0080 | 0x0100);
 static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
  | 0x0400 | 0x0800);
 static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
  | 0x2000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static constexpr _Iostate goodbit = (_Iostate)0x0;
 static constexpr _Iostate eofbit = (_Iostate)0x1;
 static constexpr _Iostate failbit = (_Iostate)0x2;
 static constexpr _Iostate badbit = (_Iostate)0x4;

 enum _Openmode
  {
  _Openmask = 0xff};

 static constexpr _Openmode in = (_Openmode)0x01;
 static constexpr _Openmode out = (_Openmode)0x02;
 static constexpr _Openmode ate = (_Openmode)0x04;
 static constexpr _Openmode app = (_Openmode)0x08;
 static constexpr _Openmode trunc = (_Openmode)0x10;
 static constexpr _Openmode _Nocreate = (_Openmode)0x40;
 static constexpr _Openmode _Noreplace = (_Openmode)0x80;
 static constexpr _Openmode binary = (_Openmode)0x20;

 enum _Seekdir
  {
  _Seekbeg,
  _Seekcur,
  _Seekend
  };

 static constexpr _Seekdir beg = _Seekbeg;
 static constexpr _Seekdir cur = _Seekcur;
 static constexpr _Seekdir end = _Seekend;

 enum
  {
  _Openprot = 0x40};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class __declspec(dllimport) ios_base
 : public _Iosb<int>
 {
public:
 typedef int fmtflags;
 typedef int iostate;
 typedef int openmode;
 typedef int seekdir;


 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;


 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (__cdecl *event_callback)(event, ios_base&, int);


 typedef unsigned int io_state, open_mode, seek_dir;



 class failure

  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
# 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xiosbase" 3
  };


 class __declspec(dllimport) Init
  {
 public:
                     Init()
   {
   _Init_ctor(this);
   }

                     ~Init() noexcept
   {
   _Init_dtor(this);
   }

 private:
  static void __cdecl _Init_ctor(Init *);
  static void __cdecl _Init_dtor(Init *);

                          static int _Init_cnt;

  static int& __cdecl _Init_cnt_func();
  };

 explicit operator bool() const
  {
  return (!fail());
  }

 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }


 void clear(io_state _State)
  {
  clear((iostate)_State);
  }


 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }


 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }


 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }


 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }


 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | ((int)_Newfmtflags & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int __cdecl xalloc()
  {
  { ::std:: _Lockit _Lock(2);
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != ::std:: addressof(_Other))
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool __cdecl sync_with_stdio(bool _Newsync = true)
  {
  { ::std:: _Lockit _Lock(2);
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base() noexcept
  {
  _Ios_base_dtor(this);
  }

 static void __cdecl
  _Addstd(ios_base *);

 size_t _Stdstr;

protected:
                    ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new locale;
  }

private:

 struct _Iosarray
  : public _Crt_new_delete
  {
 public:
                     _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  : public _Crt_new_delete
  {
                     _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   delete _Ptr1;
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   delete _Pfa1;
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

                         static int _Index;
                         static bool _Sync;

 static void __cdecl
  _Ios_base_dtor(ios_base *);

public:
 ios_base(const ios_base&) = delete;
 ios_base& operator=(const ios_base&) = delete;
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\streambuf" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
                    basic_streambuf()
  : _Plocale(new locale)
  {
  _Init();
  }

                    basic_streambuf(_Uninitialized)
  {
  }

                    basic_streambuf(const _Myt& _Right)
  : _Plocale(new locale(_Right.getloc()))
  {
  _Init();
  setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
  setg(_Right.eback(), _Right.gptr(), _Right.egptr());
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   pubimbue(_Right.getloc());
   }
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   _Elem *_Pfirst0 = pbase();
   _Elem *_Pnext0 = pptr();
   _Elem *_Pend = epptr();
   _Elem *_Gfirst0 = eback();
   _Elem *_Gnext0 = gptr();
   _Elem *_Gend = egptr();

   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   _Right.setp(_Pfirst0, _Pnext0, _Pend);

   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   _Right.setg(_Gfirst0, _Gnext0, _Gend);

   ::std:: swap(_Plocale, _Right._Plocale);
   }
  }

public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf() noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }


 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }


 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }


 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }


 _Myt * pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }


 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }


 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  }

 virtual void _Unlock()
  {
  }

protected:
 _Elem * eback() const
  {
  return (*_IGfirst);
  }

 _Elem * gptr() const
  {
  return (*_IGnext);
  }

 _Elem * pbase() const
  {
  return (*_IPfirst);
  }

 _Elem * pptr() const
  {
  return (*_IPnext);
  }

 _Elem * egptr() const
  {
  return (*_IGnext + *_IGcount);
  }

 void gbump(int _Off)
  {
  *_IGcount -= _Off;
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First;
  *_IGnext = _Next;
  *_IGcount = (int)(_Last - _Next);
  }

 _Elem * epptr() const
  {
  return (*_IPnext + *_IPcount);
  }

 _Elem * _Gndec()
  {
  ++*_IGcount;
  return (--*_IGnext);
  }

 _Elem * _Gninc()
  {
  --*_IGcount;
  return ((*_IGnext)++);
  }

 _Elem * _Gnpreinc()
  {
  --*_IGcount;
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return (*_IGnext != 0 ? *_IGcount : 0);
  }

 void pbump(int _Off)
  {
  *_IPcount -= _Off;
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPcount = (int)(_Last - _First);
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPcount = (int)(_Last - _Next);
  }

 _Elem * _Pninc()
  {
  --*_IPcount;
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return (*_IPnext != 0 ? *_IPcount : 0);
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGcount = &_Gcount;
  _IPcount = &_Pcount;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
  _Elem **_Pf, _Elem **_Pn, int *_Pc)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt * setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;

 int _Gcount;
 int _Pcount;
 int *_IGcount;
 int *_IPcount;

protected:
 locale *_Plocale;
 };




template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
# 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\streambuf" 3
template<class _Elem,
 class _Traits>
 class istreambuf_iterator
 {
public:
 using iterator_category = input_iterator_tag;
 using value_type = _Elem;
 using difference_type = typename _Traits::off_type;
 using pointer = const _Elem *;
 using reference = _Elem;

 using char_type = _Elem;
 using traits_type = _Traits;
 using streambuf_type = basic_streambuf<_Elem, _Traits>;
 using istream_type = basic_istream<_Elem, _Traits>;

 using int_type = typename traits_type::int_type;

 constexpr istreambuf_iterator(streambuf_type *_Sb = 0) noexcept
  : _Strbuf(_Sb), _Got(_Sb == 0), _Val()
  {
  }

 istreambuf_iterator(istream_type& _Istr) noexcept
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();
# 523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\streambuf" 3
  return (_Val);
  }

 istreambuf_iterator& operator++()
  {







  _Inc();
  return (*this);
  }

 istreambuf_iterator operator++(int)
  {
  if (!_Got)
   _Peek();
  istreambuf_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const istreambuf_iterator& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return ((_Strbuf == 0 && _Right._Strbuf == 0)
   || (_Strbuf != 0 && _Right._Strbuf != 0));
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   {
   _Strbuf = 0;
   _Got = true;
   }
  else
   {
   _Got = false;
   }
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };

template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
 {
public:
 using iterator_category = output_iterator_tag;
 using value_type = void;
 using difference_type = void;
 using pointer = void;
 using reference = void;

 using char_type = _Elem;
 using traits_type = _Traits;
 using streambuf_type = basic_streambuf<_Elem, _Traits>;
 using ostream_type = basic_ostream<_Elem, _Traits>;

 ostreambuf_iterator(streambuf_type *_Sb) noexcept
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) noexcept
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 ostreambuf_iterator& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 ostreambuf_iterator& operator*()
  {
  return (*this);
  }

 ostreambuf_iterator& operator++()
  {
  return (*this);
  }

 ostreambuf_iterator& operator++(int)
  {
  return (*this);
  }

 bool failed() const noexcept
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocnum" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)






extern "C" {


extern float __cdecl _Stofx(const char *,
                                  char **,
 long, int *);
extern double __cdecl _Stodx(const char *,
                                  char **,
 long, int *);
extern long double __cdecl _Stoldx(const char *,
                                  char **,
 long, int *);
extern long __cdecl _Stolx(const char *,
                                  char **,
 int, int *);
extern unsigned long __cdecl _Stoulx(const char *,
                                  char **,
 int, int *);
extern long long __cdecl _Stollx(const char *,
                                  char **,
 int, int *);
extern unsigned long long __cdecl _Stoullx(const char *,
                                  char **,
 int, int *);


}


namespace std {


inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
 {
 int& _Errno_ref = (*_errno());
 const int _Orig = _Errno_ref;

 _Errno_ref = 0;
 double _Val = :: strtod(_Str, _Endptr);
 *_Perr = _Errno_ref;
 _Errno_ref = _Orig;

 if (_Pten != 0)
  _Val *= :: pow(10.0, static_cast<double>(_Pten));

 return (_Val);
 }


inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
 {
 int& _Errno_ref = (*_errno());
 const int _Orig = _Errno_ref;

 _Errno_ref = 0;
 float _Val = :: strtof(_Str, _Endptr);
 *_Perr = _Errno_ref;
 _Errno_ref = _Orig;

 if (_Pten != 0)
  _Val *= :: powf(10.0f, static_cast<float>(_Pten));

 return (_Val);
 }


template<class _Elem> inline
 size_t _Find_elem(_Elem *_Base, _Elem _Ch)
 {
 _Elem *_Ptr = _Base;
 for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
  ;
 return ((size_t)(_Ptr - _Base));
 }

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
 {
 size_t _Count = :: wcslen(_Ptr) + 1;

 wchar_t *_Ptrdest = (wchar_t *)calloc(_Count, sizeof (wchar_t));


 if (!_Ptrdest)
  _Xbad_alloc();
 :: wmemcpy(_Ptrdest, _Ptr, _Count);
 return (_Ptrdest);
 }


template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

                         __declspec(dllimport) static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct() noexcept
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
  {
  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
  {
  _Dp = (_Elem)_Ptr->_W_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();
  _Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());

  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
  } catch (...) {
  _Tidy();
  throw;
  }

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
   }
  else
   _Getvals((_Elem)0, _Ptr, _Cvt);
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  :: free((void *)_Grouping);
  :: free((void *)_Falsename);
  :: free((void *)_Truename);
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }

 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~numpunct_byname() noexcept
  {
  }
 };







template<class _Elem>
                         locale::id numpunct<_Elem>::id;






template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_get() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
                             ;
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long long _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long long _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }







 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
                             ;
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  float _Ans = _Stofx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
                             ;
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  double _Ans = _Stodx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
                             ;
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  long double _Ans = _Stodx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }



 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;

  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned long long _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned long long):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int __cdecl _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24};
  static constexpr char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Loc);
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   {
   *_Ptr++ = '+';
   ++_First;
   }
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   {
   *_Ptr++ = '-';
   ++_First;
   }

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _Atoms[0])
   {
   _Seendigit = true;
   ++_First;
   if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF])
    && (_Base == 0 || _Base == 16))
    {
    _Base = 16;
    _Seendigit = false;
    ++_First;
    }
   else if (_Base == 0)
    {
    _Base = 8;
    }
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   {
   size_t _Idx = _Find_elem(_Atoms, *_First);
   if (_Idx < _Dlen)
    {
    *_Ptr = _Src[_Idx];
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     {
     ++_Ptr;
     _Nonzero = true;
     }

    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }
   }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if ((0 < --_Group && *_Pg != _Groups[_Group])
    || (0 == _Group && *_Pg < _Groups[_Group]))
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int __cdecl _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  char *_Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12};
  static constexpr char _Src[] = {"0123456789-+Ee"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   {
   *_Ptr++ = '+';
   ++_First;
   }
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   {
   *_Ptr++ = '-';
   ++_First;
   }

  char *_Leading = _Ptr;
  *_Ptr++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
     _Seendigit = true, (void)++_First)
    if (_Max_sig_dig <= _Significant)
     {
     ++_Pten;
     if (0 < _Idx)
      _Sticky = true;
     }
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
     {
     _Seendigit = true;
     if (_Max_sig_dig <= _Significant)
      {
      ++_Pten;
      if (0 < _Idx)
       _Sticky = true;
      }
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   {
   *_Ptr++ = localeconv()->decimal_point[0];
   ++_First;
   }

  if (*_Phexexp != 1000000000 && _Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, (void)++_First)
    --_Pten;
   if (_Pten < 0)
    {
    *_Ptr++ = '0';
    ++_Pten;
    }
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, (void)++_First)
   if (_Significant < _Max_sig_dig)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }
   else if (0 < _Idx)
    _Sticky = true;

  if (_Sticky)
   {
   char *_Px = _Ptr;
   while (--_Px != _Leading)
    {
    if (*_Px == localeconv()->decimal_point[0])
     ;
    else if (*_Px != '9')
     {
     ++*_Px;
     break;
     }
    else
     *_Px = '0';
    }

   if (_Px == _Leading)
    {
    *_Px = '1';
    ++_Pten;
    }
   }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_EOFF + 1]
    || *_First == _Atoms[_NUMGET_EOFF]))
   {
   *_Ptr++ = 'e';
   ++_First;
   _Seendigit = false;
   _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    {
    *_Ptr++ = '+';
    ++_First;
    }
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    {
    *_Ptr++ = '-';
    ++_First;
    }

   for (; _First != _Last && *_First == _Atoms[0]; ++_First)
    {
    _Seendigit = true;
    }

   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, (void)++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int __cdecl _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26};
  static constexpr char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   {
   *_Ptr++ = '+';
   ++_First;
   }
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   {
   *_Ptr++ = '-';
   ++_First;
   }

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _Atoms[0])
   ;
  else if (++_First != _Last
   && (*_First == _Atoms[_NUMGET_XOFF + 1]
    || *_First == _Atoms[_NUMGET_XOFF]))
   ++_First;
  else
   _Seendigit = true;

  const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
     _Seendigit = true, (void)++_First)
    if (_Max_sig_dig <= _Significant)
     ++_Phex;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
     {
     _Seendigit = true;
     if (_Max_sig_dig <= _Significant)
      ++_Phex;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   {
   *_Ptr++ = localeconv()->decimal_point[0];
   ++_First;
   }

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, (void)++_First)
    --_Phex;
   if (_Phex < 0)
    {
    *_Ptr++ = '0';
    ++_Phex;
    }
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, (void)++_First)
   if (_Significant < _Max_sig_dig)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_POFF + 1]
    || *_First == _Atoms[_NUMGET_POFF]))
   {
   *_Ptr++ = 'p';
   ++_First;
   _Seendigit = false;
   _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    {
    *_Ptr++ = '+';
    ++_First;
    }
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    {
    *_Ptr++ = '-';
    ++_First;
    }

   for (; _First != _Last && *_First == _Atoms[0]; ++_First)
    {
    _Seendigit = true;
    }

   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, (void)++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }



 };







template<class _Elem,
 class _InIt>
                         locale::id num_get<_Elem, _InIt>::id;






template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_put() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabs(_Val))
   {
   int _Ptwo;
   (void):: frexp(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabsl(_Val))
   {
   int _Ptwo;
   (void):: frexpl(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  char _Buf[2 * 32];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
  }

private:
 char *__cdecl _Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  if (_Flags & ios_base::uppercase)
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'A'
    : _Ffl == ios_base::scientific ? 'E' : 'G';
  else
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'a'
    : _Ffl == ios_base::scientific ? 'e' : 'g';

  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Count) const
  {
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;

  const char *_Exps;
  if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
    && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn(&_Buf[0], _Exps);
  char _Dp[2] = {"."};
  _Dp[0] = :: localeconv()->decimal_point[0];
  const size_t _Poff =
   :: strcspn(&_Buf[0], &_Dp[0]);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();

  if (_Poff != _Count)
   _Groupstring[_Poff] = _Punct_fac.decimal_point();

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char *_Pg = &_Grouping[0];
  while (*_Pg != 127 && '\0' < *_Pg
   && (size_t)*_Pg < _Off - _Prefix)
   {
   _Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
   if ('\0' < _Pg[1])
    ++_Pg;
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *__cdecl _Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else

   {
   *_Ptr++ = 'I';
   *_Ptr++ = '6';
   *_Ptr++ = '4';
   }

  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;
  if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
   && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
   && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
   _Prefix += 2;

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const char *_Pg = &_Grouping[0];
  if (*_Pg != 127 && '\0' < *_Pg)
   {
   const _Elem _Kseparator = _Punct_fac.thousands_sep();
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Count - _Prefix)
    {
    _Count -= *_Pg;
    _Groupstring.insert(_Count, 1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt __cdecl _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt __cdecl _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, (void)++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };







template<class _Elem,
 class _OutIt>
                         locale::id num_put<_Elem, _OutIt>::id;




template locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
# 1706 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xlocnum" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ios" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios() noexcept
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }


 void clear(io_state _State)
  {
  clear((iostate)_State);
  }


 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }


 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }


 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos * tie() const
  {
  return (_Tiestr);
  }

 _Myos * tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb * rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb * rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }

 void move(_Myt& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void move(_Myt&& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right) noexcept
  {
  ios_base::swap(_Right);
  ::std:: swap(_Fillch, _Right._Fillch);
  ::std:: swap(_Tiestr, _Right._Tiestr);
  }

 void set_rdbuf(_Mysb *_Strbuf)
  {
  _Mystrbuf = _Strbuf;
  }

protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

                    basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;

public:
                    basic_ios(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };




template class __declspec(dllimport) basic_ios<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
 char_traits<wchar_t> >;
# 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ios" 3
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& __cdecl oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }


namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: hexfloat;
}


}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ostream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {
# 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ostream" 3
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;

 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf,

  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   this->_Addstd(this);
  }

protected:
                    basic_ostream(_Myt&& _Right)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != ::std:: addressof(_Right))
   _Myios::swap(_Right);
  }

public:
                    basic_ostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

  _Sentry_base& operator=(const _Sentry_base&) = delete;
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

                     ~sentry() noexcept
   {

   if (::std:: uncaught_exceptions() == 0)
    {
    this->_Myostr._Osfx();
    }



   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool opfx()
  {
  if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
   _Myios::tie()->flush();
  return (this->good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (this->good() && this->flags() & ios_base::unitbuf)
   if (_Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
  } catch (...) {
  }
  }
# 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ostream" 3
 _Myt& operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ostream" 3
 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  this->width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else if (0 < _Count)
   {
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  if (_Myios::rdbuf() != 0)
   {
   const sentry _Ok(*this);

   if (_Ok && _Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
   }
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  const sentry _Ok(*this);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };

#pragma vtordisp(pop)
# 666 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ostream" 3
template class __declspec(dllimport) basic_ostream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
 char_traits<wchar_t> >;
# 680 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\ostream" 3
template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
 {
 return (_Ostr << _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\istream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;
# 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\istream" 3
 explicit basic_istream(_Mysb *_Strbuf,
  bool _Isstd = false)

  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_istream(_Uninitialized)
  {
  this->_Addstd(this);
  }

protected:
                    basic_istream(_Myt&& _Right)
  : _Chcount(_Right._Chcount)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  _Right._Chcount = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  _Myios::swap(_Right);
  ::std:: swap(_Chcount, _Right._Chcount);
  }

public:
                    basic_istream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

  _Sentry_base& operator=(const _Sentry_base&) = delete;
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (this->good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && this->flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (this->good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }
# 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\istream" 3
 _Myt& operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32768) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\istream" 3
 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (;;)
    {
    int_type _Meta;
    if (_Count != (numeric_limits<streamsize>::max)()
     && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Count && 0 < _Num)
   {
   read(_Str, _Num < _Count ? _Num : _Count);
   }

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  const sentry _Ok(*this, true);

  if (_Myios::rdbuf() == 0)
   return (-1);
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _Myios::setstate(ios_base::badbit);
   return (-1);
   }
  else
   return (0);
  }

 _Myt& seekg(pos_type _Pos)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  const sentry _Ok(*this, true);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };

#pragma vtordisp(pop)
# 909 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\istream" 3
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
# 920 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\istream" 3
template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }

protected:
                    basic_iostream(_Myt&& _Right)
  : _Myis(_Right.rdbuf(), false),
   _Myos(_Noinit, false)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != ::std:: addressof(_Right))
   _Myios::swap(_Right);
  }

public:
                    basic_iostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_iostream() noexcept
  {
  }
 };




template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
# 988 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\istream" 3
template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width()
   : (numeric_limits<streamsize>::max)();
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty&& _Val)
 {
 _Istr >> ::std:: forward<_Ty>(_Val);
 return (_Istr);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  __cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\string" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring_insert.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xstring_insert.h" 3
#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Elem,
 class _Traits,
 class _SizeT> inline
 basic_ostream<_Elem, _Traits>& _Insert_string(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const _Elem * const _Data, const _SizeT _Size)
 {
 ios_base::iostate _State = ios_base::goodbit;
 _SizeT _Pad = _Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size
  ? 0 : static_cast<_SizeT>(_Ostr.width()) - _Size;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Data, (streamsize)_Size)
    != (streamsize)_Size)
    _State |= ios_base::badbit;
  else
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\string" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef ctype<_Elem> _Ctype;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
  _Str.erase();

  try {
  _Mysizt _Size = 0 < _Istr.width()
   && (_Mysizt)_Istr.width() < _Str.max_size()
    ? (_Mysizt)_Istr.width() : _Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Traits::to_char_type(_Meta)))
    break;
   else
    {
    _Str.append(1, _Traits::to_char_type(_Meta));
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr, true);

 if (_Ok)
  {
  try {
  _Str.erase();
  const typename _Traits::int_type _Metadelim =
   _Traits::to_int_type(_Delim);
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; ; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Traits::eq_int_type(_Meta, _Metadelim))
    {
    _Changed = true;
    _Istr.rdbuf()->sbumpc();
    break;
    }
   else if (_Str.max_size() <= _Str.size())
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    {
    _Str += _Traits::to_char_type(_Meta);
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(_Istr, _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (::std:: move(_Istr) >> _Str);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 return (getline(::std:: move(_Istr), _Str, _Delim));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (_Insert_string(_Ostr, _Str.data(), _Str.size()));
 }



inline int stoi(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 _Errno_ref = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if (_Errno_ref == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 _Errno_ref = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 _Errno_ref = 0;
 unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 _Errno_ref = 0;
 long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 _Errno_ref = 0;
 unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const string& _Str, size_t *_Idx = 0)
 {
 int& _Errno_ref = (*_errno());
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 _Errno_ref = 0;
 float _Ans = :: strtof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const string& _Str, size_t *_Idx = 0)
 {
 int& _Errno_ref = (*_errno());
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 _Errno_ref = 0;
 double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const string& _Str, size_t *_Idx = 0)
 {
 int& _Errno_ref = (*_errno());
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 _Errno_ref = 0;
 long double _Ans = :: strtold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


inline int stoi(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 _Errno_ref = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if (_Errno_ref == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 _Errno_ref = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 _Errno_ref = 0;
 unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 _Errno_ref = 0;
 long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 int& _Errno_ref = (*_errno());
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 _Errno_ref = 0;
 unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const wstring& _Str, size_t *_Idx = 0)
 {
 int& _Errno_ref = (*_errno());
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 _Errno_ref = 0;
 float _Ans = :: wcstof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const wstring& _Str, size_t *_Idx = 0)
 {
 int& _Errno_ref = (*_errno());
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 _Errno_ref = 0;
 double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
 {
 int& _Errno_ref = (*_errno());
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 _Errno_ref = 0;
 long double _Ans = :: wcstold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if (_Errno_ref == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


template<class _Elem,
 class _UTy> inline
 _Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal)
 {
 static_assert(is_unsigned_v<_UTy>, "_UTy must be unsigned");





#pragma warning(push)
#pragma warning(disable: 4127)
 if (sizeof(_UTy) > 4)
  {
  while (_UVal > 0xFFFFFFFFU)
   {
   auto _UVal_chunk = static_cast<_Uint32t>(_UVal % 1000000000);
   _UVal /= 1000000000;

   for (int _Idx = 0; _Idx != 9; ++_Idx)
    {
    *--_RNext = '0' + _UVal_chunk % 10;
    _UVal_chunk /= 10;
    }
   }
  }
#pragma warning(pop)

 auto _UVal_trunc = static_cast<_Uint32t>(_UVal);


 do
  {
  *--_RNext = '0' + _UVal_trunc % 10;
  _UVal_trunc /= 10;
  }
 while (_UVal_trunc != 0);
 return (_RNext);
 }

template<class _Elem,
 class _Ty> inline
 basic_string<_Elem> _Integral_to_string(const _Ty _Val)
 {
 static_assert(is_integral_v<_Ty>, "_Ty must be integral");
 using _UTy = make_unsigned_t<_Ty>;
 _Elem _Buff[21];
 _Elem* const _Buff_end = ::std:: end(_Buff);
 _Elem* _RNext = _Buff_end;
 auto _UVal = static_cast<_UTy>(_Val);
 if (_Val < 0)
  {
  _RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
  *--_RNext = '-';
  }
 else
  _RNext = _UIntegral_to_buff(_RNext, _UVal);

 return (basic_string<_Elem>(_RNext, _Buff_end));
 }

template<class _Ty> inline
 string _Floating_to_string(const char *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point_v<_Ty>,
  "_Ty must be floating point");

 int _Len = :: _scprintf(_Fmt, _Val);
 string _Str(_Len + 1, '\0');
 :: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }

template<class _Ty> inline
 wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point_v<_Ty>,
  "_Ty must be floating point");

 int _Len = :: _scwprintf(_Fmt, _Val);
 wstring _Str(_Len + 1, L'\0');
 :: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }




inline string to_string(int _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned int _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(long long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned long long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(float _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(double _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(long double _Val)
 {
 return (_Floating_to_string("%Lf", _Val));
 }


inline wstring to_wstring(int _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned int _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(long long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned long long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(float _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(double _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(long double _Val)
 {
 return (_Floating_to_wstring(L"%Lf", _Val));
 }







#pragma warning(push)
#pragma warning(disable: 4455)

inline namespace literals {
inline namespace string_literals {
inline string operator "" s(const char *_Str, size_t _Len)
 {
 return (string(_Str, _Len));
 }

inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
 {
 return (wstring(_Str, _Len));
 }

inline u16string operator "" s(const char16_t *_Str, size_t _Len)
 {
 return (u16string(_Str, _Len));
 }

inline u32string operator "" s(const char32_t *_Str, size_t _Len)
 {
 return (u32string(_Str, _Len));
 }
}
}

#pragma warning(pop)





}


#pragma warning(pop)
#pragma pack(pop)
# 2 "C:\\mytest\\server\\NameCheckServer/config.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xmemory" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Ty> inline
 pair<_Ty *, ptrdiff_t> _Get_temporary_buffer(ptrdiff_t _Count) noexcept
 {
 if (static_cast<size_t>(_Count) <= static_cast<size_t>(-1) / sizeof(_Ty))
  {
  for (; 0 < _Count; _Count /= 2)
   {
   _Ty * _Pbuf = static_cast<_Ty *>(::operator new(static_cast<size_t>(_Count) * sizeof(_Ty), nothrow));
   if (_Pbuf)
    {
    return {_Pbuf, _Count};
    }
   }
  }

 return {nullptr, 0};
 }


template<class _Ty> inline
 void _Return_temporary_buffer(_Ty * _Pbuf)
 {
 ::operator delete(_Pbuf);
 }


template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_move_unchecked1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  {
  _Construct_in_place(*_Dest, ::std:: move(*_First));
  }

 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_move_unchecked1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_move_unchecked(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Uninitialized_move_unchecked1(_First, _Last, _Dest, _Ptr_move_cat(_First, _Dest)));
 }



template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest, _Alloc& _Al,
  _General_ptr_iterator_tag, _Any_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  {
  allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Dest), *_First);
  }

 } catch (...) {
 _Destroy_range(_Next, _Dest, _Al);
 throw;
 }

 return (_Dest);
 }

template<class _Ty1,
 class _Ty2,
 class _Alloc> inline
 _Ty2 *_Uninitialized_copy_al_unchecked(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest, _Alloc&,
  _Really_trivial_ptr_iterator_tag, true_type)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest, _Alloc& _Al)
 {


 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 const auto _UDest = _Unchecked(_Dest);
 return (_Rechecked(_Dest,
  _Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
   _Ptr_copy_cat(_UFirst, _UDest),
   _Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>())));
 }


template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest, _Alloc& _Al,
  _General_ptr_iterator_tag, _Any_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  {
  allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Dest), ::std:: move(*_First));
  }

 } catch (...) {
 _Destroy_range(_Next, _Dest, _Al);
 throw;
 }

 return (_Dest);
 }

template<class _Ty1,
 class _Ty2,
 class _Alloc> inline
 _Ty2 *_Uninitialized_move_al_unchecked(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest, _Alloc&,
  _Really_trivial_ptr_iterator_tag, true_type)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest, _Alloc& _Al)
 {


 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 const auto _UDest = _Unchecked(_Dest);
 return (_Rechecked(_Dest,
  _Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
   _Ptr_move_cat(_UFirst, _UDest),
   _Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(::std:: move(*_UFirst))>())));
 }


template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 _FwdIt _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
  _Alloc& _Al, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  {
  allocator_traits<_Alloc>::construct(_Al, _Unfancy(_First), _Val);
  }

 } catch (...) {
 _Destroy_range(_Next, _First, _Al);
 throw;
 }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 _FwdIt _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
  _Alloc&, true_type)
 {
 :: memset(_First, static_cast<unsigned char>(_Val), _Count);
 return (_First + _Count);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 _FwdIt _Uninitialized_fill_n(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
  _Alloc& _Al)
 {
 return (_Uninit_alloc_fill_n1(_First, _Count, _Val, _Al,
  _Conjunction_t<decltype(_Fill_memset_is_safe(_First, _Val)),
   _Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(_Val)>>()));
 }


template<class _FwdIt>
 using _Use_memset_value_construct_t = _Conjunction_t<
  is_pointer<_FwdIt>,
  is_scalar<_Iter_value_t<_FwdIt>>,
  negation<is_volatile<_Iter_value_t<_FwdIt>>>,
  negation<is_member_pointer<_Iter_value_t<_FwdIt>>>>;

template<class _FwdIt> inline
 _FwdIt _Zero_range(_FwdIt _First, _FwdIt _Last)
 {
 char * const _First_ch = reinterpret_cast<char *>(_First);
 char * const _Last_ch = reinterpret_cast<char *>(_Last);
 :: memset(_First_ch, 0, _Last_ch - _First_ch);
 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 _FwdIt _Uninitialized_value_construct_n1(_FwdIt _First, _Diff _Count, _Alloc& _Al, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  {
  allocator_traits<_Alloc>::construct(_Al, _Unfancy(_First));
  }

 } catch (...) {
 _Destroy_range(_Next, _First, _Al);
 throw;
 }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 _FwdIt _Uninitialized_value_construct_n1(_FwdIt _First, _Diff _Count, _Alloc&, true_type)
 {
 return (_Zero_range(_First, _First + _Count));
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 _FwdIt _Uninitialized_value_construct_n(_FwdIt _First, _Diff _Count, _Alloc& _Al)
 {
 return (_Uninitialized_value_construct_n1(_First, _Count, _Al,
  _Conjunction_t<_Use_memset_value_construct_t<_FwdIt>,
   _Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>()));
 }



struct _Not_a_node_tag
 {
 };



template<class _Ty>
                                   pair<_Ty *, ptrdiff_t> get_temporary_buffer(ptrdiff_t _Count) noexcept
 {
 return (_Get_temporary_buffer<_Ty>(_Count));
 }


template<class _Ty>
                                   void return_temporary_buffer(_Ty * _Pbuf)
 {
 _Return_temporary_buffer(_Pbuf);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Mylist,
 class _Base = _Iterator_base0>
 class _List_unchecked_const_iterator
  : public _Base
 {
public:
 using iterator_category = bidirectional_iterator_tag;

 using _Nodeptr = typename _Mylist::_Nodeptr;
 using value_type = typename _Mylist::value_type;
 using difference_type = typename _Mylist::difference_type;
 using pointer = typename _Mylist::const_pointer;
 using reference = const value_type&;

 _List_unchecked_const_iterator()
  : _Ptr()
  {
  }

 _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Ptr(_Pnode)
  {
  this->_Adopt(_Plist);
  }

 reference operator*() const
  {
  return (_Ptr->_Myval);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _List_unchecked_const_iterator& operator++()
  {
  _Ptr = _Ptr->_Next;
  return (*this);
  }

 _List_unchecked_const_iterator operator++(int)
  {
  _List_unchecked_const_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _List_unchecked_const_iterator& operator--()
  {
  _Ptr = _Ptr->_Prev;
  return (*this);
  }

 _List_unchecked_const_iterator operator--(int)
  {
  _List_unchecked_const_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _List_unchecked_const_iterator& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _List_unchecked_const_iterator& _Right) const
  {
  return (!(*this == _Right));
  }

 _Nodeptr _Ptr;
 };


template<class _Mylist>
 class _List_unchecked_iterator
  : public _List_unchecked_const_iterator<_Mylist>
 {
public:
 using _Mybase = _List_unchecked_const_iterator<_Mylist>;
 using iterator_category = bidirectional_iterator_tag;

 using _Nodeptr = typename _Mylist::_Nodeptr;
 using value_type = typename _Mylist::value_type;
 using difference_type = typename _Mylist::difference_type;
 using pointer = typename _Mylist::pointer;
 using reference = value_type&;

 _List_unchecked_iterator()
  {
  }

 _List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _List_unchecked_iterator& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _List_unchecked_iterator operator++(int)
  {
  _List_unchecked_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _List_unchecked_iterator& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _List_unchecked_iterator operator--(int)
  {
  _List_unchecked_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };


template<class _Mylist>
 class _List_const_iterator
  : public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
 {
public:
 using _Mybase = _List_unchecked_const_iterator<_Mylist, _Iterator_base>;
 using iterator_category = bidirectional_iterator_tag;

 using _Nodeptr = typename _Mylist::_Nodeptr;
 using value_type = typename _Mylist::value_type;
 using difference_type = typename _Mylist::difference_type;
 using pointer = typename _Mylist::const_pointer;
 using reference = const value_type&;

 _List_const_iterator()
  : _Mybase()
  {
  }

 _List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 using _Unchecked_type = _List_unchecked_const_iterator<_Mylist>;

 reference operator*() const
  {
# 197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
  return (this->_Ptr->_Myval);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _List_const_iterator& operator++()
  {
# 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
  this->_Ptr = this->_Ptr->_Next;
  return (*this);
  }

 _List_const_iterator operator++(int)
  {
  _List_const_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _List_const_iterator& operator--()
  {
# 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
  this->_Ptr = this->_Ptr->_Prev;


  return (*this);
  }

 _List_const_iterator operator--(int)
  {
  _List_const_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _List_const_iterator& _Right) const
  {
# 278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _List_const_iterator& _Right) const
  {
  return (!(*this == _Right));
  }
 };

template<class _Mylist> inline
 _List_const_iterator<_Mylist>& _Rechecked(_List_const_iterator<_Mylist>& _Iter,
  const typename _List_const_iterator<_Mylist>::_Unchecked_type _Right)
 {
 _Iter._Ptr = _Right._Ptr;
 return (_Iter);
 }

template<class _Mylist> inline
 typename _List_const_iterator<_Mylist>::_Unchecked_type _Unchecked(
  const _List_const_iterator<_Mylist>& _Iter)
 {
 return (typename _List_const_iterator<_Mylist>::_Unchecked_type(_Iter._Ptr,
  static_cast<const _Mylist *>(_Iter._Getcont())));
 }


template<class _Mylist>
 class _List_iterator
  : public _List_const_iterator<_Mylist>
 {
public:
 using _Mybase = _List_const_iterator<_Mylist>;
 using iterator_category = bidirectional_iterator_tag;

 using _Nodeptr = typename _Mylist::_Nodeptr;
 using value_type = typename _Mylist::value_type;
 using difference_type = typename _Mylist::difference_type;
 using pointer = typename _Mylist::pointer;
 using reference = value_type&;

 _List_iterator()
  {
  }

 _List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 using _Unchecked_type = _List_unchecked_iterator<_Mylist>;

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _List_iterator& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _List_iterator operator++(int)
  {
  _List_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _List_iterator& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _List_iterator operator--(int)
  {
  _List_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };

template<class _Mylist> inline
 _List_iterator<_Mylist>& _Rechecked(_List_iterator<_Mylist>& _Iter,
  const typename _List_iterator<_Mylist>::_Unchecked_type _Right)
 {
 _Iter._Ptr = _Right._Ptr;
 return (_Iter);
 }

template<class _Mylist> inline
 typename _List_iterator<_Mylist>::_Unchecked_type _Unchecked(
  const _List_iterator<_Mylist>& _Iter)
 {
 return (typename _List_iterator<_Mylist>::_Unchecked_type(_Iter._Ptr,
  static_cast<const _Mylist *>(_Iter._Getcont())));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Nodeptr_type>
 struct _List_iter_types
 {
 using value_type = _Value_type;
 using size_type = _Size_type;
 using difference_type = _Difference_type;
 using pointer = _Pointer;
 using const_pointer = _Const_pointer;
 using _Nodeptr = _Nodeptr_type;
 };

template<class _Value_type,
 class _Voidptr>
 struct _List_node
  {
  using _Nodeptr = _Rebind_pointer_t<_Voidptr, _List_node>;
  _Nodeptr _Next;
  _Nodeptr _Prev;
  _Value_type _Myval;

  _List_node& operator=(const _List_node&) = delete;

  template<class _Alloc>
   static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
   {
   using _Alnode = _Rebind_alloc_t<_Alloc, _List_node>;
   using _Alnode_traits = allocator_traits<_Alnode>;
   _Alnode _Node_alloc(_Al);
   _Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Next));
   _Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Prev));
   _Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
   }
  };

template<class _Ty>
 struct _List_simple_types
  : public _Simple_types<_Ty>
 {
 using _Node = _List_node<_Ty, void *>;
 using _Nodeptr = _Node *;
 };

template<class _Ty,
 class _Alloc>
 struct _List_base_types
 {
 using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
 using _Alty_traits = allocator_traits<_Alty>;
 using _Node = _List_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
 using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
 using _Alnode_traits = allocator_traits<_Alnode>;
 using _Nodeptr = typename _Alnode_traits::pointer;

 using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
  _List_simple_types<_Ty>,
  _List_iter_types<_Ty,
   typename _Alty_traits::size_type,
   typename _Alty_traits::difference_type,
   typename _Alty_traits::pointer,
   typename _Alty_traits::const_pointer,
   _Ty&,
   const _Ty&,
   _Nodeptr>>;
 };


template<class _Val_types>
 class _List_val
  : public _Container_base
 {
public:
 using _Nodeptr = typename _Val_types::_Nodeptr;

 using value_type = typename _Val_types::value_type;
 using size_type = typename _Val_types::size_type;
 using difference_type = typename _Val_types::difference_type;
 using pointer = typename _Val_types::pointer;
 using const_pointer = typename _Val_types::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 _List_val()
  : _Myhead(),
  _Mysize(0)
  {
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };


template<class _Alloc_types>
 class _List_alloc
 {
public:
 using _Alnode = typename _Alloc_types::_Alnode;
 using _Alnode_traits = typename _Alloc_types::_Alnode_traits;
 using _Alproxy = _Rebind_alloc_t<_Alnode, _Container_proxy>;
 using _Alproxy_traits = allocator_traits<_Alproxy>;
 using _Node = typename _Alloc_types::_Node;
 using _Nodeptr = typename _Alloc_types::_Nodeptr;

 using _Val_types = typename _Alloc_types::_Val_types;

 using value_type = typename _Val_types::value_type;
 using size_type = typename _Val_types::size_type;
 using difference_type = typename _Val_types::difference_type;
 using pointer = typename _Val_types::pointer;
 using const_pointer = typename _Val_types::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 using iterator = _List_iterator<_List_val<_Val_types>>;
 using const_iterator = _List_const_iterator<_List_val<_Val_types>>;
 using _Unchecked_iterator = _List_unchecked_iterator<_List_val<_Val_types>>;
 using _Unchecked_const_iterator = _List_unchecked_const_iterator<_List_val<_Val_types>>;


 _List_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  _Myhead() = _Buyheadnode();
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same_v<decay_t<_Any_alloc>, _List_alloc>>>
  _List_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  _Myhead() = _Buyheadnode();
  }

 ~_List_alloc() noexcept
  {
  _Freeheadnode(_Myhead());
  }

 void _Alloc_proxy()
  {
  }

 void _Free_proxy()
  {
  }
# 604 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
 void _Copy_alloc(const _Alnode& _Al)
  {
  const bool _Reload = _Alnode_traits::propagate_on_container_copy_assignment::value
   && _Getal() != _Al;

  if (_Reload)
   {
   _Free_proxy();
   _Freeheadnode(_Myhead());
   }

  _Pocca(_Getal(), _Al);

  if (_Reload)
   {
   _Myhead() = _Buyheadnode();
   _Alloc_proxy();
   }
  }

 void _Move_alloc(_Alnode& _Al)
  {
  const bool _Reload = _Alnode_traits::propagate_on_container_move_assignment::value
   && _Getal() != _Al;

  if (_Reload)
   {
   _Free_proxy();
   _Freeheadnode(_Myhead());
   }

  _Pocma(_Getal(), _Al);

  if (_Reload)
   {
   _Myhead() = _Buyheadnode();
   _Alloc_proxy();
   }
  }

 _Nodeptr _Buyheadnode()
  {
  return (_Buynode0(_Nodeptr(), _Nodeptr()));
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  _Node::_Freenode0(_Getal(), _Pnode);
  }

 _Nodeptr _Buynode0(_Nodeptr _Next, _Nodeptr _Prev)
  {
  _Nodeptr _Pnode = _Getal().allocate(1);

  if (_Next == _Nodeptr())
   {
   _Next = _Pnode;
   _Prev = _Pnode;
   }

  _Alnode& _Al = _Getal();
  try {
  _Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Next), _Next);
  _Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Prev), _Prev);
  } catch (...) {
  _Al.deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_List_alloc& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alnode& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alnode& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _List_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _List_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 _Nodeptr& _Myhead() noexcept
  {
  return (_Get_data()._Myhead);
  }

 const _Nodeptr& _Myhead() const noexcept
  {
  return (_Get_data()._Myhead);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

private:
 _Compressed_pair<_Alnode, _List_val<_Val_types>> _Mypair;
 };


template<class _Ty,
 class _Alloc>
 class _List_buy
  : public _List_alloc<_List_base_types<_Ty, _Alloc>>
 {
public:
 using _Mybase = _List_alloc<_List_base_types<_Ty, _Alloc>>;
 using typename _Mybase::_Alnode;
 using typename _Mybase::_Alnode_traits;
 using typename _Mybase::_Nodeptr;
 using typename _Mybase::_Node;

 _List_buy()
  : _Mybase()
  {
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same_v<decay_t<_Any_alloc>, _List_buy>>>
  _List_buy(_Any_alloc&& _Al)
  : _Mybase(::std:: forward<_Any_alloc>(_Al))
  {
  }

 template<class... _Valty>
  _Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev, _Valty&&... _Val)
  {
  _Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
  _Alnode& _Al = this->_Getal();

  try {
  _Alnode_traits::construct(_Al,
   ::std:: addressof(_Pnode->_Myval),
   ::std:: forward<_Valty>(_Val)...);
  } catch (...) {
  _Al.deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 void _Freenode(_Nodeptr _Pnode)
  {
  _Alnode& _Al = this->_Getal();
  _Alnode_traits::destroy(_Al, ::std:: addressof(_Pnode->_Myval));
  _Node::_Freenode0(_Al, _Pnode);
  }
 };


template<class _Ty,
 class _Alloc = allocator<_Ty>>
 class list
  : public _List_buy<_Ty, _Alloc>
 {
public:
 static_assert(!0 || is_same_v<_Ty, typename _Alloc::value_type>,
  "list<T, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

 using _Mybase = _List_buy<_Ty, _Alloc>;
 using _Node = typename _Mybase::_Node;
 using _Nodeptr = typename _Mybase::_Nodeptr;
 using _Alnode = typename _Mybase::_Alnode;
 using _Alnode_traits = typename _Mybase::_Alnode_traits;

 using value_type = typename _Mybase::value_type;
 using allocator_type = _Alloc;
 using size_type = typename _Mybase::size_type;
 using difference_type = typename _Mybase::difference_type;
 using pointer = typename _Mybase::pointer;
 using const_pointer = typename _Mybase::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 using iterator = typename _Mybase::iterator;
 using const_iterator = typename _Mybase::const_iterator;
 using _Unchecked_iterator = typename _Mybase::_Unchecked_iterator;
 using _Unchecked_const_iterator = typename _Mybase::_Unchecked_const_iterator;

 using reverse_iterator = ::std:: reverse_iterator<iterator>;
 using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

 list()
  : _Mybase()
  {
  }

 explicit list(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  }

 explicit list( size_type _Count, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  resize(_Count);
  }

 list( size_type _Count, const _Ty& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, _Val);
  }

 list( size_type _Count, const _Ty& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, _Val);
  }

 list(const list& _Right)
  : _Mybase(_Alnode_traits::select_on_container_copy_construction(_Right._Getal()))
  {
  try {
  insert(begin(), _Right.begin(), _Right.end());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 list(const list& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  try {
  insert(begin(), _Right.begin(), _Right.end());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  list(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  list(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  try {
  insert(begin(), _First, _Last);
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 void _Construct_n(size_type _Count,
  const _Ty& _Val)
  {
  try {
  _Insert_n(_Unchecked_begin(), _Count, _Val);
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 list(list&& _Right)
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: move(_Right), true_type());
  }

 list(list&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: move(_Right), false_type());
  }

 list& operator=(list&& _Right)
  noexcept(_Alnode_traits::is_always_equal::value)
  {
  if (this != ::std:: addressof(_Right))
   {
   clear();
   this->_Move_alloc(_Right._Getal());
   _Assign_rv(::std:: move(_Right),
    typename _Alnode_traits::propagate_on_container_move_assignment());
   }
  return (*this);
  }

 void _Assign_rv(list&& _Right, true_type)
  {
  this->_Swap_all(_Right);
  _Swap_adl(this->_Myhead(), _Right._Myhead());
  ::std:: swap(this->_Mysize(), _Right._Mysize());
  }

 void _Assign_rv(list&& _Right, false_type)
  {
  if (this->_Getal() == _Right._Getal())
   _Assign_rv(::std:: move(_Right), true_type());
  else
   _Construct(::std:: make_move_iterator(_Right.begin()),
    ::std:: make_move_iterator(_Right.end()));
  }

 void push_front(_Ty&& _Val)
  {
  _Insert(_Unchecked_begin(), ::std:: move(_Val));
  }

 void push_back(_Ty&& _Val)
  {
  _Insert(_Unchecked_end(), ::std:: move(_Val));
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 template<class... _Valty>
  decltype(auto) emplace_front(_Valty&&... _Val)
  {
  _Insert(_Unchecked_begin(), ::std:: forward<_Valty>(_Val)...);




  }

 template<class... _Valty>
  decltype(auto) emplace_back(_Valty&&... _Val)
  {
  _Insert(_Unchecked_end(), ::std:: forward<_Valty>(_Val)...);




  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {







  _Insert(_Unchecked(_Where), ::std:: forward<_Valty>(_Val)...);
  return (_Make_iter(--_Where));
  }

 template<class... _Valty>
  void _Insert(_Unchecked_const_iterator _Where, _Valty&&... _Val)
  {
  const _Nodeptr _Rightnode = _Where._Ptr;
  const _Nodeptr _Leftnode = _Rightnode->_Prev;
  const _Nodeptr _Newnode = this->_Buynode(_Rightnode, _Leftnode, ::std:: forward<_Valty>(_Val)...);
  _Incsize(1);
  _Rightnode->_Prev = _Newnode;
  _Leftnode->_Next = _Newnode;
  }

 list(initializer_list<_Ty> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 list& operator=(initializer_list<_Ty> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(initializer_list<_Ty> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  initializer_list<_Ty> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~list() noexcept
  {
  _Tidy();
  }

 list& operator=(const list& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
#pragma warning(push)
#pragma warning(disable: 4127)
 if (_Alnode_traits::propagate_on_container_copy_assignment::value
    && this->_Getal() != _Right._Getal())
    {
    clear();
    }
#pragma warning(pop)

 this->_Copy_alloc(_Right._Getal());

   assign(_Right.begin(), _Right.end());
   }
  return (*this);
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myhead()->_Next, ::std:: addressof(this->_Get_data())));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myhead()->_Next, ::std:: addressof(this->_Get_data())));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Myhead(), ::std:: addressof(this->_Get_data())));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Myhead(), ::std:: addressof(this->_Get_data())));
  }

 _Unchecked_iterator _Unchecked_begin()
  {
  return (_Unchecked_iterator(this->_Myhead()->_Next, nullptr));
  }

 _Unchecked_const_iterator _Unchecked_begin() const
  {
  return (_Unchecked_const_iterator(this->_Myhead()->_Next, nullptr));
  }

 _Unchecked_iterator _Unchecked_end()
  {
  return (_Unchecked_iterator(this->_Myhead(), nullptr));
  }

 _Unchecked_const_iterator _Unchecked_end() const
  {
  return (_Unchecked_const_iterator(this->_Myhead(), nullptr));
  }

 iterator _Make_iter(const_iterator _Where) const noexcept
  {
  return (iterator(_Where._Ptr, ::std:: addressof(this->_Get_data())));
  }

 iterator _Make_iter(_Unchecked_const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, ::std:: addressof(this->_Get_data())));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void resize( size_type _Newsize)
  {
  if (this->_Mysize() < _Newsize)
   {
   size_type _Count = 0;
   try {
   for (; this->_Mysize() < _Newsize; ++_Count)
    _Insert(_Unchecked_end());
   } catch (...) {
   for (; 0 < _Count; --_Count)
    pop_back();
   throw;
   }
   }
  else
   while (_Newsize < this->_Mysize())
    pop_back();
  }

 void resize( size_type _Newsize, const _Ty& _Val)
  {
  if (this->_Mysize() < _Newsize)
   _Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
  else
   while (_Newsize < this->_Mysize())
    pop_back();
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  return (_Alnode_traits::max_size(this->_Getal()));
  }

 bool empty() const noexcept
  {
  return (this->_Mysize() == 0);
  }

 allocator_type get_allocator() const noexcept
  {
  return (static_cast<allocator_type>(this->_Getal()));
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(--end()));
  }

 const_reference back() const
  {
  return (*(--end()));
  }

 void push_front(const _Ty& _Val)
  {
  _Insert(_Unchecked_begin(), _Val);
  }

 void pop_front()
  {
  erase(begin());
  }

 void push_back(const _Ty& _Val)
  {
  _Insert(_Unchecked_end(), _Val);
  }

 void pop_back()
  {
  erase(--end());
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  void assign(_Iter _First, _Iter _Last)
  {
  iterator _Old = begin();
  try {
  for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
   _Reusenode(_Old, *_First);
  for (; _First != _Last; ++_First)
   _Insert(_Unchecked_end(), *_First);
  } catch (...) {
  clear();
  throw;
  }
  erase(_Old, end());
  }

 template<class _TArg>
  void _Reusenode(iterator _Where, _TArg&& _Arg)
  {
  _Alnode& _Al = this->_Getal();
  try {
  _Alnode_traits::destroy(_Al, ::std:: addressof(_Where._Ptr->_Myval));
  _Alnode_traits::construct(_Al,
   ::std:: addressof(_Where._Ptr->_Myval),
   ::std:: forward<_TArg>(_Arg));
  } catch (...) {
  _Unlinknode(_Where);
  _Node::_Freenode0(_Al, _Where._Ptr);
  throw;
  }
  }

 void assign( size_type _Count, const _Ty& _Val)
  {
  clear();
  _Insert_n(_Unchecked_begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {







  _Insert(_Unchecked(_Where), _Val);
  return (_Make_iter(--_Where));
  }

 iterator insert(const_iterator _Where,
                     size_type _Count, const _Ty& _Val)
  {







  iterator _Prev = _Make_iter(_Where);
  if (_Prev == begin())
   {
   _Insert_n(_Unchecked(_Where), _Count, _Val);
   return (begin());
   }
  else
   {
   --_Prev;
   _Insert_n(_Unchecked(_Where), _Count, _Val);
   return (++_Prev);
   }
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  iterator insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {







  iterator _Prev = _Make_iter(_Where);
  if (_Prev == begin())
   {
   _Insert_range(_Unchecked(_Where), _First, _Last,
    _Iter_cat_t<_Iter>());
   return (begin());
   }
  else
   {
   --_Prev;
   _Insert_range(_Unchecked(_Where), _First, _Last,
    _Iter_cat_t<_Iter>());
   return (++_Prev);
   }
  }

 template<class _Iter>
  void _Insert_range(_Unchecked_const_iterator _Where,
   _Iter _First, _Iter _Last, input_iterator_tag)
  {
  size_type _Num = 0;

  try {
  for (; _First != _Last; ++_First, (void)++_Num)
   _Insert(_Where, *_First);
  } catch (...) {
  for (; 0 < _Num; --_Num)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 template<class _Iter>
  void _Insert_range(_Unchecked_const_iterator _Where,
   _Iter _First, _Iter _Last, forward_iterator_tag)
  {
                             ;
  _Iter _Next = _First;

  try {
  for (; _First != _Last; ++_First)
   _Insert(_Where, *_First);
  } catch (...) {
  for (; _Next != _First; ++_Next)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 _Nodeptr _Unlinknode(const_iterator _Where)
  {
# 1385 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
  _Nodeptr _Pnode = _Where._Ptr;


  _Pnode->_Prev->_Next = _Pnode->_Next;
  _Pnode->_Next->_Prev = _Pnode->_Prev;

  --this->_Mysize();
  return (_Pnode);
  }

 void _Relink(const _Unchecked_const_iterator _Where, const _Nodeptr _Ptr)
  {
  _Ptr->_Next = _Where._Ptr;
  _Ptr->_Prev = _Where._Ptr->_Prev;
  _Ptr->_Prev->_Next = _Ptr;
  _Ptr->_Next->_Prev = _Ptr;

  ++this->_Mysize();
  }

 iterator erase(const_iterator _Where)
  {
  _Nodeptr _Pnode = _Unlinknode(_Where++);
  this->_Freenode(_Pnode);
  return (_Make_iter(_Where));
  }

 void _Unchecked_erase(_Unchecked_const_iterator _Where)
  {
  _Nodeptr _Pnode = _Where._Ptr;

  _Pnode->_Prev->_Next = _Pnode->_Next;
  _Pnode->_Next->_Prev = _Pnode->_Prev;
  this->_Freenode(_Pnode);
  --this->_Mysize();
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  if (_First == begin() && _Last == end())
   {
   clear();
   return (end());
   }
  else
   {
   while (_First != _Last)
    _First = erase(_First);
   return (_Make_iter(_Last));
   }
  }

 void clear() noexcept
  {




  _Nodeptr _Pnode = this->_Myhead()->_Next;
  this->_Myhead()->_Next = this->_Myhead();
  this->_Myhead()->_Prev = this->_Myhead();
  this->_Mysize() = 0;

  for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
   {
   _Pnext = _Pnode->_Next;
   this->_Freenode(_Pnode);
   }
  }

 void swap(list& _Right) noexcept
  {
  if (this != ::std:: addressof(_Right))
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myhead(), _Right._Myhead());
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   }
  }

 void splice(const_iterator _Where, list& _Right)
  {
  if (this != ::std:: addressof(_Right) && !_Right.empty())
   {
   _Splice(_Where, _Right, _Right.begin(), _Right.end(),
    _Right._Mysize());
   }
  }

 void splice(const_iterator _Where, list&& _Right)
  {
  splice(_Where, _Right);
  }

 void splice(const_iterator _Where, list& _Right,
  const_iterator _First)
  {
# 1491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
  if (_First != _Right.end())


   {
   const_iterator _Last = _First;
   ++_Last;
   if (this != ::std:: addressof(_Right)
    || (_Where != _First && _Where != _Last))
    _Splice(_Where, _Right, _First, _Last, 1);
   }
  }

 void splice(const_iterator _Where, list&& _Right,
  const_iterator _First)
  {
  splice(_Where, _Right, _First);
  }

 void splice(const_iterator _Where,
  list& _Right, const_iterator _First, const_iterator _Last)
  {
  if (_First != _Last && (this != ::std:: addressof(_Right) || _Where != _Last))
   {
   size_type _Count = 0;

   if (this == ::std:: addressof(_Right))
    ;
   else if (_First == _Right.begin() && _Last == _Right.end())
    _Count = _Right._Mysize();
   else
    {
    const_iterator _Next = _First;

    for (; _Next != _Last; ++_Next, (void)++_Count)
     if (_Next == _Right.end())
      _Xlength_error("list<T> bad splice");
    }
   _Splice(_Where, _Right, _First, _Last, _Count);
   }
  }

 void splice(const_iterator _Where,
  list&& _Right, const_iterator _First, const_iterator _Last)
  {
  splice(_Where, _Right, _First, _Last);
  }

 void remove(const _Ty& _Val)
  {
  iterator _Val_it = end();

  for (iterator _First = begin(); _First != end(); )
   if (*_First == _Val)
    if (::std:: addressof(*_First) == ::std:: addressof(_Val))
     _Val_it = _First++;
    else
     _First = erase(_First);
   else
    ++_First;

  if (_Val_it != end())
   erase(_Val_it);
  }

 template<class _Pr1>
  void remove_if(_Pr1 _Pred)
  {
  _Remove_if(_Pred);
  }

 template<class _Pr1>
  void _Remove_if(_Pr1& _Pred)
  {
  for (iterator _First = begin(); _First != end(); )
   if (_Pred(*_First))
    _First = erase(_First);
   else
    ++_First;
  }

 void unique()
  {
  unique(equal_to<>());
  }

 template<class _Pr2>
  void unique(_Pr2 _Pred)
  {
  const _Nodeptr _Phead = this->_Myhead();
  _Nodeptr _Pprev = _Phead->_Next;
  _Nodeptr _Pnode = _Pprev->_Next;

  while (_Pnode != _Phead)
   if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
    {
    const _Nodeptr _Perase = _Pnode;
    _Pnode = _Pnode->_Next;





    _Pprev->_Next = _Pnode;
    _Pnode->_Prev = _Pprev;
    this->_Freenode(_Perase);

    --this->_Mysize();
    }
   else
    {
    _Pprev = _Pnode;
    _Pnode = _Pnode->_Next;
    }
  }

 void merge(list& _Right)
  {
  _Merge1(_Right, less<>());
  }

 void merge(list&& _Right)
  {
  _Merge1(_Right, less<>());
  }

 template<class _Pr2>
  void merge(list& _Right, _Pr2 _Pred)
  {
  _Merge1(_Right, _Pred);
  }

 template<class _Pr2>
  void merge(list&& _Right, _Pr2 _Pred)
  {
  _Merge1(_Right, _Pred);
  }

 template<class _Pr2>
  void _Merge1(list& _Right, _Pr2&& _Pred)
  {
  if (this != ::std:: addressof(_Right))
   {
                                                                      ;
                                                                                    ;
   iterator _First1 = begin();
   iterator _Last1 = end();
   iterator _First2 = _Right.begin();
   iterator _Last2 = _Right.end();

   while (_First1 != _Last1 && _First2 != _Last2)
    {
    if (_Pred(*_First2, *_First1))
     {
     iterator _Oldfirst2 = _First2;
     _Splice(_First1, _Right, _Oldfirst2, ++_First2, 1);
     }
    else
     {
     ++_First1;
     }
    }

   if (_First2 != _Last2)
    {
    _Splice(_Last1, _Right, _First2, _Last2, _Right._Mysize());
    }
   }
  }

 void sort()
  {
  sort(less<>());
  }

 template<class _Pr2>
  void sort(_Pr2 _Pred)
  {
  _Sort(begin(), end(), _Pred, this->_Mysize());
  }

 template<class _Pr2>
  iterator _Sort(iterator _First, iterator _Last, _Pr2& _Pred,
   size_type _Size)
  {

  if (_Size < 2)
   return (_First);

  iterator _Mid = ::std:: next(_First, _Size / 2);
  _First = _Sort(_First, _Mid, _Pred, _Size / 2);
  _Mid = _Sort(_Mid, _Last, _Pred, _Size - _Size / 2);
  iterator _Newfirst = _First;

  for (bool _Initial_loop = true; ; _Initial_loop = false)
   {
   if (_Pred(*_Mid, *_First))
    {
    if (_Initial_loop)
     _Newfirst = _Mid;
    splice(_First, *this, _Mid++);
    if (_Mid == _Last)
     return (_Newfirst);
    }
   else
    {
    ++_First;
    if (_First == _Mid)
     return (_Newfirst);
    }
   }
  }

 void reverse() noexcept
  {
  const _Nodeptr _Phead = this->_Myhead();
  _Nodeptr _Pnode = _Phead;

  for (;;)
   {
   const _Nodeptr _Pnext = _Pnode->_Next;
   _Pnode->_Next = _Pnode->_Prev;
   _Pnode->_Prev = _Pnext;

   if (_Pnext == _Phead)
    break;
   _Pnode = _Pnext;
   }
  }

 void _Splice(const_iterator _Where,
  list& _Right, const_iterator _First, const_iterator _Last,
  size_type _Count)
  {
# 1788 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
  if (this->_Getal() != _Right._Getal())
   ::std:: terminate();


  _Splice_same(_Where, _Right, _First, _Last, _Count);
  }

 void _Splice_same(const_iterator _Where,
  list& _Right, const_iterator _First, const_iterator _Last,
  size_type _Count)
  {
  if (this != ::std:: addressof(_Right))
   {
   _Incsize(_Count);
   _Right._Mysize() -= _Count;
   }

  _First._Ptr->_Prev->_Next = _Last._Ptr;
  _Last._Ptr->_Prev->_Next = _Where._Ptr;
  _Where._Ptr->_Prev->_Next = _First._Ptr;

  _Nodeptr _Pnode = _Where._Ptr->_Prev;
  _Where._Ptr->_Prev = _Last._Ptr->_Prev;
  _Last._Ptr->_Prev = _First._Ptr->_Prev;
  _First._Ptr->_Prev = _Pnode;
  }

 void _Unchecked_splice(_Unchecked_const_iterator _Where,
  _Unchecked_const_iterator _First,
  _Unchecked_const_iterator _Last)
  {
  _First._Ptr->_Prev->_Next = _Last._Ptr;
  _Last._Ptr->_Prev->_Next = _Where._Ptr;
  _Where._Ptr->_Prev->_Next = _First._Ptr;

  _Nodeptr _Pnode = _Where._Ptr->_Prev;
  _Where._Ptr->_Prev = _Last._Ptr->_Prev;
  _Last._Ptr->_Prev = _First._Ptr->_Prev;
  _First._Ptr->_Prev = _Pnode;
  }

 void _Tidy()
  {
  clear();
  }

 void _Insert_n(_Unchecked_const_iterator _Where,
  size_type _Count, const _Ty& _Val)
  {
  size_type _Countsave = _Count;

  try {
  for (; 0 < _Count; --_Count)
   _Insert(_Where, _Val);
  } catch (...) {
  for (; _Count < _Countsave; ++_Count)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 void _Incsize(size_type _Count)
  {
  if (max_size() - this->_Mysize() - 1 < _Count)
   _Xlength_error("list<T> too long");
  this->_Mysize() += _Count;
  }
# 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\list" 3
 };

template<class _Ty,
 class _Alloc> inline
 void swap(list<_Ty, _Alloc>& _Left, list<_Ty, _Alloc>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 3 "C:\\mytest\\server\\NameCheckServer/config.h" 2

# 1 "..\\Base\\BaseConfig.h" 1








# 1 "..\\Base/platform_config.h" 1





typedef signed __int8 int8;
typedef signed __int16 int16;
typedef signed __int32 int32;
typedef signed __int64 int64;

typedef unsigned __int8 uint8;
typedef unsigned __int16 uint16;
typedef unsigned __int32 uint32;
typedef unsigned __int64 uint64;
# 9 "..\\Base\\BaseConfig.h" 2


class CBaseConfig
{
public:
 CBaseConfig();
 ~CBaseConfig();

 bool Init(const std::string &servername, int32 lineid = 0);

 int32 GetGroupID() { return m_GroupID; }
 int32 GetOverTime() { return m_OverTime; }
 int32 GetPingTime() { return m_PingTime; }
 bool IsOpenElapsedLog() { return m_IsOpenElapsedLog; }

 int32 GetServerID() { return m_ServerID; }
 int32 GetListenPort() { return m_ListenPort; }
 void SetServerType(int32 nType) { m_ServerType = nType; }
 int32 GetServerType() { return m_ServerType; }
 void SetServerName(const char *name) { m_ServerName = name; }
 const char *GetServerName() { return m_ServerName.c_str(); }
 const char *GetServerIP() { return m_ServerIP.c_str(); }

 int32 GetLogServerID() { return m_LogServerID; }
 int32 GetLogServerPort() { return m_LogServerPort; }
 const char *GetLogServerIP() { return m_LogServerIP.c_str(); }
 const char *GetLogServerName() { return m_LogServerName.c_str(); }

 int32 GetCenterServerID() { return m_CenterServerID; }
 int32 GetCenterServerPort() { return m_CenterServerPort; }
 const char *GetCenterServerIP() { return m_CenterServerIP.c_str(); }
 const char *GetCenterServerName() { return m_CenterServerName.c_str(); }


 int32 GetNameCheckServerID() { return m_NameCheckServerID; }
 int32 GetNameCheckServerPort() { return m_NameCheckServerPort; }
 const char *GetNameCheckServerIP() { return m_NameCheckServerIP.c_str(); }
 const char *GetNameCheckServerName() { return m_NameCheckServerName.c_str(); }

 const char *GetDBName() { return m_DBName.c_str(); }
 const char *GetDBUser() { return m_DBUser.c_str(); }
 const char *GetDBPass() { return m_DBPass.c_str(); }
 const char *GetDBIP() { return m_DBIP.c_str(); }

 void SetMonitorPort(int32 port) { m_MonitorPort = port; }
 int32 GetMonitorPort() { return m_MonitorPort; }
private:
 int32 m_GroupID;
 int32 m_OverTime;
 int32 m_PingTime;

 bool m_IsOpenElapsedLog;


 int32 m_ServerID;
 int32 m_ListenPort;
 int32 m_ServerType;
 std::string m_ServerName;

 std::string m_ServerIP;


 int32 m_LogServerID;
 int32 m_LogServerPort;
 std::string m_LogServerIP;
 std::string m_LogServerName;


 int32 m_CenterServerID;
 int32 m_CenterServerPort;
 std::string m_CenterServerIP;
 std::string m_CenterServerName;


 int32 m_NameCheckServerID;
 int32 m_NameCheckServerPort;
 std::string m_NameCheckServerIP;
 std::string m_NameCheckServerName;


 std::string m_DBName;
 std::string m_DBUser;
 std::string m_DBPass;
 std::string m_DBIP;


 int32 m_MonitorPort;
};
# 4 "C:\\mytest\\server\\NameCheckServer/config.h" 2


struct DBInfo
{
 DBInfo()
 {

 }

 std::string dbname;
 std::string dbusername;
 std::string dbpassword;
 std::string dbip;
 std::string sqlstr;
 std::string fieldname;
};


class CConfig :public CBaseConfig
{
public:
 CConfig();
 ~CConfig();

 static CConfig &Instance()
 {
  static CConfig m;
  return m;
 }

 bool Init(const char *servername = "");

 std::list<DBInfo *> &GetTableList() { return m_tablelist; }
private:

 std::list<DBInfo *> m_tablelist;
};
# 8 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2

# 1 "C:\\mytest\\server\\NameCheckServer/NameCheckServer.h" 1








class CCheckNameServer
{
public:
 CCheckNameServer();
 ~CCheckNameServer();

 static CCheckNameServer &Instance()
 {
  static CCheckNameServer m;
  return m;
 }

 bool Init();
 bool Release();
 void Run();
 void Exit();

 void Destroy();
private:
 void RunOnce();
private:
 bool m_Run;
};
# 9 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2

# 1 "..\\Base\\NetConfig.h" 1








class CNetConfig
{
public:
 CNetConfig ();
 ~CNetConfig ();

 static CNetConfig &Instance()
 {
  static CNetConfig m;
  return m;
 }

 bool Init ();

 int GetBigBufSize () { return m_BigBufSize; }
 int GetBigBufNum () { return m_BigBufNum; }
 int GetSmallBufSize () { return m_SmallBufSize; }
 int GetSmallBufNum () { return m_SmallBufNum; }
 int GetListenerNum () { return m_ListenerNum; }
 int GetSocketerNum () { return m_SocketerNum; }
 int GetThreadNum () { return m_ThreadNum; }
private:
 int m_BigBufSize;
 int m_BigBufNum;
 int m_SmallBufSize;
 int m_SmallBufNum;
 int m_ListenerNum;
 int m_SocketerNum;
 int m_ThreadNum;
};
# 10 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2

# 1 "..\\Base\\ServerLog.h" 1



# 1 "..\\Base/log.h" 1


extern "C" {




int mymkdir_r(const char *directory);



enum write_log_type_ {
 enum_log_type_log = 0,
 enum_log_type_error,
 enum_log_type_max,
};

enum debug_print_type_ {
 enum_debug_print = 0,
 enum_debug_print_call,
 enum_debug_print_time,
 enum_debug_max,
};

enum logfile_save_type {
 st_every_day_split_dir_and_every_hour_split_file = 0,
 st_every_month_split_dir_and_every_day_split_file,
 st_not_split_dir_and_every_day_split_file,
 st_not_split_dir_and_every_hour_split_file,
 st_not_split_dir_and_not_split_file,
};
# 40 "..\\Base/log.h"
struct filelog;
extern struct filelog *g_filelog_obj_;

void _format_prefix_string_(struct filelog *log, int type,
  char *buf, size_t bufsize, const char *file, const char *function, int line);
void _log_printf_(int type, const char *fmt, ...);
void _log_printf_set_show(int type, bool flag);
void _filelog_write_(struct filelog *log, int type, const char *fmt, ...);
void _filelog_set_directory_(struct filelog *self, int type, const char *directory);
const char *_filelog_get_directory_(struct filelog *self, int type);
bool _filelog_set_save_type_(struct filelog *self, int type, int save_type);
int _filelog_set_split_file_interval_(struct filelog *self, int type, int split_file_interval);
bool _filelog_set_single_filename_(struct filelog *self, int type, const char *single_filename);
const char *_filelog_get_single_filename_(struct filelog *self, int type);
bool _filelog_set_prefix_(struct filelog *self, int type, const char *prefix);
const char *_filelog_get_prefix_(struct filelog *self, int type);
bool _filelog_set_append_time_(struct filelog *self, int type, bool flag);
bool _filelog_set_every_flush_(struct filelog *self, int type, bool flag);
void _filelog_flush_(struct filelog *self, int type);


struct filelog *filelog_create();
void filelog_release(struct filelog *self);
# 238 "..\\Base/log.h"
}
# 4 "..\\Base\\ServerLog.h" 2


extern int64 g_currenttime;
extern struct filelog *g_client_connectlog;
extern struct filelog *g_elapsed_log;
extern struct filelog *g_backcommand_log;

extern bool g_client_connectlog_flag;
extern bool g_elapsed_log_flag;
# 79 "..\\Base\\ServerLog.h"
bool init_log(const char *rootdirname);
void release_log();
# 11 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2

# 1 "..\\Base\\lxnet.h" 1
# 10 "..\\Base\\lxnet.h"
struct Msg;
struct socketer;
struct listener;
struct datainfo;
struct datainfomgr;
struct encrypt_info;

namespace lxnet {

class Socketer;


class Listener {
private:
 Listener(const Listener&);
 Listener &operator =(const Listener&);
 void *operator new[](size_t count);
 void operator delete[](void *p, size_t count);
 Listener();
 ~Listener();
 void *operator new(size_t size);
 void operator delete(void *p);

public:

 static Listener *Create();


 static void Release(Listener *self);

public:

 bool Listen(unsigned short port, int backlog);


 void Close();


 bool IsClose();


 Socketer *Accept(bool bigbuf = false);


 bool CanAccept();

public:
 struct listener *m_self;
};


class Socketer {
private:
 Socketer(const Socketer&);
 Socketer &operator =(const Socketer&);
 void *operator new[](size_t count);
 void operator delete[](void *p, size_t count);
 void *operator new(size_t size);
 void operator delete(void *p);
 Socketer();
 ~Socketer();

public:

 static Socketer *Create(bool bigbuf = false);


 static void Release(Socketer *self);

public:

 void SetDataInfoMgr(struct datainfomgr *infomgr);


 void SetRecvLimit(int size);


 void SetSendLimit(int size);


 void UseCompress();


 void UseUncompress();





 void SetEncryptDecryptFunction(void (*encryptfunc)(void *logicdata, char *buf, int len), void (*release_encrypt_logicdata)(void *), void *encrypt_logicdata, void (*decryptfunc)(void *logicdata, char *buf, int len), void (*release_decrypt_logicdata)(void *), void *decrypt_logicdata);


 void SetEncryptKey(const char *key, int key_len);


 void SetDecryptKey(const char *key, int key_len);


 void UseEncrypt();


 void UseDecrypt();


 void UseTGW();


 bool Connect(const char *ip, short port);


 void Close();


 bool IsClose();


 void GetIP(char *ip, size_t len);


 int GetSendBufferByteSize();


 int GetRecvBufferByteSize();


 bool SendPolicyData();


 bool SendTGWInfo(const char *domain, int port);





 bool SendMsg(Msg *msg, void *adddata = 0, size_t addsize = 0);


 Msg *GetMsg(char *buf = 0, size_t bufsize = 0);


 bool SendData(const void *data, size_t datasize);


 const void *GetData(char *buf, size_t bufsize, int *datalen);


 int FindDataEndSize(const char *data, size_t datalen);


 void CheckSend();


 void CheckRecv();

public:
 struct datainfomgr *m_infomgr;
 struct encrypt_info *m_encrypt;
 struct encrypt_info *m_decrypt;
 struct socketer *m_self;
};
# 181 "..\\Base\\lxnet.h"
bool net_init(size_t big_buf_size, size_t big_buf_num, size_t small_buf_size, size_t small_buf_num,
  size_t listener_num, size_t socketer_num, int thread_num, struct datainfomgr *infomgr = 0);


void net_release();


void net_run();


const char *net_get_memory_info(char *buf, size_t buflen);



bool SetEnableErrorLog(bool flag);


bool GetEnableErrorLog();



bool GetHostName(char *buf, size_t buflen);


bool GetHostIPByName(const char *hostname, char *buf, size_t buflen, bool ipv6 = false);




struct datainfomgr *DataInfoMgr_CreateObj();


void DataInfoMgr_ReleaseObj(struct datainfomgr *infomgr);


void DataInfoMgr_Run(struct datainfomgr *infomgr);


const char *GetNetDataAllInfo(char *buf, size_t buflen, struct datainfomgr *infomgr = 0);

}
# 12 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2

# 1 "..\\3rd\\protobuf\\src\\google/protobuf/message.h" 1
# 115 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/type_traits.h" 1
# 65 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/type_traits.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/template_util.h" 1
# 53 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/template_util.h"
namespace google {
namespace protobuf {
namespace internal {



typedef char small_;

struct big_ {
  char dummy[2];
};


template <class T>
struct identity_ {
  typedef T type;
};






template<class T, T v>
struct integral_constant {
  static const T value = v;
  typedef T value_type;
  typedef integral_constant<T, v> type;
};

template <class T, T v> const T integral_constant<T, v>::value;





typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;
typedef true_type true_;
typedef false_type false_;




template<bool cond, typename A, typename B>
struct if_{
  typedef A type;
};

template<typename A, typename B>
struct if_<false, A, B> {
  typedef B type;
};







template<typename A, typename B>
struct type_equals_ : public false_ {
};

template<typename A>
struct type_equals_<A, A> : public true_ {
};



template<typename A, typename B>
struct and_ : public integral_constant<bool, (A::value && B::value)> {
};



template<typename A, typename B>
struct or_ : public integral_constant<bool, (A::value || B::value)> {
};


}
}
}
# 65 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/type_traits.h" 2


namespace google {
namespace protobuf {
namespace internal {

template<typename B, typename D>
struct is_base_of {
  typedef char (&yes)[1];
  typedef char (&no)[2];





  static yes check(const B*);
  static no check(const void*);

  enum {
    value = sizeof(check(static_cast<const D*>(0))) == sizeof(yes),
  };
};

template <bool cond, class T = void> struct enable_if;
template <class T> struct is_integral;
template <class T> struct is_floating_point;
template <class T> struct is_pointer;





template <class T> struct is_reference;
template <class T> struct is_pod;
template <class T> struct has_trivial_constructor;
template <class T> struct has_trivial_copy;
template <class T> struct has_trivial_assign;
template <class T> struct has_trivial_destructor;
template <class T> struct remove_const;
template <class T> struct remove_volatile;
template <class T> struct remove_cv;
template <class T> struct remove_reference;
template <class T> struct add_reference;
template <class T> struct remove_pointer;
template <class T, class U> struct is_same;

template <class From, class To> struct is_convertible;







template<bool cond, class T> struct enable_if { typedef T type; };
template<class T> struct enable_if<false, T> {};


template <class T> struct is_integral : false_type { };
template<> struct is_integral<bool> : true_type { };
template<> struct is_integral<char> : true_type { };
template<> struct is_integral<unsigned char> : true_type { };
template<> struct is_integral<signed char> : true_type { };




template<> struct is_integral<__wchar_t> : true_type { };



template<> struct is_integral<short> : true_type { };
template<> struct is_integral<unsigned short> : true_type { };
template<> struct is_integral<int> : true_type { };
template<> struct is_integral<unsigned int> : true_type { };
template<> struct is_integral<long> : true_type { };
template<> struct is_integral<unsigned long> : true_type { };

template<> struct is_integral<long long> : true_type { };
template<> struct is_integral<unsigned long long> : true_type { };

template <class T> struct is_integral<const T> : is_integral<T> { };
template <class T> struct is_integral<volatile T> : is_integral<T> { };
template <class T> struct is_integral<const volatile T> : is_integral<T> { };



template <class T> struct is_floating_point : false_type { };
template<> struct is_floating_point<float> : true_type { };
template<> struct is_floating_point<double> : true_type { };
template<> struct is_floating_point<long double> : true_type { };
template <class T> struct is_floating_point<const T>
    : is_floating_point<T> { };
template <class T> struct is_floating_point<volatile T>
    : is_floating_point<T> { };
template <class T> struct is_floating_point<const volatile T>
    : is_floating_point<T> { };




template <class T> struct is_pointer : false_type { };
template <class T> struct is_pointer<T*> : true_type { };
template <class T> struct is_pointer<const T> : is_pointer<T> { };
template <class T> struct is_pointer<volatile T> : is_pointer<T> { };
template <class T> struct is_pointer<const volatile T> : is_pointer<T> { };
# 222 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/type_traits.h"
template<typename T> struct is_reference : false_type {};
template<typename T> struct is_reference<T&> : true_type {};






template <class T> struct is_pod
 : integral_constant<bool, (is_integral<T>::value ||
                            is_floating_point<T>::value ||




                            is_pointer<T>::value)> { };
template <class T> struct is_pod<const T> : is_pod<T> { };
template <class T> struct is_pod<volatile T> : is_pod<T> { };
template <class T> struct is_pod<const volatile T> : is_pod<T> { };







template <class T> struct has_trivial_constructor : is_pod<T> { };
template <class T, class U> struct has_trivial_constructor<std::pair<T, U> >
  : integral_constant<bool,
                      (has_trivial_constructor<T>::value &&
                       has_trivial_constructor<U>::value)> { };
template <class A, int N> struct has_trivial_constructor<A[N]>
  : has_trivial_constructor<A> { };
template <class T> struct has_trivial_constructor<const T>
  : has_trivial_constructor<T> { };






template <class T> struct has_trivial_copy : is_pod<T> { };
template <class T, class U> struct has_trivial_copy<std::pair<T, U> >
  : integral_constant<bool,
                      (has_trivial_copy<T>::value &&
                       has_trivial_copy<U>::value)> { };
template <class A, int N> struct has_trivial_copy<A[N]>
  : has_trivial_copy<A> { };
template <class T> struct has_trivial_copy<const T> : has_trivial_copy<T> { };





template <class T> struct has_trivial_assign : is_pod<T> { };
template <class T, class U> struct has_trivial_assign<std::pair<T, U> >
  : integral_constant<bool,
                      (has_trivial_assign<T>::value &&
                       has_trivial_assign<U>::value)> { };
template <class A, int N> struct has_trivial_assign<A[N]>
  : has_trivial_assign<A> { };






template <class T> struct has_trivial_destructor : is_pod<T> { };
template <class T, class U> struct has_trivial_destructor<std::pair<T, U> >
  : integral_constant<bool,
                      (has_trivial_destructor<T>::value &&
                       has_trivial_destructor<U>::value)> { };
template <class A, int N> struct has_trivial_destructor<A[N]>
  : has_trivial_destructor<A> { };
template <class T> struct has_trivial_destructor<const T>
  : has_trivial_destructor<T> { };


template<typename T> struct remove_const { typedef T type; };
template<typename T> struct remove_const<T const> { typedef T type; };
template<typename T> struct remove_volatile { typedef T type; };
template<typename T> struct remove_volatile<T volatile> { typedef T type; };
template<typename T> struct remove_cv {
  typedef typename remove_const<typename remove_volatile<T>::type>::type type;
};



template<typename T> struct remove_reference { typedef T type; };
template<typename T> struct remove_reference<T&> { typedef T type; };

template <typename T> struct add_reference { typedef T& type; };
template <typename T> struct add_reference<T&> { typedef T& type; };


template<typename T> struct remove_pointer { typedef T type; };
template<typename T> struct remove_pointer<T*> { typedef T type; };
template<typename T> struct remove_pointer<T* const> { typedef T type; };
template<typename T> struct remove_pointer<T* volatile> { typedef T type; };
template<typename T> struct remove_pointer<T* const volatile> {
  typedef T type; };


template<typename T, typename U> struct is_same : public false_type { };
template<typename T> struct is_same<T, T> : public true_type { };



namespace type_traits_internal {
# 341 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/type_traits.h"
template <typename From, typename To>
struct ConvertHelper {
  static small_ Test(To);
  static big_ Test(...);
  static From Create();
  enum {
    value = sizeof(Test(Create())) == sizeof(small_)
  };
};
}


template <typename From, typename To>
struct is_convertible
    : integral_constant<bool,
                        type_traits_internal::ConvertHelper<From, To>::value> {
};


}
}
}
# 115 "..\\3rd\\protobuf\\src\\google/protobuf/message.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Myvec>
 class _Vector_const_iterator
  : public _Iterator_base
 {
public:
 using iterator_category = random_access_iterator_tag;

 using value_type = typename _Myvec::value_type;
 using difference_type = typename _Myvec::difference_type;
 using pointer = typename _Myvec::const_pointer;
 using reference = const value_type&;
 using _Tptr = typename _Myvec::pointer;

 _Vector_const_iterator()
  : _Ptr()
  {
  }

 _Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pvector);
  }

 using _Unchecked_type = pointer;

 reference operator*() const
  {
# 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
                                    ;

  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Vector_const_iterator& operator++()
  {
# 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  ++_Ptr;
  return (*this);
  }

 _Vector_const_iterator operator++(int)
  {
  _Vector_const_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Vector_const_iterator& operator--()
  {
# 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  --_Ptr;
  return (*this);
  }

 _Vector_const_iterator operator--(int)
  {
  _Vector_const_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Vector_const_iterator& operator+=(difference_type _Off)
  {
# 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  _Ptr += _Off;
  return (*this);
  }

 _Vector_const_iterator operator+(difference_type _Off) const
  {
  _Vector_const_iterator _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Vector_const_iterator& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Vector_const_iterator operator-(difference_type _Off) const
  {
  _Vector_const_iterator _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Vector_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Vector_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Vector_const_iterator& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Vector_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Vector_const_iterator& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Vector_const_iterator& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Vector_const_iterator& _Right) const
  {
  return (!(*this < _Right));
  }
# 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
 void _Compat(const _Vector_const_iterator&) const
  {
  }


 _Tptr _Ptr;
 };

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec> operator+(
  typename _Vector_const_iterator<_Myvec>::difference_type _Off,
  _Vector_const_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec>& _Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
  const typename _Vector_const_iterator<_Myvec>::_Unchecked_type _Right)
 {
 _Iter._Ptr = _Const_cast(_Right);
 return (_Iter);
 }

template<class _Myvec> inline
 typename _Vector_const_iterator<_Myvec>::_Unchecked_type _Unchecked(
  const _Vector_const_iterator<_Myvec>& _Iter)
 {
 return (_Iter._Ptr);
 }


template<class _Myvec>
 class _Vector_iterator
  : public _Vector_const_iterator<_Myvec>
 {
public:
 using _Mybase = _Vector_const_iterator<_Myvec>;
 using iterator_category = random_access_iterator_tag;

 using value_type = typename _Myvec::value_type;
 using difference_type = typename _Myvec::difference_type;
 using pointer = typename _Myvec::pointer;
 using reference = value_type&;

 _Vector_iterator()
  {
  }

 _Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
  : _Mybase(_Parg, _Pvector)
  {
  }

 using _Unchecked_type = pointer;

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Vector_iterator& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Vector_iterator operator++(int)
  {
  _Vector_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Vector_iterator& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Vector_iterator operator--(int)
  {
  _Vector_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Vector_iterator& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Vector_iterator operator+(difference_type _Off) const
  {
  _Vector_iterator _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Vector_iterator& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Vector_iterator operator-(difference_type _Off) const
  {
  _Vector_iterator _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Myvec> inline
 _Vector_iterator<_Myvec> operator+(
  typename _Vector_iterator<_Myvec>::difference_type _Off,
  _Vector_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec>& _Rechecked(_Vector_iterator<_Myvec>& _Iter,
  const typename _Vector_iterator<_Myvec>::_Unchecked_type _Right)
 {
 _Iter._Ptr = _Right;
 return (_Iter);
 }

template<class _Myvec> inline
 typename _Vector_iterator<_Myvec>::_Unchecked_type _Unchecked(
  const _Vector_iterator<_Myvec>& _Iter)
 {
 return (_Iter._Ptr);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _Vec_iter_types
 {
 using value_type = _Value_type;
 using size_type = _Size_type;
 using difference_type = _Difference_type;
 using pointer = _Pointer;
 using const_pointer = _Const_pointer;
 };

template<class _Ty,
 class _Alloc>
 struct _Vec_base_types
 {
 using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
 using _Alty_traits = allocator_traits<_Alty>;

 using _Val_types = conditional_t<_Is_simple_alloc_v<_Alty>,
  _Simple_types<_Ty>,
  _Vec_iter_types<_Ty,
   typename _Alty_traits::size_type,
   typename _Alty_traits::difference_type,
   typename _Alty_traits::pointer,
   typename _Alty_traits::const_pointer,
   _Ty&,
   const _Ty&>>;
 };


template<class _Val_types>
 class _Vector_val
  : public _Container_base
 {
public:
 using value_type = typename _Val_types::value_type;
 using size_type = typename _Val_types::size_type;
 using difference_type = typename _Val_types::difference_type;
 using pointer = typename _Val_types::pointer;
 using const_pointer = typename _Val_types::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 _Vector_val()
  : _Myfirst(),
  _Mylast(),
  _Myend()
  {
  }

 pointer _Myfirst;
 pointer _Mylast;
 pointer _Myend;
 };


template<class _Alloc_types>
 class _Vector_alloc
 {
public:
 using _Alty = typename _Alloc_types::_Alty;
 using _Alty_traits = typename _Alloc_types::_Alty_traits;
 using _Alproxy = _Rebind_alloc_t<_Alty, _Container_proxy>;
 using _Alproxy_traits = allocator_traits<_Alproxy>;
 using _Val_types = typename _Alloc_types::_Val_types;

 using size_type = typename _Val_types::size_type;
 using difference_type = typename _Val_types::difference_type;
 using pointer = typename _Val_types::pointer;
 using const_pointer = typename _Val_types::const_pointer;

 using iterator = _Vector_iterator<_Vector_val<_Val_types>>;
 using const_iterator = _Vector_const_iterator<_Vector_val<_Val_types>>;


 _Vector_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same_v<decay_t<_Any_alloc>, _Vector_alloc>>>
  _Vector_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Pocca(_Getal(), _Al);
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Pocma(_Getal(), _Al);
  }
# 577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Vector_alloc& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Vector_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Vector_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 pointer& _Myfirst() noexcept
  {
  return (_Get_data()._Myfirst);
  }

 const pointer& _Myfirst() const noexcept
  {
  return (_Get_data()._Myfirst);
  }

 pointer& _Mylast() noexcept
  {
  return (_Get_data()._Mylast);
  }

 const pointer& _Mylast() const noexcept
  {
  return (_Get_data()._Mylast);
  }

 pointer& _Myend() noexcept
  {
  return (_Get_data()._Myend);
  }

 const pointer& _Myend() const noexcept
  {
  return (_Get_data()._Myend);
  }

private:
 _Compressed_pair<_Alty, _Vector_val<_Val_types>> _Mypair;
 };


template<class _Ptrty> inline
 auto _Unfancy_maybe_null(_Ptrty _Ptr)
 {
 return (_Ptr ? ::std:: addressof(*_Ptr) : nullptr);
 }

template<class _Ty> inline
 _Ty * _Unfancy_maybe_null(_Ty * _Ptr)
 {
 return (_Ptr);
 }


template<class _Ty,
 class _Alloc = allocator<_Ty>>
 class vector
  : public _Vector_alloc<_Vec_base_types<_Ty, _Alloc>>
 {
private:
 using _Mybase = _Vector_alloc<_Vec_base_types<_Ty, _Alloc>>;
 using _Alty = typename _Mybase::_Alty;
 using _Alty_traits = typename _Mybase::_Alty_traits;

public:
 static_assert(!0 || is_same_v<_Ty, typename _Alloc::value_type>,
  "vector<T, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

 using value_type = _Ty;
 using allocator_type = _Alloc;
 using pointer = typename _Mybase::pointer;
 using const_pointer = typename _Mybase::const_pointer;
 using reference = _Ty&;
 using const_reference = const _Ty&;
 using size_type = typename _Mybase::size_type;
 using difference_type = typename _Mybase::difference_type;
 using iterator = typename _Mybase::iterator;
 using const_iterator = typename _Mybase::const_iterator;
 using reverse_iterator = ::std:: reverse_iterator<iterator>;
 using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

 vector() noexcept(is_nothrow_default_constructible_v<_Alty>)
  : _Mybase()
  {
  }

 explicit vector(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  }

 explicit vector( const size_type _Count, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  if (_Buy(_Count))
   {
   try {
   this->_Mylast() = _Udefault(this->_Myfirst(), _Count);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector( const size_type _Count, const _Ty& _Val, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  if (_Buy(_Count))
   {
   try {
   this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Val);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

private:
 template<class _Iter>
  void _Range_construct_or_tidy(_Iter _First, _Iter _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   {
   emplace_back(*_First);
   }
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter>
  void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag)
  {
  if (_Buy(_Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)))))
   {
   try {
   this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

public:
 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
                             ;
  _Range_construct_or_tidy(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>{});
  }

 vector(initializer_list<_Ty> _Ilist, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
  }

 vector(const vector& _Right)
  : _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
  {
  if (_Buy(_Right.size()))
   {
   try {
   this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(const vector& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (_Buy(_Right.size()))
   {
   try {
   this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

private:
 void _Move_from(vector&& _Right, true_type)
  {
  this->_Swap_all(_Right);

  this->_Myfirst() = _Right._Myfirst();
  this->_Mylast() = _Right._Mylast();
  this->_Myend() = _Right._Myend();

  _Right._Myfirst() = pointer();
  _Right._Mylast() = pointer();
  _Right._Myend() = pointer();
  }

 void _Move_from(vector&& _Right, false_type)
  {
  if (this->_Getal() == _Right._Getal())
   {
   _Move_from(::std:: move(_Right), true_type{});
   }
  else if (_Buy(_Right.size()))
   {
   this->_Mylast() = _Umove(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
   }
  }

public:
 vector(vector&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Move_from(::std:: move(_Right), true_type{});
  }

 vector(vector&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  try {

  _Move_from(::std:: move(_Right), typename _Alty_traits::is_always_equal{});
  } catch (...) {
  _Tidy();
  throw;
  }
  }

private:
 void _Move_assign_from(vector&& _Right, true_type)
  {
  _Move_from(::std:: move(_Right), true_type{});
  }

 void _Move_assign_from(vector&& _Right, false_type)
  {
  if (this->_Getal() == _Right._Getal())
   {
   _Move_from(::std:: move(_Right), true_type{});
   return;
   }

  const pointer _First = _Right._Myfirst();
  const pointer _Last = _Right._Mylast();
  const size_type _Newsize = _Right.size();

  this->_Orphan_all();

  const size_type _Oldsize = size();
  const size_type _Oldcapacity = capacity();

  if (_Newsize > _Oldcapacity)
   {
   if (_Newsize > max_size())
    {
    _Xlength();
    }

   const size_type _Newcapacity = _Calculate_growth(_Newsize);

   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
    }

   _Buy(_Newcapacity);

   this->_Mylast() = _Umove(_First, _Last, this->_Myfirst());
   }
  else if (_Newsize > _Oldsize)
   {
   const pointer _Mid = _First + _Oldsize;
   _Move_unchecked(_First, _Mid, this->_Myfirst());
   this->_Mylast() = _Umove(_Mid, _Last, this->_Mylast());
   }
  else
   {
   const pointer _Newlast = this->_Myfirst() + _Newsize;
   _Move_unchecked(_First, _Last, this->_Myfirst());
   _Destroy(_Newlast, this->_Mylast());
   this->_Mylast() = _Newlast;
   }
  }

public:
 vector& operator=(vector&& _Right)
  noexcept(_Alty_traits::propagate_on_container_move_assignment::value || _Alty_traits::is_always_equal::value)

  {
  if (this != ::std:: addressof(_Right))
   {
#pragma warning(push)
#pragma warning(disable: 4127)
 if (_Alty_traits::propagate_on_container_move_assignment::value
    || this->_Getal() == _Right._Getal())
    {
    _Tidy();
    }
#pragma warning(pop)
 this->_Move_alloc(_Right._Getal());
   _Move_assign_from(::std:: move(_Right), _Disjunction_t<
    typename _Alty_traits::propagate_on_container_move_assignment,
    typename _Alty_traits::is_always_equal>{});
   }
  return (*this);
  }

 ~vector() noexcept
  {
  _Tidy();
  }

private:
 template<class... _Valty>
  void _Emplace_back_with_unused_capacity(_Valty&&... _Val)
  {

  _Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), ::std:: forward<_Valty>(_Val)...);
  _Orphan_range(this->_Mylast(), this->_Mylast());
  ++this->_Mylast();
  }

public:
 template<class... _Valty>
  decltype(auto) emplace_back(_Valty&&... _Val)
  {
  if (_Has_unused_capacity())
   {
   _Emplace_back_with_unused_capacity(::std:: forward<_Valty>(_Val)...);
   }
  else
   {
   const size_type _Oldsize = size();

   if (_Oldsize == max_size())
    {
    _Xlength();
    }

   const size_type _Newsize = _Oldsize + 1;
   const size_type _Newcapacity = _Calculate_growth(_Newsize);
   bool _Emplaced = false;
   const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
   _Alty& _Al = this->_Getal();

   try {
   _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Oldsize), ::std:: forward<_Valty>(_Val)...);
   _Emplaced = true;
   _Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
   } catch (...) {
   if (_Emplaced)
    {
    _Alty_traits::destroy(_Al, _Unfancy(_Newvec + _Oldsize));
    }

   _Al.deallocate(_Newvec, _Newcapacity);
   throw;
   }

   _Change_array(_Newvec, _Newsize, _Newcapacity);
   }




  }

 void push_back(const _Ty& _Val)
  {
  emplace_back(_Val);
  }

 void push_back(_Ty&& _Val)
  {
  emplace_back(::std:: move(_Val));
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
# 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  const size_type _Whereoff = _Where._Ptr - this->_Myfirst();
  const bool _At_back = _Where._Ptr == this->_Mylast();
  _Alty& _Al = this->_Getal();

  if (!_Has_unused_capacity())
   {
   const size_type _Oldsize = size();

   if (_Oldsize == max_size())
    {
    _Xlength();
    }

   const size_type _Newsize = _Oldsize + 1;
   const size_type _Newcapacity = _Calculate_growth(_Newsize);

   const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
   const pointer _Constructed_last = _Newvec + _Whereoff + 1;
   pointer _Constructed_first = _Constructed_last;

   try {
   _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), ::std:: forward<_Valty>(_Val)...);
   _Constructed_first = _Newvec + _Whereoff;

   if (_At_back)
    {
    _Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
    }
   else
    {
    _Umove(this->_Myfirst(), _Where._Ptr, _Newvec);
    _Constructed_first = _Newvec;
    _Umove(_Where._Ptr, this->_Mylast(), _Newvec + _Whereoff + 1);
    }
   } catch (...) {
   _Destroy(_Constructed_first, _Constructed_last);
   _Al.deallocate(_Newvec, _Newcapacity);
   throw;
   }

   _Change_array(_Newvec, _Newsize, _Newcapacity);
   }
  else if (_At_back)
   {
   _Emplace_back_with_unused_capacity(::std:: forward<_Valty>(_Val)...);
   }
  else
   {
   _Ty _Obj(::std:: forward<_Valty>(_Val)...);

   const pointer _Oldlast = this->_Mylast();
   _Orphan_range(_Where._Ptr, _Oldlast);
   _Alty_traits::construct(_Al, _Unfancy(_Oldlast), ::std:: move(_Oldlast[-1]));
   ++this->_Mylast();
   _Move_backward_unchecked(_Where._Ptr, _Oldlast - 1, _Oldlast);
   *_Where._Ptr = ::std:: move(_Obj);
   }

  return (begin() + _Whereoff);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {
  return (emplace(_Where, _Val));
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 iterator insert(const_iterator _Where, const size_type _Count, const _Ty& _Val)
  {
# 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  const size_type _Whereoff = _Where._Ptr - this->_Myfirst();
  const bool _One_at_back = _Count == 1 && _Where._Ptr == this->_Mylast();

  if (_Count == 0)
   {
   }
  else if (_Count > _Unused_capacity())
   {
   const size_type _Oldsize = size();

   if (_Count > max_size() - _Oldsize)
    {
    _Xlength();
    }

   const size_type _Newsize = _Oldsize + _Count;
   const size_type _Newcapacity = _Calculate_growth(_Newsize);

   const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
   const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
   pointer _Constructed_first = _Constructed_last;

   try {
   _Ufill(_Newvec + _Whereoff, _Count, _Val);
   _Constructed_first = _Newvec + _Whereoff;

   if (_One_at_back)
    {
    _Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
    }
   else
    {
    _Umove(this->_Myfirst(), _Where._Ptr, _Newvec);
    _Constructed_first = _Newvec;
    _Umove(_Where._Ptr, this->_Mylast(), _Newvec + _Whereoff + _Count);
    }
   } catch (...) {
   _Destroy(_Constructed_first, _Constructed_last);
   this->_Getal().deallocate(_Newvec, _Newcapacity);
   throw;
   }

   _Change_array(_Newvec, _Newsize, _Newcapacity);
   }
  else if (_One_at_back)
   {
   _Emplace_back_with_unused_capacity(_Val);
   }
  else
   {
   const _Ty _Tmp = _Val;
   const pointer _Oldlast = this->_Mylast();
   const size_type _Affected_elements = _Oldlast - _Where._Ptr;
   _Orphan_range(_Where._Ptr, _Oldlast);

   if (_Count > _Affected_elements)
    {
    this->_Mylast() = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
    this->_Mylast() = _Umove(_Where._Ptr, _Oldlast, this->_Mylast());
    _Fill_unchecked(_Where._Ptr, _Oldlast, _Tmp);
    }
   else
    {
    this->_Mylast() = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
    _Move_backward_unchecked(_Where._Ptr, _Oldlast - _Count, _Oldlast);
    _Fill_unchecked(_Where._Ptr, _Where._Ptr + _Count, _Tmp);
    }
   }

  return (begin() + _Whereoff);
  }

private:
 template<class _Iter>
  void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag)
  {
  if (_First == _Last)
   {
   return;
   }

  const size_type _Whereoff = _Where._Ptr - this->_Myfirst();
  const size_type _Oldsize = size();





  for (; _First != _Last; ++_First)
   {
   emplace_back(*_First);
   }

  _Orphan_range(this->_Myfirst() + _Whereoff, this->_Myfirst() + _Oldsize);

  _Rotate_unchecked(this->_Myfirst() + _Whereoff, this->_Myfirst() + _Oldsize, this->_Mylast());
  }

 template<class _Iter>
  void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag)
  {
  const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
  const size_type _Whereoff = _Where._Ptr - this->_Myfirst();
  const bool _One_at_back = _Count == 1 && _Where._Ptr == this->_Mylast();

  if (_Count == 0)
   {
   }
  else if (_Count > _Unused_capacity())
   {
   const size_type _Oldsize = size();

   if (_Count > max_size() - _Oldsize)
    {
    _Xlength();
    }

   const size_type _Newsize = _Oldsize + _Count;
   const size_type _Newcapacity = _Calculate_growth(_Newsize);

   const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
   const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
   pointer _Constructed_first = _Constructed_last;

   try {
   _Ucopy(_First, _Last, _Newvec + _Whereoff);
   _Constructed_first = _Newvec + _Whereoff;

   if (_One_at_back)
    {
    _Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
    }
   else
    {
    _Umove(this->_Myfirst(), _Where._Ptr, _Newvec);
    _Constructed_first = _Newvec;
    _Umove(_Where._Ptr, this->_Mylast(), _Newvec + _Whereoff + _Count);
    }
   } catch (...) {
   _Destroy(_Constructed_first, _Constructed_last);
   this->_Getal().deallocate(_Newvec, _Newcapacity);
   throw;
   }

   _Change_array(_Newvec, _Newsize, _Newcapacity);
   }
  else
   {



   const pointer _Oldlast = this->_Mylast();
   const size_type _Affected_elements = _Oldlast - _Where._Ptr;

   if (_Count < _Affected_elements)
    {
    this->_Mylast() = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
    _Move_backward_unchecked(_Where._Ptr, _Oldlast - _Count, _Oldlast);
    _Destroy(_Where._Ptr, _Where._Ptr + _Count);

    try {
    _Ucopy(_First, _Last, _Where._Ptr);
    } catch (...) {


     try {
     _Umove(_Where._Ptr + _Count, _Where._Ptr + 2 * _Count, _Where._Ptr);
     } catch (...) {

     _Orphan_range(_Where._Ptr, _Oldlast);
     _Destroy(_Where._Ptr + _Count, this->_Mylast());
     this->_Mylast() = _Where._Ptr;
     throw;
     }

     _Move_unchecked(_Where._Ptr + 2 * _Count, this->_Mylast(), _Where._Ptr + _Count);
     _Destroy(_Oldlast, this->_Mylast());
     this->_Mylast() = _Oldlast;
    throw;
    }
    }
   else
    {
    const pointer _Relocated = _Where._Ptr + _Count;
    this->_Mylast() = _Umove(_Where._Ptr, _Oldlast, _Relocated);
    _Destroy(_Where._Ptr, _Oldlast);

    try {
    _Ucopy(_First, _Last, _Where._Ptr);
    } catch (...) {


     try {
     _Umove(_Relocated, this->_Mylast(), _Where._Ptr);
     } catch (...) {

     _Orphan_range(_Where._Ptr, _Oldlast);
     _Destroy(_Relocated, this->_Mylast());
     this->_Mylast() = _Where._Ptr;
     throw;
     }

     _Destroy(_Relocated, this->_Mylast());
     this->_Mylast() = _Oldlast;
    throw;
    }
    }

   _Orphan_range(_Where._Ptr, _Oldlast);
   }
  }

public:
 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  iterator insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
# 1308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
                             ;

  const size_type _Whereoff = _Where._Ptr - this->_Myfirst();
  _Insert_range(_Where, _Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>{});
  return (begin() + _Whereoff);
  }

 iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 void assign( const size_type _Newsize, const _Ty& _Val)
  {
  this->_Orphan_all();

  const size_type _Oldsize = size();
  const size_type _Oldcapacity = capacity();

  if (_Newsize > _Oldcapacity)
   {
   if (_Newsize > max_size())
    {
    _Xlength();
    }

   const size_type _Newcapacity = _Calculate_growth(_Newsize);

   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
    }

   _Buy(_Newcapacity);

   this->_Mylast() = _Ufill(this->_Myfirst(), _Newsize, _Val);
   }
  else if (_Newsize > _Oldsize)
   {
   _Fill_unchecked(this->_Myfirst(), this->_Mylast(), _Val);
   this->_Mylast() = _Ufill(this->_Mylast(), _Newsize - _Oldsize, _Val);
   }
  else
   {
   const pointer _Newlast = this->_Myfirst() + _Newsize;
   _Fill_unchecked(this->_Myfirst(), _Newlast, _Val);
   _Destroy(_Newlast, this->_Mylast());
   this->_Mylast() = _Newlast;
   }
  }

private:
 template<class _Iter>
  void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag)
  {
  this->_Orphan_all();

  pointer _Next = this->_Myfirst();

  for (; _First != _Last && _Next != this->_Mylast(); ++_First, (void)++_Next)
   {
   *_Next = *_First;
   }







  _Destroy(_Next, this->_Mylast());
  this->_Mylast() = _Next;


  for (; _First != _Last; ++_First)
   {
   emplace_back(*_First);
   }
  }

 template<class _Iter>
  void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag)
  {
  const size_type _Newsize = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));

  this->_Orphan_all();

  const size_type _Oldsize = size();
  const size_type _Oldcapacity = capacity();

  if (_Newsize > _Oldcapacity)
   {
   if (_Newsize > max_size())
    {
    _Xlength();
    }

   const size_type _Newcapacity = _Calculate_growth(_Newsize);

   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
    }

   _Buy(_Newcapacity);

   this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
   }
  else if (_Newsize > _Oldsize)
   {
   const _Iter _Mid = ::std:: next(_First, _Oldsize);
   _Copy_unchecked(_First, _Mid, this->_Myfirst());
   this->_Mylast() = _Ucopy(_Mid, _Last, this->_Mylast());
   }
  else
   {
   const pointer _Newlast = this->_Myfirst() + _Newsize;
   _Copy_unchecked(_First, _Last, this->_Myfirst());
   _Destroy(_Newlast, this->_Mylast());
   this->_Mylast() = _Newlast;
   }
  }

public:
 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  void assign(_Iter _First, _Iter _Last)
  {
                             ;
  _Assign_range(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>{});
  }

 void assign(initializer_list<_Ty> _Ilist)
  {
  _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
  }

 vector& operator=(const vector& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
#pragma warning(push)
#pragma warning(disable: 4127)
 if (_Alty_traits::propagate_on_container_copy_assignment::value
    && this->_Getal() != _Right._Getal())
    {
    _Tidy();
    }
#pragma warning(pop)

 this->_Copy_alloc(_Right._Getal());

   assign(_Right._Myfirst(), _Right._Mylast());
   }

  return (*this);
  }

 vector& operator=(initializer_list<_Ty> _Ilist)
  {
  _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
  return (*this);
  }

private:
 template<class _Lambda>
  void _Resize(const size_type _Newsize, _Lambda _Udefault_or_fill)
  {
  const size_type _Oldsize = size();
  const size_type _Oldcapacity = capacity();

  if (_Newsize > _Oldcapacity)
   {
   if (_Newsize > max_size())
    {
    _Xlength();
    }

   const size_type _Newcapacity = _Calculate_growth(_Newsize);

   const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
   const pointer _Appended_first = _Newvec + _Oldsize;
   pointer _Appended_last = _Appended_first;

   try {
   _Appended_last = _Udefault_or_fill(_Appended_first, _Newsize - _Oldsize);
   _Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
   } catch (...) {
   _Destroy(_Appended_first, _Appended_last);
   this->_Getal().deallocate(_Newvec, _Newcapacity);
   throw;
   }

   _Change_array(_Newvec, _Newsize, _Newcapacity);
   }
  else if (_Newsize > _Oldsize)
   {
   const pointer _Oldlast = this->_Mylast();
   this->_Mylast() = _Udefault_or_fill(_Oldlast, _Newsize - _Oldsize);
   _Orphan_range(_Oldlast, _Oldlast);
   }
  else if (_Newsize == _Oldsize)
   {
   }
  else
   {
   const pointer _Newlast = this->_Myfirst() + _Newsize;
   _Orphan_range(_Newlast, this->_Mylast());
   _Destroy(_Newlast, this->_Mylast());
   this->_Mylast() = _Newlast;
   }
  }

public:
 void resize( const size_type _Newsize)
  {
  auto _Lambda_default = [this](pointer _Dest, const size_type _Count)
   {
   return (_Udefault(_Dest, _Count));
   };

  _Resize(_Newsize, _Lambda_default);
  }

 void resize( const size_type _Newsize, const _Ty& _Val)
  {
  auto _Lambda_fill = [this, &_Val](pointer _Dest, const size_type _Count)
   {
   return (_Ufill(_Dest, _Count, _Val));
   };

  _Resize(_Newsize, _Lambda_fill);
  }

private:
 void _Reallocate_exactly(const size_type _Newcapacity)
  {
  const size_type _Size = size();

  const pointer _Newvec = this->_Getal().allocate(_Newcapacity);

  try {
  _Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
  } catch (...) {
  this->_Getal().deallocate(_Newvec, _Newcapacity);
  throw;
  }

  _Change_array(_Newvec, _Size, _Newcapacity);
  }

public:
 void reserve( const size_type _Newcapacity)
  {
  if (_Newcapacity > capacity())
   {
   if (_Newcapacity > max_size())
    {
    _Xlength();
    }

   _Reallocate_exactly(_Newcapacity);
   }
  }

 void shrink_to_fit()
  {
  if (_Has_unused_capacity())
   {
   if (empty())
    {
    _Tidy();
    }
   else
    {
    _Reallocate_exactly(size());
    }
   }
  }

 void pop_back()
  {
# 1601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  _Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));
  --this->_Mylast();
  }

 iterator erase(const_iterator _Where)
  {
# 1618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  _Move_unchecked(_Where._Ptr + 1, this->_Mylast(), _Where._Ptr);
  _Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));
  --this->_Mylast();
  return (iterator(_Where._Ptr, ::std:: addressof(this->_Get_data())));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
# 1637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  if (_First._Ptr != _Last._Ptr)
   {
   _Orphan_range(_First._Ptr, this->_Mylast());
   const pointer _Newlast = _Move_unchecked(_Last._Ptr, this->_Mylast(), _First._Ptr);
   _Destroy(_Newlast, this->_Mylast());
   this->_Mylast() = _Newlast;
   }

  return (iterator(_First._Ptr, ::std:: addressof(this->_Get_data())));
  }

 void clear() noexcept
  {
  this->_Orphan_all();
  _Destroy(this->_Myfirst(), this->_Mylast());
  this->_Mylast() = this->_Myfirst();
  }

 void swap(vector& _Right) noexcept
  {
  if (this != ::std:: addressof(_Right))
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myfirst(), _Right._Myfirst());
   _Swap_adl(this->_Mylast(), _Right._Mylast());
   _Swap_adl(this->_Myend(), _Right._Myend());
   }
  }

 _Ty * data() noexcept
  {
  return (_Unfancy_maybe_null(this->_Myfirst()));
  }

 const _Ty * data() const noexcept
  {
  return (_Unfancy_maybe_null(this->_Myfirst()));
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myfirst(), ::std:: addressof(this->_Get_data())));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myfirst(), ::std:: addressof(this->_Get_data())));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Mylast(), ::std:: addressof(this->_Get_data())));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Mylast(), ::std:: addressof(this->_Get_data())));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 pointer _Unchecked_begin() noexcept
  {
  return (this->_Myfirst());
  }

 const_pointer _Unchecked_begin() const noexcept
  {
  return (this->_Myfirst());
  }

 pointer _Unchecked_end() noexcept
  {
  return (this->_Mylast());
  }

 const_pointer _Unchecked_end() const noexcept
  {
  return (this->_Mylast());
  }

 bool empty() const noexcept
  {
  return (this->_Myfirst() == this->_Mylast());
  }

 size_type size() const noexcept
  {
  return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));
  }

 size_type max_size() const noexcept
  {
  return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),
   _Alty_traits::max_size(this->_Getal())));
  }

 size_type capacity() const noexcept
  {
  return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));
  }

private:
 size_type _Unused_capacity() const noexcept
  {
  return (static_cast<size_type>(this->_Myend() - this->_Mylast()));
  }

 bool _Has_unused_capacity() const noexcept
  {
  return (this->_Myend() != this->_Mylast());
  }

public:
 _Ty& operator[](const size_type _Pos)
  {
# 1801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  return (this->_Myfirst()[_Pos]);
  }

 const _Ty& operator[](const size_type _Pos) const
  {
# 1815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  return (this->_Myfirst()[_Pos]);
  }

 _Ty& at(const size_type _Pos)
  {
  if (size() <= _Pos)
   {
   _Xrange();
   }

  return (this->_Myfirst()[_Pos]);
  }

 const _Ty& at(const size_type _Pos) const
  {
  if (size() <= _Pos)
   {
   _Xrange();
   }

  return (this->_Myfirst()[_Pos]);
  }

 _Ty& front()
  {
# 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  return (*this->_Myfirst());
  }

 const _Ty& front() const
  {
# 1863 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  return (*this->_Myfirst());
  }

 _Ty& back()
  {
# 1877 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  return (this->_Mylast()[-1]);
  }

 const _Ty& back() const
  {
# 1891 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  return (this->_Mylast()[-1]);
  }

 allocator_type get_allocator() const noexcept
  {
  return (static_cast<allocator_type>(this->_Getal()));
  }

private:
 pointer _Udefault(pointer _Dest, const size_type _Count)
  {
  return (_Uninitialized_value_construct_n(_Dest, _Count, this->_Getal()));
  }

 pointer _Ufill(pointer _Dest, const size_type _Count, const _Ty& _Val)
  {
  return (_Uninitialized_fill_n(_Dest, _Count, _Val, this->_Getal()));
  }

 template<class _Iter>
  pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest)
  {
  return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));
  }

 pointer _Umove(pointer _First, pointer _Last, pointer _Dest)
  {
  return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));
  }

 void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type)
  {
  _Uninitialized_move(_First, _Last, _Dest, this->_Getal());
  }

 void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, false_type)
  {
  _Uninitialized_copy(_First, _Last, _Dest, this->_Getal());
  }

 void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest)
  {
  _Umove_if_noexcept1(_First, _Last, _Dest,
   _Disjunction_t<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>{});
  }

 void _Destroy(pointer _First, pointer _Last)
  {
  _Destroy_range(_First, _Last, this->_Getal());
  }

 size_type _Calculate_growth(const size_type _Newsize) const
  {
  const size_type _Oldcapacity = capacity();

  if (_Oldcapacity > max_size() - _Oldcapacity / 2)
   {
   return (_Newsize);
   }

  const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  if (_Geometric < _Newsize)
   {
   return (_Newsize);
   }

  return (_Geometric);
  }

 bool _Buy(const size_type _Newcapacity)
  {
  this->_Myfirst() = pointer();
  this->_Mylast() = pointer();
  this->_Myend() = pointer();

  if (_Newcapacity == 0)
   {
   return (false);
   }

  if (_Newcapacity > max_size())
   {
   _Xlength();
   }

  this->_Myfirst() = this->_Getal().allocate(_Newcapacity);
  this->_Mylast() = this->_Myfirst();
  this->_Myend() = this->_Myfirst() + _Newcapacity;

  return (true);
  }

 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity)
  {
  this->_Orphan_all();

  if (this->_Myfirst() != pointer())
   {
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(), capacity());
   }

  this->_Myfirst() = _Newvec;
  this->_Mylast() = _Newvec + _Newsize;
  this->_Myend() = _Newvec + _Newcapacity;
  }

 void _Tidy()
  {
  this->_Orphan_all();

  if (this->_Myfirst() != pointer())
   {
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(), capacity());

   this->_Myfirst() = pointer();
   this->_Mylast() = pointer();
   this->_Myend() = pointer();
   }
  }

 [[noreturn]] static void _Xlength()
  {
  _Xlength_error("vector<T> too long");
  }

 [[noreturn]] static void _Xrange()
  {
  _Xout_of_range("invalid vector<T> subscript");
  }
# 2048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
 void _Orphan_range(pointer, pointer) const
  {
  }

 };

template<class _Ty,
 class _Alloc> inline
 void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }


using _Vbase = unsigned int;
constexpr int _VBITS = 8 * sizeof (_Vbase);

template<class _Alloc0>
 struct _Wrap_alloc
 {
 using _Alloc = _Alloc0;
 };


template<class _Alvbase_wrapped>
 class _Vb_iter_base
  : public _Iterator_base
 {
public:
 using _Alvbase = typename _Alvbase_wrapped::_Alloc;
 using _Sizet = typename allocator_traits<_Alvbase>::size_type;
 using _Difft = typename allocator_traits<_Alvbase>::difference_type;
 using _Mycont = vector<bool, _Rebind_alloc_t<_Alvbase, bool>>;

 _Vb_iter_base()
  : _Myptr(0), _Myoff(0)
  {
  }

 _Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
  const _Container_base *_Mypvbool)
  : _Myptr(_Ptr), _Myoff(_Off)
  {
  this->_Adopt(_Mypvbool);
  }

 void _Advance(_Sizet _Off)
  {
  _Myoff += _Off;
  _Myptr += _Myoff / _VBITS;
  _Myoff %= _VBITS;
  }

 int _Valid(_Sizet _Inc) const
  {
# 2162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  (void)_Inc;
  return (-1);

  }

 const _Vbase *_Myptr;
 _Sizet _Myoff;
 };


template<class _Alvbase_wrapped>
 class _Vb_reference
  : public _Vb_iter_base<_Alvbase_wrapped>
 {
 using _Mybase = _Vb_iter_base<_Alvbase_wrapped>;

 _Vb_reference() noexcept
  {
  }

public:
 _Vb_reference(const _Mybase& _Right)
  : _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
  {
  }

 _Vb_reference& operator=(const _Vb_reference& _Right) noexcept
  {
  return (*this = bool(_Right));
  }

 _Vb_reference& operator=(bool _Val) noexcept
  {
  if (_Val)
   *const_cast<_Vbase *>(_Getptr()) |= _Mask();
  else
   *const_cast<_Vbase *>(_Getptr()) &= ~_Mask();
  return (*this);
  }

 void flip() noexcept
  {
  *const_cast<_Vbase *>(_Getptr()) ^= _Mask();
  }

 operator bool() const noexcept
  {
  return ((*_Getptr() & _Mask()) != 0);
  }

 const _Vbase *_Getptr() const
  {
# 2227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  return (this->_Myptr);
  }

protected:
 _Vbase _Mask() const
  {
  return (static_cast<_Vbase>(1) << this->_Myoff);
  }
 };

template<class _Alvbase_wrapped> inline
 void swap(_Vb_reference<_Alvbase_wrapped> _Left, _Vb_reference<_Alvbase_wrapped> _Right) noexcept
 {
 bool _Val = _Left;
 _Left = _Right;
 _Right = _Val;
 }


template<class _Alvbase_wrapped>
 class _Vb_const_iterator
  : public _Vb_iter_base<_Alvbase_wrapped>
 {
private:
 using _Mybase = _Vb_iter_base<_Alvbase_wrapped>;
 using _Size_type = typename _Mybase::_Sizet;

public:
 using _Reft = _Vb_reference<_Alvbase_wrapped>;
 using const_reference = bool;

 using iterator_category = random_access_iterator_tag;
 using value_type = bool;
 using difference_type = typename _Mybase::_Difft;
 using pointer = const_reference *;
 using reference = const_reference;

 _Vb_const_iterator()
  {
  }

 _Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
  : _Mybase(_Ptr, 0, _Mypvbool)
  {
  }

 const_reference operator*() const
  {
  return (_Reft(*this));
  }

 _Vb_const_iterator& operator++()
  {
  _Inc();
  return (*this);
  }

 _Vb_const_iterator operator++(int)
  {
  _Vb_const_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Vb_const_iterator& operator--()
  {
  _Dec();
  return (*this);
  }

 _Vb_const_iterator operator--(int)
  {
  _Vb_const_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Vb_const_iterator& operator+=(difference_type _Off)
  {
  if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off))
   {
   this->_Myoff += _Off;
   this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;
   this->_Myoff %= _VBITS;
   }
  else
   {
   this->_Myoff += _Off;
   this->_Myptr += this->_Myoff / _VBITS;
   this->_Myoff %= _VBITS;
   }
  return (*this);
  }

 _Vb_const_iterator operator+(difference_type _Off) const
  {
  _Vb_const_iterator _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Vb_const_iterator& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Vb_const_iterator operator-(difference_type _Off) const
  {
  _Vb_const_iterator _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Vb_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (static_cast<difference_type>(_VBITS * (this->_Myptr - _Right._Myptr))
   + static_cast<difference_type>(this->_Myoff)
   - static_cast<difference_type>(_Right._Myoff));
  }

 const_reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Vb_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr == _Right._Myptr
   && this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Vb_const_iterator& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Vb_const_iterator& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr < _Right._Myptr
   || (this->_Myptr == _Right._Myptr
    && this->_Myoff < _Right._Myoff));
  }

 bool operator>(const _Vb_const_iterator& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Vb_const_iterator& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Vb_const_iterator& _Right) const
  {
  return (!(*this < _Right));
  }
# 2402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
 void _Compat(const _Vb_const_iterator&) const
  {
  }


 void _Dec()
  {
  if (this->_Myoff != 0)
   --this->_Myoff;
  else
   {
# 2424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
   this->_Myoff = _VBITS - 1;
   --this->_Myptr;
   }
  }

 void _Inc()
  {
  if (this->_Myoff < _VBITS - 1)
   ++this->_Myoff;
  else
   {
# 2446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
   this->_Myoff = 0;
   ++this->_Myptr;
   }
  }
 };

template<class _Alvbase_wrapped> inline
 _Vb_const_iterator<_Alvbase_wrapped> operator+(
  typename _Vb_const_iterator<_Alvbase_wrapped>::difference_type _Off,
  _Vb_const_iterator<_Alvbase_wrapped> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alvbase_wrapped>
 struct _Is_checked_helper<_Vb_const_iterator<_Alvbase_wrapped>>
  : public true_type
 {
 };


template<class _Alvbase_wrapped>
 class _Vb_iterator
  : public _Vb_const_iterator<_Alvbase_wrapped>
 {
public:
 using _Mybase = _Vb_const_iterator<_Alvbase_wrapped>;

 using _Reft = _Vb_reference<_Alvbase_wrapped>;
 using const_reference = bool;

 using iterator_category = random_access_iterator_tag;
 using value_type = bool;
 using difference_type = typename _Mybase::difference_type;
 using pointer = _Reft *;
 using reference = _Reft;

 _Vb_iterator()
  {
  }

 _Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
  : _Mybase(_Ptr, _Mypvbool)
  {
  }

 reference operator*() const
  {
  return (_Reft(*this));
  }

 _Vb_iterator& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Vb_iterator operator++(int)
  {
  _Vb_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Vb_iterator& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Vb_iterator operator--(int)
  {
  _Vb_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Vb_iterator& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Vb_iterator operator+(difference_type _Off) const
  {
  _Vb_iterator _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Vb_iterator& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Vb_iterator operator-(difference_type _Off) const
  {
  _Vb_iterator _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Alvbase_wrapped> inline
 _Vb_iterator<_Alvbase_wrapped> operator+(typename _Vb_iterator<_Alvbase_wrapped>::difference_type _Off,
  _Vb_iterator<_Alvbase_wrapped> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alvbase_wrapped>
 struct _Is_checked_helper<_Vb_iterator<_Alvbase_wrapped>>
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_val
  : public _Container_base
 {
public:
 using _Alproxy = _Rebind_alloc_t<_Alloc, _Container_proxy>;
 using _Alproxy_traits = allocator_traits<_Alproxy>;
 using _Alvbase = _Rebind_alloc_t<_Alloc, _Vbase>;
 using _Alvbase_traits = allocator_traits<_Alvbase>;
 using _Vectype = vector<_Vbase, _Alvbase>;
 using _Alvbase_wrapped = _Wrap_alloc<_Alvbase>;
 using size_type = typename _Alvbase_traits::size_type;

 _Vb_val(size_type _Count, const bool& _Val)
  : _Myvec(_Nw(_Count), static_cast<_Vbase>(_Val ? -1 : 0))
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al)
  : _Myvec(_Nw(_Count), static_cast<_Vbase>(_Val ? -1 : 0), static_cast<_Alvbase>(_Al))
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(const _Vb_val& _Right)
  : _Myvec(_Right._Myvec),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
  : _Myvec(_Right._Myvec, static_cast<_Alvbase>(_Al)),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right)
  : _Myvec(::std:: move(_Right._Myvec)),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
  : _Myvec(::std:: move(_Right._Myvec), static_cast<_Alvbase>(_Al)),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 ~_Vb_val() noexcept
  {
  _Free_proxy();
  }


 void _Alloc_proxy()
  {
  }

 void _Free_proxy()
  {
  }
# 2661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
 static size_type _Nw(size_type _Count)
  {
  return ((_Count + _VBITS - 1) / _VBITS);
  }

 _Vectype _Myvec;
 size_type _Mysize;
 };


template<class _Alloc>
 class vector<bool, _Alloc>
  : public _Vb_val<_Alloc>
 {
public:
 static_assert(!0 || is_same_v<bool, typename _Alloc::value_type>,
  "vector<bool, Allocator>" " requires that Allocator's value_type match " "bool" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

 using _Mybase = _Vb_val<_Alloc>;
 using _Alvbase_wrapped = typename _Mybase::_Alvbase_wrapped;
 using _Alvbase = typename _Mybase::_Alvbase;
 using _Alvbase_traits = typename _Mybase::_Alvbase_traits;

 using size_type = typename _Alvbase_traits::size_type;
 using difference_type = typename _Alvbase_traits::difference_type;
 using allocator_type = _Alloc;

 using reference = _Vb_reference<_Alvbase_wrapped>;
 using const_reference = bool;
 using value_type = bool;

 using _Reft = reference;
 using iterator = _Vb_iterator<_Alvbase_wrapped>;
 using const_iterator = _Vb_const_iterator<_Alvbase_wrapped>;

 using pointer = iterator;
 using const_pointer = const_iterator;
 using reverse_iterator = ::std:: reverse_iterator<iterator>;
 using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

 static const int _VBITS = ::std:: _VBITS;
 enum {_EEN_VBITS = _VBITS};

 vector() noexcept(is_nothrow_default_constructible_v<_Alloc>)
  : _Mybase(0, false)
  {
  }

 explicit vector(const _Alloc& _Al) noexcept
  : _Mybase(0, false, _Al)
  {
  }

 explicit vector( size_type _Count, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, false, _Al)
  {
  _Trim(_Count);
  }

 vector( size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, _Val, _Al)
  {
  _Trim(_Count);
  }

 vector(const vector& _Right)
  : _Mybase(_Right)
  {
  }

 vector(const vector& _Right, const _Alloc& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(0, false, _Al)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter>
  void _BConstruct(_Iter _First, _Iter _Last)
  {
  insert(begin(), _First, _Last);
  }

 vector(vector&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  this->_Swap_all(_Right);
  }

 vector(vector&& _Right, const _Alloc& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  if (this->_Myvec._Getal() == _Right._Myvec._Getal())
   {
   this->_Swap_all(_Right);
   }
  }

 vector& operator=(vector&& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   clear();

   const bool _Reload = _Alvbase_traits::propagate_on_container_move_assignment::value
    && this->_Myvec._Getal() != _Right._Myvec._Getal();

   if (_Reload)
    {
    this->_Free_proxy();
    }

   this->_Myvec = ::std:: move(_Right._Myvec);

   if (_Reload)
    {
    this->_Alloc_proxy();
    }

   this->_Mysize = _Right._Mysize;
   _Right._Mysize = 0;

   if (this->_Myvec._Getal() == _Right._Myvec._Getal())
    {
    this->_Swap_all(_Right);
    }
   }
  return (*this);
  }

 template<class... _Valty>
  decltype(auto) emplace_back(_Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  push_back(_Tmp);




  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  return (insert(_Where, _Tmp));
  }

 vector(initializer_list<bool> _Ilist,
   const _Alloc& _Al = allocator_type())
  : _Mybase(0, false, _Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 vector& operator=(initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
   initializer_list<bool> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  }

 vector& operator=(const vector& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   this->_Orphan_all();

   const bool _Reload = _Alvbase_traits::propagate_on_container_copy_assignment::value
    && this->_Myvec._Getal() != _Right._Myvec._Getal();

   if (_Reload)
    {
    this->_Free_proxy();
    }

   this->_Myvec = _Right._Myvec;

   if (_Reload)
    {
    this->_Alloc_proxy();
    }

   this->_Mysize = _Right._Mysize;
   }

  return (*this);
  }

 void reserve( size_type _Count)
  {
  this->_Myvec.reserve(this->_Nw(_Count));
  }

 size_type capacity() const noexcept
  {
  return (this->_Myvec.capacity() * _VBITS);
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myvec.data(), this));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myvec.data(), this));
  }

 iterator end() noexcept
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator end() const noexcept
  {
  const_iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (this->_Myvec.capacity() != this->_Myvec.size())
   {
   this->_Orphan_all();
   this->_Myvec.shrink_to_fit();
   }
  }

 iterator _Make_iter(const_iterator _Where)
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += _Where - begin();
  return (_Tmp);
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 void resize( size_type _Newsize, bool _Val = false)
  {
  if (size() < _Newsize)
   _Insert_n(end(), _Newsize - size(), _Val);
  else if (_Newsize < size())
   erase(begin() + _Newsize, end());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize);
  }

 size_type max_size() const noexcept
  {
  const size_type _Diff_max = static_cast<size_type>((numeric_limits<difference_type>::max)());
  const size_type _Ints_max = this->_Myvec.max_size();
  if (_Ints_max > _Diff_max / _VBITS)
   {
   return (_Diff_max);
   }


  return (_Ints_max * _VBITS);
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 allocator_type get_allocator() const noexcept
  {
  return (static_cast<allocator_type>(this->_Myvec.get_allocator()));
  }

 const_reference at(size_type _Off) const
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 reference at(size_type _Off)
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
  const_iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference operator[](size_type _Off)
  {
  iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const bool& _Val)
  {
  insert(end(), _Val);
  }

 void pop_back()
  {
  erase(end() - 1);
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  void assign(_Iter _First, _Iter _Last)
  {
  erase(begin(), end());
  insert(begin(), _First, _Last);
  }

 void assign( size_type _Count, const bool& _Val)
  {
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const bool& _Val)
  {
  return (_Insert_n(_Where, static_cast<size_type>(1), _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const bool& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter,
  class = enable_if_t<_Is_iterator_v<_Iter>>>
  iterator insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  _Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = _Where - begin();

  for (; _First != _Last; ++_First, (void)++_Off)
   insert(begin() + _Off, *_First);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
                             ;
  size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
  size_type _Off = _Insert_x(_Where, _Count);
  _Copy_unchecked(_Unchecked(_First), _Unchecked(_Last), begin() + _Off);
  }

 iterator erase(const_iterator _Where_arg)
  {
  iterator _Where = _Make_iter(_Where_arg);
  size_type _Off = _Where - begin();
# 3128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  ::std:: copy(_Where + 1, end(), _Where);


  _Trim(this->_Mysize - 1);
  return (begin() + _Off);
  }

 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);
  size_type _Off = _First - begin();

  if (_First != _Last)
   {
# 3156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
   iterator _Next = ::std:: copy(_Last, end(), _First);
   _Trim(_Next - begin());

   }
  return (begin() + _Off);
  }

 void clear() noexcept
  {
  erase(begin(), end());
  }

 void flip() noexcept
  {
  for (auto& _Elem : this->_Myvec)
   {
   _Elem = ~_Elem;
   }

  _Trim(this->_Mysize);
  }

 void swap(vector& _Right) noexcept
  {
  if (this != ::std:: addressof(_Right))
   {
   this->_Swap_all(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }
  }

 static void swap(reference _Left, reference _Right) noexcept
  {
  bool _Val = _Left;
  _Left = _Right;
  _Right = _Val;
  }

 friend hash<vector<bool, _Alloc>>;

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const bool& _Val)
  {
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
  return (begin() + _Off);
  }

 size_type _Insert_x(const_iterator _Where, size_type _Count)
  {
  size_type _Off = _Where - begin();
# 3218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
  if (_Count == 0)
   ;
  else if (max_size() - size() < _Count)
   _Xlen();
  else
   {
   this->_Myvec.resize(this->_Nw(size() + _Count), 0);
   if (empty())
    this->_Mysize += _Count;
   else
    {
    iterator _Oldend = end();
    this->_Mysize += _Count;
    ::std:: copy_backward(begin() + _Off, _Oldend, end());
    }




   }
  return (_Off);
  }
# 3264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vector" 3
 void _Orphan_range(size_type, size_type) const
  {
  }


 void _Trim(size_type _Size)
  {
  if (max_size() < _Size)
   _Xlen();
  size_type _Words = this->_Nw(_Size);

  if (_Words < this->_Myvec.size())
   this->_Myvec.erase(this->_Myvec.begin() + _Words,
    this->_Myvec.end());
  this->_Mysize = _Size;
  _Size %= _VBITS;
  if (0 < _Size)
   this->_Myvec[_Words - 1] &= (static_cast<_Vbase>(1) << _Size) - 1;
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("vector<bool> too long");
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid vector<bool> subscript");
  }
 };

template<class _Alloc> inline
 bool operator==(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left._Myvec.begin(), _Left._Myvec.end(),
   _Right._Myvec.begin()));
 }

template<class _Alloc> inline
 bool operator!=(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Alloc>
 struct hash<vector<bool, _Alloc>>
 {
                                   typedef vector<bool, _Alloc> argument_type;
                                   typedef size_t result_type;

 size_t operator()(const vector<bool, _Alloc>& _Keyval) const noexcept
  {
  return (_Hash_array_representation(_Keyval._Myvec.data(), _Keyval._Myvec.size()));
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 116 "..\\3rd\\protobuf\\src\\google/protobuf/message.h" 2


# 1 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h" 1
# 54 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h" 1
# 38 "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomic_sequence_num.h" 1
# 33 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomic_sequence_num.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h" 1
# 59 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 1
# 38 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h"
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

const int _ISORT_MAX = 32;



template<class _Ty>
 struct _Temporary_buffer
 {
 explicit _Temporary_buffer(const ptrdiff_t _Requested_size)
  {
  const pair<_Ty *, ptrdiff_t> _Raw = _Get_temporary_buffer<_Ty>(_Requested_size);
  _Data = _Raw.first;
  _Capacity = _Raw.second;
  }

 _Temporary_buffer(const _Temporary_buffer&) = delete;
 _Temporary_buffer& operator=(const _Temporary_buffer&) = delete;

 ~_Temporary_buffer() noexcept
  {
  _Return_temporary_buffer(_Data);
  }

 _Ty * _Data;
 ptrdiff_t _Capacity;
 };



template<class _Ty>
 struct _Temporary_range
 {
 using value_type = _Ty;

 explicit _Temporary_range(_Temporary_buffer<_Ty>& _Buffer)
  : _Data(_Buffer._Data),
  _Capacity(_Buffer._Capacity),
  _Size(0)
  {
  }

 template<class _FwdIt>
  _Temporary_range(_Temporary_buffer<_Ty>& _Buffer,
   const _FwdIt _First, const _FwdIt _Last, const _Iter_diff_t<_FwdIt> _Count)
  : _Data(_Buffer._Data),
  _Capacity(_Buffer._Capacity),
  _Size(_Count)
  {
  _Uninitialized_move_unchecked(_First, _Last, _Data);
  }

 _Temporary_range(const _Temporary_range&) = delete;
 _Temporary_range& operator=(const _Temporary_range&) = delete;

 ~_Temporary_range() noexcept
  {
  _Destroy_range(_Data, _Data + _Size);
  }

 _Ty * _Begin()
  {
  return (_Data);
  }

 _Ty * _End()
  {
  return (_Data + _Size);
  }

 void push_back(_Ty&& _Val)
  {
  _Construct_in_place(_Data[_Size], ::std:: move(_Val));
  ++_Size;
  }

 _Ty * _Data;
 ptrdiff_t _Capacity;
 ptrdiff_t _Size;
 };


template<class _InIt,
 class _Fn> inline
 _Fn for_each(_InIt _First, _InIt _Last, _Fn _Func)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  _Func(*_UFirst);
  }

 return (_Func);
 }
# 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _Pr> inline
 _InIt _Find_if_unchecked(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  {
  if (_Pred(*_First))
   {
   break;
   }
  }

 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Find_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred))));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 if (_UFirst != _ULast)
  {
  for (auto _UFirstb = _UFirst; ++_UFirst != _ULast; _UFirstb = _UFirst)
   {
   if (_Pred(*_UFirstb, *_UFirst))
    {
    return (_Rechecked(_Last, _UFirstb));
    }
   }
  }

 return (_Rechecked(_Last, _ULast));
 }


template<class _FwdIt> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: adjacent_find(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 _Iter_diff_t<_InIt> count_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 _Iter_diff_t<_InIt> _Count = 0;
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (_Pred(*_UFirst))
   {
   ++_Count;
   }
  }

 return (_Count);
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2> _Mismatch_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
 while (_UFirst1 != _ULast1 && _Pred(*_UFirst1, *_UFirst2))
  {
  ++_UFirst1;
  ++_UFirst2;
  }

 return {_Rechecked(_First1, _UFirst1), _Rechecked(_First2, _UFirst2)};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Mismatch_no_deprecate(_First1, _Last1, _First2, _Pass_fn(_Pred)));
 }
# 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2, equal_to<>()));
 }
# 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
 while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2 && _Pred(*_UFirst1, *_UFirst2))
  {
  ++_UFirst1;
  ++_UFirst2;
  }

 return {_Rechecked(_First1, _UFirst1), _Rechecked(_First2, _UFirst2)};
 }


template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2, _Last2, equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (!_Pred(*_UFirst))
   {
   return (false);
   }
  }

 return (true);
 }
# 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _Pr> inline
 bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (_Pred(*_UFirst))
   {
   return (true);
   }
  }

 return (false);
 }
# 390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _Pr> inline
 bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (_Pred(*_UFirst))
   {
   return (false);
   }
  }

 return (true);
 }
# 417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _Pr> inline
 _InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (!_Pred(*_UFirst))
   {
   break;
   }
  }

 return (_Rechecked(_First, _UFirst));
 }


template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if_no_deprecate(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UDest = _Unchecked_idl0(_Dest);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (_Pred(*_UFirst))
   {
   *_UDest = *_UFirst;
   ++_UDest;
   }
  }

 return (_Rechecked(_Dest, _UDest));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Copy_if_no_deprecate(_First, _Last, _Dest, _Pass_fn(_Pred)));
 }
# 481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy_no_deprecate(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UDest1 = _Unchecked_idl0(_Dest1);
 auto _UDest2 = _Unchecked_idl0(_Dest2);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (_Pred(*_UFirst))
   {
   *_UDest1 = *_UFirst;
   ++_UDest1;
   }
  else
   {
   *_UDest2 = *_UFirst;
   ++_UDest2;
   }
  }

 return {_Rechecked(_Dest1, _UDest1), _Rechecked(_Dest2, _UDest2)};
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } };
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest1)));
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest2)));
 return (_Partition_copy_no_deprecate(_First, _Last, _Dest1, _Dest2, _Pass_fn(_Pred)));
 }
# 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _Pr> inline
 bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);

 for (;; ++_UFirst)
  {
  if (_UFirst == _ULast)
   {
   return (true);
   }

  if (!_Pred(*_UFirst))
   {
   break;
   }
  }

 while (++_UFirst != _ULast)
  {
  if (_Pred(*_UFirst))
   {
   return (false);
   }
  }

 return (true);
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _Count = ::std:: distance(_UFirst, _ULast);
 while (0 < _Count)
  {
  const auto _Count2 = _Count / static_cast<decltype(_Count)>(2);
  const auto _UMid = ::std:: next(_UFirst, _Count2);

  if (_Pred(*_UMid))
   {
   _UFirst = _Next_iter(_UMid);
   _Count -= _Count2 + 1;
   }
  else
   {
   _Count = _Count2;
   }
  }

 return (_Rechecked(_First, _UFirst));
 }


template<class _FwdItHaystack,
 class _FwdItPat,
 class _Pr> inline
 _FwdItHaystack _Search_unchecked(_FwdItHaystack _First1, _FwdItHaystack _Last1,
  _FwdItPat _First2, _FwdItPat _Last2, _Pr _Pred,
  forward_iterator_tag, forward_iterator_tag)
 {
 for (; ; ++_First1)
  {
  _FwdItHaystack _Mid1 = _First1;
  for (_FwdItPat _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
   {
   if (_Mid2 == _Last2)
    {
    return (_First1);
    }
   else if (_Mid1 == _Last1)
    {
    return (_Last1);
    }
   else if (!_Pred(*_Mid1, *_Mid2))
    {
    break;
    }
   }
  }
 }

template<class _FwdItHaystack,
 class _FwdItPat,
 class _Pr> inline
 _FwdItHaystack _Search_unchecked(_FwdItHaystack _First1, _FwdItHaystack _Last1,
  _FwdItPat _First2, _FwdItPat _Last2, _Pr _Pred,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _Iter_diff_t<_FwdItHaystack> _Count1 = _Last1 - _First1;
 _Iter_diff_t<_FwdItPat> _Count2 = _Last2 - _First2;

 for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
  {
  _FwdItHaystack _Mid1 = _First1;
  for (_FwdItPat _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
   {
   if (_Mid2 == _Last2)
    {
    return (_First1);
    }
   else if (!_Pred(*_Mid1, *_Mid2))
    {
    break;
    }
   }
  }

 return (_Last1);
 }

template<class _FwdItHaystack,
 class _FwdItPat,
 class _Pr> inline
 _FwdItHaystack search(_FwdItHaystack _First1, _FwdItHaystack _Last1,
  _FwdItPat _First2, _FwdItPat _Last2, _Pr _Pred)
 {
                              ;
                              ;
 return (_Rechecked(_First1,
  _Search_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pass_fn(_Pred),
   _Iter_cat_t<_FwdItHaystack>(), _Iter_cat_t<_FwdItPat>())));
 }



template<class _FwdItHaystack,
 class _Searcher> inline
 _FwdItHaystack search(_FwdItHaystack _First, _FwdItHaystack _Last, const _Searcher& _Search)
 {
 return (_Search(_First, _Last).first);
 }



template<class _FwdItHaystack,
 class _FwdItPat> inline
 _FwdItHaystack search(_FwdItHaystack _First1, _FwdItHaystack _Last1,
  _FwdItPat _First2, _FwdItPat _Last2)
 {
 return (::std:: search(_First1, _Last1, _First2, _Last2, equal_to<>()));
 }


template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt _Search_n_unchecked(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)
 {
 if (_Count <= 0)
  return (_First);

 for (; _First != _Last; ++_First)
  {
  if (_Pred(*_First, _Val))
   {
   _FwdIt _Mid = _First;

   for (_Diff _Count1 = _Count;;)
    {
    if (--_Count1 == 0)
     {
     return (_First);
     }
    else if (++_Mid == _Last)
     {
     return (_Last);
     }
    else if (!_Pred(*_Mid, _Val))
     {
     break;
     }
    }

   _First = _Mid;
   }
  }

 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt _Search_n_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Diff _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)
 {
 if (_Count <= 0)
  {
  return (_First);
  }

 if (static_cast<uintmax_t>(_Count)
  > static_cast<uintmax_t>((numeric_limits<_Iter_diff_t<_FwdIt>>::max)()))
  {

  return (_Last);
  }

 const auto _Count_diff = static_cast<_Iter_diff_t<_FwdIt>>(_Count);
 _FwdIt _Old_first = _First;
 for (_Iter_diff_t<_FwdIt> _Inc = 0; _Count_diff <= _Last - _Old_first; )
  {
  _First = _Old_first + _Inc;
  if (_Pred(*_First, _Val))
   {
   _Iter_diff_t<_FwdIt> _Count1 = _Count_diff;
   _FwdIt _Mid = _First;

   for (; _Old_first != _First && _Pred(_First[-1], _Val);
    --_First)
    --_Count1;

   if (_Count1 <= _Last - _Mid)
    {
    for (;;)
     {
     if (--_Count1 == 0)
      {
      return (_First);
      }
     else if (!_Pred(*++_Mid, _Val))
      {
      break;
      }
     }
    }
   _Old_first = ++_Mid;
   _Inc = 0;
   }
  else
   {
   _Old_first = _First + 1;
   _Inc = _Count_diff - 1;
   }
  }

 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt search_n(_FwdIt _First, _FwdIt _Last, const _Diff _Count_raw, const _Ty& _Val, _Pr _Pred)
 {
 const _Algorithm_int_t<_Diff> _Count = _Count_raw;
                            ;
 return (_Rechecked(_First,
  _Search_n_unchecked(_Unchecked(_First), _Unchecked(_Last), _Count, _Val,
   _Pass_fn(_Pred), _Iter_cat_t<_FwdIt>())));
 }


template<class _FwdIt,
 class _Diff,
 class _Ty> inline
 _FwdIt search_n(_FwdIt _First, _FwdIt _Last, const _Diff _Count, const _Ty& _Val)
 {
 return (::std:: search_n(_First, _Last, _Count, _Val, equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
 auto _Count1 = ::std:: distance(_UFirst1, _ULast1);
 const auto _Count2 = ::std:: distance(_UFirst2, _ULast2);
 auto _UAns = _ULast1;

 if (0 < _Count2)
  {
  for (; _Count2 <= _Count1; ++_UFirst1, (void)--_Count1)
   {
   auto _UMid1 = _UFirst1;
   for (auto _UMid2 = _UFirst2; ; ++_UMid1)
    {
    if (!_Pred(*_UMid1, *_UMid2))
     {
     break;
     }
    else if (++_UMid2 == _ULast2)
     {
     _UAns = _UFirst1;
     break;
     }
    }
   }
  }

 return (_Rechecked(_First1, _UAns));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_end(_First1, _Last1, _First2, _Last2, equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 const auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
 for (; _UFirst1 != _ULast1; ++_UFirst1)
  {
  for (auto _UMid2 = _UFirst2; _UMid2 != _ULast2; ++_UMid2)
   {
   if (_Pred(*_UFirst1, *_UMid2))
    {
    return (_Rechecked(_First1, _UFirst1));
    }
   }
  }

 return (_Rechecked(_First1, _UFirst1));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_first_of(_First1, _Last1, _First2, _Last2, equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_Dest)
  ::std:: iter_swap(_First1, _Dest);
 return (_Dest);
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                              ;
 const auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 const auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_FwdIt1>(_UFirst1, _ULast1));
 return (_Rechecked(_Dest,
  _Swap_ranges_unchecked(_UFirst1, _ULast1, _UDest)));
 }
# 995 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Fn> inline
 _OutIt _Transform_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn _Func)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
 for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
  {
  *_UDest = _Func(*_UFirst);
  }

 return (_Rechecked(_Dest, _UDest));
 }

template<class _InIt,
 class _OutIt,
 class _Fn> inline
 _OutIt transform(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn _Func)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Transform_no_deprecate(_First, _Last, _Dest, _Pass_fn(_Func)));
 }
# 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn> inline
 _OutIt _Transform_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn _Func)
 {
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 const auto _Count = _Idl_distance<_InIt1>(_UFirst1, _ULast1);
 auto _UFirst2 = _Unchecked_n(_First2, _Count);
 auto _UDest = _Unchecked_n(_Dest, _Count);
 for (; _UFirst1 != _ULast1; ++_UFirst1, (void)++_UFirst2, ++_UDest)
  {
  *_UDest = _Func(*_UFirst1, *_UFirst2);
  }

 return (_Rechecked(_Dest, _UDest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn> inline
 _OutIt transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn _Func)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } };
 (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Transform_no_deprecate(_First1, _Last1, _First2, _Dest, _Pass_fn(_Func)));
 }
# 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _FwdIt,
 class _Ty> inline
 void replace(_FwdIt _First, _FwdIt _Last, const _Ty& _Oldval, const _Ty& _Newval)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (*_UFirst == _Oldval)
   {
   *_UFirst = _Newval;
   }
  }
 }
# 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (_Pred(*_UFirst))
   {
   *_UFirst = _Val;
   }
  }
 }
# 1170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
 for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
  {
  if (*_UFirst == _Oldval)
   {
   *_UDest = _Newval;
   }
  else
   {
   *_UDest = *_UFirst;
   }
  }
 return (_Rechecked(_Dest, _UDest));
 }
# 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
 for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
  {
  if (_Pred(*_UFirst))
   {
   *_UDest = _Val;
   }
  else
   {
   *_UDest = *_UFirst;
   }
  }

 return (_Rechecked(_Dest, _UDest));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Replace_copy_if_no_deprecate(_First, _Last, _Dest, _Pass_fn(_Pred), _Val));
 }
# 1263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _FwdIt,
 class _Fn> inline
 void generate(_FwdIt _First, _FwdIt _Last, _Fn _Func)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  *_UFirst = _Func();
  }
 }


template<class _OutIt,
 class _Diff,
 class _Fn> inline
 _OutIt generate_n(_OutIt _Dest, const _Diff _Count_raw, _Fn _Func)
 {
 _Algorithm_int_t<_Diff> _Count = _Count_raw;
 auto _UDest = _Unchecked_n(_Dest, _Count);
 for (; 0 < _Count; --_Count, (void)++_UDest)
  {
  *_UDest = _Func();
  }

 return (_Rechecked(_Dest, _UDest));
 }
# 1312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt remove_copy(_InIt _First, _InIt _Last, _OutIt _Dest, const _Ty& _Val)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UDest = _Unchecked_idl0(_Dest);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (!(*_UFirst == _Val))
   {
   *_UDest = *_UFirst;
   ++_UDest;
   }
  }

 return (_Rechecked(_Dest, _UDest));
 }
# 1349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UDest = _Unchecked_idl0(_Dest);
 for (; _UFirst != _ULast; ++_UFirst)
  {
  if (!_Pred(*_UFirst))
   {
   *_UDest = *_UFirst;
   ++_UDest;
   }
  }

 return (_Rechecked(_Dest, _UDest));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Remove_copy_if_no_deprecate(_First, _Last, _Dest, _Pass_fn(_Pred)));
 }
# 1396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _FwdIt,
 class _Ty> inline
 _FwdIt _Remove_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _First = _Find_unchecked(_First, _Last, _Val);
 _FwdIt _Next = _First;
 if (_First != _Last)
  {
  while (++_First != _Last)
   {
   if (!(*_First == _Val))
    {
    *_Next = ::std:: move(*_First);
    ++_Next;
    }
   }
  }

 return (_Next);
 }

template<class _FwdIt,
 class _Ty> inline
 _FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
                            ;
 return (_Rechecked(_First,
  _Remove_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Remove_if_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _First = _Find_if_unchecked(_First, _Last, _Pred);
 _FwdIt _Next = _First;
 if (_First != _Last)
  {
  while (++_First != _Last)
   {
   if (!_Pred(*_First))
    {
    *_Next = ::std:: move(*_First);
    ++_Next;
    }
   }
  }

 return (_Next);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Remove_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred))));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 if (_UFirst != _ULast)
  {
  for (auto _UFirstb = _UFirst; ++_UFirst != _ULast; _UFirstb = _UFirst)
   {
   if (_Pred(*_UFirstb, *_UFirst))
    {
    while (++_UFirst != _ULast)
     {
     if (!_Pred(*_UFirstb, *_UFirst))
      {
      *++_UFirstb = ::std:: move(*_UFirst);
      }
     }

    return (_Rechecked(_Last, ++_UFirstb));
    }
   }
  }

 return (_Rechecked(_Last, _ULast));
 }


template<class _FwdIt> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: unique(_First, _Last, equal_to<>()));
 }


template<class _FwdIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_unchecked(_FwdIt _First, _FwdIt _Last,
  _OutIt _Dest, _Pr _Pred, true_type, _Any_tag)
 {

 if (_First != _Last)
  {
  _FwdIt _Firstb = _First;

  *_Dest = *_Firstb;
  ++_Dest;

  while (++_First != _Last)
   {
   if (!_Pred(*_Firstb, *_First))
    {
    _Firstb = _First;
    *_Dest = *_Firstb;
    ++_Dest;
    }
   }
  }

 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Pr> inline
 _FwdIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Pr _Pred, false_type, true_type)
 {

 if (_First != _Last)
  {
  *_Dest = *_First;

  while (++_First != _Last)
   {
   if (!_Pred(*_Dest, *_First))
    {
    *++_Dest = *_First;
    }
   }

  ++_Dest;
  }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, false_type, false_type)
 {

 if (_First != _Last)
  {
  _Iter_value_t<_InIt> _Val = *_First;

  *_Dest = _Val;
  ++_Dest;

  while (++_First != _Last)
   {
   if (!_Pred(_Val, *_First))
    {
    _Val = *_First;
    *_Dest = _Val;
    ++_Dest;
    }
   }
  }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_Dest,
  _Unique_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked_idl0(_Dest), _Pred,
   is_base_of<forward_iterator_tag, _Iter_cat_t<_InIt>>(),
   _Conjunction_t<is_base_of<forward_iterator_tag, _Iter_cat_t<_OutIt>>,
    is_same<_Iter_value_t<_InIt>, _Iter_value_t<_OutIt>>>()
   )));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Unique_copy_no_deprecate(_First, _Last, _Dest, _Pass_fn(_Pred)));
 }
# 1616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt,
 class _OutIt> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
 {
 return (::std:: unique_copy(_First, _Last, _Dest, equal_to<>()));
 }
# 1634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _BidIt,
 class _OutIt> inline
 _OutIt reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                            ;
 const auto _UFirst = _Unchecked(_First);
 auto _ULast = _Unchecked(_Last);
 auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_BidIt>(_UFirst, _ULast));
 for (; _UFirst != _ULast; ++_UDest)
  {
  *_UDest = *--_ULast;
  }

 return (_Rechecked(_Dest, _UDest));
 }
# 1692 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _FwdIt,
 class _OutIt> inline
 _OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest)
 {
                           ;
                          ;
 const auto _UFirst = _Unchecked(_First);
 const auto _UMid = _Unchecked(_Mid);
 const auto _ULast = _Unchecked(_Last);
 auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_FwdIt>(_UFirst, _ULast));
 _UDest = _Copy_unchecked(_UMid, _ULast, _UDest);
 return (_Rechecked(_Dest, _Copy_unchecked(_UFirst, _UMid, _UDest)));
 }
# 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _RanIt,
 class _RngFn> inline
 void _Random_shuffle1(_RanIt _First, _RanIt _Last, _RngFn& _RngFunc)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 if (_UFirst == _ULast)
  {
  return;
  }

 using _Diff = _Iter_diff_t<_Unchecked_t<_RanIt>>;
 auto _UTarget = _UFirst;
 _Diff _Target_index = 1;
 for (; ++_UTarget != _ULast; ++_Target_index)
  {
  _Diff _Off = _RngFunc(_Target_index + static_cast<_Diff>(1));
                                                                              ;
  if (_Off != _Target_index)
   {
   ::std:: iter_swap(_UTarget, _UFirst + _Off);
   }
  }
 }

template<class _RanIt,
 class _Urng> inline
 void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
 {
 typedef remove_reference_t<_Urng> _Urng0;
 _Rng_from_urng<_Iter_diff_t<_RanIt>, _Urng0> _RngFunc(_Func);
 _Random_shuffle1(_First, _Last, _RngFunc);
 }



template<class _RanIt,
 class _RngFn> inline
 void random_shuffle(_RanIt _First, _RanIt _Last, _RngFn&& _RngFunc)
 {
 _Random_shuffle1(_First, _Last, _RngFunc);
 }


struct _Rand_urng_from_func
 {
 typedef unsigned int result_type;

 static result_type (min)()
  {
  return (0);
  }

 static result_type (max)()
  {
  return (0x7fff);
  }

 result_type operator()()
  {
  return (:: rand());
  }
 };


template<class _RanIt> inline
 void random_shuffle(_RanIt _First, _RanIt _Last)
 {
 _Rand_urng_from_func _Func;
 ::std:: shuffle(_First, _Last, _Func);
 }



template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Partition_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
  forward_iterator_tag)
 {
 for (;;)
  {
  if (_First == _Last)
   {
   return (_First);
   }

  if (!_Pred(*_First))
   {
   break;
   }

  ++_First;
  }

 for (_FwdIt _Next = _First; ++_Next != _Last; )
  {
  if (_Pred(*_Next))
   {
   ::std:: iter_swap(_First, _Next);
   ++_First;
   }
  }

 return (_First);
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt _Partition_unchecked(_BidIt _First, _BidIt _Last, _Pr _Pred,
  bidirectional_iterator_tag)
 {
 for (;;)
  {
  for (;;)
   {
   if (_First == _Last)
    {
    return (_First);
    }

   if (!_Pred(*_First))
    {
    break;
    }

   ++_First;
   }

  do
   {
   --_Last;
   if (_First == _Last)
    {
    return (_First);
    }
   }
  while (!_Pred(*_Last));

  ::std:: iter_swap(_First, _Last);
  ++_First;
  }
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Partition_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred),
   _Iter_cat_t<_FwdIt>())));
 }


template<class _BidIt,
 class _Diff,
 class _Ty> inline
 _BidIt _Buffered_rotate_unchecked(const _BidIt _First, const _BidIt _Mid, const _BidIt _Last,
  const _Diff _Count1, const _Diff _Count2, _Temporary_buffer<_Ty>& _Temp_buf)
 {


 if (_Count1 == 0)
  {
  return (_Last);
  }

 if (_Count2 == 0)
  {
  return (_First);
  }

 if (_Count1 <= _Count2 && _Count1 <= _Temp_buf._Capacity)
  {
  _Temporary_range<_Ty> _Temp(_Temp_buf, _First, _Mid, _Count1);
  const _BidIt _New_mid = _Move_unchecked(_Mid, _Last, _First);
  _Move_unchecked(_Temp._Begin(), _Temp._End(), _New_mid);
  return (_New_mid);
  }

 if (_Count2 <= _Temp_buf._Capacity)
  {
  _Temporary_range<_Ty> _Temp(_Temp_buf, _Mid, _Last, _Count2);
  _Move_backward_unchecked(_First, _Mid, _Last);
  return (_Move_unchecked(_Temp._Begin(), _Temp._End(), _First));
  }


 return (_Rotate_unchecked(_First, _Mid, _Last));
 }

template<class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty> inline
 pair<_BidIt, _Diff> _Stable_partition_unchecked1(_BidIt _First, _BidIt _Last, _Pr _Pred,
  const _Diff _Count, _Temporary_buffer<_Ty>& _Temp_buf)
 {





 if (_Count - static_cast<_Diff>(1) <= _Temp_buf._Capacity)
  {
  _Temporary_range<_Ty> _Temp{_Temp_buf};
  _BidIt _Next = _First;
  _Temp.push_back(::std:: move(*_First));
  while (++_First != _Last)
   {

   if (_Pred(*_First))
    {
    *_Next = ::std:: move(*_First);
    ++_Next;
    }
   else
    {
    _Temp.push_back(::std:: move(*_First));
    }
   }


  *_Next = ::std:: move(*_Last);
  ++_Next;
  _Move_unchecked(_Temp._Begin(), _Temp._End(), _Next);
  return (pair<_BidIt, _Diff>(_Next, _Count - static_cast<_Diff>(_Temp._Size)));
  }

 const _Diff _Mid_offset = _Count / static_cast<_Diff>(2);
 const _BidIt _Mid = ::std:: next(_First, _Mid_offset);


 _BidIt _Left = _Mid;
 _Diff _Left_true_count = _Mid_offset;
 for (;;)
  {
  --_Left;
  if (_First == _Left)
   {
   --_Left_true_count;
   break;
   }

  if (_Pred(*_Left))
   {
   const pair<_BidIt, _Diff> _Low =
    _Stable_partition_unchecked1(_First, _Left, _Pred, _Left_true_count, _Temp_buf);
   _Left = _Low.first;
   _Left_true_count = _Low.second;
   break;
   }

  --_Left_true_count;
  }


 _BidIt _Right = _Mid;
 _Diff _Right_true_count = 0;
 for (;;)
  {
  if (_Right == _Last)
   {
   ++_Right;
   ++_Right_true_count;
   break;
   }

  if (!_Pred(*_Right))
   {
   const _Diff _Right_count = _Count - _Mid_offset;
   const _Diff _Remaining = _Right_count - _Right_true_count;
   const pair<_BidIt, _Diff> _High =
    _Stable_partition_unchecked1(_Right, _Last, _Pred, _Remaining, _Temp_buf);
   _Right = _High.first;
   _Right_true_count += _High.second;
   break;
   }

  ++_Right;
  ++_Right_true_count;
  }


 const _BidIt _Partition_point = _Buffered_rotate_unchecked(_Left, _Mid, _Right,
  _Mid_offset - _Left_true_count, _Right_true_count, _Temp_buf);
 return (pair<_BidIt, _Diff>(_Partition_point, _Left_true_count + _Right_true_count));
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt _Stable_partition_unchecked(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 for (;;)
  {
  if (_First == _Last)
   {
   return (_First);
   }

  if (!_Pred(*_First))
   {
   break;
   }

  ++_First;
  }

 for (;;)
  {
  --_Last;
  if (_First == _Last)
   {
   return (_First);
   }

  if (_Pred(*_Last))
   {
   break;
   }
  }

 using _Diff = _Iter_diff_t<_BidIt>;
 const _Diff _Temp_count = ::std:: distance(_First, _Last);
 const _Diff _Total_count = _Temp_count + static_cast<_Diff>(1);
 _Temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{_Temp_count};
 return (_Stable_partition_unchecked1(_First, _Last, _Pred, _Total_count, _Temp_buf).first);
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Stable_partition_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred))));
 }


template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Push_heap_by_index(_RanIt _First, _Diff _Hole,
  _Diff _Top, _Ty&& _Val, _Pr _Pred)
 {
 for (_Diff _Idx = (_Hole - 1) >> 1;
  _Top < _Hole && _Pred(*(_First + _Idx), _Val);
  _Idx = (_Hole - 1) >> 1)
  {
  *(_First + _Hole) = ::std:: move(*(_First + _Idx));
  _Hole = _Idx;
  }

 *(_First + _Hole) = ::std:: move(_Val);
 }

template<class _RanIt,
 class _Pr> inline
 void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 const auto _UFirst = _Unchecked(_First);
 auto _ULast = _Unchecked(_Last);
 using _URanIt = _Unchecked_t<_RanIt>;
 using _Diff = _Iter_diff_t<_URanIt>;
 _Diff _Count = _ULast - _UFirst;
 if (2 <= _Count)
  {
  _Iter_value_t<_URanIt> _Val = ::std:: move(*--_ULast);
  _Push_heap_by_index(_UFirst, --_Count, _Diff(0), ::std:: move(_Val), _Pass_fn(_Pred));
  }
 }


template<class _RanIt> inline
 void push_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: push_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Pop_heap_hole_by_index(_RanIt _First, _Diff _Hole, _Diff _Bottom,
  _Ty&& _Val, _Pr _Pred)
 {

 const _Diff _Top = _Hole;
 _Diff _Idx = _Hole;



 const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1;
 while (_Idx < _Max_sequence_non_leaf)
  {
  _Idx = 2 * _Idx + 2;
  if (_Pred(*(_First + _Idx), *(_First + (_Idx - 1))))
   --_Idx;
  *(_First + _Hole) = ::std:: move(*(_First + _Idx));
  _Hole = _Idx;
  }

 if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0)
  {
  *(_First + _Hole) = ::std:: move(*(_First + (_Bottom - 1)));
  _Hole = _Bottom - 1;
  }

 _Push_heap_by_index(_First, _Hole, _Top, ::std:: move(_Val), _Pred);
 }

template<class _RanIt,
 class _Ty,
 class _Pr> inline
 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest,
  _Ty&& _Val, _Pr _Pred)
 {


 *_Dest = ::std:: move(*_First);
 _Pop_heap_hole_by_index(_First, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Last - _First),
  ::std:: move(_Val), _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 if (2 <= _Last - _First)
  {
  --_Last;
  _Iter_value_t<_RanIt> _Val = ::std:: move(*_Last);
  _Pop_heap_hole_unchecked(_First, _Last, _Last, ::std:: move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 _Pop_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred));
 }


template<class _RanIt> inline
 void pop_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: pop_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Iter_diff_t<_RanIt> _Bottom = _Last - _First;
 for (_Iter_diff_t<_RanIt> _Hole = _Bottom >> 1; 0 < _Hole; )
  {
  --_Hole;
  _Iter_value_t<_RanIt> _Val = ::std:: move(*(_First + _Hole));
  _Pop_heap_hole_by_index(_First, _Hole, _Bottom, ::std:: move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 _Make_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred));
 }


template<class _RanIt> inline
 void make_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: make_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 _RanIt _Is_heap_until_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 const _Iter_diff_t<_RanIt> _Size = _Last - _First;
 for (_Iter_diff_t<_RanIt> _Off = 1; _Off < _Size; ++_Off)
  {
  if (_Pred(_First[(_Off - 1) >> 1], _First[_Off]))
   {
   return (_First + _Off);
   }
  }

 return (_Last);
 }

template<class _RanIt,
 class _Pr> inline
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Is_heap_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred))));
 }

template<class _RanIt,
 class _Pr> inline
 bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 return (_Is_heap_until_unchecked(_UFirst, _ULast, _Pass_fn(_Pred)) == _ULast);
 }


template<class _RanIt> inline
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap_until(_First, _Last, less<>()));
 }

template<class _RanIt> inline
 bool is_heap(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap(_First, _Last, less<>()));
 }


template<class _RanIt,
 class _Pr> inline
 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 for (; 2 <= _Last - _First; --_Last)
  {
  _Pop_heap_unchecked(_First, _Last, _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);







 _Sort_heap_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
 }


template<class _RanIt> inline
 void sort_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort_heap(_First, _Last, less<>());
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt _Lower_bound_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count >> 1;
  const auto _Mid = ::std:: next(_First, _Count2);
  if (_Pred(*_Mid, _Val))
   {
   _First = _Next_iter(_Mid);
   _Count -= _Count2 + 1;
   }
  else
   {
   _Count = _Count2;
   }
  }

 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Lower_bound_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pass_fn(_Pred))));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: lower_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt _Upper_bound_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count >> 1;
  const auto _Mid = ::std:: next(_First, _Count2);
  if (_Pred(_Val, *_Mid))
   {
   _Count = _Count2;
   }
  else
   {
   _First = _Next_iter(_Mid);
   _Count -= _Count2 + 1;
   }
  }

 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Upper_bound_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pass_fn(_Pred))));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: upper_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);

 using _UFwdIt = _Unchecked_t<_FwdIt>;
 using _Diff = _Iter_diff_t<_UFwdIt>;
 _Diff _Count = ::std:: distance(_UFirst, _ULast);

 while (0 < _Count)
  {
  _Diff _Count2 = _Count >> 1;
  const auto _UMid = ::std:: next(_UFirst, _Count2);
  if (_Pred(*_UMid, _Val))
   {
   _UFirst = _Next_iter(_UMid);
   _Count -= _Count2 + 1;
   }
  else if (_Pred(_Val, *_UMid))
   {
   _Count = _Count2;
   }
  else
   {
   auto _UFirst2 = _Lower_bound_unchecked(_UFirst, _UMid, _Val, _Pass_fn(_Pred));
   ::std:: advance(_UFirst, _Count);
   auto _ULast2 = _Upper_bound_unchecked(_Next_iter(_UMid), _UFirst, _Val, _Pass_fn(_Pred));
   return {_Rechecked(_First, _UFirst2), _Rechecked(_Last, _ULast2)};
   }
  }

 return {_Rechecked(_First, _UFirst), _Rechecked(_Last, _UFirst)};
 }


template<class _FwdIt,
 class _Ty> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val)
 {
 return (::std:: equal_range(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 _UFirst = _Lower_bound_unchecked(_UFirst, _ULast, _Val, _Pass_fn(_Pred));
 return (_UFirst != _ULast && !_Pred(_Val, *_UFirst));
 }


template<class _FwdIt,
 class _Ty> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: binary_search(_First, _Last, _Val, less<>()));
 }


inline _Distance_unknown _Idl_dist_add(_Distance_unknown, _Distance_unknown)
 {
 return {};
 }

template<class _Diff1> inline
 _Distance_unknown _Idl_dist_add(_Diff1, _Distance_unknown)
 {
 return {};
 }

template<class _Diff2> inline
 _Distance_unknown _Idl_dist_add(_Distance_unknown, _Diff2)
 {
 return {};
 }

template<class _Diff1,
 class _Diff2> inline
 auto _Idl_dist_add(_Diff1 _Lhs, _Diff2 _Rhs)
 {
 return (_Lhs + _Rhs);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
                                                 ;
                                                 ;
 const auto _Count1 = _Idl_distance<_InIt1>(_UFirst1, _ULast1);
 const auto _Count2 = _Idl_distance<_InIt2>(_UFirst2, _ULast2);
 auto _UDest = _Unchecked_n(_Dest, _Idl_dist_add(_Count1, _Count2));
 if (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
  {
  for (;;)
   {
   if (_Pred(*_UFirst2, *_UFirst1))
    {
    *_UDest = *_UFirst2;
    ++_UDest;
    ++_UFirst2;

    if (_UFirst2 == _ULast2)
     {
     break;
     }
    }
   else
    {
    *_UDest = *_UFirst1;
    ++_UDest;
    ++_UFirst1;

    if (_UFirst1 == _ULast1)
     {
     break;
     }
    }
   }
  }

 _UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);
 return (_Rechecked(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Merge_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
 }
# 2675 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
 }
# 2707 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _BidIt> inline
 void _Rotate_one_right(_BidIt _First, _BidIt _Mid, _BidIt _Last)
 {

 _Iter_value_t<_BidIt> _Temp(::std:: move(*_Mid));
 _Move_backward_unchecked(_First, _Mid, _Last);
 *_First = ::std:: move(_Temp);
 }

template<class _BidIt> inline
 void _Rotate_one_left(_BidIt _First, _BidIt _Mid, _BidIt _Last)
 {

 _Iter_value_t<_BidIt> _Temp(::std:: move(*_First));
 *_Move_unchecked(_Mid, _Last, _First) = ::std:: move(_Temp);
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Inplace_merge_buffer_left(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred)
 {

 _Temporary_range<_Ty> _Temp(_Temp_buf, _First, _Mid, _Count1);
 _Ty * _Left_first = _Temp._Begin();
 _Ty * const _Left_last = _Temp._End() - 1;
 *_First = ::std:: move(*_Mid);
 ++_First;
 ++_Mid;
 for (;;)
  {
  if (_Pred(*_Mid, *_Left_first))
   {
   *_First = ::std:: move(*_Mid);
   ++_First;
   ++_Mid;
   if (_Mid == _Last)
    {
    _Move_unchecked(_Left_first, _Temp._End(), _First);
    return;
    }
   }
  else
   {
   *_First = ::std:: move(*_Left_first);
   ++_First;
   ++_Left_first;
   if (_Left_first == _Left_last)
    {
    *_Move_unchecked(_Mid, _Last, _First) = ::std:: move(*_Left_last);
    return;
    }
   }
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Inplace_merge_buffer_right(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count2, _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred)
 {

 _Temporary_range<_Ty> _Temp(_Temp_buf, _Mid, _Last, _Count2);
 *--_Last = ::std:: move(*--_Mid);
 _Ty * const _Right_first = _Temp._Begin();
 _Ty * _Right_last = _Temp._End() - 1;
 --_Mid;
 for (;;)
  {
  if (_Pred(*_Right_last, *_Mid))
   {
   *--_Last = ::std:: move(*_Mid);
   if (_First == _Mid)
    {
    *--_Last = ::std:: move(*_Right_last);
    _Move_backward_unchecked(_Right_first, _Right_last, _Last);
    return;
    }

   --_Mid;
   }
  else
   {
   *--_Last = ::std:: move(*_Right_last);
   --_Right_last;
   if (_Right_first == _Right_last)
    {
    *--_Last = ::std:: move(*_Mid);
    _Move_backward_unchecked(_First, _Mid, _Last);
    *_First = ::std:: move(*_Right_first);
    return;
    }
   }
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred);

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_inplace_merge_divide_and_conquer2(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred,
  _BidIt _Firstn, _BidIt _Lastn, _Diff _Count1n, _Diff _Count2n)
 {
 _BidIt _Midn = _Buffered_rotate_unchecked(_Firstn, _Mid, _Lastn,
  _Count1 - _Count1n, _Count2n, _Temp_buf);
 _Buffered_inplace_merge_unchecked(_First, _Firstn, _Midn,
  _Count1n, _Count2n, _Temp_buf, _Pred);
 _Buffered_inplace_merge_unchecked(_Midn, _Lastn, _Last,
  _Count1 - _Count1n, _Count2 - _Count2n, _Temp_buf, _Pred);
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_inplace_merge_divide_and_conquer(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred)
 {

 if (_Count1 <= _Count2)
  {
  const _Diff _Count1n = _Count1 >> 1;
  const _BidIt _Firstn = ::std:: next(_First, _Count1n);
  const _BidIt _Lastn = _Lower_bound_unchecked(_Mid, _Last, *_Firstn, _Pred);
  _Buffered_inplace_merge_divide_and_conquer2(_First, _Mid, _Last, _Count1, _Count2,
   _Temp_buf, _Pred,
   _Firstn, _Lastn, _Count1n, ::std:: distance(_Mid, _Lastn));
  }
 else
  {
  const _Diff _Count2n = _Count2 >> 1;
  const _BidIt _Lastn = ::std:: next(_Mid, _Count2n);
  const _BidIt _Firstn = _Upper_bound_unchecked(_First, _Mid, *_Lastn, _Pred);
  _Buffered_inplace_merge_divide_and_conquer2(_First, _Mid, _Last, _Count1, _Count2,
   _Temp_buf, _Pred,
   _Firstn, _Lastn, ::std:: distance(_First, _Firstn), _Count2n);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_inplace_merge_unchecked_impl(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred)
 {

 if (_Count1 <= _Count2 && _Count1 <= _Temp_buf._Capacity)
  {
  _Inplace_merge_buffer_left(_First, _Mid, _Last, _Count1, _Temp_buf, _Pred);
  }
 else if (_Count2 <= _Temp_buf._Capacity)
  {
  _Inplace_merge_buffer_right(_First, _Mid, _Last, _Count2, _Temp_buf, _Pred);
  }
 else
  {
  _Buffered_inplace_merge_divide_and_conquer(_First, _Mid, _Last, _Count1, _Count2, _Temp_buf, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred)
 {


 if (_Mid == _Last)
  {
  return;
  }

 for (;;)
  {
  if (_First == _Mid)
   {
   return;
   }

  if (_Pred(*_Mid, *_First))
   {
   break;
   }

  ++_First;
  --_Count1;
  }

 const auto _Highest = _Prev_iter(_Mid);
 do
  {
  --_Last;
  --_Count2;
  if (_Mid == _Last)
   {
   _Rotate_one_right(_First, _Mid, ++_Last);
   return;
   }
  }
 while (!_Pred(*_Last, *_Highest));

 ++_Last;
 ++_Count2;

 if (_Count1 == 1)
  {
  _Rotate_one_left(_First, _Mid, _Last);
  return;
  }

 _Buffered_inplace_merge_unchecked_impl(_First, _Mid, _Last, _Count1, _Count2, _Temp_buf, _Pred);
 }

template<class _BidIt,
 class _Pr> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
 {
                           ;
                          ;
 using _UBidIt = _Unchecked_t<_BidIt>;
 auto _UFirst = _Unchecked(_First);
 auto _UMid = _Unchecked(_Mid);
 auto _ULast = _Unchecked(_Last);
                                              ;


 if (_UMid == _ULast)
  {
  return;
  }

 for (;;)
  {
  if (_UFirst == _UMid)
   {
   return;
   }

  if (_Pred(*_UMid, *_UFirst))
   {
   break;
   }

  ++_UFirst;
  }

 const auto _Highest = _Prev_iter(_UMid);
 do
  {
  --_ULast;
  if (_UMid == _ULast)
   {
   _Rotate_one_right(_UFirst, _UMid, ++_ULast);
   return;
   }
  }
 while (!_Pred(*_ULast, *_Highest));

 ++_ULast;

 const _Iter_diff_t<_UBidIt> _Count1 = ::std:: distance(_UFirst, _UMid);
 if (_Count1 == 1)
  {
  _Rotate_one_left(_UFirst, _UMid, _ULast);
  return;
  }

 const _Iter_diff_t<_UBidIt> _Count2 = ::std:: distance(_UMid, _ULast);
 _Temporary_buffer<_Iter_value_t<_UBidIt>> _Temp_buf{_Min_value(_Count1, _Count2)};
 _Buffered_inplace_merge_unchecked_impl(_UFirst, _UMid, _ULast,
  _Count1, _Count2, _Temp_buf, _Pass_fn(_Pred));
 }


template<class _BidIt> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
 {
 ::std:: inplace_merge(_First, _Mid, _Last, less<>());
 }


template<class _BidIt,
 class _Pr> inline
 void _Insertion_sort_unchecked(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  {
  for (_BidIt _Next = _First; ++_Next != _Last; )
   {
   _BidIt _Next1 = _Next;
   _Iter_value_t<_BidIt> _Val = ::std:: move(*_Next);

   if (_Pred(_Val, *_First))
    {
    _Move_backward_unchecked(_First, _Next, ++_Next1);
    *_First = ::std:: move(_Val);
    }
   else
    {
    for (_BidIt _First1 = _Next1;
     _Pred(_Val, *--_First1);
     _Next1 = _First1)
     {
     *_Next1 = ::std:: move(*_First1);
     }

    *_Next1 = ::std:: move(_Val);
    }
   }
  }
 }

template<class _RanIt,
 class _Pr> inline
 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 if (_Pred(*_Mid, *_First))
  {
  ::std:: iter_swap(_Mid, _First);
  }

 if (_Pred(*_Last, *_Mid))
  {
  ::std:: iter_swap(_Last, _Mid);

  if (_Pred(*_Mid, *_First))
   {
   ::std:: iter_swap(_Mid, _First);
   }
  }
 }

template<class _RanIt,
 class _Pr> inline
 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 if (40 < _Last - _First)
  {
  size_t _Step = (_Last - _First + 1) / 8;
  _Med3_unchecked(_First, _First + _Step, _First + 2 * _Step, _Pred);
  _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
  _Med3_unchecked(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
  _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
  }
 else
  {
  _Med3_unchecked(_First, _Mid, _Last, _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 pair<_RanIt, _RanIt>
  _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _RanIt _Mid = _First + ((_Last - _First) >> 1);
 _Guess_median_unchecked(_First, _Mid, _Last - 1, _Pred);
 _RanIt _Pfirst = _Mid;
 _RanIt _Plast = _Pfirst + 1;

 while (_First < _Pfirst
  && !_Pred(*(_Pfirst - 1), *_Pfirst)
  && !_Pred(*_Pfirst, *(_Pfirst - 1)))
  {
  --_Pfirst;
  }

 while (_Plast < _Last
  && !_Pred(*_Plast, *_Pfirst)
  && !_Pred(*_Pfirst, *_Plast))
  {
  ++_Plast;
  }

 _RanIt _Gfirst = _Plast;
 _RanIt _Glast = _Pfirst;

 for (;;)
  {
  for (; _Gfirst < _Last; ++_Gfirst)
   {
   if (_Pred(*_Pfirst, *_Gfirst))
    {
    }
   else if (_Pred(*_Gfirst, *_Pfirst))
    {
    break;
    }
   else if (_Plast != _Gfirst)
    {
    ::std:: iter_swap(_Plast, _Gfirst);
    ++_Plast;
    }
   else
    {
    ++_Plast;
    }
   }

  for (; _First < _Glast; --_Glast)
   {
   if (_Pred(*(_Glast - 1), *_Pfirst))
    {
    }
   else if (_Pred(*_Pfirst, *(_Glast - 1)))
    {
    break;
    }
   else if (--_Pfirst != _Glast - 1)
    {
    ::std:: iter_swap(_Pfirst, _Glast - 1);
    }
   }

  if (_Glast == _First && _Gfirst == _Last)
   {
   return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));
   }

  if (_Glast == _First)
   {
   if (_Plast != _Gfirst)
    {
    ::std:: iter_swap(_Pfirst, _Plast);
    }

   ++_Plast;
   ::std:: iter_swap(_Pfirst, _Gfirst);
   ++_Pfirst;
   ++_Gfirst;
   }
  else if (_Gfirst == _Last)
   {
   if (--_Glast != --_Pfirst)
    {
    ::std:: iter_swap(_Glast, _Pfirst);
    }

   ::std:: iter_swap(_Pfirst, --_Plast);
   }
  else
   {
   ::std:: iter_swap(_Gfirst, --_Glast);
   ++_Gfirst;
   }
  }
 }

template<class _RanIt,
 class _Diff,
 class _Pr> inline
 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr _Pred)
 {
 _Diff _Count;
 while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal)
  {
  auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  _Ideal = (_Ideal >> 1) + (_Ideal >> 2);

  if (_Mid.first - _First < _Last - _Mid.second)
   {
   _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);
   _First = _Mid.second;
   }
  else
   {
   _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);
   _Last = _Mid.first;
   }
  }

 if (_ISORT_MAX < _Count)
  {
  _Make_heap_unchecked(_First, _Last, _Pred);
  _Sort_heap_unchecked(_First, _Last, _Pred);
  }
 else if (2 <= _Count)
  {
  _Insertion_sort_unchecked(_First, _Last, _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));
 }

template<class _RanIt> inline
 void sort(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort(_First, _Last, less<>());
 }
# 3235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Buffered_merge_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  {
  for (;;)
   {
   if (_Pred(*_First2, *_First1))
    {
    *_Dest = ::std:: move(*_First2);
    ++_Dest;
    ++_First2;

    if (_First2 == _Last2)
     {
     break;
     }
    }
   else
    {
    *_Dest = ::std:: move(*_First1);
    ++_Dest;
    ++_First1;

    if (_First1 == _Last1)
     {
     break;
     }
    }
   }
  }

 _Dest = _Move_unchecked(_First1, _Last1, _Dest);
 return (_Move_unchecked(_First2, _Last2, _Dest));
 }

template<class _BidIt,
 class _OutIt,
 class _Diff,
 class _Pr> inline
 void _Chunked_merge_unchecked(_BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred)
 {
 for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
  {
  const _BidIt _Mid1 = ::std:: next(_First, _Chunk);
  const _BidIt _Mid2 = ::std:: next(_Mid1, _Chunk);
  _Dest = _Buffered_merge_unchecked(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
  _First = _Mid2;
  }

 if (_Count <= _Chunk)
  {
  _Move_unchecked(_First, _Last, _Dest);
  }
 else
  {
  const _BidIt _Mid1 = ::std:: next(_First, _Chunk);
  _Buffered_merge_unchecked(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge_sort_unchecked(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred)
 {
 const auto _Diffsort_max = static_cast<_Diff>(_ISORT_MAX);
 _BidIt _Mid = _First;
 for (_Diff _Nleft = _Count; _Diffsort_max <= _Nleft; _Nleft -= _Diffsort_max)
  {
  const _BidIt _Midn = ::std:: next(_Mid, _Diffsort_max);
  _Insertion_sort_unchecked(_Mid, _Midn, _Pred);
  _Mid = _Midn;
  }
 _Insertion_sort_unchecked(_Mid, _Last, _Pred);

 for (_Diff _Chunk = _Diffsort_max; _Chunk < _Count; _Chunk *= 2)
  {
  _Temporary_range<_Ty> _Temp{_Temp_buf};
  _Chunked_merge_unchecked(_First, _Last, ::std:: back_inserter(_Temp),
   _Chunk, _Count, _Pred);
  _Chunked_merge_unchecked(_Temp._Begin(), _Temp._End(), _First,
   _Chunk *= 2, _Count, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Stable_sort_unchecked(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temporary_buffer<_Ty>& _Temp_buf, _Pr _Pred)
 {
 if (_Count <= _ISORT_MAX)
  {
  _Insertion_sort_unchecked(_First, _Last, _Pred);
  }
 else
  {
  _Diff _Count2 = (_Count + 1) >> 1;
  const _BidIt _Mid = ::std:: next(_First, _Count2);
  if (_Count2 <= _Temp_buf._Capacity)
   {
   _Buffered_merge_sort_unchecked(_First, _Mid, _Count2, _Temp_buf, _Pred);
   _Buffered_merge_sort_unchecked(_Mid, _Last, _Count - _Count2,
    _Temp_buf, _Pred);
   }
  else
   {
   _Stable_sort_unchecked(_First, _Mid, _Count2, _Temp_buf, _Pred);
   _Stable_sort_unchecked(_Mid, _Last, _Count - _Count2, _Temp_buf, _Pred);
   }

  _Buffered_inplace_merge_unchecked(_First, _Mid, _Last,
   _Count2, _Count - _Count2, _Temp_buf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
                            ;
 using _UBidIt = _Unchecked_t<_BidIt>;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 _Iter_diff_t<_UBidIt> _Count = ::std:: distance(_UFirst, _ULast);
 if (_Count == 0)
  {
  return;
  }

 if (_Count <= _ISORT_MAX)
  {
  _Insertion_sort_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
  }
 else
  {
  _Temporary_buffer<_Iter_value_t<_UBidIt>> _Temp_buf{(_Count + 1) >> 1};
  _Stable_sort_unchecked(_UFirst, _ULast, _Count, _Temp_buf, _Pass_fn(_Pred));
  }
 }


template<class _BidIt> inline
 void stable_sort(_BidIt _First, _BidIt _Last)
 {
 ::std:: stable_sort(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
                           ;
                          ;
 auto _UFirst = _Unchecked(_First);
 const auto _UMid = _Unchecked(_Mid);
 const auto _ULast = _Unchecked(_Last);

 if (_UFirst == _UMid)
  {
  return;
  }

 _Make_heap_unchecked(_UFirst, _UMid, _Pass_fn(_Pred));
 for (auto _UNext = _UMid; _UNext < _ULast; ++_UNext)
  {
  if (_Pred(*_UNext, *_UFirst))
   {
   _Iter_value_t<_Unchecked_t<_RanIt>> _Val = ::std:: move(*_UNext);
   _Pop_heap_hole_unchecked(_UFirst, _UMid, _UNext, ::std:: move(_Val), _Pass_fn(_Pred));
   }
  }

 _Sort_heap_unchecked(_UFirst, _UMid, _Pass_fn(_Pred));
 }


template<class _RanIt> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
 {
 ::std:: partial_sort(_First, _Mid, _Last, less<>());
 }


template<class _InIt,
 class _RanIt,
 class _Pr> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred)
 {
                              ;
                              ;
 using _URanIt = _Unchecked_t<_RanIt>;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
 auto _UMid2 = _UFirst2;
 if (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
  {
  for (; _UFirst1 != _ULast1 && _UMid2 != _ULast2; ++_UFirst1, (void)++_UMid2)
   {
   *_UMid2 = *_UFirst1;
   }

  _Make_heap_unchecked(_UFirst2, _UMid2, _Pass_fn(_Pred));
  for (; _UFirst1 != _ULast1; ++_UFirst1)
   {
   if (_Pred(*_UFirst1, *_UFirst2))
    {

    _Pop_heap_hole_by_index(_UFirst2, static_cast<_Iter_diff_t<_URanIt>>(0),
     static_cast<_Iter_diff_t<_URanIt>>(_UMid2 - _UFirst2),
     static_cast<_Iter_value_t<_Unchecked_t<_InIt>>>(*_UFirst1), _Pass_fn(_Pred));
    }
   }

  _Sort_heap_unchecked(_UFirst2, _UMid2, _Pass_fn(_Pred));
  }

 return (_Rechecked(_First2, _UMid2));
 }


template<class _InIt,
 class _RanIt> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2)
 {
 return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2, less<>()));
 }


template<class _RanIt,
 class _Pr> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
 {
                           ;
                          ;
 auto _UFirst = _Unchecked(_First);
 const auto _UNth = _Unchecked(_Nth);
 auto _ULast = _Unchecked(_Last);
 if (_UNth == _ULast)
  {
  return;
  }

 while (_ISORT_MAX < _ULast - _UFirst)
  {
  auto _UMid = _Partition_by_median_guess_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));

  if (_UMid.second <= _UNth)
   {
   _UFirst = _UMid.second;
   }
  else if (_UMid.first <= _UNth)
   {
   return;
   }
  else
   {
   _ULast = _UMid.first;
   }
  }

 _Insertion_sort_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
 }


template<class _RanIt> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
 {
 ::std:: nth_element(_First, _Nth, _Last, less<>());
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
                                                 ;
                                                 ;
 for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UFirst1)
  {
  if (_Pred(*_UFirst2, *_UFirst1))
   {
   return (false);
   }

  if (!_Pred(*_UFirst1, *_UFirst2))
   {
   ++_UFirst2;
   }
  }

 return (_UFirst2 == _ULast2);
 }


template<class _InIt1,
 class _InIt2> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: includes(_First1, _Last1, _First2, _Last2, less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
                                                 ;
                                                 ;
 auto _UDest = _Unchecked_idl0(_Dest);
 for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UDest)
  {
  if (_Pred(*_UFirst1, *_UFirst2))
   {
   *_UDest = *_UFirst1;
   ++_UFirst1;
   }
  else if (_Pred(*_UFirst2, *_UFirst1))
   {
   *_UDest = *_UFirst2;
   ++_UFirst2;
   }
  else
   {
   *_UDest = *_UFirst1;
   ++_UFirst1;
   ++_UFirst2;
   }
  }

 _UDest = _Copy_no_deprecate(_UFirst1, _ULast1, _UDest);
 return (_Rechecked(_Dest, _Copy_no_deprecate(_UFirst2, _ULast2, _UDest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_union_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
 }
# 3629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
 }
# 3651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
                                                 ;
                                                 ;
 auto _UDest = _Unchecked_idl0(_Dest);
 while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
  {
  if (_Pred(*_UFirst1, *_UFirst2))
   {
   ++_UFirst1;
   }
  else if (_Pred(*_UFirst2, *_UFirst1))
   {
   ++_UFirst2;
   }
  else
   {
   *_UDest = *_UFirst1;
   ++_UDest;
   ++_UFirst1;
   ++_UFirst2;
   }
  }

 return (_Rechecked(_Dest, _UDest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_intersection_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
 }
# 3717 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
 }
# 3739 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
                                                 ;
                                                 ;
 auto _UDest = _Unchecked_idl0(_Dest);
 while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
  {
  if (_Pred(*_UFirst1, *_UFirst2))
   {
   *_UDest = *_UFirst1;
   ++_UDest;
   ++_UFirst1;
   }
  else
   {
   if (!_Pred(*_UFirst2, *_UFirst1))
    {
    ++_UFirst1;
    }

   ++_UFirst2;
   }
  }

 return (_Rechecked(_Dest, _Copy_no_deprecate(_UFirst1, _ULast1, _UDest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_difference_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
 }
# 3808 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
 }
# 3832 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
                              ;
                              ;
 auto _UFirst1 = _Unchecked(_First1);
 const auto _ULast1 = _Unchecked(_Last1);
 auto _UFirst2 = _Unchecked(_First2);
 const auto _ULast2 = _Unchecked(_Last2);
                                                 ;
                                                 ;
 auto _UDest = _Unchecked_idl0(_Dest);
 while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
  {
  if (_Pred(*_UFirst1, *_UFirst2))
   {
   *_UDest = *_UFirst1;
   ++_UDest;
   ++_UFirst1;
   }
  else if (_Pred(*_UFirst2, *_UFirst1))
   {
   *_UDest = *_UFirst2;
   ++_UDest;
   ++_UFirst2;
   }
  else
   {
   ++_UFirst1;
   ++_UFirst2;
   }
  }

 _UDest = _Copy_no_deprecate(_UFirst1, _ULast1, _UDest);
 return (_Rechecked(_Dest, _Copy_no_deprecate(_UFirst2, _ULast2, _UDest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_symmetric_difference_no_deprecate(
  _First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
 }
# 3905 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
 }
# 3929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
template<class _FwdIt,
 class _Pr>
 constexpr _FwdIt _Max_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  {
  while (++_First != _Last)
   {
   if (_Pred(*_Found, *_First))
    {
    _Found = _First;
    }
   }
  }

 return (_Found);
 }

template<class _FwdIt,
 class _Pr>
 constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Max_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred))));
 }


template<class _FwdIt>
 constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: max_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr>
 constexpr _FwdIt _Min_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  {
  while (++_First != _Last)
   {
   if (_Pred(*_First, *_Found))
    {
    _Found = _First;
    }
   }
  }

 return (_Found);
 }

template<class _FwdIt,
 class _Pr>
 constexpr _FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Min_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred))));
 }


template<class _FwdIt>
 constexpr _FwdIt min_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: min_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr>
 constexpr pair<_FwdIt, _FwdIt> _Minmax_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 pair<_FwdIt, _FwdIt> _Found(_First, _First);

 if (_First != _Last)
  {
  while (++_First != _Last)
   {
   _FwdIt _Next = _First;
   if (++_Next == _Last)
    {
    if (_Pred(*_First, *_Found.first))
     {
     _Found.first = _First;
     }
    else if (!_Pred(*_First, *_Found.second))
     {
     _Found.second = _First;
     }
    }
   else
    {
    if (_Pred(*_Next, *_First))
     {
     if (_Pred(*_Next, *_Found.first))
      {
      _Found.first = _Next;
      }
     if (!_Pred(*_First, *_Found.second))
      {
      _Found.second = _First;
      }
     }
    else
     {
     if (_Pred(*_First, *_Found.first))
      {
      _Found.first = _First;
      }
     if (!_Pred(*_Next, *_Found.second))
      {
      _Found.second = _Next;
      }
     }
    _First = _Next;
    }
   }
  }

 return (_Found);
 }

template<class _FwdIt,
 class _Pr>
 constexpr pair<_FwdIt, _FwdIt> minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked_both(_First, _Last,
  _Minmax_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred))));
 }


template<class _FwdIt>
 constexpr pair<_FwdIt, _FwdIt> minmax_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: minmax_element(_First, _Last, less<>()));
 }


template<class _Ty,
 class _Pr>
 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right,
  _Pr _Pred)
  noexcept(noexcept(_Pred(_Left, _Right)))
 {
 return (_Pred(_Left, _Right) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr>
 constexpr _Ty (max)(initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = _Max_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
 return (*_Res);
 }


#pragma warning(push)
#pragma warning(disable: 28285)
template<class _Ty>

 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
  noexcept(noexcept(((_Left) < (_Right))))
 {
 return (((_Left) < (_Right)) ? _Right : _Left);
 }
#pragma warning(pop)

template<class _Ty>
 constexpr _Ty (max)(initializer_list<_Ty> _Ilist)
 {
 return ((::std:: max)(_Ilist, less<>()));
 }


template<class _Ty,
 class _Pr>
 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right,
  _Pr _Pred)
  noexcept(noexcept(_Pred(_Right, _Left)))
 {
 return (_Pred(_Right, _Left) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr>
 constexpr _Ty (min)(initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = _Min_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
 return (*_Res);
 }


#pragma warning(push)
#pragma warning(disable: 28285)
template<class _Ty>

 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
  noexcept(noexcept(((_Right) < (_Left))))
 {
 return (((_Right) < (_Left)) ? _Right : _Left);
 }
#pragma warning(pop)

template<class _Ty>
 constexpr _Ty (min)(initializer_list<_Ty> _Ilist)
 {
 return ((::std:: min)(_Ilist, less<>()));
 }



template<class _Ty,
 class _Pr>
 constexpr pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Right, _Left)
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty,
 class _Pr>
 constexpr pair<_Ty, _Ty> minmax(initializer_list<_Ty> _Ilist,
  _Pr _Pred)
 {
 pair<const _Ty *, const _Ty *> _Res = _Minmax_element_unchecked(
  _Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
 return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
 }


template<class _Ty>
 constexpr pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty>
 constexpr pair<_Ty, _Ty> minmax(initializer_list<_Ty> _Ilist)
 {
 return (::std:: minmax(_Ilist, less<>()));
 }


template<class _BidIt,
 class _Pr> inline
 bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UNext = _ULast;
 if (_UFirst == _ULast || _UFirst == --_UNext)
  {
  return (false);
  }

 for (;;)
  {
  auto _UNext1 = _UNext;
  if (_Pred(*--_UNext, *_UNext1))
   {
   auto _UMid = _ULast;
   do
    {
    --_UMid;
    }
   while (!_Pred(*_UNext, *_UMid));

   ::std:: iter_swap(_UNext, _UMid);
   _Reverse_unchecked(_UNext1, _ULast);
   return (true);
   }

  if (_UNext == _UFirst)
   {
   _Reverse_unchecked(_UFirst, _ULast);
   return (false);
   }
  }
 }


template<class _BidIt> inline
 bool next_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: next_permutation(_First, _Last, less<>()));
 }


template<class _BidIt,
 class _Pr> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
                            ;
 auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 auto _UNext = _ULast;
 if (_UFirst == _ULast || _UFirst == --_UNext)
  {
  return (false);
  }

 for (;;)
  {
  auto _UNext1 = _UNext;
  if (_Pred(*_UNext1, *--_UNext))
   {
   auto _UMid = _ULast;
   do
    {
    --_UMid;
    }
   while (!_Pred(*_UMid, *_UNext));

   ::std:: iter_swap(_UNext, _UMid);
   _Reverse_unchecked(_UNext1, _ULast);
   return (true);
   }

  if (_UNext == _UFirst)
   {
   _Reverse_unchecked(_UFirst, _ULast);
   return (false);
   }
  }
 }


template<class _BidIt> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: prev_permutation(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Is_sorted_until_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  {
  for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
   {
   if (_Pred(*_Next, *_First))
    {
    return (_Next);
    }
   }
  }

 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Is_sorted_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pass_fn(_Pred))));
 }

template<class _FwdIt,
 class _Pr> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 return (_Is_sorted_until_unchecked(_UFirst, _ULast, _Pass_fn(_Pred)) == _ULast);
 }


template<class _FwdIt> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted_until(_First, _Last, less<>()));
 }

template<class _FwdIt> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted(_First, _Last, less<>()));
 }
# 4356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\algorithm" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 38 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\iostream" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)


namespace std {
# 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\iostream" 3
                        extern __declspec(dllimport) istream cin, *_Ptr_cin;
                        extern __declspec(dllimport) ostream cout, *_Ptr_cout;
                        extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
                        extern __declspec(dllimport) ostream clog, *_Ptr_clog;

                        extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
                        extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
                        extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
                        extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;


class __declspec(dllimport) _Winit {
public:
 __thiscall _Winit();
 __thiscall ~_Winit() noexcept;
private:
                         static int _Init_cnt;
 };

}

#pragma warning(pop)
#pragma pack(pop)
# 39 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\map" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\tuple" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\tuple" 3
#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<bool _Same,
 class _Dest,
 class... _Srcs>
 struct _Tuple_implicit_val0
  : false_type
 {
 };

template<class... _Dests,
 class... _Srcs>
 struct _Tuple_implicit_val0<true, tuple<_Dests...>, _Srcs...>
  : _Conjunction_t<
   is_constructible<_Dests, _Srcs>...,
   is_convertible<_Srcs, _Dests>...
  >
 {
 };

template<class _Dest,
 class... _Srcs>
 struct _Tuple_implicit_val
  : _Tuple_implicit_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::type
 {
 };

template<class _Dest,
 class... _Srcs>
 using _Tuple_implicit_t = enable_if_t<_Tuple_implicit_val<_Dest, _Srcs...>::value, int>;


template<bool _Same,
 class _Dest,
 class... _Srcs>
 struct _Tuple_explicit_val0
  : false_type
 {
 };

template<class... _Dests,
 class... _Srcs>
 struct _Tuple_explicit_val0<true, tuple<_Dests...>, _Srcs...>
  : _Conjunction_t<
   is_constructible<_Dests, _Srcs>...,
   negation<conjunction<is_convertible<_Srcs, _Dests>...>>
  >
 {
 };

template<class _Dest,
 class... _Srcs>
 struct _Tuple_explicit_val
  : _Tuple_explicit_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::type
 {
 };

template<class _Dest,
 class... _Srcs>
 using _Tuple_explicit_t = enable_if_t<_Tuple_explicit_val<_Dest, _Srcs...>::value, int>;


template<class _Myt,
 class... _Other>
 struct _Tuple_convert_copy
 {
 typedef int type;
 };

template<class _This,
 class _Uty>
 struct _Tuple_convert_copy<tuple<_This>, _Uty>
  : enable_if<!is_same_v<_This, _Uty>
   && !is_constructible_v<_This, const tuple<_Uty>&>
   && !is_convertible_v<const tuple<_Uty>&, _This>, int>
 {
 };

template<class _Myt,
 class... _Other>
 using _Tuple_convert_copy_t = typename _Tuple_convert_copy<_Myt, _Other...>::type;


template<class _Myt,
 class... _Other>
 struct _Tuple_convert_move
 {
 typedef int type;
 };

template<class _This,
 class _Uty>
 struct _Tuple_convert_move<tuple<_This>, _Uty>
  : enable_if<!is_same_v<_This, _Uty>
   && !is_constructible_v<_This, tuple<_Uty>>
   && !is_convertible_v<tuple<_Uty>, _This>, int>
 {
 };

template<class _Myt,
 class... _Other>
 using _Tuple_convert_move_t = typename _Tuple_convert_move<_Myt, _Other...>::type;


template<class _Myt,
 class _This2,
 class... _Rest2>
 struct _Tuple_perfect_val
  : true_type
 {
 };

template<class _Myt,
 class _This2>
 struct _Tuple_perfect_val<_Myt, _This2>
  : negation<is_same<_Myt, remove_const_t<remove_reference_t<_This2>>>>::type
 {
 };


struct _Ignore
 {
 template<class _Ty>
  void operator=(const _Ty&) const
  {
  }
 };

            constexpr _Ignore ignore{};


template<class _Ty>
 struct _Tuple_val
 {
 constexpr _Tuple_val()
  : _Val()
  {
  }

 template<class _Other>
  constexpr _Tuple_val(_Other&& _Arg)
  : _Val(::std:: forward<_Other>(_Arg))
  {
  }

 template<class _Alloc,
  class... _Other,
  enable_if_t<!uses_allocator_v<_Ty, _Alloc>, int> = 0>
  _Tuple_val(const _Alloc&, allocator_arg_t, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other,
  enable_if_t<uses_allocator_v<_Ty, _Alloc>
   && is_constructible_v<_Ty, allocator_arg_t, const _Alloc&, _Other...>,
   int> = 0>
  _Tuple_val(const _Alloc& _Al, allocator_arg_t, _Other&&... _Arg)
  : _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other,
  enable_if_t<uses_allocator_v<_Ty, _Alloc>
   && !is_constructible_v<_Ty, allocator_arg_t, const _Alloc&, _Other...>,
   int> = 0>
  _Tuple_val(const _Alloc& _Al, allocator_arg_t, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)..., _Al)
  {
  }

 _Ty _Val;
 };


struct _Exact_args_t
 {
 };

struct _Unpack_tuple_t
 {
 };

struct _Alloc_exact_args_t
 {
 };

struct _Alloc_unpack_tuple_t
 {
 };

template<class... _Types>
 class tuple;

template<>
 class tuple<>
 {
public:
 constexpr tuple() noexcept
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&) noexcept
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept
  {
  }

 template<class _Tag,
  enable_if_t<is_same_v<_Tag, _Exact_args_t>, int> = 0>
  constexpr tuple(_Tag) noexcept
  {
  }

 template<class _Tag,
  class _Alloc,
  enable_if_t<is_same_v<_Tag, _Alloc_exact_args_t>, int> = 0>
  tuple(_Tag, const _Alloc&) noexcept
  {
  }

 void swap(tuple&) noexcept
  {
  }

 constexpr bool _Equals(const tuple&) const noexcept
  {
  return (true);
  }

 constexpr bool _Less(const tuple&) const noexcept
  {
  return (false);
  }
 };

template<class _This,
 class... _Rest>
 class tuple<_This, _Rest...>
  : private tuple<_Rest...>
 {
public:
 typedef _This _This_type;
 typedef tuple<_This, _Rest...> _Myt;
 typedef tuple<_Rest...> _Mybase;
 static constexpr size_t _Mysize = 1 + sizeof...(_Rest);

 template<class _Tag,
  class _This2,
  class... _Rest2,
  enable_if_t<is_same_v<_Tag, _Exact_args_t>, int> = 0>
  constexpr tuple(_Tag, _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Tag,
  class _Tpl,
  size_t... _Indices,
  enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int> = 0>
  constexpr tuple(_Tag, _Tpl&& _Right, index_sequence<_Indices...>);

 template<class _Tag,
  class _Tpl,
  enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int> = 0>
  constexpr tuple(_Tag, _Tpl&& _Right)
  : tuple(_Unpack_tuple_t{}, ::std:: forward<_Tpl>(_Right),
   make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>{})
  {
  }

 template<class _Tag,
  class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<is_same_v<_Tag, _Alloc_exact_args_t>, int> = 0>
  tuple(_Tag, const _Alloc& _Al, _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(_Alloc_exact_args_t{}, _Al, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(_Al, allocator_arg, ::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Tag,
  class _Alloc,
  class _Tpl,
  size_t... _Indices,
  enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int> = 0> inline
  tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, index_sequence<_Indices...>);

 template<class _Tag,
  class _Alloc,
  class _Tpl,
  enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int> = 0>
  tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: forward<_Tpl>(_Right),
   make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>{})
  {
  }

 template<class _This2 = _This,
  class = enable_if_t<conjunction_v<is_default_constructible<_This2>, is_default_constructible<_Rest>...>>>
  constexpr tuple()
  : _Mybase(), _Myfirst()
  {
  }

 template<class... _Other,
  _Tuple_implicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  constexpr tuple(const tuple<_Other...>& _Right)
   : tuple(_Unpack_tuple_t{}, _Right)
  {
  }

 template<class... _Other,
  _Tuple_explicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  constexpr explicit tuple(const tuple<_Other...>& _Right)
   : tuple(_Unpack_tuple_t{}, _Right)
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_implicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_explicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _This2 = _This,
  _Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  constexpr tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
   : tuple(_Exact_args_t{}, _This_arg, _Rest_arg...)
  {
  }

 template<class _This2 = _This,
  _Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  constexpr explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
   : tuple(_Exact_args_t{}, _This_arg, _Rest_arg...)
  {
  }

 template<class _Alloc,
  class _This2 = _This,
  _Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
  {
  }

 template<class _Alloc,
  class _This2 = _This,
  _Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
  {
  }

 template<class _This2,
  class... _Rest2,
  enable_if_t<conjunction_v<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_implicit_val<_Myt, _This2, _Rest2...>
  >, int> = 0>
  constexpr tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
   : tuple(_Exact_args_t{}, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
  {
  }

 template<class _This2,
  class... _Rest2,
  enable_if_t<conjunction_v<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_explicit_val<_Myt, _This2, _Rest2...>
  >, int> = 0>
  constexpr explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
   : tuple(_Exact_args_t{}, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<conjunction_v<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_implicit_val<_Myt, _This2, _Rest2...>
  >, int> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<conjunction_v<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_explicit_val<_Myt, _This2, _Rest2...>
  >, int> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
  {
  }

 template<class... _Other,
  _Tuple_implicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  constexpr tuple(tuple<_Other...>&& _Right)
   : tuple(_Unpack_tuple_t{}, ::std:: move(_Right))
  {
  }

 template<class... _Other,
  _Tuple_explicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  constexpr explicit tuple(tuple<_Other...>&& _Right)
   : tuple(_Unpack_tuple_t{}, ::std:: move(_Right))
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_implicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_explicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class... _Other>
  _Myt& operator=(const tuple<_Other...>& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  _Get_rest() = _Right._Get_rest();
  return (*this);
  }

 template<class... _Other>
  _Myt& operator=(tuple<_Other...>&& _Right)
  {
  _Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val);
  _Get_rest() = ::std:: forward<typename tuple<_Other...>::_Mybase>(_Right._Get_rest());
  return (*this);
  }

 template<class... _Other>
  constexpr bool _Equals(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val == _Right._Myfirst._Val
   && _Mybase::_Equals(_Right._Get_rest()));
  }

 template<class... _Other>
  constexpr bool _Less(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val < _Right._Myfirst._Val
   || (!(_Right._Myfirst._Val < _Myfirst._Val)
    && _Mybase::_Less(_Right._Get_rest())));
  }

 template<class _Alloc,
  class _This2 = _This,
  class = enable_if_t<conjunction_v<is_default_constructible<_This2>, is_default_constructible<_Rest>...>>>
  tuple(allocator_arg_t, const _Alloc& _Al)
  : _Mybase(allocator_arg, _Al), _Myfirst(_Al, allocator_arg)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _Myt& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 tuple(const _Myt&) = default;
 tuple(_Myt&&) = default;

 template<class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
  constexpr tuple(const pair<_First, _Second>& _Right)
   : tuple(_Unpack_tuple_t{}, _Right)
  {
  }

 template<class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
  constexpr explicit tuple(const pair<_First, _Second>& _Right)
   : tuple(_Unpack_tuple_t{}, _Right)
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  _Get_rest() = _Right._Get_rest();
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(const pair<_First, _Second>& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = _Right.first;
  _Get_rest()._Myfirst._Val = _Right.second;
  return (*this);
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _Myt&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, _First, _Second> = 0>
  constexpr tuple(pair<_First, _Second>&& _Right)
   : tuple(_Unpack_tuple_t{}, ::std:: move(_Right))
  {
  }

 template<class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, _First, _Second> = 0>
  constexpr explicit tuple(pair<_First, _Second>&& _Right)
   : tuple(_Unpack_tuple_t{}, ::std:: move(_Right))
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, _First, _Second> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, _First, _Second> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(is_nothrow_move_assignable_v<_This> && is_nothrow_move_assignable_v<_Mybase>)

  {
  _Myfirst._Val = ::std:: forward<_This>(_Right._Myfirst._Val);
  _Get_rest() = ::std:: forward<_Mybase>(_Right._Get_rest());
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(pair<_First, _Second>&& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = ::std:: forward<_First>(_Right.first);
  _Get_rest()._Myfirst._Val = ::std:: forward<_Second>(_Right.second);
  return (*this);
  }

 _Mybase& _Get_rest() noexcept
  {
  return (*this);
  }

 constexpr const _Mybase& _Get_rest() const noexcept
  {
  return (*this);
  }

 void swap(tuple& _Right)
  noexcept(conjunction_v<_Is_nothrow_swappable<_This>, _Is_nothrow_swappable<_Rest>...>)

  {
  _Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
  _Mybase::swap(_Right._Get_rest());
  }

 _Tuple_val<_This> _Myfirst;
 };



template<class... _Types1,
 class... _Types2>
 constexpr bool operator==(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class... _Types1,
 class... _Types2>
 constexpr bool operator!=(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class... _Types1,
 class... _Types2>
 constexpr bool operator<(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class... _Types1,
 class... _Types2>
 constexpr bool operator>=(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class... _Types1,
 class... _Types2>
 constexpr bool operator>(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
 {
 return (_Right < _Left);
 }

template<class... _Types1,
 class... _Types2>
 constexpr bool operator<=(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class... _Types,
 class = enable_if_t<conjunction_v<_Is_swappable<_Types>...>>> inline
 void swap(tuple<_Types...>& _Left, tuple<_Types...>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 return (_Left.swap(_Right));
 }



template<class _Ty,
 class _Tuple>
 struct _Tuple_element;

template<class _This,
 class... _Rest>
 struct _Tuple_element<_This, tuple<_This, _Rest...> >
 {
 typedef int _Check_type;
 static_assert(is_void_v<typename _Tuple_element<_This, tuple<_Rest...>>::_Check_type>,
  "duplicate type T in get<T>(tuple)");

 typedef _This type;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<class _Ty,
 class _This,
 class... _Rest>
 struct _Tuple_element<_Ty, tuple<_This, _Rest...> >
  : _Tuple_element<_Ty, tuple<_Rest...> >
 {
 };

template<class _Ty>
 struct _Tuple_element<_Ty, tuple<> >
 {
 typedef void _Check_type;
 };


template<size_t _Index,
 class... _Types>
 constexpr tuple_element_t<_Index, tuple<_Types...>>&
  get(tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types>
 constexpr const tuple_element_t<_Index, tuple<_Types...>>&
  get(const tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types>
 constexpr tuple_element_t<_Index, tuple<_Types...>>&&
  get(tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
 typedef tuple_element_t<_Index, tuple<_Types...>>&& _RRtype;
 return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
 }

template<size_t _Index,
 class... _Types>
 constexpr const tuple_element_t<_Index, tuple<_Types...>>&&
  get(const tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
 typedef const tuple_element_t<_Index, tuple<_Types...>>&& _RRtype;
 return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
 }


template<class _Ty,
 class... _Types>
 constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<class _Ty,
 class... _Types>
 constexpr const _Ty& get(const tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<class _Ty,
 class... _Types>
 constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
 return (::std:: forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
 }

template<class _Ty,
 class... _Types>
 constexpr const _Ty&& get(const tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
 return (::std:: forward<const _Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
 }


template<class _This,
 class... _Rest>
 template<class _Tag,
  class _Tpl,
  size_t... _Indices,
  enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int>>
  constexpr tuple<_This, _Rest...>::tuple(_Tag, _Tpl&& _Right, index_sequence<_Indices...>)
  : tuple(_Exact_args_t{}, ::std:: get<_Indices>(::std:: forward<_Tpl>(_Right))...)
  {
  }

template<class _This,
 class... _Rest>
 template<class _Tag,
  class _Alloc,
  class _Tpl,
  size_t... _Indices,
  enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int>> inline
  tuple<_This, _Rest...>::tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, index_sequence<_Indices...>)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: get<_Indices>(::std:: forward<_Tpl>(_Right))...)
  {
  }


template<class... _Types>
 constexpr tuple<typename _Unrefwrap<_Types>::type...>
  make_tuple(_Types&&... _Args)
 {
 typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
 return (_Ttype(::std:: forward<_Types>(_Args)...));
 }


template<class... _Types>
 constexpr tuple<_Types&...>
  tie(_Types&... _Args) noexcept
 {
 typedef tuple<_Types&...> _Ttype;
 return (_Ttype(_Args...));
 }




template<class... _Types>
 constexpr tuple<_Types&&...>
  forward_as_tuple(_Types&&... _Args) noexcept
 {
 return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
 }



template<class _Seq_type1,
 class _Seq_type2>
 struct _Cat_sequences;

template<size_t... _Indexes1,
 size_t... _Indexes2>
 struct _Cat_sequences<index_sequence<_Indexes1...>,
  index_sequence<_Indexes2...> >
 {
 typedef index_sequence<_Indexes1..., _Indexes2...> type;
 };


template<class _Ty,
 size_t _Size>
 class array;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr const _Ty&& get(const array<_Ty, _Size>&& _Arr) noexcept;


template<class _Ty,
 class... _For_array>
 struct _View_as_tuple
 {
 static_assert(_Always_false<_Ty>::value,
  "Unsupported tuple_cat arguments.");
 };

template<class... _Types>
 struct _View_as_tuple<tuple<_Types...> >
 {
 typedef tuple<_Types...> type;
 };

template<class _Ty1,
 class _Ty2>
 struct _View_as_tuple<pair<_Ty1, _Ty2> >
 {
 typedef tuple<_Ty1, _Ty2> type;
 };

template<class _Ty,
 class... _Types>
 struct _View_as_tuple<array<_Ty, 0>, _Types...>
 {
 typedef tuple<_Types...> type;
 };

template<class _Ty,
 size_t _Size,
 class... _Types>
 struct _View_as_tuple<array<_Ty, _Size>, _Types...>
  : _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...>
 {
 };


template<size_t _Nx,
 class _Ty>
 struct _Repeat_for
  : integral_constant<size_t, _Nx>
 {
 };


template<class _Ret,
 class _Kx_arg,
 class _Ix_arg,
 size_t _Ix_next,
 class... _Tuples>
 struct _Tuple_cat2
 {
 static_assert(sizeof...(_Tuples) == 0,
  "Unsupported tuple_cat arguments.");
 typedef _Ret type;
 typedef _Kx_arg _Kx_arg_seq;
 typedef _Ix_arg _Ix_arg_seq;
 };

template<class... _Types1,
 class _Kx_arg,
 size_t... _Ix,
 size_t _Ix_next,
 class... _Types2,
 class... _Rest>
 struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg,
  index_sequence<_Ix...>, _Ix_next,
  tuple<_Types2...>, _Rest...>
  : _Tuple_cat2<
   tuple<_Types1..., _Types2...>,
   typename _Cat_sequences<_Kx_arg, index_sequence_for<_Types2...>>::type,
   index_sequence<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
   _Ix_next + 1,
   _Rest...>
 {
 };

template<class... _Tuples>
 struct _Tuple_cat1
  : _Tuple_cat2<tuple<>, index_sequence<>,
    index_sequence<>, 0,
   typename _View_as_tuple<decay_t<_Tuples>>::type...>
 {
 };

#pragma warning(push)
#pragma warning(disable: 4100)
template<class _Ret,
 size_t... _Kx,
 size_t... _Ix,
 class _Ty>
 constexpr _Ret _Tuple_cat(index_sequence<_Kx...>,
  index_sequence<_Ix...>, _Ty&& _Arg)
 {
 return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
 }
#pragma warning(pop)

template<class... _Tuples>
 constexpr typename _Tuple_cat1<_Tuples...>::type
  tuple_cat(_Tuples&&... _Tpls)
 {
 typedef _Tuple_cat1<_Tuples...> _Cat1;
 return (_Tuple_cat<typename _Cat1::type>(
  typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
  ::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
 }
# 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\tuple" 3
template<class _Tpl,
 class _Fx,
 size_t... _Indices> inline
 void _For_each_tuple_element_impl(_Tpl&& _Tuple,
  _Fx _Func, index_sequence<_Indices...>)
 {
 int _Ignored[] = { (static_cast<void>(_Func(
  ::std:: get<_Indices>(::std:: forward<_Tpl>(_Tuple))
  )), 0)... };
 (void)_Ignored;
 }

template<class _Tpl,
 class _Fx> inline
 void _For_each_tuple_element(_Tpl&& _Tuple, _Fx _Func)
 {
 _For_each_tuple_element_impl(
  ::std:: forward<_Tpl>(_Tuple),
  _Func,
  make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>()
  );
 }


#pragma warning(push)
#pragma warning(disable: 4100)

template<class _Ty1,
 class _Ty2>
 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   index_sequence<_Indexes1...>,
   index_sequence<_Indexes2...>)
  : first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
   second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
  {
  }
#pragma warning(pop)


template<class _Ty1,
 class _Ty2>
 template<class... _Types1,
  class... _Types2> inline
  pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2)
  : pair(_Val1, _Val2,
   index_sequence_for<_Types1...>(),
   index_sequence_for<_Types2...>())
  {
  }


template<class... _Types,
 class _Alloc>
 struct uses_allocator<tuple<_Types...>, _Alloc>
  : true_type
 {
 };


namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
}


}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\map" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _Mytree,
 class _Base = _Iterator_base0>
 class _Tree_unchecked_const_iterator
  : public _Base
 {
public:
 using iterator_category = bidirectional_iterator_tag;

 using _Nodeptr = typename _Mytree::_Nodeptr;
 using value_type = typename _Mytree::value_type;
 using difference_type = typename _Mytree::difference_type;
 using pointer = typename _Mytree::const_pointer;
 using reference = const value_type&;

 _Tree_unchecked_const_iterator()
  : _Ptr()
  {
  }

 _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Ptr(_Pnode)
  {
  this->_Adopt(_Plist);
  }

 reference operator*() const
  {
  return (_Ptr->_Myval);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Tree_unchecked_const_iterator& operator++()
  {
  if (_Ptr->_Isnil)
   ;
  else if (!_Ptr->_Right->_Isnil)
   _Ptr = _Mytree::_Min(_Ptr->_Right);
  else
   {
   _Nodeptr _Pnode;
   while (!(_Pnode = _Ptr->_Parent)->_Isnil
    && _Ptr == _Pnode->_Right)
    _Ptr = _Pnode;
   _Ptr = _Pnode;
   }
  return (*this);
  }

 _Tree_unchecked_const_iterator operator++(int)
  {
  _Tree_unchecked_const_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Tree_unchecked_const_iterator& operator--()
  {
  if (_Ptr->_Isnil)
   _Ptr = _Ptr->_Right;
  else if (!_Ptr->_Left->_Isnil)
   _Ptr = _Mytree::_Max(_Ptr->_Left);
  else
   {
   _Nodeptr _Pnode;
   while (!(_Pnode = _Ptr->_Parent)->_Isnil
    && _Ptr == _Pnode->_Left)
    _Ptr = _Pnode;
   if (_Ptr->_Isnil)
    ;
   else
    _Ptr = _Pnode;
   }
  return (*this);
  }

 _Tree_unchecked_const_iterator operator--(int)
  {
  _Tree_unchecked_const_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Tree_unchecked_const_iterator& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Tree_unchecked_const_iterator& _Right) const
  {
  return (!(*this == _Right));
  }

 _Nodeptr _Ptr;
 };


template<class _Mytree>
 class _Tree_unchecked_iterator
  : public _Tree_unchecked_const_iterator<_Mytree>
 {
public:
 using _Mybase = _Tree_unchecked_const_iterator<_Mytree>;
 using iterator_category = bidirectional_iterator_tag;

 using _Nodeptr = typename _Mytree::_Nodeptr;
 using value_type = typename _Mytree::value_type;
 using difference_type = typename _Mytree::difference_type;
 using pointer = typename _Mytree::pointer;
 using reference = value_type&;

 _Tree_unchecked_iterator()
  {
  }

 _Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Tree_unchecked_iterator& operator++()
  {
  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Tree_unchecked_iterator operator++(int)
  {
  _Tree_unchecked_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Tree_unchecked_iterator& operator--()
  {
  --static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Tree_unchecked_iterator operator--(int)
  {
  _Tree_unchecked_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };


template<class _Mytree>
 class _Tree_const_iterator
  : public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
 {
public:
 using _Mybase = _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>;
 using iterator_category = bidirectional_iterator_tag;

 using _Nodeptr = typename _Mytree::_Nodeptr;
 using value_type = typename _Mytree::value_type;
 using difference_type = typename _Mytree::difference_type;
 using pointer = typename _Mytree::const_pointer;
 using reference = const value_type&;

 _Tree_const_iterator()
  : _Mybase()
  {
  }

 _Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 using _Unchecked_type = _Tree_unchecked_const_iterator<_Mytree>;

 reference operator*() const
  {
# 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
  return (this->_Ptr->_Myval);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Tree_const_iterator& operator++()
  {
# 249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Tree_const_iterator operator++(int)
  {
  _Tree_const_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Tree_const_iterator& operator--()
  {
# 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
  --static_cast<_Mybase&>(*this);


  return (*this);
  }

 _Tree_const_iterator operator--(int)
  {
  _Tree_const_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Tree_const_iterator& _Right) const
  {
# 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Tree_const_iterator& _Right) const
  {
  return (!(*this == _Right));
  }
 };

template<class _Mytree> inline
 _Tree_const_iterator<_Mytree>& _Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
  const typename _Tree_const_iterator<_Mytree>::_Unchecked_type _Right)
 {
 _Iter._Ptr = _Right._Ptr;
 return (_Iter);
 }

template<class _Mytree> inline
 typename _Tree_const_iterator<_Mytree>::_Unchecked_type _Unchecked(
  const _Tree_const_iterator<_Mytree>& _Iter)
 {
 return (typename _Tree_const_iterator<_Mytree>::_Unchecked_type(_Iter._Ptr,
  static_cast<const _Mytree *>(_Iter._Getcont())));
 }


template<class _Mytree>
 class _Tree_iterator
  : public _Tree_const_iterator<_Mytree>
 {
public:
 using _Mybase = _Tree_const_iterator<_Mytree>;
 using iterator_category = bidirectional_iterator_tag;

 using _Nodeptr = typename _Mytree::_Nodeptr;
 using value_type = typename _Mytree::value_type;
 using difference_type = typename _Mytree::difference_type;

 using pointer = typename _Mytree::pointer;
 using reference = value_type&;

 _Tree_iterator()
  {
  }

 _Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 using _Unchecked_type = _Tree_unchecked_iterator<_Mytree>;

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Tree_iterator& operator++()
  {
  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Tree_iterator operator++(int)
  {
  _Tree_iterator _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Tree_iterator& operator--()
  {
  --static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Tree_iterator operator--(int)
  {
  _Tree_iterator _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };

template<class _Mytree> inline
 _Tree_iterator<_Mytree>& _Rechecked(_Tree_iterator<_Mytree>& _Iter,
  const typename _Tree_iterator<_Mytree>::_Unchecked_type _Right)
 {
 _Iter._Ptr = _Right._Ptr;
 return (_Iter);
 }

template<class _Mytree> inline
 typename _Tree_iterator<_Mytree>::_Unchecked_type _Unchecked(
  const _Tree_iterator<_Mytree>& _Iter)
 {
 return (typename _Tree_iterator<_Mytree>::_Unchecked_type(_Iter._Ptr,
  static_cast<const _Mytree *>(_Iter._Getcont())));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Nodeptr_type>
 struct _Tree_iter_types
 {
 using value_type = _Value_type;
 using size_type = _Size_type;
 using difference_type = _Difference_type;
 using pointer = _Pointer;
 using const_pointer = _Const_pointer;
 using _Nodeptr = _Nodeptr_type;
 };

template<class _Value_type,
 class _Voidptr>
 struct _Tree_node
  {
  using _Nodeptr = _Rebind_pointer_t<_Voidptr, _Tree_node>;
  _Nodeptr _Left;
  _Nodeptr _Parent;
  _Nodeptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

  _Tree_node& operator=(const _Tree_node&) = delete;

  template<class _Alloc>
   static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
   {
   using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
   using _Alnode_traits = allocator_traits<_Alnode>;
   _Alnode _Node_alloc(_Al);
   _Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Left));
   _Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Parent));
   _Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Right));
   _Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
   }
  };

template<class _Ty>
 struct _Tree_simple_types
  : public _Simple_types<_Ty>
 {
 using _Node = _Tree_node<_Ty, void *>;
 using _Nodeptr = _Node *;
 };

template<class _Ty,
 class _Alloc>
 struct _Tree_base_types
 {
 using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
 using _Alty_traits = allocator_traits<_Alty>;
 using _Node = _Tree_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
 using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
 using _Alnode_traits = allocator_traits<_Alnode>;
 using _Nodeptr = typename _Alnode_traits::pointer;

 using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
  _Tree_simple_types<_Ty>,
  _Tree_iter_types<_Ty,
   typename _Alty_traits::size_type,
   typename _Alty_traits::difference_type,
   typename _Alty_traits::pointer,
   typename _Alty_traits::const_pointer,
   _Ty&,
   const _Ty&,
   _Nodeptr>>;
 };


template<class _Val_types>
 class _Tree_val
  : public _Container_base
 {
public:
 using _Nodeptr = typename _Val_types::_Nodeptr;

 using value_type = typename _Val_types::value_type;
 using size_type = typename _Val_types::size_type;
 using difference_type = typename _Val_types::difference_type;
 using pointer = typename _Val_types::pointer;
 using const_pointer = typename _Val_types::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 _Tree_val()
  : _Myhead(),
  _Mysize(0)
  {
  }

 enum _Redbl
  {
  _Red, _Black};

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  while (!_Pnode->_Right->_Isnil)
   _Pnode = _Pnode->_Right;
  return (_Pnode);
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  while (!_Pnode->_Left->_Isnil)
   _Pnode = _Pnode->_Left;
  return (_Pnode);
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };


template<class _Traits>
 class _Tree_comp_alloc
 {
public:
 using allocator_type = typename _Traits::allocator_type;
 using key_compare = typename _Traits::key_compare;

 using _Alloc_types = _Tree_base_types<typename _Traits::value_type, allocator_type>;

 using _Alnode = typename _Alloc_types::_Alnode;
 using _Alnode_traits = typename _Alloc_types::_Alnode_traits;
 using _Alproxy = _Rebind_alloc_t<_Alnode, _Container_proxy>;
 using _Alproxy_traits = allocator_traits<_Alproxy>;
 using _Node = typename _Alloc_types::_Node;
 using _Nodeptr = typename _Alloc_types::_Nodeptr;
 using _Val_types = typename _Alloc_types::_Val_types;

 using value_type = typename _Val_types::value_type;
 using size_type = typename _Val_types::size_type;
 using difference_type = typename _Val_types::difference_type;
 using pointer = typename _Val_types::pointer;
 using const_pointer = typename _Val_types::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 using iterator = _Tree_iterator<_Tree_val<_Val_types>>;
 using const_iterator = _Tree_const_iterator<_Tree_val<_Val_types>>;
 using _Unchecked_iterator = _Tree_unchecked_iterator<_Tree_val<_Val_types>>;
 using _Unchecked_const_iterator = _Tree_unchecked_const_iterator<_Tree_val<_Val_types>>;

 enum _Redbl
  {
  _Red, _Black
  };

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Max(_Pnode));
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Min(_Pnode));
  }

 _Tree_comp_alloc(const key_compare& _Parg)
  : _Mypair(_One_then_variadic_args_t(), _Parg,
   _Zero_then_variadic_args_t())
  {
  _Construct();
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same_v<decay_t<_Any_alloc>, _Tree_comp_alloc>>>
  _Tree_comp_alloc(const key_compare& _Parg, _Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(), _Parg,
   _One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  _Construct();
  }


 void _Construct()
  {
  _Myhead() = _Buyheadnode();
  }

 ~_Tree_comp_alloc() noexcept
  {
  _Freeheadnode(_Myhead());
  }

 void _Alloc_proxy()
  {
  }

 void _Free_proxy()
  {
  }
# 668 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
 void _Copy_alloc(const _Alnode& _Al)
  {
  const bool _Reload = _Alnode_traits::propagate_on_container_copy_assignment::value
   && _Getal() != _Al;

  if (_Reload)
   {
   _Free_proxy();
   _Freeheadnode(_Myhead());
   }

  _Pocca(_Getal(), _Al);

  if (_Reload)
   {
   _Myhead() = _Buyheadnode();
   _Alloc_proxy();
   }
  }

 void _Move_alloc(_Alnode& _Al)
  {
  const bool _Reload = _Alnode_traits::propagate_on_container_move_assignment::value
   && _Getal() != _Al;

  if (_Reload)
   {
   _Free_proxy();
   _Freeheadnode(_Myhead());
   }

  _Pocma(_Getal(), _Al);

  if (_Reload)
   {
   _Myhead() = _Buyheadnode();
   _Alloc_proxy();
   }
  }

 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Tree_comp_alloc& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Nodeptr _Buyheadnode()
  {
  _Alnode& _Al = _Getal();
  _Nodeptr _Pnode = _Al.allocate(1);

  try {
  _Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Left), _Pnode);
  _Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Parent), _Pnode);
  _Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Right), _Pnode);
  } catch (...) {
  _Al.deallocate(_Pnode, 1);
  throw;
  }

  _Pnode->_Color = _Black;
  _Pnode->_Isnil = true;
  return (_Pnode);
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  _Node::_Freenode0(_Getal(), _Pnode);
  }

 _Nodeptr _Buynode0()
  {
  _Alnode& _Al = _Getal();
  _Nodeptr _Pnode = _Al.allocate(1);

  try {
  _Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Left), _Myhead());
  _Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Parent), _Myhead());
  _Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Right), _Myhead());
  } catch (...) {
  _Al.deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 void _Freenode0(_Nodeptr _Pnode)
  {
  _Node::_Freenode0(_Getal(), _Pnode);
  }

 template<class... _Valty>
  _Nodeptr _Buynode(_Valty&&... _Val)
  {
  _Nodeptr _Pnode = _Buynode0();

  _Pnode->_Color = _Red;
  _Pnode->_Isnil = false;

  try {
  _Alnode_traits::construct(_Getal(),
   ::std:: addressof(_Pnode->_Myval), ::std:: forward<_Valty>(_Val)...);
  } catch (...) {
  _Freenode0(_Pnode);
  throw;
  }

  return (_Pnode);
  }

 key_compare& _Getcomp() noexcept
  {
  return (_Mypair._Get_first());
  }

 const key_compare& _Getcomp() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Alnode& _Getal() noexcept
  {
  return (_Mypair._Get_second()._Get_first());
  }

 const _Alnode& _Getal() const noexcept
  {
  return (_Mypair._Get_second()._Get_first());
  }

 _Tree_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second()._Get_second());
  }

 const _Tree_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second()._Get_second());
  }

 _Nodeptr& _Myhead() noexcept
  {
  return (_Get_data()._Myhead);
  }

 const _Nodeptr& _Myhead() const noexcept
  {
  return (_Get_data()._Myhead);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

private:
 _Compressed_pair<key_compare,
  _Compressed_pair<_Alnode, _Tree_val<_Val_types>>> _Mypair;
 };


template<class _Traits>
 class _Tree
  : public _Tree_comp_alloc<_Traits>
 {
public:
 using _Mybase = _Tree_comp_alloc<_Traits>;

 using key_type = typename _Traits::key_type;
 using value_compare = typename _Traits::value_compare;
 enum
  {
  _Multi = _Traits::_Multi};

 using _Node = typename _Mybase::_Node;
 using _Nodeptr = typename _Mybase::_Nodeptr;
 using _Alnode = typename _Mybase::_Alnode;
 using _Alnode_traits = typename _Mybase::_Alnode_traits;

 using key_compare = typename _Mybase::key_compare;
 using allocator_type = typename _Mybase::allocator_type;

 using value_type = typename _Mybase::value_type;
 using size_type = typename _Mybase::size_type;
 using difference_type = typename _Mybase::difference_type;
 using pointer = typename _Mybase::pointer;
 using const_pointer = typename _Mybase::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;

 using iterator = conditional_t<is_same_v<key_type, value_type>,
  typename _Mybase::const_iterator,
  typename _Mybase::iterator>;
 using const_iterator = typename _Mybase::const_iterator;
 using _Unchecked_iterator = conditional_t<is_same_v<key_type, value_type>,
  typename _Mybase::_Unchecked_const_iterator,
  typename _Mybase::_Unchecked_iterator>;
 using _Unchecked_const_iterator = typename _Mybase::_Unchecked_const_iterator;

 using reverse_iterator = ::std:: reverse_iterator<iterator>;
 using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

 using _Pairib = pair<iterator, bool>;
 using _Pairii = pair<iterator, iterator>;
 using _Paircc = pair<const_iterator, const_iterator>;

 struct _Copy_tag
  {
  };
 struct _Move_tag
  {
  };

 _Tree(const key_compare& _Parg)
  : _Mybase(_Parg)
  {
  }

 _Tree(const key_compare& _Parg,
  const allocator_type& _Al)
  : _Mybase(_Parg, _Al)
  {
  }

 template<class _Any_alloc>
  _Tree(const _Tree& _Right, _Any_alloc&& _Al)
  : _Mybase(_Right.key_comp(), ::std:: forward<_Any_alloc>(_Al))
  {
  try {
  _Copy(_Right, _Copy_tag());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 _Tree(_Tree&& _Right)
  : _Mybase(_Right.key_comp(), ::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: move(_Right), true_type());
  }

 _Tree(_Tree&& _Right, const allocator_type& _Al)
  : _Mybase(_Right.key_comp(), _Al)
  {
  _Assign_rv(::std:: move(_Right), false_type());
  }

 _Tree& operator=(_Tree&& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   clear();
   this->_Move_alloc(_Right._Getal());
   this->_Getcomp() = _Right._Getcomp();
   _Assign_rv(::std:: move(_Right),
    typename _Alnode_traits::propagate_on_container_move_assignment());
   }
  return (*this);
  }

 void _Assign_rv(_Tree&& _Right, true_type)
  {
  this->_Swap_all(_Right);
  _Swap_adl(this->_Getcomp(), _Right._Getcomp());
  _Swap_adl(this->_Myhead(), _Right._Myhead());
  ::std:: swap(this->_Mysize(), _Right._Mysize());
  }

 void _Assign_rv(_Tree&& _Right, false_type)
  {
  if (this->_Getal() == _Right._Getal())
   {
   _Assign_rv(::std:: move(_Right), true_type());
   }
  else
   {
   _Copy(_Right, _Move_tag());
   }
  }

 template<class... _Valty>
  _Pairib emplace(_Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_nohint(false, _Newnode->_Myval, _Newnode));
  }

 template<class... _Valty>
  iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));
  }

 ~_Tree() noexcept
  {
  _Tidy();
  }

 _Tree& operator=(const _Tree& _Right)
  {
  if (this != ::std:: addressof(_Right))
   {
   clear();
   this->_Copy_alloc(_Right._Getal());
   this->_Getcomp() = _Right._Getcomp();
   _Copy(_Right, _Copy_tag());
   }

  return (*this);
  }

 iterator begin() noexcept
  {
  return (iterator(_Lmost(), ::std:: addressof(this->_Get_data())));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(_Lmost(), ::std:: addressof(this->_Get_data())));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Myhead(), ::std:: addressof(this->_Get_data())));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Myhead(), ::std:: addressof(this->_Get_data())));
  }

 _Unchecked_iterator _Unchecked_begin() noexcept
  {
  return (_Unchecked_iterator(_Lmost(), nullptr));
  }

 _Unchecked_const_iterator _Unchecked_begin() const noexcept
  {
  return (_Unchecked_const_iterator(_Lmost(), nullptr));
  }

 _Unchecked_iterator _Unchecked_end() noexcept
  {
  return (_Unchecked_iterator(this->_Myhead(), nullptr));
  }

 _Unchecked_const_iterator _Unchecked_end() const noexcept
  {
  return (_Unchecked_const_iterator(this->_Myhead(), nullptr));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  return (_Alnode_traits::max_size(this->_Getal()));
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 allocator_type get_allocator() const noexcept
  {
  return (static_cast<allocator_type>(this->_Getal()));
  }

 key_compare key_comp() const
  {
  return (this->_Getcomp());
  }

 value_compare value_comp() const
  {
  return (value_compare(key_comp()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<!_Multi2, int> = 0>
  _Pairib insert(const value_type& _Val)
  {
  return (_Insert_nohint(false, _Val, _Not_a_node_tag()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<_Multi2, int> = 0>
  iterator insert(const value_type& _Val)
  {
  return (_Insert_nohint(false, _Val, _Not_a_node_tag()).first);
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<!_Multi2, int> = 0>
  _Pairib insert(value_type&& _Val)
  {
  return (_Insert_nohint(false, ::std:: move(_Val), _Not_a_node_tag()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<_Multi2, int> = 0>
  iterator insert(value_type&& _Val)
  {
  return (_Insert_nohint(false, ::std:: move(_Val), _Not_a_node_tag()).first);
  }

 iterator insert(const_iterator _Where,
  const value_type& _Val)
  {
  return (_Insert_hint(_Where, _Val, _Not_a_node_tag()));
  }

 iterator insert(const_iterator _Where, value_type&& _Val)
  {
  return (_Insert_hint(_Where, ::std:: move(_Val), _Not_a_node_tag()));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
                             ;
  for (; _First != _Last; ++_First)
   {
   emplace_hint(end(), *_First);
   }
  }

 void insert(initializer_list<value_type> _Ilist)
  {
  insert(_Ilist.begin(), _Ilist.end());
  }

 _Nodeptr _Extract(const_iterator _Where)
  {
# 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
  _Nodeptr _Erasednode = _Where._Ptr;
  ++_Where;

  _Nodeptr _Fixnode;
  _Nodeptr _Fixnodeparent;
  _Nodeptr _Pnode = _Erasednode;

  if (_Pnode->_Left->_Isnil)
   {
   _Fixnode = _Pnode->_Right;
   }
  else if (_Pnode->_Right->_Isnil)
   {
   _Fixnode = _Pnode->_Left;
   }
  else
   {
   _Pnode = _Where._Ptr;
   _Fixnode = _Pnode->_Right;
   }

  if (_Pnode == _Erasednode)
   {
   _Fixnodeparent = _Erasednode->_Parent;
   if (!_Fixnode->_Isnil)
    _Fixnode->_Parent = _Fixnodeparent;

   if (_Root() == _Erasednode)
    {
    _Root() = _Fixnode;
    }
   else if (_Fixnodeparent->_Left == _Erasednode)
    {
    _Fixnodeparent->_Left = _Fixnode;
    }
   else
    {
    _Fixnodeparent->_Right = _Fixnode;
    }

   if (_Lmost() == _Erasednode)
    {
    _Lmost() = _Fixnode->_Isnil
     ? _Fixnodeparent
     : this->_Min(_Fixnode);
    }

   if (_Rmost() == _Erasednode)
    {
    _Rmost() = _Fixnode->_Isnil
     ? _Fixnodeparent
     : this->_Max(_Fixnode);
    }
   }
  else
   {
   _Erasednode->_Left->_Parent = _Pnode;
   _Pnode->_Left = _Erasednode->_Left;

   if (_Pnode == _Erasednode->_Right)
    {
    _Fixnodeparent = _Pnode;
    }
   else
    {
    _Fixnodeparent = _Pnode->_Parent;
    if (!_Fixnode->_Isnil)
     {
     _Fixnode->_Parent = _Fixnodeparent;
     }

    _Fixnodeparent->_Left = _Fixnode;
    _Pnode->_Right = _Erasednode->_Right;
    _Erasednode->_Right->_Parent = _Pnode;
    }

   if (_Root() == _Erasednode)
    {
    _Root() = _Pnode;
    }
   else if (_Erasednode->_Parent->_Left == _Erasednode)
    {
    _Erasednode->_Parent->_Left = _Pnode;
    }
   else
    {
    _Erasednode->_Parent->_Right = _Pnode;
    }

   _Pnode->_Parent = _Erasednode->_Parent;
   ::std:: swap(_Pnode->_Color, _Erasednode->_Color);
   }

  if (_Erasednode->_Color == this->_Black)
   {
   for (; _Fixnode != _Root()
    && _Fixnode->_Color == this->_Black;
    _Fixnodeparent = _Fixnode->_Parent)
    if (_Fixnode == _Fixnodeparent->_Left)
     {
     _Pnode = _Fixnodeparent->_Right;
     if (_Pnode->_Color == this->_Red)
      {
      _Pnode->_Color = this->_Black;
      _Fixnodeparent->_Color = this->_Red;
      _Lrotate(_Fixnodeparent);
      _Pnode = _Fixnodeparent->_Right;
      }

     if (_Pnode->_Isnil)
      _Fixnode = _Fixnodeparent;
     else if (_Pnode->_Left->_Color == this->_Black
      && _Pnode->_Right->_Color == this->_Black)
      {
      _Pnode->_Color = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (_Pnode->_Right->_Color == this->_Black)
       {
       _Pnode->_Left->_Color = this->_Black;
       _Pnode->_Color = this->_Red;
       _Rrotate(_Pnode);
       _Pnode = _Fixnodeparent->_Right;
       }

      _Pnode->_Color = _Fixnodeparent->_Color;
      _Fixnodeparent->_Color = this->_Black;
      _Pnode->_Right->_Color = this->_Black;
      _Lrotate(_Fixnodeparent);
      break;
      }
     }
    else
     {
     _Pnode = _Fixnodeparent->_Left;
     if (_Pnode->_Color == this->_Red)
      {
      _Pnode->_Color = this->_Black;
      _Fixnodeparent->_Color = this->_Red;
      _Rrotate(_Fixnodeparent);
      _Pnode = _Fixnodeparent->_Left;
      }

     if (_Pnode->_Isnil)
      _Fixnode = _Fixnodeparent;
     else if (_Pnode->_Right->_Color == this->_Black
      && _Pnode->_Left->_Color == this->_Black)
      {
      _Pnode->_Color = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (_Pnode->_Left->_Color == this->_Black)
       {
       _Pnode->_Right->_Color = this->_Black;
       _Pnode->_Color = this->_Red;
       _Lrotate(_Pnode);
       _Pnode = _Fixnodeparent->_Left;
       }

      _Pnode->_Color = _Fixnodeparent->_Color;
      _Fixnodeparent->_Color = this->_Black;
      _Pnode->_Left->_Color = this->_Black;
      _Rrotate(_Fixnodeparent);
      break;
      }
     }

   _Fixnode->_Color = this->_Black;
   }

  if (0 < this->_Mysize())
   --this->_Mysize();

  return (_Erasednode);
  }

 template<class _Iter = iterator,
  class = enable_if_t<!is_same_v<_Iter, const_iterator>>>
  iterator erase(iterator _Where)
  {
  return (erase(const_iterator{_Where}));
  }

 iterator erase(const_iterator _Where)
  {
# 1362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
  const_iterator _Successor = _Where;
  ++_Successor;
  _Nodeptr _Erasednode = _Extract(_Where);





  _Alnode& _Al = this->_Getal();
  _Alnode_traits::destroy(_Al, ::std:: addressof(_Erasednode->_Myval));
  _Node::_Freenode0(_Al, _Erasednode);

  return (iterator(_Successor._Ptr,
   ::std:: addressof(this->_Get_data())));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  if (_First == begin() && _Last == end())
   {
   clear();
   return (begin());
   }
  else
   {
   while (_First != _Last)
    erase(_First++);
   return (iterator(_First._Ptr, ::std:: addressof(this->_Get_data())));
   }
  }

 size_type erase(const key_type& _Keyval)
  {
  _Pairii _Where = equal_range(_Keyval);
  size_type _Num = ::std:: distance(_Where.first, _Where.second);
  erase(_Where.first, _Where.second);
  return (_Num);
  }

 void clear() noexcept
  {




  _Erase(_Root());
  _Root() = this->_Myhead();
  _Lmost() = this->_Myhead();
  _Rmost() = this->_Myhead();
  this->_Mysize() = 0;
  }

 iterator find(const key_type& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || this->_Getcomp()(_Keyval, this->_Key(_Where._Ptr))

     ? end() : _Where);
  }

 const_iterator find(const key_type& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || this->_Getcomp()(_Keyval, this->_Key(_Where._Ptr))

     ? end() : _Where);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator find(const _Other& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || this->_Getcomp()(_Keyval, this->_Key(_Where._Ptr))

     ? end() : _Where);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator find(const _Other& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || this->_Getcomp()(_Keyval, this->_Key(_Where._Ptr))

     ? end() : _Where);
  }

 size_type count(const key_type& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  return (::std:: distance(_Ans.first, _Ans.second));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  size_type count(const _Other& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  return (::std:: distance(_Ans.first, _Ans.second));
  }

 iterator lower_bound(const key_type& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), ::std:: addressof(this->_Get_data())));
  }

 const_iterator lower_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), ::std:: addressof(this->_Get_data())));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator lower_bound(const _Other& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), ::std:: addressof(this->_Get_data())));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator lower_bound(const _Other& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), ::std:: addressof(this->_Get_data())));
  }

 iterator upper_bound(const key_type& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), ::std:: addressof(this->_Get_data())));
  }

 const_iterator upper_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), ::std:: addressof(this->_Get_data())));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator upper_bound(const _Other& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), ::std:: addressof(this->_Get_data())));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator upper_bound(const _Other& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), ::std:: addressof(this->_Get_data())));
  }

 _Pairii equal_range(const key_type& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 _Paircc equal_range(const key_type& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  _Pairii equal_range(const _Other& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  _Paircc equal_range(const _Other& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 void swap(_Tree& _Right) noexcept(_Is_nothrow_swappable<key_compare>::value)
  {
  if (this != ::std:: addressof(_Right))
   {
   _Swap_adl(this->_Getcomp(), _Right._Getcomp());
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myhead(), _Right._Myhead());
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   }
  }

protected:
 template<class _Valty>
  _Nodeptr _Buy_if_not_node(_Nodeptr _Node, _Valty&&)
  {
  return (_Node);
  }

 template<class _Valty>
  _Nodeptr _Buy_if_not_node(_Not_a_node_tag, _Valty&& _Val)
  {
  return (this->_Buynode(::std:: forward<_Valty>(_Val)));
  }

 void _Destroy_if_node(_Nodeptr _Newnode)
  {
  _Alnode& _Al = this->_Getal();
  _Alnode_traits::destroy(_Al, ::std:: addressof(_Newnode->_Myval));
  _Node::_Freenode0(_Al, _Newnode);
  }

 void _Destroy_if_node(_Not_a_node_tag)
  {
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_hint(const_iterator _Where,
   _Valty&& _Val, _Nodety _Newnode)
  {
  const_iterator _Next;
  bool _Leftish = false;

  try {








#pragma warning(push)
#pragma warning(disable: 4127)
 if (size() == 0)
   {
   return (_Insert_at(true, this->_Myhead(),
    ::std:: forward<_Valty>(_Val), _Newnode));
   }
  else if (this->_Multi)
   {
   if (_Where == begin())
    {
    if (!this->_Getcomp()(this->_Key(_Where._Ptr), this->_Kfn(_Val)))

     return (_Insert_at(true, _Where._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
    _Leftish = true;
    }
   else if (_Where == end())
    {
    if (!this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Rmost())))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!this->_Getcomp()(this->_Key(_Where._Ptr), this->_Kfn(_Val))

    && !this->_Getcomp()(this->_Kfn(_Val), this->_Key((--(_Next = _Where))._Ptr)))


    {
    if (_Next._Ptr->_Right->_Isnil)
     return (_Insert_at(false, _Next._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Ptr))

    && (++(_Next = _Where) == end()
     || !this->_Getcomp()(this->_Key(_Next._Ptr), this->_Kfn(_Val))))

    {
    if (_Where._Ptr->_Right->_Isnil)
     return (_Insert_at(false, _Where._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else
    {
    _Leftish = true;
    }
   }
  else
   {
   if (_Where == begin())
    {
    if (this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Ptr)))

     {
     return (_Insert_at(true, _Where._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
     }
    }
   else if (_Where == end())
    {
    if (this->_Getcomp()(this->_Key(_Rmost()), this->_Kfn(_Val)))

     {
     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
     }
    }
   else if (this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Ptr))

    && this->_Getcomp()(this->_Key((--(_Next = _Where))._Ptr), this->_Kfn(_Val)))


    {
    if (_Next._Ptr->_Right->_Isnil)
     {
     return (_Insert_at(false, _Next._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
     }
    else
     {
     return (_Insert_at(true, _Where._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
     }
    }
   else if (this->_Getcomp()(this->_Key(_Where._Ptr), this->_Kfn(_Val))

    && (++(_Next = _Where) == end()
     || this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Next._Ptr))))

    {
    if (_Where._Ptr->_Right->_Isnil)
     {
     return (_Insert_at(false, _Where._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
     }
    else
     {
     return (_Insert_at(true, _Next._Ptr,
      ::std:: forward<_Valty>(_Val), _Newnode));
     }
    }
   }
#pragma warning(pop)
 } catch (...) {
  _Destroy_if_node(_Newnode);
  throw;
  }

  return (_Insert_nohint(_Leftish,
   ::std:: forward<_Valty>(_Val), _Newnode).first);
  }

 template<class _Valty,
  class _Nodety>
  _Pairib _Insert_nohint(bool _Leftish,
   _Valty&& _Val, _Nodety _Newnode)
  {
  try {
  _Nodeptr _Trynode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();
  bool _Addleft = true;

  while (!_Trynode->_Isnil)
   {
   _Wherenode = _Trynode;
   if (_Leftish)
    {
    _Addleft = !this->_Getcomp()(this->_Key(_Trynode), this->_Kfn(_Val));


    }
   else
    {
    _Addleft = this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Trynode));


    }

   _Trynode = _Addleft ? _Trynode->_Left : _Trynode->_Right;
   }

#pragma warning(push)
#pragma warning(disable: 4127)
 if (this->_Multi)
   {
   return (_Pairib(_Insert_at(_Addleft, _Wherenode,
    ::std:: forward<_Valty>(_Val), _Newnode), true));
   }
  else
   {
   iterator _Where = iterator(_Wherenode, ::std:: addressof(this->_Get_data()));
   if (!_Addleft)
    {
    }
   else if (_Where == begin())
    {
    return (_Pairib(_Insert_at(true, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
    }
   else
    {
    --_Where;
    }

   if (this->_Getcomp()(this->_Key(_Where._Ptr), this->_Kfn(_Val)))


    {
    return (_Pairib(_Insert_at(_Addleft, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
    }
   else
    {
    _Destroy_if_node(_Newnode);
    return (_Pairib(_Where, false));
    }
   }
#pragma warning(pop)
 } catch (...) {
  _Destroy_if_node(_Newnode);
  throw;
  }
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode, _Valty&& _Val, _Nodety _Node)
  {
  if (max_size() - 1 <= this->_Mysize())
   {
   _Destroy_if_node(_Node);
   _Xlength_error("map/set<T> too long");
   }

  _Nodeptr _Newnode = _Buy_if_not_node(_Node, ::std:: forward<_Valty>(_Val));

  ++this->_Mysize();
  _Newnode->_Parent = _Wherenode;

  if (_Wherenode == this->_Myhead())
   {
   _Root() = _Newnode;
   _Lmost() = _Newnode;
   _Rmost() = _Newnode;
   }
  else if (_Addleft)
   {
   _Wherenode->_Left = _Newnode;
   if (_Wherenode == _Lmost())
    {
    _Lmost() = _Newnode;
    }
   }
  else
   {
   _Wherenode->_Right = _Newnode;
   if (_Wherenode == _Rmost())
    {
    _Rmost() = _Newnode;
    }
   }

  for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )
   {
   if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left)
    {
    _Wherenode = _Pnode->_Parent->_Parent->_Right;
    if (_Wherenode->_Color == this->_Red)
     {
     _Pnode->_Parent->_Color = this->_Black;
     _Wherenode->_Color = this->_Black;
     _Pnode->_Parent->_Parent->_Color = this->_Red;
     _Pnode = _Pnode->_Parent->_Parent;
     }
    else
     {
     if (_Pnode == _Pnode->_Parent->_Right)
      {
      _Pnode = _Pnode->_Parent;
      _Lrotate(_Pnode);
      }

     _Pnode->_Parent->_Color = this->_Black;
     _Pnode->_Parent->_Parent->_Color = this->_Red;
     _Rrotate(_Pnode->_Parent->_Parent);
     }
    }
   else
    {
    _Wherenode = _Pnode->_Parent->_Parent->_Left;
    if (_Wherenode->_Color == this->_Red)
     {
     _Pnode->_Parent->_Color = this->_Black;
     _Wherenode->_Color = this->_Black;
     _Pnode->_Parent->_Parent->_Color = this->_Red;
     _Pnode = _Pnode->_Parent->_Parent;
     }
    else
     {
     if (_Pnode == _Pnode->_Parent->_Left)
      {
      _Pnode = _Pnode->_Parent;
      _Rrotate(_Pnode);
      }

     _Pnode->_Parent->_Color = this->_Black;
     _Pnode->_Parent->_Parent->_Color = this->_Red;
     _Lrotate(_Pnode->_Parent->_Parent);
     }
    }
   }

  _Root()->_Color = this->_Black;
  return (iterator(_Newnode, ::std:: addressof(this->_Get_data())));
  }

 template<class _Moveit>
  void _Copy(const _Tree& _Right, _Moveit _Movefl)
  {
  _Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
  this->_Mysize() = _Right.size();
  if (!_Root()->_Isnil)
   {
   _Lmost() = this->_Min(_Root());
   _Rmost() = this->_Max(_Root());
   }
  else
   {
   _Lmost() = this->_Myhead();
   _Rmost() = this->_Myhead();
   }
  }

 template<class _Ty,
  class _Is_set>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
  {
  return (this->_Buynode(_Val));
  }

 template<class _Ty>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
  {
  return (this->_Buynode(::std:: move(_Val)));
  }

 template<class _Ty>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
  {
  return (this->_Buynode(
   ::std:: move(const_cast<key_type&>(_Val.first)),
   ::std:: move(_Val.second)));
  }

 template<class _Moveit>
  _Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
   _Moveit _Movefl)
  {
  _Nodeptr _Newroot = this->_Myhead();

  if (!_Rootnode->_Isnil)
   {
   typename is_same<key_type, value_type>::type _Is_set;
   _Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);
   _Pnode->_Parent = _Wherenode;
   _Pnode->_Color = _Rootnode->_Color;
   if (_Newroot->_Isnil)
    _Newroot = _Pnode;

   try {
   _Pnode->_Left = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);
   _Pnode->_Right = _Copy_nodes(_Rootnode->_Right, _Pnode, _Movefl);
   } catch (...) {
   _Erase(_Newroot);
   throw;
   }
   }

  return (_Newroot);
  }

 template<class _Other>
  _Paircc _Eqrange(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Lonode = this->_Myhead();
  _Nodeptr _Hinode = this->_Myhead();

  while (!_Pnode->_Isnil)
   {
   if (this->_Getcomp()(this->_Key(_Pnode), _Keyval))
    {
    _Pnode = _Pnode->_Right;
    }
   else
    {
    if (_Hinode->_Isnil
      && this->_Getcomp()(_Keyval, this->_Key(_Pnode)))

     {
     _Hinode = _Pnode;
     }

    _Lonode = _Pnode;
    _Pnode = _Pnode->_Left;
    }
   }

  _Pnode = _Hinode->_Isnil ? _Root() : _Hinode->_Left;
  while (!_Pnode->_Isnil)
   {
   if (this->_Getcomp()(_Keyval, this->_Key(_Pnode)))
    {
    _Hinode = _Pnode;
    _Pnode = _Pnode->_Left;
    }
   else
    {
    _Pnode = _Pnode->_Right;
    }
   }

  const_iterator _First = const_iterator(_Lonode, ::std:: addressof(this->_Get_data()));
  const_iterator _Last = const_iterator(_Hinode, ::std:: addressof(this->_Get_data()));
  return (_Paircc(_First, _Last));
  }

 template<class _Other>
  _Pairii _Eqrange(const _Other& _Keyval)
  {
  _Paircc _Ans(static_cast<const _Tree *>(this)->_Eqrange(_Keyval));
  iterator _First = iterator(_Ans.first._Ptr, ::std:: addressof(this->_Get_data()));
  iterator _Last = iterator(_Ans.second._Ptr, ::std:: addressof(this->_Get_data()));
  return (_Pairii(_First, _Last));
  }

 void _Erase(_Nodeptr _Rootnode)
  {
  for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)
   {
   _Erase(_Pnode->_Right);
   _Pnode = _Pnode->_Left;
   _Alnode& _Al = this->_Getal();
   _Alnode_traits::destroy(_Al, ::std:: addressof(_Rootnode->_Myval));
   _Node::_Freenode0(_Al, _Rootnode);
   }
  }

 bool _Compare(const key_type& _Left, const key_type& _Right) const
  {
  return (this->_Getcomp()(_Left, _Right));
  }

 template<class _Ty1,
  class _Ty2>
  bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
  {
  return (this->_Getcomp()(_Left, _Right));
  }

 template<class _Other>
  _Nodeptr _Lbound(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();

  while (!_Pnode->_Isnil)
   {
   if (_Compare(this->_Key(_Pnode), _Keyval))
    {
    _Pnode = _Pnode->_Right;
    }
   else
    {
    _Wherenode = _Pnode;
    _Pnode = _Pnode->_Left;
    }
   }

  return (_Wherenode);
  }

 _Nodeptr& _Lmost() const
  {
  return (this->_Myhead()->_Left);
  }

 void _Lrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = _Wherenode->_Right;
  _Wherenode->_Right = _Pnode->_Left;

  if (!_Pnode->_Left->_Isnil)
   {
   _Pnode->_Left->_Parent = _Wherenode;
   }

  _Pnode->_Parent = _Wherenode->_Parent;

  if (_Wherenode == _Root())
   {
   _Root() = _Pnode;
   }
  else if (_Wherenode == _Wherenode->_Parent->_Left)
   {
   _Wherenode->_Parent->_Left = _Pnode;
   }
  else
   {
   _Wherenode->_Parent->_Right = _Pnode;
   }

  _Pnode->_Left = _Wherenode;
  _Wherenode->_Parent = _Pnode;
  }

 _Nodeptr& _Rmost() const
  {
  return (this->_Myhead()->_Right);
  }

 _Nodeptr& _Root() const
  {
  return (this->_Myhead()->_Parent);
  }

 void _Rrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = _Wherenode->_Left;
  _Wherenode->_Left = _Pnode->_Right;

  if (!_Pnode->_Right->_Isnil)
   _Pnode->_Right->_Parent = _Wherenode;
  _Pnode->_Parent = _Wherenode->_Parent;

  if (_Wherenode == _Root())
   {
   _Root() = _Pnode;
   }
  else if (_Wherenode == _Wherenode->_Parent->_Right)
   {
   _Wherenode->_Parent->_Right = _Pnode;
   }
  else
   {
   _Wherenode->_Parent->_Left = _Pnode;
   }

  _Pnode->_Right = _Wherenode;
  _Wherenode->_Parent = _Pnode;
  }

 template<class _Other>
  _Nodeptr _Ubound(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();

  while (!_Pnode->_Isnil)
   {
   if (_Compare(_Keyval, this->_Key(_Pnode)))
    {
    _Wherenode = _Pnode;
    _Pnode = _Pnode->_Left;
    }
   else
    {
    _Pnode = _Pnode->_Right;
    }
   }

  return (_Wherenode);
  }
# 2168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
 void _Tidy()
  {
  erase(begin(), end());
  }

 const key_type& _Kfn(const value_type& _Val) const
  {
  return (_Traits::_Kfn(_Val));
  }

 const key_type& _Key(_Nodeptr _Pnode) const
  {
  return (this->_Kfn(_Pnode->_Myval));
  }
# 2426 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\xtree" 3
 };

template<class _Traits> inline
 bool operator==(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Traits> inline
 bool operator!=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Traits> inline
 bool operator<(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Traits> inline
 bool operator>(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Traits> inline
 bool operator<=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Traits> inline
 bool operator>=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left < _Right));
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\map" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)


namespace std {

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc,
 bool _Mfl>
 class _Tmap_traits
 {
public:
 using key_type = _Kty;
 using value_type = pair<const _Kty, _Ty>;
 using key_compare = _Pr;
 using allocator_type = _Alloc;






 enum
  {
  _Multi = _Mfl};

 class value_compare
  {
 public:
                                    typedef value_type first_argument_type;
                                    typedef value_type second_argument_type;
                                    typedef bool result_type;

  bool operator()(const value_type& _Left, const value_type& _Right) const
   {
   return (comp(_Left.first, _Right.first));
   }

 protected:
  friend _Tree<_Tmap_traits>;

  value_compare(key_compare _Pred)
   : comp(_Pred)
   {
   }

  key_compare comp;
  };

 template<class _Ty1,
  class _Ty2>
  static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)
  {
  return (_Val.first);
  }
 };


template<class _Kty,
 class _Ty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty>>>
 class map
  : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false>>
 {
public:
 static_assert(!0 || is_same_v<pair<const _Kty, _Ty>, typename _Alloc::value_type>,
  "map<Key, Value, Compare, Allocator>" " requires that Allocator's value_type match " "pair<const Key, Value>" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

 using _Mybase = _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false>>;
 using key_type = _Kty;
 using mapped_type = _Ty;
 using key_compare = _Pr;
 using value_compare = typename _Mybase::value_compare;
 using value_type = typename _Mybase::value_type;
 using allocator_type = typename _Mybase::allocator_type;
 using size_type = typename _Mybase::size_type;
 using difference_type = typename _Mybase::difference_type;
 using pointer = typename _Mybase::pointer;
 using const_pointer = typename _Mybase::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;
 using iterator = typename _Mybase::iterator;
 using const_iterator = typename _Mybase::const_iterator;
 using reverse_iterator = typename _Mybase::reverse_iterator;
 using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

 using _Alnode = typename _Mybase::_Alnode;
 using _Alnode_traits = typename _Mybase::_Alnode_traits;
 using _Pairib = typename _Mybase::_Pairib;





 map()
  : _Mybase(key_compare())
  {
  }

 explicit map(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 map(const map& _Right)
  : _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))
  {
  }

 map(const map& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit map(const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  }

 map(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last)
  : _Mybase(key_compare())
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last, const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  insert(_First, _Last);
  }

 map& operator=(const map& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 map(map&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 map(map&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 map& operator=(map&& _Right)
  noexcept(_Alnode_traits::is_always_equal::value && is_nothrow_move_assignable_v<_Pr>)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 mapped_type& operator[](key_type&& _Keyval)
  {
  return (try_emplace(::std:: move(_Keyval)).first->second);
  }

 void swap(map& _Right) noexcept(noexcept(_Mybase::swap(_Right)))
  {
  _Mybase::swap(_Right);
  }

 using _Mybase::insert;

 template<class _Valty,
  class = enable_if_t<is_constructible_v<value_type, _Valty>>>
  _Pairib insert(_Valty&& _Val)
  {
  return (this->emplace(::std:: forward<_Valty>(_Val)));
  }

 template<class _Valty,
  class = enable_if_t<is_constructible_v<value_type, _Valty>>>
  iterator insert(const_iterator _Where, _Valty&& _Val)
  {
  return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
  }

 template<class _Keyty,
  class... _Mappedty>
  _Pairib _Try_emplace(_Keyty&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Ptr)))

   return (_Pairib(
    _Mybase::emplace_hint(_Where,
     piecewise_construct,
     ::std:: forward_as_tuple(
      ::std:: forward<_Keyty>(_Keyval)),
     ::std:: forward_as_tuple(
      ::std:: forward<_Mappedty>(_Mapval)...)),
    true));
  else
   return (_Pairib(_Where, false));
  }

 template<class... _Mappedty>
  _Pairib try_emplace(const key_type& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(_Keyval, ::std:: forward<_Mappedty>(_Mapval)...));
  }

 template<class... _Mappedty>
  iterator try_emplace(const_iterator, const key_type& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)...).first);
  }

 template<class... _Mappedty>
  _Pairib try_emplace(key_type&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)...));
  }

 template<class... _Mappedty>
  iterator try_emplace(const_iterator, key_type&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)...).first);
  }

 template<class _Keyty,
  class _Mappedty>
  _Pairib _Insert_or_assign(_Keyty&& _Keyval,
   _Mappedty&& _Mapval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Ptr)))

   return (_Pairib(
    _Mybase::emplace_hint(_Where,
     ::std:: forward<_Keyty>(_Keyval),
     ::std:: forward<_Mappedty>(_Mapval)),
    true));
  else
   {
   _Where->second = ::std:: forward<_Mappedty>(_Mapval);
   return (_Pairib(_Where, false));
   }
  }

 template<class _Mappedty>
  _Pairib insert_or_assign(const key_type& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)));
  }

 template<class _Mappedty>
  iterator insert_or_assign(const_iterator, const key_type& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)).first);
  }

 template<class _Mappedty>
  _Pairib insert_or_assign(key_type&& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)));
  }

 template<class _Mappedty>
  iterator insert_or_assign(const_iterator, key_type&& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)).first);
  }

 map(initializer_list<value_type> _Ilist)
  : _Mybase(key_compare())
  {
  insert(_Ilist);
  }

 map(initializer_list<value_type> _Ilist,
  const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  insert(_Ilist);
  }

 map(initializer_list<value_type> _Ilist, const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  insert(_Ilist);
  }

 map(initializer_list<value_type> _Ilist,
  const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  insert(_Ilist);
  }

 map& operator=(initializer_list<value_type> _Ilist)
  {
  _Mybase::clear();
  insert(_Ilist);
  return (*this);
  }

 mapped_type& operator[](const key_type& _Keyval)
  {
  return (try_emplace(_Keyval).first->second);
  }

 mapped_type& at(const key_type& _Keyval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Ptr)))
   _Xout_of_range("invalid map<K, T> key");
  return (_Where->second);
  }

 const mapped_type& at(const key_type& _Keyval) const
  {
  const_iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Ptr)))
   _Xout_of_range("invalid map<K, T> key");
  return (_Where->second);
  }

 using _Mybase::_Unchecked_begin;
 using _Mybase::_Unchecked_end;
 };

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc> inline
 void swap(map<_Kty, _Ty, _Pr, _Alloc>& _Left,
  map<_Kty, _Ty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }


template<class _Kty,
 class _Ty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty>>>
 class multimap
  : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true>>
 {
public:
 static_assert(!0 || is_same_v<pair<const _Kty, _Ty>, typename _Alloc::value_type>,
  "multimap<Key, Value, Compare, Allocator>" " requires that Allocator's value_type match " "pair<const Key, Value>" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

 using _Mybase = _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true>>;
 using key_type = _Kty;
 using mapped_type = _Ty;
 using key_compare = _Pr;
 using value_compare = typename _Mybase::value_compare;
 using value_type = typename _Mybase::value_type;
 using allocator_type = typename _Mybase::allocator_type;
 using size_type = typename _Mybase::size_type;
 using difference_type = typename _Mybase::difference_type;
 using pointer = typename _Mybase::pointer;
 using const_pointer = typename _Mybase::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;
 using iterator = typename _Mybase::iterator;
 using const_iterator = typename _Mybase::const_iterator;
 using reverse_iterator = typename _Mybase::reverse_iterator;
 using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

 using _Alnode = typename _Mybase::_Alnode;
 using _Alnode_traits = typename _Mybase::_Alnode_traits;

 multimap()
  : _Mybase(key_compare())
  {
  }

 explicit multimap(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 multimap(const multimap& _Right)
  : _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))
  {
  }

 multimap(const multimap& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit multimap(const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  }

 multimap(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last)
  : _Mybase(key_compare())
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  insert(_First, _Last);
  }

 multimap& operator=(const multimap& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 multimap(multimap&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 multimap(multimap&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 multimap& operator=(multimap&& _Right)
  noexcept(_Alnode_traits::is_always_equal::value && is_nothrow_move_assignable_v<_Pr>)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class... _Valty>
  iterator emplace(_Valty&&... _Val)
  {
  return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
  }

 void swap(multimap& _Right) noexcept(noexcept(_Mybase::swap(_Right)))
  {
  _Mybase::swap(_Right);
  }

 using _Mybase::insert;

 template<class _Valty,
  class = enable_if_t<is_constructible_v<value_type, _Valty>>>
  iterator insert(_Valty&& _Val)
  {
  return (this->emplace(::std:: forward<_Valty>(_Val)));
  }

 template<class _Valty,
  class = enable_if_t<is_constructible_v<value_type, _Valty>>>
  iterator insert(const_iterator _Where, _Valty&& _Val)
  {
  return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
  }

 multimap(initializer_list<value_type> _Ilist)
  : _Mybase(key_compare())
  {
  insert(_Ilist);
  }

 multimap(initializer_list<value_type> _Ilist,
  const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  insert(_Ilist);
  }

 multimap(initializer_list<value_type> _Ilist,
  const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  insert(_Ilist);
  }

 multimap(initializer_list<value_type> _Ilist,
  const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  insert(_Ilist);
  }

 multimap& operator=(initializer_list<value_type> _Ilist)
  {
  _Mybase::clear();
  insert(_Ilist);
  return (*this);
  }

 using _Mybase::_Unchecked_begin;
 using _Mybase::_Unchecked_end;
 };

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc> inline
 void swap(multimap<_Kty, _Ty, _Pr, _Alloc>& _Left,
  multimap<_Kty, _Ty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 40 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\set" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)


namespace std {

template<class _Kty,
 class _Pr,
 class _Alloc,
 bool _Mfl>
 class _Tset_traits
 {
public:
 using key_type = _Kty;
 using value_type = _Kty;
 using key_compare = _Pr;
 using allocator_type = _Alloc;






 enum
  {
  _Multi = _Mfl};

 using value_compare = key_compare;

 static const _Kty& _Kfn(const value_type& _Val)
  {
  return (_Val);
  }
 };


template<class _Kty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<_Kty>>
 class set
  : public _Tree<_Tset_traits<_Kty, _Pr, _Alloc, false>>
 {
public:
 static_assert(!0 || is_same_v<_Kty, typename _Alloc::value_type>,
  "set<T, Compare, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

 using _Mybase = _Tree<_Tset_traits<_Kty, _Pr, _Alloc, false>>;
 using key_type = _Kty;
 using key_compare = _Pr;
 using value_compare = typename _Mybase::value_compare;
 using value_type = typename _Mybase::value_type;
 using allocator_type = typename _Mybase::allocator_type;
 using size_type = typename _Mybase::size_type;
 using difference_type = typename _Mybase::difference_type;
 using pointer = typename _Mybase::pointer;
 using const_pointer = typename _Mybase::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;
 using iterator = typename _Mybase::iterator;
 using const_iterator = typename _Mybase::const_iterator;
 using reverse_iterator = typename _Mybase::reverse_iterator;
 using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

 using _Alnode = typename _Mybase::_Alnode;
 using _Alnode_traits = typename _Mybase::_Alnode_traits;





 set()
  : _Mybase(key_compare())
  {
  }

 explicit set(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 set(const set& _Right)
  : _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))
  {
  }

 set(const set& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit set(const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  }

 set(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  set(_Iter _First, _Iter _Last)
  : _Mybase(key_compare())
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  set(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  set(_Iter _First, _Iter _Last,
   const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  set(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_First, _Last);
  }

 set& operator=(const set& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 set(set&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 set(set&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 set& operator=(set&& _Right)
  noexcept(_Alnode_traits::is_always_equal::value && is_nothrow_move_assignable_v<_Pr>)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 void swap(set& _Right)
  noexcept(noexcept(_Mybase::swap(_Right)))
  {
  _Mybase::swap(_Right);
  }

 set(initializer_list<value_type> _Ilist)
  : _Mybase(key_compare())
  {
  this->insert(_Ilist);
  }

 set(initializer_list<value_type> _Ilist,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  this->insert(_Ilist);
  }

 set(initializer_list<value_type> _Ilist,
   const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  this->insert(_Ilist);
  }

 set(initializer_list<value_type> _Ilist,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_Ilist);
  }

 set& operator=(initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist);
  return (*this);
  }

 using _Mybase::_Unchecked_begin;
 using _Mybase::_Unchecked_end;
 };

template<class _Kty,
 class _Pr,
 class _Alloc> inline
 void swap(set<_Kty, _Pr, _Alloc>& _Left,
  set<_Kty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }


template<class _Kty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<_Kty>>
 class multiset
  : public _Tree<_Tset_traits<_Kty, _Pr, _Alloc, true>>
 {
public:
 static_assert(!0 || is_same_v<_Kty, typename _Alloc::value_type>,
  "multiset<T, Compare, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

 using _Mybase = _Tree<_Tset_traits<_Kty, _Pr, _Alloc, true>>;
 using key_type = _Kty;
 using key_compare = _Pr;
 using value_compare = typename _Mybase::value_compare;
 using value_type = typename _Mybase::value_type;
 using allocator_type = typename _Mybase::allocator_type;
 using size_type = typename _Mybase::size_type;
 using difference_type = typename _Mybase::difference_type;
 using pointer = typename _Mybase::pointer;
 using const_pointer = typename _Mybase::const_pointer;
 using reference = value_type&;
 using const_reference = const value_type&;
 using iterator = typename _Mybase::iterator;
 using const_iterator = typename _Mybase::const_iterator;
 using reverse_iterator = typename _Mybase::reverse_iterator;
 using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

 using _Alnode = typename _Mybase::_Alnode;
 using _Alnode_traits = typename _Mybase::_Alnode_traits;

 multiset()
  : _Mybase(key_compare())
  {
  }

 explicit multiset(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 multiset(const multiset& _Right)
  : _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))
  {
  }

 multiset(const multiset& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit multiset(const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  }

 multiset(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  multiset(_Iter _First, _Iter _Last)
  : _Mybase(key_compare())
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  multiset(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  multiset(_Iter _First, _Iter _Last,
   const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  multiset(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_First, _Last);
  }

 multiset& operator=(const multiset& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 multiset(multiset&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 multiset(multiset&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 multiset& operator=(multiset&& _Right)
  noexcept(_Alnode_traits::is_always_equal::value && is_nothrow_move_assignable_v<_Pr>)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class... _Valty>
  iterator emplace(_Valty&&... _Val)
  {
  return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
  }

 void swap(multiset& _Right)
  noexcept(noexcept(_Mybase::swap(_Right)))
  {
  _Mybase::swap(_Right);
  }

 multiset(initializer_list<value_type> _Ilist)
  : _Mybase(key_compare())
  {
  this->insert(_Ilist);
  }

 multiset(initializer_list<value_type> _Ilist,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  this->insert(_Ilist);
  }

 multiset(initializer_list<value_type> _Ilist,
   const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  this->insert(_Ilist);
  }

 multiset(initializer_list<value_type> _Ilist,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_Ilist);
  }

 multiset& operator=(initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist);
  return (*this);
  }

 using _Mybase::_Unchecked_begin;
 using _Mybase::_Unchecked_end;
 };

template<class _Kty,
 class _Pr,
 class _Alloc> inline
 void swap(multiset<_Kty, _Pr, _Alloc>& _Left,
  multiset<_Kty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 41 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2




# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h" 1
# 34 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\assert.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\assert.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\assert.h" 3
 extern "C" {
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\assert.h" 3
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\ucrt\\assert.h" 3
#pragma pack(pop)
# 34 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h" 2
# 47 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/platform_macros.h" 1
# 47 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h" 2
# 61 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
#pragma runtime_checks("c", off)
# 125 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
namespace google {
namespace protobuf {

typedef unsigned int uint;


typedef signed __int8 int8;
typedef __int16 int16;
typedef __int32 int32;
typedef __int64 int64;

typedef unsigned __int8 uint8;
typedef unsigned __int16 uint16;
typedef unsigned __int32 uint32;
typedef unsigned __int64 uint64;
# 170 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
static const int32 kint32max = 0x7FFFFFFF;
static const int32 kint32min = -kint32max - 1;
static const int64 kint64max = 0x7FFFFFFFFFFFFFFFI64;
static const int64 kint64min = -kint64max - 1;
static const uint32 kuint32max = 0xFFFFFFFFu;
static const uint64 kuint64max = 0xFFFFFFFFFFFFFFFFUI64;
# 406 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
class Bits {
 public:
  static uint32 Log2FloorNonZero(uint32 n) {
# 418 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
  return Log2FloorNonZero_Portable(n);

  }

  static uint32 Log2FloorNonZero64(uint64 n) {
# 432 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
  return Log2FloorNonZero64_Portable(n);

  }
 private:
  static int Log2FloorNonZero_Portable(uint32 n) {
    if (n == 0)
      return -1;
    int log = 0;
    uint32 value = n;
    for (int i = 4; i >= 0; --i) {
      int shift = (1 << i);
      uint32 x = value >> shift;
      if (x != 0) {
        value = x;
        log += shift;
      }
    }
    ((void)0);
    return log;
  }

  static int Log2FloorNonZero64_Portable(uint64 n) {
    const uint32 topbits = static_cast<uint32>(n >> 32);
    if (topbits == 0) {

      return static_cast<int>(Log2FloorNonZero(static_cast<uint32>(n)));
    } else {
      return 32 + static_cast<int>(Log2FloorNonZero(topbits));
    }
  }
};



                   uint32 ghtonl(uint32 x);

class BigEndian {
 public:


  static uint16 FromHost16(uint16 x) { return _byteswap_ushort(x); }
  static uint16 ToHost16(uint16 x) { return _byteswap_ushort(x); }

  static uint32 FromHost32(uint32 x) { return _byteswap_ulong(x); }
  static uint32 ToHost32(uint32 x) { return _byteswap_ulong(x); }

  static uint64 FromHost64(uint64 x) { return _byteswap_uint64(x); }
  static uint64 ToHost64(uint64 x) { return _byteswap_uint64(x); }

  static bool IsLittleEndian() { return true; }
# 499 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/port.h"
  static uint16 Load16(const void *p) {
    return ToHost16((*reinterpret_cast<const uint16 *>(p)));
  }

  static void Store16(void *p, uint16 v) {
    (*reinterpret_cast<uint16 *>(p) = (FromHost16(v)));
  }

  static uint32 Load32(const void *p) {
    return ToHost32((*reinterpret_cast<const uint32 *>(p)));
  }

  static void Store32(void *p, uint32 v) {
    (*reinterpret_cast<uint32 *>(p) = (FromHost32(v)));
  }

  static uint64 Load64(const void *p) {
    return ToHost64((*reinterpret_cast<const uint64 *>(p)));
  }

  static void Store64(void *p, uint64 v) {
    (*reinterpret_cast<uint64 *>(p) = (FromHost64(v)));
  }
};







}
}
# 45 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2

# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/macros.h" 1
# 36 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/macros.h"
namespace google {
namespace protobuf {
# 107 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/macros.h"
namespace internal {

template <bool>
struct CompileAssert {
};

}
# 165 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/macros.h"
}
}
# 46 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2




# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/logging.h" 1
# 40 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/logging.h"
namespace google {
namespace protobuf {

enum LogLevel {
  LOGLEVEL_INFO,

  LOGLEVEL_WARNING,



  LOGLEVEL_ERROR,

  LOGLEVEL_FATAL,





  LOGLEVEL_DFATAL = LOGLEVEL_ERROR



};

class StringPiece;
namespace util {
class Status;
}
class uint128;
namespace internal {

class LogFinisher;

class LogMessage {
 public:
  LogMessage(LogLevel level, const char* filename, int line);
  ~LogMessage();

  LogMessage& operator<<(const std::string& value);
  LogMessage& operator<<(const char* value);
  LogMessage& operator<<(char value);
  LogMessage& operator<<(int value);
  LogMessage& operator<<(uint value);
  LogMessage& operator<<(long value);
  LogMessage& operator<<(unsigned long value);
  LogMessage& operator<<(long long value);
  LogMessage& operator<<(unsigned long long value);
  LogMessage& operator<<(double value);
  LogMessage& operator<<(void* value);
  LogMessage& operator<<(const StringPiece& value);
  LogMessage& operator<<(const ::google::protobuf::util::Status& status);
  LogMessage& operator<<(const uint128& value);

 private:
  friend class LogFinisher;
  void Finish();

  LogLevel level_;
  const char* filename_;
  int line_;
  std::string message_;
};



class LogFinisher {
 public:
  void operator=(LogMessage& other);
};

template<typename T>
bool IsOk(T status) { return status.ok(); }
template<>
inline bool IsOk(bool status) { return status; }

}
# 161 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/logging.h"
namespace internal {
template<typename T>
T* CheckNotNull(const char* , int ,
                const char* name, T* val) {
  if (val == 0) {
    ::google::protobuf::internal::LogFinisher() = ::google::protobuf::internal::LogMessage( ::google::protobuf::LOGLEVEL_FATAL, "..\\3rd\\protobuf\\src\\google/protobuf/stubs/logging.h", 166) << name;
  }
  return val;
}
}
# 203 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/logging.h"
typedef void LogHandler(LogLevel level, const char* filename, int line,
                        const std::string& message);
# 219 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/logging.h"
                   LogHandler* SetLogHandler(LogHandler* new_func);
# 228 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/logging.h"
class LogSilencer {
 public:
  LogSilencer();
  ~LogSilencer();
};

}
}
# 50 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2

# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/scoped_ptr.h" 1
# 36 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/scoped_ptr.h"
namespace google {
namespace protobuf {




namespace internal {





template <class C> class scoped_ptr;
template <class C> class scoped_array;
# 58 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/scoped_ptr.h"
template <class C>
class scoped_ptr {
 public:


  typedef C element_type;




  explicit scoped_ptr(C* p = 0) : ptr_(p) { }



  ~scoped_ptr() {
    enum { type_must_be_complete = sizeof(C) };
    delete ptr_;
  }




  void reset(C* p = 0) {
    if (p != ptr_) {
      enum { type_must_be_complete = sizeof(C) };
      delete ptr_;
      ptr_ = p;
    }
  }



  C& operator*() const {
    ((void)0);
    return *ptr_;
  }
  C* operator->() const {
    ((void)0);
    return ptr_;
  }
  C* get() const { return ptr_; }




  bool operator==(C* p) const { return ptr_ == p; }
  bool operator!=(C* p) const { return ptr_ != p; }


  void swap(scoped_ptr& p2) {
    C* tmp = ptr_;
    ptr_ = p2.ptr_;
    p2.ptr_ = tmp;
  }






  C* release() {
    C* retVal = ptr_;
    ptr_ = 0;
    return retVal;
  }

 private:
  C* ptr_;




  template <class C2> bool operator==(scoped_ptr<C2> const& p2) const;
  template <class C2> bool operator!=(scoped_ptr<C2> const& p2) const;


  scoped_ptr(const scoped_ptr&);
  void operator=(const scoped_ptr&);
};
# 145 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/scoped_ptr.h"
template <class C>
class scoped_array {
 public:


  typedef C element_type;




  explicit scoped_array(C* p = 0) : array_(p) { }



  ~scoped_array() {
    enum { type_must_be_complete = sizeof(C) };
    delete[] array_;
  }




  void reset(C* p = 0) {
    if (p != array_) {
      enum { type_must_be_complete = sizeof(C) };
      delete[] array_;
      array_ = p;
    }
  }



  C& operator[](std::ptrdiff_t i) const {
    ((void)0);
    ((void)0);
    return array_[i];
  }



  C* get() const {
    return array_;
  }




  bool operator==(C* p) const { return array_ == p; }
  bool operator!=(C* p) const { return array_ != p; }


  void swap(scoped_array& p2) {
    C* tmp = array_;
    array_ = p2.array_;
    p2.array_ = tmp;
  }






  C* release() {
    C* retVal = array_;
    array_ = 0;
    return retVal;
  }

 private:
  C* array_;


  template <class C2> bool operator==(scoped_array<C2> const& p2) const;
  template <class C2> bool operator!=(scoped_array<C2> const& p2) const;


  scoped_array(const scoped_array&);
  void operator=(const scoped_array&);
};

}



using internal::scoped_ptr;
using internal::scoped_array;


}
}
# 51 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2

# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/mutex.h" 1
# 41 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/mutex.h"
namespace google {
namespace protobuf {
namespace internal {




class Mutex {
 public:

  Mutex();


  ~Mutex();


  void Lock();


  void Unlock();



  void AssertHeld();

 private:
  struct Internal;
  Internal* mInternal;

  Mutex(const Mutex&); void operator=(const Mutex&);
};


class MutexLock {
 public:
  explicit MutexLock(Mutex *mu) : mu_(mu) { this->mu_->Lock(); }
  ~MutexLock() { this->mu_->Unlock(); }
 private:
  Mutex *const mu_;
  MutexLock(const MutexLock&); void operator=(const MutexLock&);
};


typedef MutexLock ReaderMutexLock;
typedef MutexLock WriterMutexLock;


class MutexLockMaybe {
 public:
  explicit MutexLockMaybe(Mutex *mu) :
    mu_(mu) { if (this->mu_ != 0) { this->mu_->Lock(); } }
  ~MutexLockMaybe() { if (this->mu_ != 0) { this->mu_->Unlock(); } }
 private:
  Mutex *const mu_;
  MutexLockMaybe(const MutexLockMaybe&); void operator=(const MutexLockMaybe&);
};
# 126 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/mutex.h"
}



using internal::Mutex;
using internal::MutexLock;
using internal::ReaderMutexLock;
using internal::WriterMutexLock;
using internal::MutexLockMaybe;


}
}
# 52 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2

# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/callback.h" 1
# 10 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/callback.h"
namespace google {
namespace protobuf {
# 70 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/callback.h"
class Closure {
 public:
  Closure() {}
  virtual ~Closure();

  virtual void Run() = 0;

 private:
  Closure(const Closure&); void operator=(const Closure&);
};

template<typename R>
class ResultCallback {
 public:
  ResultCallback() {}
  virtual ~ResultCallback() {}

  virtual R Run() = 0;

 private:
  ResultCallback(const ResultCallback&); void operator=(const ResultCallback&);
};

template<typename R, typename A1>
class ResultCallback1 {
 public:
  ResultCallback1() {}
  virtual ~ResultCallback1() {}

  virtual R Run(A1) = 0;

 private:
  ResultCallback1(const ResultCallback1&); void operator=(const ResultCallback1&);
};

template<typename R, typename A1, typename A2>
class ResultCallback2 {
 public:
  ResultCallback2() {}
  virtual ~ResultCallback2() {}

  virtual R Run(A1,A2) = 0;

 private:
  ResultCallback2(const ResultCallback2&); void operator=(const ResultCallback2&);
};

namespace internal {

class FunctionClosure0 : public Closure {
 public:
  typedef void (*FunctionType)();

  FunctionClosure0(FunctionType function, bool self_deleting)
    : function_(function), self_deleting_(self_deleting) {}
  ~FunctionClosure0();

  void Run() {
    bool needs_delete = self_deleting_;
    function_();
    if (needs_delete) delete this;
  }

 private:
  FunctionType function_;
  bool self_deleting_;
};

template <typename Class>
class MethodClosure0 : public Closure {
 public:
  typedef void (Class::*MethodType)();

  MethodClosure0(Class* object, MethodType method, bool self_deleting)
    : object_(object), method_(method), self_deleting_(self_deleting) {}
  ~MethodClosure0() {}

  void Run() {
    bool needs_delete = self_deleting_;
    (object_->*method_)();
    if (needs_delete) delete this;
  }

 private:
  Class* object_;
  MethodType method_;
  bool self_deleting_;
};

template <typename Arg1>
class FunctionClosure1 : public Closure {
 public:
  typedef void (*FunctionType)(Arg1 arg1);

  FunctionClosure1(FunctionType function, bool self_deleting,
                   Arg1 arg1)
    : function_(function), self_deleting_(self_deleting),
      arg1_(arg1) {}
  ~FunctionClosure1() {}

  void Run() {
    bool needs_delete = self_deleting_;
    function_(arg1_);
    if (needs_delete) delete this;
  }

 private:
  FunctionType function_;
  bool self_deleting_;
  Arg1 arg1_;
};

template <typename Class, typename Arg1>
class MethodClosure1 : public Closure {
 public:
  typedef void (Class::*MethodType)(Arg1 arg1);

  MethodClosure1(Class* object, MethodType method, bool self_deleting,
                 Arg1 arg1)
    : object_(object), method_(method), self_deleting_(self_deleting),
      arg1_(arg1) {}
  ~MethodClosure1() {}

  void Run() {
    bool needs_delete = self_deleting_;
    (object_->*method_)(arg1_);
    if (needs_delete) delete this;
  }

 private:
  Class* object_;
  MethodType method_;
  bool self_deleting_;
  Arg1 arg1_;
};

template <typename Arg1, typename Arg2>
class FunctionClosure2 : public Closure {
 public:
  typedef void (*FunctionType)(Arg1 arg1, Arg2 arg2);

  FunctionClosure2(FunctionType function, bool self_deleting,
                   Arg1 arg1, Arg2 arg2)
    : function_(function), self_deleting_(self_deleting),
      arg1_(arg1), arg2_(arg2) {}
  ~FunctionClosure2() {}

  void Run() {
    bool needs_delete = self_deleting_;
    function_(arg1_, arg2_);
    if (needs_delete) delete this;
  }

 private:
  FunctionType function_;
  bool self_deleting_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Class, typename Arg1, typename Arg2>
class MethodClosure2 : public Closure {
 public:
  typedef void (Class::*MethodType)(Arg1 arg1, Arg2 arg2);

  MethodClosure2(Class* object, MethodType method, bool self_deleting,
                 Arg1 arg1, Arg2 arg2)
    : object_(object), method_(method), self_deleting_(self_deleting),
      arg1_(arg1), arg2_(arg2) {}
  ~MethodClosure2() {}

  void Run() {
    bool needs_delete = self_deleting_;
    (object_->*method_)(arg1_, arg2_);
    if (needs_delete) delete this;
  }

 private:
  Class* object_;
  MethodType method_;
  bool self_deleting_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template<typename R>
class FunctionResultCallback_0_0 : public ResultCallback<R> {
 public:
  typedef R (*FunctionType)();

  FunctionResultCallback_0_0(FunctionType function, bool self_deleting)
      : function_(function), self_deleting_(self_deleting) {}
  ~FunctionResultCallback_0_0() {}

  R Run() {
    bool needs_delete = self_deleting_;
    R result = function_();
    if (needs_delete) delete this;
    return result;
  }

 private:
  FunctionType function_;
  bool self_deleting_;
};

template<typename R, typename P1>
class FunctionResultCallback_1_0 : public ResultCallback<R> {
 public:
  typedef R (*FunctionType)(P1);

  FunctionResultCallback_1_0(FunctionType function, bool self_deleting,
                             P1 p1)
      : function_(function), self_deleting_(self_deleting), p1_(p1) {}
  ~FunctionResultCallback_1_0() {}

  R Run() {
    bool needs_delete = self_deleting_;
    R result = function_(p1_);
    if (needs_delete) delete this;
    return result;
  }

 private:
  FunctionType function_;
  bool self_deleting_;
  P1 p1_;
};

template<typename R, typename Arg1>
class FunctionResultCallback_0_1 : public ResultCallback1<R, Arg1> {
 public:
  typedef R (*FunctionType)(Arg1 arg1);

  FunctionResultCallback_0_1(FunctionType function, bool self_deleting)
      : function_(function), self_deleting_(self_deleting) {}
  ~FunctionResultCallback_0_1() {}

  R Run(Arg1 a1) {
    bool needs_delete = self_deleting_;
    R result = function_(a1);
    if (needs_delete) delete this;
    return result;
  }

 private:
  FunctionType function_;
  bool self_deleting_;
};

template<typename R, typename P1, typename A1>
class FunctionResultCallback_1_1 : public ResultCallback1<R, A1> {
 public:
  typedef R (*FunctionType)(P1, A1);

  FunctionResultCallback_1_1(FunctionType function, bool self_deleting,
                             P1 p1)
      : function_(function), self_deleting_(self_deleting), p1_(p1) {}
  ~FunctionResultCallback_1_1() {}

  R Run(A1 a1) {
    bool needs_delete = self_deleting_;
    R result = function_(p1_, a1);
    if (needs_delete) delete this;
    return result;
  }

 private:
  FunctionType function_;
  bool self_deleting_;
  P1 p1_;
};

template <typename T>
struct InternalConstRef {
  typedef typename remove_reference<T>::type base_type;
  typedef const base_type& type;
};

template<typename R, typename T>
class MethodResultCallback_0_0 : public ResultCallback<R> {
 public:
  typedef R (T::*MethodType)();
  MethodResultCallback_0_0(T* object, MethodType method, bool self_deleting)
      : object_(object),
        method_(method),
        self_deleting_(self_deleting) {}
  ~MethodResultCallback_0_0() {}

  R Run() {
    bool needs_delete = self_deleting_;
    R result = (object_->*method_)();
    if (needs_delete) delete this;
    return result;
  }

 private:
  T* object_;
  MethodType method_;
  bool self_deleting_;
};

template <typename R, typename T, typename P1, typename P2, typename P3,
          typename P4, typename P5, typename A1, typename A2>
class MethodResultCallback_5_2 : public ResultCallback2<R, A1, A2> {
 public:
  typedef R (T::*MethodType)(P1, P2, P3, P4, P5, A1, A2);
  MethodResultCallback_5_2(T* object, MethodType method, bool self_deleting,
                           P1 p1, P2 p2, P3 p3, P4 p4, P5 p5)
      : object_(object),
        method_(method),
        self_deleting_(self_deleting),
        p1_(p1),
        p2_(p2),
        p3_(p3),
        p4_(p4),
        p5_(p5) {}
  ~MethodResultCallback_5_2() {}

  R Run(A1 a1, A2 a2) {
    bool needs_delete = self_deleting_;
    R result = (object_->*method_)(p1_, p2_, p3_, p4_, p5_, a1, a2);
    if (needs_delete) delete this;
    return result;
  }

 private:
  T* object_;
  MethodType method_;
  bool self_deleting_;
  typename remove_reference<P1>::type p1_;
  typename remove_reference<P2>::type p2_;
  typename remove_reference<P3>::type p3_;
  typename remove_reference<P4>::type p4_;
  typename remove_reference<P5>::type p5_;
};

}


inline Closure* NewCallback(void (*function)()) {
  return new internal::FunctionClosure0(function, true);
}


inline Closure* NewPermanentCallback(void (*function)()) {
  return new internal::FunctionClosure0(function, false);
}


template <typename Class>
inline Closure* NewCallback(Class* object, void (Class::*method)()) {
  return new internal::MethodClosure0<Class>(object, method, true);
}


template <typename Class>
inline Closure* NewPermanentCallback(Class* object, void (Class::*method)()) {
  return new internal::MethodClosure0<Class>(object, method, false);
}


template <typename Arg1>
inline Closure* NewCallback(void (*function)(Arg1),
                            Arg1 arg1) {
  return new internal::FunctionClosure1<Arg1>(function, true, arg1);
}


template <typename Arg1>
inline Closure* NewPermanentCallback(void (*function)(Arg1),
                                     Arg1 arg1) {
  return new internal::FunctionClosure1<Arg1>(function, false, arg1);
}


template <typename Class, typename Arg1>
inline Closure* NewCallback(Class* object, void (Class::*method)(Arg1),
                            Arg1 arg1) {
  return new internal::MethodClosure1<Class, Arg1>(object, method, true, arg1);
}


template <typename Class, typename Arg1>
inline Closure* NewPermanentCallback(Class* object, void (Class::*method)(Arg1),
                                     Arg1 arg1) {
  return new internal::MethodClosure1<Class, Arg1>(object, method, false, arg1);
}


template <typename Arg1, typename Arg2>
inline Closure* NewCallback(void (*function)(Arg1, Arg2),
                            Arg1 arg1, Arg2 arg2) {
  return new internal::FunctionClosure2<Arg1, Arg2>(
    function, true, arg1, arg2);
}


template <typename Arg1, typename Arg2>
inline Closure* NewPermanentCallback(void (*function)(Arg1, Arg2),
                                     Arg1 arg1, Arg2 arg2) {
  return new internal::FunctionClosure2<Arg1, Arg2>(
    function, false, arg1, arg2);
}


template <typename Class, typename Arg1, typename Arg2>
inline Closure* NewCallback(Class* object, void (Class::*method)(Arg1, Arg2),
                            Arg1 arg1, Arg2 arg2) {
  return new internal::MethodClosure2<Class, Arg1, Arg2>(
    object, method, true, arg1, arg2);
}


template <typename Class, typename Arg1, typename Arg2>
inline Closure* NewPermanentCallback(
    Class* object, void (Class::*method)(Arg1, Arg2),
    Arg1 arg1, Arg2 arg2) {
  return new internal::MethodClosure2<Class, Arg1, Arg2>(
    object, method, false, arg1, arg2);
}


template<typename R>
inline ResultCallback<R>* NewCallback(R (*function)()) {
  return new internal::FunctionResultCallback_0_0<R>(function, true);
}


template<typename R>
inline ResultCallback<R>* NewPermanentCallback(R (*function)()) {
  return new internal::FunctionResultCallback_0_0<R>(function, false);
}


template<typename R, typename P1>
inline ResultCallback<R>* NewCallback(R (*function)(P1), P1 p1) {
  return new internal::FunctionResultCallback_1_0<R, P1>(
      function, true, p1);
}


template<typename R, typename P1>
inline ResultCallback<R>* NewPermanentCallback(
    R (*function)(P1), P1 p1) {
  return new internal::FunctionResultCallback_1_0<R, P1>(
      function, false, p1);
}


template<typename R, typename A1>
inline ResultCallback1<R, A1>* NewCallback(R (*function)(A1)) {
  return new internal::FunctionResultCallback_0_1<R, A1>(function, true);
}


template<typename R, typename A1>
inline ResultCallback1<R, A1>* NewPermanentCallback(R (*function)(A1)) {
  return new internal::FunctionResultCallback_0_1<R, A1>(function, false);
}


template<typename R, typename P1, typename A1>
inline ResultCallback1<R, A1>* NewCallback(R (*function)(P1, A1), P1 p1) {
  return new internal::FunctionResultCallback_1_1<R, P1, A1>(
      function, true, p1);
}


template<typename R, typename P1, typename A1>
inline ResultCallback1<R, A1>* NewPermanentCallback(
    R (*function)(P1, A1), P1 p1) {
  return new internal::FunctionResultCallback_1_1<R, P1, A1>(
      function, false, p1);
}


template <typename R, typename T1, typename T2>
inline ResultCallback<R>* NewPermanentCallback(
    T1* object, R (T2::*function)()) {
  return new internal::MethodResultCallback_0_0<R, T1>(object, function, false);
}


template <typename R, typename T, typename P1, typename P2, typename P3,
          typename P4, typename P5, typename A1, typename A2>
inline ResultCallback2<R, A1, A2>* NewPermanentCallback(
    T* object, R (T::*function)(P1, P2, P3, P4, P5, A1, A2),
    typename internal::InternalConstRef<P1>::type p1,
    typename internal::InternalConstRef<P2>::type p2,
    typename internal::InternalConstRef<P3>::type p3,
    typename internal::InternalConstRef<P4>::type p4,
    typename internal::InternalConstRef<P5>::type p5) {
  return new internal::MethodResultCallback_5_2<R, T, P1, P2, P3, P4, P5, A1,
                                                A2>(object, function, false, p1,
                                                    p2, p3, p4, p5);
}



void DoNothing();


}
}
# 53 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h" 2
# 93 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h"
namespace std {}

namespace google {
namespace protobuf {
namespace internal {
# 116 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h"
static const int kMinHeaderVersionForLibrary = 3005000;







static const int kMinHeaderVersionForProtoc = 3005000;



void VerifyVersion(int headerVersion, int minLibraryVersion,
                                      const char* filename);


std::string VersionString(int version);

}
# 149 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h"
class StringPiece;
namespace internal {



                   bool IsStructurallyValidUTF8(const char* buf, int len);

inline bool IsStructurallyValidUTF8(const std::string& str) {
  return IsStructurallyValidUTF8(str.data(), static_cast<int>(str.length()));
}


                   int UTF8SpnStructurallyValid(const StringPiece& str);
# 175 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h"
                   char* UTF8CoerceToStructurallyValid(
    const StringPiece& str, char* dst, char replace_char);

}
# 197 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/common.h"
                   void ShutdownProtobufLibrary();

namespace internal {


                   void OnShutdown(void (*func)());

                   void OnShutdownDestroyString(const std::string* ptr);

                   void OnShutdownDestroyMessage(const void* ptr);

}


class FatalException : public std::exception {
 public:
  FatalException(const char* filename, int line, const std::string& message)
      : filename_(filename), line_(line), message_(message) {}
  virtual ~FatalException() throw();

  virtual const char* what() const throw();

  const char* filename() const { return filename_; }
  int line() const { return line_; }
  const std::string& message() const { return message_; }

 private:
  const char* filename_;
  const int line_;
  const std::string message_;
};





using std::istream;
using std::ostream;
using std::pair;
using std::string;
using std::vector;

}
}
# 59 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h" 2



namespace google {
namespace protobuf {
namespace internal {


  typedef intptr_t Atomic32;
  typedef int64 Atomic64;
# 86 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h"
typedef intptr_t AtomicWord;
# 98 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h"
Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,
                                  Atomic32 old_value,
                                  Atomic32 new_value);



Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr, Atomic32 new_value);



Atomic32 NoBarrier_AtomicIncrement(volatile Atomic32* ptr, Atomic32 increment);

Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
                                 Atomic32 increment);
# 122 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h"
Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
                                Atomic32 old_value,
                                Atomic32 new_value);
Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
                                Atomic32 old_value,
                                Atomic32 new_value);




void MemoryBarrierInternal();
void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value);
void Acquire_Store(volatile Atomic32* ptr, Atomic32 value);
void Release_Store(volatile Atomic32* ptr, Atomic32 value);

Atomic32 NoBarrier_Load(volatile const Atomic32* ptr);
Atomic32 Acquire_Load(volatile const Atomic32* ptr);
Atomic32 Release_Load(volatile const Atomic32* ptr);
# 164 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h"
}
}
}
# 178 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops_internals_x86_msvc.h" 1
# 36 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops_internals_x86_msvc.h"
namespace google {
namespace protobuf {
namespace internal {

inline Atomic32 NoBarrier_AtomicIncrement(volatile Atomic32* ptr,
                                          Atomic32 increment) {
  return Barrier_AtomicIncrement(ptr, increment);
}





inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
                                       Atomic32 old_value,
                                       Atomic32 new_value) {
  return NoBarrier_CompareAndSwap(ptr, old_value, new_value);
}

inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
                                       Atomic32 old_value,
                                       Atomic32 new_value) {
  return NoBarrier_CompareAndSwap(ptr, old_value, new_value);
}

inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {
  *ptr = value;
}

inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {
  NoBarrier_AtomicExchange(ptr, value);

}

inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {
  *ptr = value;

}

inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {
  return *ptr;
}

inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {
  Atomic32 value = *ptr;
  return value;
}

inline Atomic32 Release_Load(volatile const Atomic32* ptr) {
  MemoryBarrierInternal();
  return *ptr;
}
# 146 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops_internals_x86_msvc.h"
}
}
}
# 178 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomicops.h" 2
# 33 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/atomic_sequence_num.h" 2


namespace google {
namespace protobuf {
namespace internal {

class SequenceNumber {
 public:
  SequenceNumber() : word_(0) {}

  AtomicWord GetNext() {
    return NoBarrier_AtomicIncrement(&word_, 1) - 1;
  }
 private:
  AtomicWord word_;
};

}
}
}
# 38 "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h" 2
# 50 "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h"
namespace google {

namespace protobuf {
namespace internal {

inline size_t AlignUpTo8(size_t n) {

  return (n + 7) & -8;
}







class ArenaImpl {
 public:
  struct Options {
    size_t start_block_size;
    size_t max_block_size;
    char* initial_block;
    size_t initial_block_size;
    void* (*block_alloc)(size_t);
    void (*block_dealloc)(void*, size_t);

    template <typename O>
    explicit Options(const O& options)
      : start_block_size(options.start_block_size),
        max_block_size(options.max_block_size),
        initial_block(options.initial_block),
        initial_block_size(options.initial_block_size),
        block_alloc(options.block_alloc),
        block_dealloc(options.block_dealloc) {}
  };

  template <typename O>
  explicit ArenaImpl(const O& options) : options_(options) {
    if (options_.initial_block != 0 && options_.initial_block_size > 0) {
      !(!((options_.initial_block_size) >= (sizeof(Block)))) ? (void)0 : ::google::protobuf::internal::LogFinisher() = ::google::protobuf::internal::LogMessage( ::google::protobuf::LOGLEVEL_FATAL, "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h", 89) << "CHECK failed: " "(options_.initial_block_size) >= (sizeof(Block))" ": "
          << ": Initial block size too small for header.";
      initial_block_ = reinterpret_cast<Block*>(options_.initial_block);
    } else {
      initial_block_ = 0;
    }

    Init();
  }





  ~ArenaImpl();

  uint64 Reset();

  uint64 SpaceAllocated() const;
  uint64 SpaceUsed() const;

  void* AllocateAligned(size_t n);

  void* AllocateAlignedAndAddCleanup(size_t n, void (*cleanup)(void*));


  void AddCleanup(void* elem, void (*cleanup)(void*));

 private:
  void* AllocateAlignedFallback(size_t n);
  void* AllocateAlignedAndAddCleanupFallback(size_t n, void (*cleanup)(void*));
  void AddCleanupFallback(void* elem, void (*cleanup)(void*));



  struct CleanupNode {
    void* elem;
    void (*cleanup)(void*);
  };


  struct CleanupChunk {
    static size_t SizeOf(size_t i) {
      return sizeof(CleanupChunk) + (sizeof(CleanupNode) * (i - 1));
    }
    size_t size;
    CleanupChunk* next;
    CleanupNode nodes[1];
  };

  class Block;


  class SerialArena {
   public:





    static SerialArena* New(Block* b, void* owner, ArenaImpl* arena);



    static uint64 Free(SerialArena* serial, Block* initial_block,
                       void (*block_dealloc)(void*, size_t));

    void CleanupList();
    uint64 SpaceUsed() const;

    void* AllocateAligned(size_t n) {
      while(false) !(!((internal::AlignUpTo8(n)) == (n))) ? (void)0 : ::google::protobuf::internal::LogFinisher() = ::google::protobuf::internal::LogMessage( ::google::protobuf::LOGLEVEL_FATAL, "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h", 160) << "CHECK failed: " "(internal::AlignUpTo8(n)) == (n)" ": ";
      while(false) !(!((limit_) >= (ptr_))) ? (void)0 : ::google::protobuf::internal::LogFinisher() = ::google::protobuf::internal::LogMessage( ::google::protobuf::LOGLEVEL_FATAL, "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h", 161) << "CHECK failed: " "(limit_) >= (ptr_)" ": ";
      if ((static_cast<size_t>(limit_ - ptr_) < n)) {
        return AllocateAlignedFallback(n);
      }
      void* ret = ptr_;
      ptr_ += n;



      return ret;
    }

    void AddCleanup(void* elem, void (*cleanup)(void*)) {
      if ((cleanup_ptr_ == cleanup_limit_)) {
        AddCleanupFallback(elem, cleanup);
        return;
      }
      cleanup_ptr_->elem = elem;
      cleanup_ptr_->cleanup = cleanup;
      cleanup_ptr_++;
    }

    void* AllocateAlignedAndAddCleanup(size_t n, void (*cleanup)(void*)) {
      void* ret = AllocateAligned(n);
      AddCleanup(ret, cleanup);
      return ret;
    }

    void* owner() const { return owner_; }
    SerialArena* next() const { return next_; }
    void set_next(SerialArena* next) { next_ = next; }

   private:
    void* AllocateAlignedFallback(size_t n);
    void AddCleanupFallback(void* elem, void (*cleanup)(void*));
    void CleanupListFallback();

    ArenaImpl* arena_;
    void* owner_;
    Block* head_;
    CleanupChunk* cleanup_;
    SerialArena* next_;




    char* ptr_;
    char* limit_;


    CleanupNode* cleanup_ptr_;
    CleanupNode* cleanup_limit_;
  };



  class Block {
   public:
    Block(size_t size, Block* next);

    char* Pointer(size_t n) {
      while(false) !(!(n <= size_)) ? (void)0 : ::google::protobuf::internal::LogFinisher() = ::google::protobuf::internal::LogMessage( ::google::protobuf::LOGLEVEL_FATAL, "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h", 222) << "CHECK failed: " "n <= size_" ": ";
      return reinterpret_cast<char*>(this) + n;
    }

    Block* next() const { return next_; }
    size_t pos() const { return pos_; }
    size_t size() const { return size_; }
    void set_pos(size_t pos) { pos_ = pos; }

   private:
    Block* next_;
    size_t pos_;
    size_t size_;

  };

  struct ThreadCache {
# 248 "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h"
    int64 last_lifecycle_id_seen;
    SerialArena* last_serial_arena;
  };
  static google::protobuf::internal::SequenceNumber lifecycle_id_generator_;
# 262 "..\\3rd\\protobuf\\src\\google/protobuf/arena_impl.h"
  static __declspec(thread) ThreadCache thread_cache_;
  static ThreadCache& thread_cache() { return thread_cache_; }


  void Init();



  uint64 FreeBlocks();

  void CleanupList();

  inline void CacheSerialArena(SerialArena* serial) {
    thread_cache().last_serial_arena = serial;
    thread_cache().last_lifecycle_id_seen = lifecycle_id_;



    google::protobuf::internal::Release_Store(&hint_, reinterpret_cast<google::protobuf::internal::AtomicWord>(serial));
  }

  google::protobuf::internal::AtomicWord threads_;
  google::protobuf::internal::AtomicWord hint_;
  google::protobuf::internal::AtomicWord space_allocated_;

  Block *initial_block_;


  Block* NewBlock(Block* last_block, size_t min_bytes);

  SerialArena* GetSerialArena();
  bool GetSerialArenaFast(SerialArena** arena);
  SerialArena* GetSerialArenaFallback(void* me);
  int64 lifecycle_id_;

  Options options_;

  ArenaImpl(const ArenaImpl&); void operator=(const ArenaImpl&);

 public:


  static const size_t kBlockHeaderSize = (sizeof(Block) + 7) & -8;
  static const size_t kSerialArenaSize = (sizeof(SerialArena) + 7) & -8;

  static_assert(kBlockHeaderSize % 8 == 0,
                "kBlockHeaderSize must be a multiple of 8.");
  static_assert(kSerialArenaSize % 8 == 0,
                "kSerialArenaSize must be a multiple of 8.");

};

}
}

}
# 54 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h" 2



namespace google {
namespace protobuf {
struct ArenaOptions;
}

namespace quality_webanswers {

void TempPrivateWorkAround(::google::protobuf::ArenaOptions* arena_options);

}

namespace protobuf {
namespace arena_metrics {

void EnableArenaMetrics(::google::protobuf::ArenaOptions* options);

}

class Arena;
class Message;

namespace internal {
struct ArenaStringPtr;
class LazyField;

template<typename Type>
class GenericTypeHandler;


template<typename T> void arena_destruct_object(void* object) {
  reinterpret_cast<T*>(object)->~T();
}
template<typename T> void arena_delete_object(void* object) {
  delete reinterpret_cast<T*>(object);
}
inline void arena_free(void* object, size_t size) {



  (void)size;
  ::operator delete(object);

}

}



struct ArenaOptions {


  size_t start_block_size;





  size_t max_block_size;





  char* initial_block;


  size_t initial_block_size;






  void* (*block_alloc)(size_t);



  void (*block_dealloc)(void*, size_t);

  ArenaOptions()
      : start_block_size(kDefaultStartBlockSize),
        max_block_size(kDefaultMaxBlockSize),
        initial_block(0),
        initial_block_size(0),
        block_alloc(&::operator new),
        block_dealloc(&internal::arena_free),
        on_arena_init(0),
        on_arena_reset(0),
        on_arena_destruction(0),
        on_arena_allocation(0) {}

 private:
# 158 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h"
  void* (*on_arena_init)(Arena* arena);
  void (*on_arena_reset)(Arena* arena, void* cookie, uint64 space_used);
  void (*on_arena_destruction)(Arena* arena, void* cookie, uint64 space_used);






  void (*on_arena_allocation)(const std::type_info* allocated_type,
      uint64 alloc_size, void* cookie);



  static const size_t kDefaultStartBlockSize = 256;
  static const size_t kDefaultMaxBlockSize = 8192;

  friend void ::google::protobuf::arena_metrics::EnableArenaMetrics(ArenaOptions*);
  friend void quality_webanswers::TempPrivateWorkAround(ArenaOptions*);
  friend class Arena;
  friend class ArenaOptionsTestFriend;
};
# 239 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h"
class Arena {
 public:


  explicit Arena(const ArenaOptions& options) : impl_(options) {
    Init(options);
  }







  static const size_t kBlockOverhead = internal::ArenaImpl::kBlockHeaderSize +
                                       internal::ArenaImpl::kSerialArenaSize;



  Arena() : impl_(ArenaOptions()) { Init(ArenaOptions()); }

  ~Arena() {
    if (hooks_cookie_) {
      CallDestructorHooks();
    }
  }

  void Init(const ArenaOptions& options) {
    on_arena_allocation_ = options.on_arena_allocation;
    on_arena_reset_ = options.on_arena_reset;
    on_arena_destruction_ = options.on_arena_destruction;

    if (options.on_arena_init != 0) {
      hooks_cookie_ = options.on_arena_init(this);
    } else {
      hooks_cookie_ = 0;
    }
  }
# 289 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h"
  template <typename T, typename... Args>
                                          static T* CreateMessage(
      ::google::protobuf::Arena* arena, Args&&... args) {
    static_assert(
        InternalHelper<T>::is_arena_constructable::value,
        "CreateMessage can only construct types that are ArenaConstructable");
    if (arena == 0) {
      return new T(0, std::forward<Args>(args)...);
    } else {
      return arena->CreateMessageInternal<T>(std::forward<Args>(args)...);
    }
  }


  template <typename T>
  static T* CreateMessage(::google::protobuf::Arena* arena) {

    static_assert(
        InternalHelper<T>::is_arena_constructable::value,
        "CreateMessage can only construct types that are ArenaConstructable");

    if (arena == 0) {
      return new T;
    } else {
      return arena->CreateMessageInternal<T>();
    }
  }




  template <typename T, typename Arg>
  static T* CreateMessage(::google::protobuf::Arena* arena, const Arg& arg) {

    static_assert(
        InternalHelper<T>::is_arena_constructable::value,
        "CreateMessage can only construct types that are ArenaConstructable");

    if (arena == 0) {
      return new T(0, arg);
    } else {
      return arena->CreateMessageInternal<T>(arg);
    }
  }




  template <typename T, typename Arg1, typename Arg2>

  static T* CreateMessage(::google::protobuf::Arena* arena,
                          const Arg1& arg1,
                          const Arg2& arg2) {

    static_assert(
        InternalHelper<T>::is_arena_constructable::value,
        "CreateMessage can only construct types that are ArenaConstructable");

    if (arena == 0) {
      return new T(0, arg1, arg2);
    } else {
      return arena->CreateMessageInternal<T>(arg1, arg2);
    }
  }
# 370 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h"
  template <typename T, typename... Args>

  static T* Create(::google::protobuf::Arena* arena, Args&&... args) {
    if (arena == 0) {
      return new T(std::forward<Args>(args)...);
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value,
                                      std::forward<Args>(args)...);
    }
  }


  template <typename T>
  static T* Create(::google::protobuf::Arena* arena) {
    if (arena == 0) {
      return new T();
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value);
    }
  }


  template <typename T, typename Arg>
  static T* Create(::google::protobuf::Arena* arena, const Arg& arg) {
    if (arena == 0) {
      return new T(arg);
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value,
                                      arg);
    }
  }


  template <typename T, typename Arg1, typename Arg2>

  static T* Create(::google::protobuf::Arena* arena, const Arg1& arg1, const Arg2& arg2) {
    if (arena == 0) {
      return new T(arg1, arg2);
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value,
                                      arg1, arg2);
    }
  }



  template <typename T, typename Arg1, typename Arg2, typename Arg3>

  static T* Create(::google::protobuf::Arena* arena,
                   const Arg1& arg1,
                   const Arg2& arg2,
                   const Arg3& arg3) {
    if (arena == 0) {
      return new T(arg1, arg2, arg3);
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value,
                                      arg1, arg2, arg3);
    }
  }



  template <typename T, typename Arg1, typename Arg2, typename Arg3,
            typename Arg4>

  static T* Create(::google::protobuf::Arena* arena,
                   const Arg1& arg1, const Arg2& arg2,
                   const Arg3& arg3, const Arg4& arg4) {
    if (arena == 0) {
      return new T(arg1, arg2, arg3, arg4);
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value,
                                      arg1, arg2, arg3, arg4);
    }
  }



  template <typename T, typename Arg1, typename Arg2, typename Arg3,
            typename Arg4, typename Arg5>

  static T* Create(::google::protobuf::Arena* arena,
                   const Arg1& arg1, const Arg2& arg2,
                   const Arg3& arg3, const Arg4& arg4,
                   const Arg5& arg5) {
    if (arena == 0) {
      return new T(arg1, arg2, arg3, arg4, arg5);
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value,
                                      arg1, arg2, arg3, arg4, arg5);
    }
  }



  template <typename T, typename Arg1, typename Arg2, typename Arg3,
            typename Arg4, typename Arg5, typename Arg6>

  static T* Create(::google::protobuf::Arena* arena,
                   const Arg1& arg1, const Arg2& arg2,
                   const Arg3& arg3, const Arg4& arg4,
                   const Arg5& arg5, const Arg6& arg6) {
    if (arena == 0) {
      return new T(arg1, arg2, arg3, arg4, arg5, arg6);
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value,
                                      arg1, arg2, arg3, arg4, arg5, arg6);
    }
  }



  template <typename T, typename Arg1, typename Arg2, typename Arg3,
            typename Arg4, typename Arg5, typename Arg6, typename Arg7>

  static T* Create(::google::protobuf::Arena* arena,
                   const Arg1& arg1, const Arg2& arg2,
                   const Arg3& arg3, const Arg4& arg4,
                   const Arg5& arg5, const Arg6& arg6,
                   const Arg7& arg7) {
    if (arena == 0) {
      return new T(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value,
                                      arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
  }



  template <typename T, typename Arg1, typename Arg2, typename Arg3,
            typename Arg4, typename Arg5, typename Arg6, typename Arg7,
            typename Arg8>

  static T* Create(::google::protobuf::Arena* arena,
                   const Arg1& arg1, const Arg2& arg2,
                   const Arg3& arg3, const Arg4& arg4,
                   const Arg5& arg5, const Arg6& arg6,
                   const Arg7& arg7, const Arg8& arg8) {
    if (arena == 0) {
      return new T(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    } else {
      return arena->CreateInternal<T>(
          google::protobuf::internal::has_trivial_destructor<T>::value,
          arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
  }







  template <typename T>
  static T* CreateArray(::google::protobuf::Arena* arena, size_t num_elements) {
    !(!((num_elements) <= (std::numeric_limits<size_t>::max() / sizeof(T)))) ? (void)0 : ::google::protobuf::internal::LogFinisher() = ::google::protobuf::internal::LogMessage( ::google::protobuf::LOGLEVEL_FATAL, "..\\3rd\\protobuf\\src\\google/protobuf/arena.h", 527) << "CHECK failed: " "(num_elements) <= (std::numeric_limits<size_t>::max() / sizeof(T))" ": "

        << "Requested size is too large to fit into size_t.";
    if (arena == 0) {
      return static_cast<T*>(::operator new[](num_elements * sizeof(T)));
    } else {
      return arena->CreateInternalRawArray<T>(num_elements);
    }
  }




  uint64 SpaceAllocated() const { return impl_.SpaceAllocated(); }




  uint64 SpaceUsed() const { return impl_.SpaceUsed(); }





  std::pair<uint64, uint64> SpaceAllocatedAndUsed() const {
    return std::make_pair(SpaceAllocated(), SpaceUsed());
  }






  __declspec(noinline) uint64 Reset() {

    if (on_arena_reset_ != 0) {
      on_arena_reset_(this, hooks_cookie_, impl_.SpaceAllocated());
    }
    return impl_.Reset();
  }



  template <typename T> __declspec(noinline)
  void Own(T* object) {
    OwnInternal(object, google::protobuf::internal::is_convertible<T*, ::google::protobuf::Message*>());
  }






  template <typename T> __declspec(noinline)
  void OwnDestructor(T* object) {
    if (object != 0) {
      impl_.AddCleanup(object, &internal::arena_destruct_object<T>);
    }
  }





  __declspec(noinline) void OwnCustomDestructor(
      void* object, void (*destruct)(void*)) {
    impl_.AddCleanup(object, destruct);
  }





  template<typename T>
  static ::google::protobuf::Arena* GetArena(const T* value) {
    return GetArenaInternal(value, is_arena_constructable<T>());
  }

  template <typename T>
  class InternalHelper {
    template <typename U>
    static char DestructorSkippable(const typename U::DestructorSkippable_*);
    template <typename U>
    static double DestructorSkippable(...);

    typedef google::protobuf::internal::integral_constant<
        bool, sizeof(DestructorSkippable<T>(static_cast<const T*>(0))) ==
                      sizeof(char) ||
                  google::protobuf::internal::has_trivial_destructor<T>::value>
        is_destructor_skippable;

    template<typename U>
    static char ArenaConstructable(
        const typename U::InternalArenaConstructable_*);
    template<typename U>
    static double ArenaConstructable(...);

    typedef google::protobuf::internal::integral_constant<bool, sizeof(ArenaConstructable<T>(
                                              static_cast<const T*>(0))) ==
                                              sizeof(char)>
        is_arena_constructable;


    template <typename... Args>
    static T* Construct(void* ptr, Args&&... args) {
      return new (ptr) T(std::forward<Args>(args)...);
    }
# 649 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h"
    static Arena* GetArena(const T* p) { return p->GetArenaNoVirtual(); }

    friend class Arena;
  };
# 661 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h"
  template <typename T>
  struct is_arena_constructable : InternalHelper<T>::is_arena_constructable {};

 private:
  template <typename T>
  static T* CreateMessageInternal(::google::protobuf::Arena* arena) {

    static_assert(
        InternalHelper<T>::is_arena_constructable::value,
        "CreateMessage can only construct types that are ArenaConstructable");

    if (arena == 0) {
      return new T;
    } else {
      return arena->CreateMessageInternal<T>();
    }
  }

  template <typename T>
  static T* CreateInternal(::google::protobuf::Arena* arena) {
    if (arena == 0) {
      return new T();
    } else {
      return arena->CreateInternal<T>(google::protobuf::internal::has_trivial_destructor<T>::value);
    }
  }

  void CallDestructorHooks();
  void OnArenaAllocation(const std::type_info* allocated_type, size_t n) const;
  inline void AllocHook(const std::type_info* allocated_type, size_t n) const {
    if ((hooks_cookie_ != 0)) {
      OnArenaAllocation(allocated_type, n);
    }
  }




  template<typename T>
  void* AllocateInternal(bool skip_explicit_ownership) {
    const size_t n = internal::AlignUpTo8(sizeof(T));
    AllocHook((&typeid(T)), n);

    if (skip_explicit_ownership) {
      return impl_.AllocateAligned(n);
    } else {
      return impl_.AllocateAlignedAndAddCleanup(
          n, &internal::arena_destruct_object<T>);
    }
  }






  template <typename Msg>
  static Msg* CreateMaybeMessage(Arena* arena, google::protobuf::internal::true_type) {
    return CreateMessageInternal<Msg>(arena);
  }

  template <typename T>
  static T* CreateMaybeMessage(Arena* arena, google::protobuf::internal::false_type) {
    return CreateInternal<T>(arena);
  }

  template <typename T>
  static T* CreateMaybeMessage(Arena* arena) {
    return CreateMaybeMessage<T>(arena, is_arena_constructable<T>());
  }



  template<typename T>
  T* CreateInternalRawArray(size_t num_elements) {
    !(!((num_elements) <= (std::numeric_limits<size_t>::max() / sizeof(T)))) ? (void)0 : ::google::protobuf::internal::LogFinisher() = ::google::protobuf::internal::LogMessage( ::google::protobuf::LOGLEVEL_FATAL, "..\\3rd\\protobuf\\src\\google/protobuf/arena.h", 737) << "CHECK failed: " "(num_elements) <= (std::numeric_limits<size_t>::max() / sizeof(T))" ": "

        << "Requested size is too large to fit into size_t.";
    const size_t n = internal::AlignUpTo8(sizeof(T) * num_elements);

    AllocHook((&typeid(T)), n);
    return static_cast<T*>(impl_.AllocateAligned(n));
  }


  template <typename T, typename... Args>

  T* CreateInternal(bool skip_explicit_ownership, Args&&... args) {
    return new (AllocateInternal<T>(skip_explicit_ownership))
        T(std::forward<Args>(args)...);
  }
# 853 "..\\3rd\\protobuf\\src\\google/protobuf/arena.h"
  template <typename T, typename... Args>
                                          T* CreateMessageInternal(
      Args&&... args) {
    return InternalHelper<T>::Construct(
        AllocateInternal<T>(InternalHelper<T>::is_destructor_skippable::value),
        this, std::forward<Args>(args)...);
  }

  template <typename T>
                                          T* CreateMessageInternal() {
    return InternalHelper<T>::Construct(
        AllocateInternal<T>(InternalHelper<T>::is_destructor_skippable::value),
        this);
  }

  template <typename T, typename Arg>
  T* CreateMessageInternal(const Arg& arg) {
    return InternalHelper<T>::Construct(
        AllocateInternal<T>(InternalHelper<T>::is_destructor_skippable::value),
        this, arg);
  }

  template <typename T, typename Arg1, typename Arg2>

  T* CreateMessageInternal(const Arg1& arg1, const Arg2& arg2) {
    return InternalHelper<T>::Construct(
        AllocateInternal<T>(InternalHelper<T>::is_destructor_skippable::value),
        this, arg1, arg2);
  }




  template <typename T>
  static void CreateInArenaStorage(T* ptr, Arena* arena) {
    CreateInArenaStorageInternal(ptr, arena,
                                 typename is_arena_constructable<T>::type());
    RegisterDestructorInternal(
        ptr, arena,
        typename InternalHelper<T>::is_destructor_skippable::type());
  }

  template <typename T>
  static void CreateInArenaStorageInternal(
      T* ptr, Arena* arena, google::protobuf::internal::true_type) {
    InternalHelper<T>::Construct(ptr, arena);
  }
  template <typename T>
  static void CreateInArenaStorageInternal(
      T* ptr, Arena* , google::protobuf::internal::false_type) {
    new (ptr) T();
  }

  template <typename T>
  static void RegisterDestructorInternal(
      T* , Arena* , google::protobuf::internal::true_type) {}
  template <typename T>
  static void RegisterDestructorInternal(
      T* ptr, Arena* arena, google::protobuf::internal::false_type) {
    arena->OwnDestructor(ptr);
  }






  template<typename T>
  void OwnInternal(T* object, google::protobuf::internal::true_type) {
    if (object != 0) {
      impl_.AddCleanup(object,
                       &internal::arena_delete_object< ::google::protobuf::Message>);
    }
  }
  template<typename T>
  void OwnInternal(T* object, google::protobuf::internal::false_type) {
    if (object != 0) {
      impl_.AddCleanup(object, &internal::arena_delete_object<T>);
    }
  }




  template <typename T>
  static ::google::protobuf::Arena* GetArenaInternal(
      const T* value, google::protobuf::internal::true_type) {
    return InternalHelper<T>::GetArena(value);
  }

  template <typename T>

  static ::google::protobuf::Arena* GetArenaInternal(
      const T* , google::protobuf::internal::false_type) {
    return 0;
  }


  void* AllocateAligned(size_t n) {
    AllocHook(0, n);
    return impl_.AllocateAligned(internal::AlignUpTo8(n));
  }

  internal::ArenaImpl impl_;

  void (*on_arena_allocation_)(const std::type_info* allocated_type,
                               uint64 alloc_size, void* cookie);
  void (*on_arena_reset_)(Arena* arena, void* cookie, uint64 space_used);
  void (*on_arena_destruction_)(Arena* arena, void* cookie, uint64 space_used);



  void* hooks_cookie_;

  template <typename Type>
  friend class ::google::protobuf::internal::GenericTypeHandler;
  friend struct internal::ArenaStringPtr;
  friend class internal::LazyField;
  template <typename Key, typename T>
  friend class Map;
};




}

}
# 118 "..\\3rd\\protobuf\\src\\google/protobuf/message.h" 2

# 1 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h" 1
# 45 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/once.h" 1
# 85 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/once.h"
namespace google {
namespace protobuf {
# 112 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/once.h"
enum {
  ONCE_STATE_UNINITIALIZED = 0,
  ONCE_STATE_EXECUTING_CLOSURE = 1,
  ONCE_STATE_DONE = 2
};

typedef internal::AtomicWord ProtobufOnceType;




void GoogleOnceInitImpl(ProtobufOnceType* once, Closure* closure);

inline void GoogleOnceInit(ProtobufOnceType* once, void (*init_func)()) {
  if (internal::Acquire_Load(once) != ONCE_STATE_DONE) {
    internal::FunctionClosure0 func(init_func, false);
    GoogleOnceInitImpl(once, &func);
  }
}

template <typename Arg>
inline void GoogleOnceInit(ProtobufOnceType* once, void (*init_func)(Arg*),
    Arg* arg) {
  if (internal::Acquire_Load(once) != ONCE_STATE_DONE) {
    internal::FunctionClosure1<Arg*> func(init_func, false, arg);
    GoogleOnceInitImpl(once, &func);
  }
}



class GoogleOnceDynamic {
 public:
  GoogleOnceDynamic() : state_(::google::protobuf::ONCE_STATE_UNINITIALIZED) { }





  template<typename T>
  void Init(void (*func_with_arg)(T*), T* arg) {
    GoogleOnceInit<T>(&this->state_,
                      func_with_arg,
                      arg);
  }
 private:
  ProtobufOnceType state_;
};




}
}
# 45 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h" 2



namespace google {
namespace protobuf {
class Arena;
template <typename T>
class RepeatedPtrField;
namespace io {
class CodedInputStream;
class CodedOutputStream;
class ZeroCopyInputStream;
class ZeroCopyOutputStream;
}
namespace internal {

class RepeatedPtrFieldBase;
class WireFormatLite;
# 72 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
inline int ToCachedSize(size_t size) { return static_cast<int>(size); }






inline size_t FromIntSize(int size) {

  return static_cast<unsigned int>(size);
}




inline int ToIntSize(size_t size) {
  while(false) !(!((size) <= (static_cast<size_t>(2147483647)))) ? (void)0 : ::google::protobuf::internal::LogFinisher() = ::google::protobuf::internal::LogMessage( ::google::protobuf::LOGLEVEL_FATAL, "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h", 88) << "CHECK failed: " "(size) <= (static_cast<size_t>(2147483647))" ": ";
  return static_cast<int>(size);
}
# 105 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
template <typename T>
class ExplicitlyConstructed {
 public:
  void DefaultConstruct() {
    new (&union_) T();
  }

  void Destruct() {
    get_mutable()->~T();
  }


  constexpr

      const T&
      get() const {
    return reinterpret_cast<const T&>(union_);
  }
  T* get_mutable() { return reinterpret_cast<T*>(&union_); }

 private:

  union AlignedUnion {
    char space[sizeof(T)];
    int64 align_to_int64;
    void* align_to_ptr;
  } union_;
};



extern ExplicitlyConstructed< ::std::string> fixed_address_empty_string;
                   extern ProtobufOnceType empty_string_once_init_;
                   void InitEmptyString();


                   inline const ::std::string& GetEmptyStringAlreadyInited() {
  return fixed_address_empty_string.get();
}

                   inline const ::std::string& GetEmptyString() {
  ::google::protobuf::GoogleOnceInit(&empty_string_once_init_, &InitEmptyString);
  return GetEmptyStringAlreadyInited();
}

                   size_t StringSpaceUsedExcludingSelfLong(const string& str);

}
# 177 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
class MessageLite {
 public:
  inline MessageLite() {}
  virtual ~MessageLite() {}




  virtual string GetTypeName() const = 0;



  virtual MessageLite* New() const = 0;



  virtual MessageLite* New(::google::protobuf::Arena* arena) const;






  virtual ::google::protobuf::Arena* GetArena() const { return 0; }
# 211 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
  virtual void* GetMaybeArenaPointer() const { return GetArena(); }






  virtual void Clear() = 0;


  virtual bool IsInitialized() const = 0;




  virtual string InitializationErrorString() const;



  virtual void CheckTypeAndMergeFrom(const MessageLite& other) = 0;
# 242 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
  bool ParseFromCodedStream(io::CodedInputStream* input);


  bool ParsePartialFromCodedStream(io::CodedInputStream* input);


  bool ParseFromZeroCopyStream(io::ZeroCopyInputStream* input);


  bool ParsePartialFromZeroCopyStream(io::ZeroCopyInputStream* input);



  bool ParseFromBoundedZeroCopyStream(io::ZeroCopyInputStream* input, int size);


  bool ParsePartialFromBoundedZeroCopyStream(io::ZeroCopyInputStream* input,
                                             int size);





  bool ParseFromString(const string& data);


  bool ParsePartialFromString(const string& data);

  bool ParseFromArray(const void* data, int size);


  bool ParsePartialFromArray(const void* data, int size);
# 287 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
  bool MergeFromCodedStream(io::CodedInputStream* input);






  virtual bool MergePartialFromCodedStream(io::CodedInputStream* input) = 0;
# 304 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
  bool SerializeToCodedStream(io::CodedOutputStream* output) const;

  bool SerializePartialToCodedStream(io::CodedOutputStream* output) const;


  bool SerializeToZeroCopyStream(io::ZeroCopyOutputStream* output) const;

  bool SerializePartialToZeroCopyStream(io::ZeroCopyOutputStream* output) const;


  bool SerializeToString(string* output) const;

  bool SerializePartialToString(string* output) const;


  bool SerializeToArray(void* data, int size) const;

  bool SerializePartialToArray(void* data, int size) const;







  string SerializeAsString() const;

  string SerializePartialAsString() const;



  bool AppendToString(string* output) const;

  bool AppendPartialToString(string* output) const;






  virtual size_t ByteSizeLong() const = 0;



  int ByteSize() const {
    return internal::ToIntSize(ByteSizeLong());
  }




  virtual void SerializeWithCachedSizes(
      io::CodedOutputStream* output) const;
# 368 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
  virtual uint8* SerializeWithCachedSizesToArray(uint8* target) const;
# 381 "..\\3rd\\protobuf\\src\\google/protobuf/message_lite.h"
  virtual int GetCachedSize() const = 0;

  virtual uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                         uint8* target) const;

 protected:




  template <typename T>
  static ::google::protobuf::internal::RepeatedPtrFieldBase* CastToBase(
      ::google::protobuf::RepeatedPtrField<T>* repeated) {
    return repeated;
  }
  template <typename T>
  static const ::google::protobuf::internal::RepeatedPtrFieldBase& CastToBase(
      const ::google::protobuf::RepeatedPtrField<T>& repeated) {
    return repeated;
  }

 private:

  virtual const void* InternalGetTable() const { return 0; }

  friend class internal::WireFormatLite;
  friend class Message;

  MessageLite(const MessageLite&); void operator=(const MessageLite&);
};

namespace internal {

extern bool proto3_preserve_unknown_;



inline bool GetProto3PreserveUnknownsDefault() {
  return proto3_preserve_unknown_;
}



void SetProto3PreserveUnknownsDefault(bool preserve);
}


}

}
# 119 "..\\3rd\\protobuf\\src\\google/protobuf/message.h" 2



# 1 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h" 1
# 57 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\memory" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\memory" 3
#pragma pack(push,8)
#pragma warning(push, 3)
#pragma warning(disable: 4494 4702 4988)



namespace std {

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 const _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  {
  _Construct_in_place(*_Dest, *_First);
  }

 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                            ;
 const auto _UFirst = _Unchecked(_First);
 const auto _ULast = _Unchecked(_Last);
 const auto _UDest = _Unchecked_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
 return (_Rechecked(_Dest,
  _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest, _Ptr_copy_cat(_UFirst, _UDest))));
 }
# 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\memory" 3
template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 const _FwdIt _Next = _Dest;

 try {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  {
  _Construct_in_place(*_Dest, *_First);
  }

 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 if (0 < _Count)
  {
  return (_Copy_memmove(_First, _First + _Count, _Dest));
  }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_n_unchecked1(_First, _Count,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {

 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Rechecked(_Dest,
  _Uninitialized_copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
 }
# 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\memory" 3
template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, false_type)
 {
 const _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++_First)
  {
  _Construct_in_place(*_First, _Val);
  }

 } catch (...) {
 _Destroy_range(_Next, _First);
 throw;
 }
 }

template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, true_type)
 {
 :: memset(_First, static_cast<unsigned char>(_Val), _Last - _First);
 }

template<class _FwdIt,
 class _Tval> inline
 void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
                            ;
 const auto _UFirst = _Unchecked(_First);
 _Uninitialized_fill_unchecked(_UFirst, _Unchecked(_Last), _Val, _Fill_memset_is_safe(_UFirst, _Val));
 }



template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked(_FwdIt _First, _Diff _Count, const _Tval& _Val, false_type)
 {
 const _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  {
  _Construct_in_place(*_First, _Val);
  }

 } catch (...) {
 _Destroy_range(_Next, _First);
 throw;
 }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked(_FwdIt _First, _Diff _Count, const _Tval& _Val, true_type)
 {
 if (0 < _Count)
  {
  :: memset(_First, static_cast<unsigned char>(_Val), _Count);
  return (_First + _Count);
  }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval& _Val)
 {
 const auto _UFirst = _Unchecked_n(_First, _Count);
 return (_Rechecked(_First,
  _Uninitialized_fill_n_unchecked(_UFirst, _Count, _Val, _Fill_memset_is_safe(_UFirst, _Val))));
 }
# 617 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\memory" 3
template<class _OutIt,
 class _Ty>
 class raw_storage_iterator
 {
public:
 using iterator_category = output_iterator_tag;
 using value_type = void;
 using difference_type = void;
 using pointer = void;
 using reference = void;

 explicit raw_storage_iterator(_OutIt _First)
  : _Next(_First)
  {
  }

 raw_storage_iterator& operator*()
  {
  return (*this);
  }

 raw_storage_iterator& operator=(const _Ty& _Val)
  {
  _Construct_in_place(*_Next, _Val);
  return (*this);
  }

 raw_storage_iterator& operator=(_Ty&& _Val)
  {
  _Construct_in_place(*_Next, ::std:: move(_Val));
  return (*this);
  }

 raw_storage_iterator& operator++()
  {
  ++_Next;
  return (*this);
  }

 raw_storage_iterator operator++(int)
  {
  raw_storage_iterator _Ans = *this;
  ++_Next;
  return (_Ans);
  }

 _OutIt base() const
  {
  return (_Next);
  }

private:
 _OutIt _Next;
 };




template<class _Ty>
 class auto_ptr;

template<class _Ty>
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref(_Ty * _Right)
  : _Ref(_Right)
  {
  }

 _Ty * _Ref;
 };

template<class _Ty>
 class auto_ptr
 {
public:
 typedef _Ty element_type;

 explicit auto_ptr(_Ty * _Ptr = 0) noexcept
  : _Myptr(_Ptr)
  {
  }

 auto_ptr(auto_ptr& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty * _Ptr = _Right._Ref;
  _Right._Ref = 0;
  _Myptr = _Ptr;
  }

 template<class _Other>
  operator auto_ptr<_Other>() noexcept
  {
  return (auto_ptr<_Other>(*this));
  }

 template<class _Other>
  operator auto_ptr_ref<_Other>() noexcept
  {
  _Other * _Cvtptr = _Myptr;
  auto_ptr_ref<_Other> _Ans(_Cvtptr);
  _Myptr = 0;
  return (_Ans);
  }

 template<class _Other>
  auto_ptr& operator=(auto_ptr<_Other>& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 template<class _Other>
  auto_ptr(auto_ptr<_Other>& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 auto_ptr& operator=(auto_ptr& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 auto_ptr& operator=(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty * _Ptr = _Right._Ref;
  _Right._Ref = 0;
  reset(_Ptr);
  return (*this);
  }

 ~auto_ptr() noexcept
  {
  delete _Myptr;
  }

 _Ty& operator*() const noexcept
  {







  return (*get());
  }

 _Ty * operator->() const noexcept
  {







  return (get());
  }

 _Ty * get() const noexcept
  {
  return (_Myptr);
  }

 _Ty * release() noexcept
  {
  _Ty * _Tmp = _Myptr;
  _Myptr = 0;
  return (_Tmp);
  }

 void reset(_Ty * _Ptr = 0)
  {
  if (_Ptr != _Myptr)
   delete _Myptr;
  _Myptr = _Ptr;
  }

private:
 _Ty * _Myptr;
 };

template<>
 class auto_ptr<void>
 {
public:
 typedef void element_type;
 };




class bad_weak_ptr
 : public exception
 {
public:
 bad_weak_ptr() noexcept
  {
  }

 virtual const char * what() const noexcept override
  {
  return ("bad_weak_ptr");
  }
 };


class _Ref_count_base
 {
private:
 virtual void _Destroy() noexcept = 0;
 virtual void _Delete_this() noexcept = 0;

 _Atomic_counter_t _Uses;
 _Atomic_counter_t _Weaks;

protected:
 _Ref_count_base()
  : _Uses(1), _Weaks(1)
  {
  }

public:
 virtual ~_Ref_count_base() noexcept
  {
  }

 bool _Incref_nz()
  {
  for (;;)
   {

   _Atomic_integral_t _Count =
    static_cast<volatile _Atomic_counter_t&>(_Uses);

   if (_Count == 0)
    return (false);

   if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
     reinterpret_cast<volatile long *>(&_Uses),
     _Count + 1, _Count)) == _Count)
    return (true);
# 877 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\memory" 3
   }
  }

 void _Incref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
  }

 void _Incwref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
  }

 void _Decref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
   {
   _Destroy();
   _Decwref();
   }
  }

 void _Decwref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
   {
   _Delete_this();
   }
  }

 long _Use_count() const noexcept
  {
  return (_Get_atomic_count(_Uses));
  }

 virtual void * _Get_deleter(const type_info&) const noexcept
  {
  return (nullptr);
  }
 };


template<class _Ty>
 class _Ref_count
  : public _Ref_count_base
 {
public:
 explicit _Ref_count(_Ty * _Px)
  : _Ref_count_base(), _Ptr(_Px)
  {
  }

private:
 virtual void _Destroy() noexcept override
  {
  delete _Ptr;
  }

 virtual void _Delete_this() noexcept override
  {
  delete this;
  }

 _Ty * _Ptr;
 };


template<class _Resource,
 class _Dx>
 class _Ref_count_resource
  : public _Ref_count_base
 {
public:
 _Ref_count_resource(_Resource _Px, _Dx _Dt)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), ::std:: move(_Dt), _Px)
  {
  }

 virtual void * _Get_deleter(const type_info& _Typeid) const noexcept override
  {

  if (_Typeid == typeid(_Dx))
   {
   return (const_cast<_Dx *>(::std:: addressof(_Mypair._Get_first())));
   }




  return (nullptr);
  }

private:
 virtual void _Destroy() noexcept override
  {
  _Mypair._Get_first()(_Mypair._Get_second());
  }

 virtual void _Delete_this() noexcept override
  {
  delete this;
  }

 _Compressed_pair<_Dx, _Resource> _Mypair;
 };


template<class _Resource,
 class _Dx,
 class _Alloc>
 class _Ref_count_resource_alloc
  : public _Ref_count_base
 {
public:
 _Ref_count_resource_alloc(_Resource _Px, _Dx _Dt, const _Alloc& _Ax)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), ::std:: move(_Dt),
   _One_then_variadic_args_t(), _Ax, _Px)
  {
  }

 virtual void * _Get_deleter(const type_info& _Typeid) const noexcept override
  {

  if (_Typeid == typeid(_Dx))
   {
   return (const_cast<_Dx *>(::std:: addressof(_Mypair._Get_first())));
   }




  return (nullptr);
  }

private:
 using _Myalty = _Rebind_alloc_t<_Alloc, _Ref_count_resource_alloc>;

 virtual void _Destroy() noexcept override
  {
  _Mypair._Get_first()(_Mypair._Get_second()._Get_second());
  }

 virtual void _Delete_this() noexcept override
  {
  _Myalty _Al = _Mypair._Get_second()._Get_first();
  allocator_traits<_Myalty>::destroy(_Al, this);
  _Deallocate_plain(_Al, this);
  }

 _Compressed_pair<_Dx, _Compressed_pair<_Myalty, _Resource>> _Mypair;
 };


template<class _Ty>
 struct default_delete;

template<class _Ty,
 class _Dx = default_delete<_Ty>>
 class unique_ptr;

template<class _Ty>
 class shared_ptr;

template<class _Ty>
 class weak_ptr;

template<class _Yty,
 class = void>
 struct _Can_enable_shared
  : false_type
 {
 };

template<class _Yty>
 struct _Can_enable_shared<_Yty, void_t<typename _Yty::_Esft_type>>
  : is_convertible<remove_cv_t<_Yty> *, typename _Yty::_Esft_type *>::type
 {
 };

template<class _Other,
 class _Yty>
 void _Enable_shared_from_this1(const shared_ptr<_Other>& _This, _Yty * _Ptr, true_type)
 {
 if (_Ptr && _Ptr->_Wptr.expired())
  {
  _Ptr->_Wptr = shared_ptr<remove_cv_t<_Yty>>(_This, const_cast<remove_cv_t<_Yty> *>(_Ptr));
  }
 }

template<class _Other,
 class _Yty>
 void _Enable_shared_from_this1(const shared_ptr<_Other>&, _Yty *, false_type)
 {
 }

template<class _Other,
 class _Yty>
 void _Enable_shared_from_this(const shared_ptr<_Other>& _This, _Yty * _Ptr)
 {
 _Enable_shared_from_this1(_This, _Ptr, _Conjunction_t<
  negation<is_array<_Other>>,
  negation<is_volatile<_Yty>>,
  _Can_enable_shared<_Yty>>{});
 }


template<class _Ty>
 class _Ptr_base
 {
public:
 using element_type = remove_extent_t<_Ty>;

 long use_count() const noexcept
  {
  return (_Rep ? _Rep->_Use_count() : 0);
  }

 template<class _Ty2>
  bool owner_before(const _Ptr_base<_Ty2>& _Right) const noexcept
  {
  return (_Rep < _Right._Rep);
  }

 _Ptr_base(const _Ptr_base&) = delete;
 _Ptr_base& operator=(const _Ptr_base&) = delete;

protected:
 element_type * get() const noexcept
  {
  return (_Ptr);
  }

 constexpr _Ptr_base() noexcept = default;

 ~_Ptr_base() = default;

 template<class _Ty2>
  void _Move_construct_from(_Ptr_base<_Ty2>&& _Right)
  {
  _Ptr = _Right._Ptr;
  _Rep = _Right._Rep;

  _Right._Ptr = nullptr;
  _Right._Rep = nullptr;
  }

 template<class _Ty2>
  void _Copy_construct_from(const shared_ptr<_Ty2>& _Other)
  {
  if (_Other._Rep)
   {
   _Other._Rep->_Incref();
   }

  _Ptr = _Other._Ptr;
  _Rep = _Other._Rep;
  }

 template<class _Ty2>
  void _Alias_construct_from(const shared_ptr<_Ty2>& _Other, element_type * _Px)
  {
  if (_Other._Rep)
   {
   _Other._Rep->_Incref();
   }

  _Ptr = _Px;
  _Rep = _Other._Rep;
  }

 template<class _Ty0>
  friend class weak_ptr;

 template<class _Ty2>
  bool _Construct_from_weak(const weak_ptr<_Ty2>& _Other)
  {
  if (_Other._Rep && _Other._Rep->_Incref_nz())
   {
   _Ptr = _Other._Ptr;
   _Rep = _Other._Rep;
   return (true);
   }

  return (false);
  }

 void _Decref()
  {
  if (_Rep)
   {
   _Rep->_Decref();
   }
  }

 void _Swap(_Ptr_base& _Right) noexcept
  {
  ::std:: swap(_Ptr, _Right._Ptr);
  ::std:: swap(_Rep, _Right._Rep);
  }

 void _Set_ptr_rep(element_type * _Other_ptr, _Ref_count_base * _Other_rep)
  {
  _Ptr = _Other_ptr;
  _Rep = _Other_rep;
  }

 template<class _Ty2>
  void _Weakly_construct_from(const _Ptr_base<_Ty2>& _Other)
  {
  if (_Other._Rep)
   {
   _Other._Rep->_Incwref();
   }

  _Ptr = _Other._Ptr;
  _Rep = _Other._Rep;
  }

 void _Decwref()
  {
  if (_Rep)
   {
   _Rep->_Decwref();
   }
  }

private:
 element_type * _Ptr{nullptr};
 _Ref_count_base * _Rep{nullptr};

 template<class _Ty0>
  friend class _Ptr_base;


 template<class _Dx,
  class _Ty0>
  friend _Dx * get_deleter(const shared_ptr<_Ty0>& _Sx) noexcept;

 };


template<class _Yty,
 class = void>
 struct _Can_scalar_delete
  : false_type
 {};
struct _Can_scalar_delete_unique_type
 {
 };
template<class _Yty>
 struct _Can_scalar_delete<_Yty, void_t<_Can_scalar_delete_unique_type, decltype(delete ::std:: declval<_Yty *>())>>
  : true_type
 {};


template<class _Yty,
 class = void>
 struct _Can_array_delete
  : false_type
 {};
struct _Can_array_delete_unique_type
 {
 };
template<class _Yty>
 struct _Can_array_delete<_Yty, void_t<_Can_array_delete_unique_type, decltype(delete[] ::std:: declval<_Yty *>())>>
  : true_type
 {};


template<class _Fx,
 class _Arg,
 class = void>
 struct _Can_call_function_object
  : false_type
 {};
struct _Can_call_function_object_unique_type
 {
 };
template<class _Fx,
 class _Arg>
 struct _Can_call_function_object<_Fx, _Arg, void_t<_Can_call_function_object_unique_type,
  decltype(::std:: declval<_Fx>()(::std:: declval<_Arg>()))>>
  : true_type
 {};


template<class _Yty,
 class _Ty>
 struct _SP_convertible
  : is_convertible<_Yty *, _Ty *>::type
 {};
template<class _Yty,
 class _Uty>
 struct _SP_convertible<_Yty, _Uty[]>
  : is_convertible<_Yty(*)[], _Uty(*)[]>::type
 {};
template<class _Yty,
 class _Uty,
 size_t _Ext>
 struct _SP_convertible<_Yty, _Uty[_Ext]>
  : is_convertible<_Yty(*)[_Ext], _Uty(*)[_Ext]>::type
 {};


template<class _Yty,
 class _Ty>
 struct _SP_pointer_compatible
  : is_convertible<_Yty *, _Ty *>::type
 {

 };
template<class _Uty,
 size_t _Ext>
 struct _SP_pointer_compatible<_Uty[_Ext], _Uty[]>
  : true_type
 {
 };
template<class _Uty,
 size_t _Ext>
 struct _SP_pointer_compatible<_Uty[_Ext], const _Uty[]>
  : true_type
 {
 };
template<class _Uty,
 size_t _Ext>
 struct _SP_pointer_compatible<_Uty[_Ext], volatile _Uty[]>
  : true_type
 {
 };
template<class _Uty,
 size_t _Ext>
 struct _SP_pointer_compatible<_Uty[_Ext], const volatile _Uty[]>
  : true_type
 {
 };


template<class _Ty>
 class shared_ptr
  : public _Ptr_base<_Ty>
 {
private:
 using _Mybase = _Ptr_base<_Ty>;

public:
 using typename _Mybase::element_type;





 constexpr shared_ptr() noexcept
  {
  }

 constexpr shared_ptr(nullptr_t) noexcept
  {
  }

 template<class _Ux,
  enable_if_t<conjunction_v<conditional_t<is_array_v<_Ty>, _Can_array_delete<_Ux>, _Can_scalar_delete<_Ux>>,
   _SP_convertible<_Ux, _Ty>>, int> = 0>
  explicit shared_ptr(_Ux * _Px)
  {
  _Setp(_Px, is_array<_Ty>{});
  }

 template<class _Ux,
  class _Dx,
  enable_if_t<conjunction_v<is_move_constructible<_Dx>,
   _Can_call_function_object<_Dx&, _Ux *&>,
   _SP_convertible<_Ux, _Ty>>, int> = 0>
  shared_ptr(_Ux * _Px, _Dx _Dt)
  {
  _Setpd(_Px, ::std:: move(_Dt));
  }

 template<class _Ux,
  class _Dx,
  class _Alloc,
  enable_if_t<conjunction_v<is_move_constructible<_Dx>,
   _Can_call_function_object<_Dx&, _Ux *&>,
   _SP_convertible<_Ux, _Ty>>, int> = 0>
  shared_ptr(_Ux * _Px, _Dx _Dt, _Alloc _Ax)
  {
  _Setpda(_Px, ::std:: move(_Dt), _Ax);
  }

 template<class _Dx,
  enable_if_t<conjunction_v<is_move_constructible<_Dx>,
   _Can_call_function_object<_Dx&, nullptr_t&>
  >, int> = 0>
  shared_ptr(nullptr_t, _Dx _Dt)
  {
  _Setpd(nullptr, ::std:: move(_Dt));
  }

 template<class _Dx,
  class _Alloc,
  enable_if_t<conjunction_v<is_move_constructible<_Dx>,
   _Can_call_function_object<_Dx&, nullptr_t&>
  >, int> = 0>
  shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
  {
  _Setpda(nullptr, ::std:: move(_Dt), _Ax);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Right, element_type * _Px) noexcept
  {
  this->_Alias_construct_from(_Right, _Px);
  }

 shared_ptr(const shared_ptr& _Other) noexcept
  {
  this->_Copy_construct_from(_Other);
  }

 template<class _Ty2,
  enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
  shared_ptr(const shared_ptr<_Ty2>& _Other) noexcept
  {
  this->_Copy_construct_from(_Other);
  }

 shared_ptr(shared_ptr&& _Right) noexcept
  {
  this->_Move_construct_from(::std:: move(_Right));
  }

 template<class _Ty2,
  enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
  shared_ptr(shared_ptr<_Ty2>&& _Right) noexcept
  {
  this->_Move_construct_from(::std:: move(_Right));
  }

 template<class _Ty2,
  enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
  explicit shared_ptr(const weak_ptr<_Ty2>& _Other)
  {
  if (!this->_Construct_from_weak(_Other))
   {
   throw bad_weak_ptr{};
   }
  }


 template<class _Ty2,
  enable_if_t<is_convertible_v<_Ty2 *, _Ty *>, int> = 0>
  shared_ptr(auto_ptr<_Ty2>&& _Other)
  {
  _Ty2 * _Px = _Other.get();
  _Set_ptr_rep_and_enable_shared(_Px, new _Ref_count<_Ty2>(_Px));
  _Other.release();
  }


 template<class _Ux,
  class _Dx,
  enable_if_t<conjunction_v<
   _SP_pointer_compatible<_Ux, _Ty>,
   is_convertible<typename unique_ptr<_Ux, _Dx>::pointer, element_type *>
  >, int> = 0>
  shared_ptr(unique_ptr<_Ux, _Dx>&& _Other)
  {
  using _Fancy_t = typename unique_ptr<_Ux, _Dx>::pointer;
  using _Raw_t = typename unique_ptr<_Ux, _Dx>::element_type *;
  using _Deleter_t = conditional_t<is_reference_v<_Dx>, decltype(::std:: ref(_Other.get_deleter())), _Dx>;

  const _Fancy_t _Fancy = _Other.get();

  if (_Fancy)
   {
   const _Raw_t _Raw = _Fancy;
   const auto _Rx = new _Ref_count_resource<_Fancy_t, _Deleter_t>(_Fancy, _Other.get_deleter());
   _Set_ptr_rep_and_enable_shared(_Raw, _Rx);
   _Other.release();
   }
  }

 ~shared_ptr() noexcept
  {
  this->_Decref();
  }

 shared_ptr& operator=(const shared_ptr& _Right) noexcept
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  shared_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 shared_ptr& operator=(shared_ptr&& _Right) noexcept
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  shared_ptr& operator=(shared_ptr<_Ty2>&& _Right) noexcept
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }


 template<class _Ty2>
  shared_ptr& operator=(auto_ptr<_Ty2>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }


 template<class _Ux,
  class _Dx>
  shared_ptr& operator=(unique_ptr<_Ux, _Dx>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 void swap(shared_ptr& _Other) noexcept
  {
  this->_Swap(_Other);
  }

 void reset() noexcept
  {
  shared_ptr().swap(*this);
  }

 template<class _Ux>
  void reset(_Ux * _Px)
  {
  shared_ptr(_Px).swap(*this);
  }

 template<class _Ux,
  class _Dx>
  void reset(_Ux * _Px, _Dx _Dt)
  {
  shared_ptr(_Px, _Dt).swap(*this);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void reset(_Ux * _Px, _Dx _Dt, _Alloc _Ax)
  {
  shared_ptr(_Px, _Dt, _Ax).swap(*this);
  }

 using _Mybase::get;

 template<class _Ty2 = _Ty,
  enable_if_t<!disjunction_v<is_array<_Ty2>, is_void<_Ty2>>, int> = 0>
  _Ty2& operator*() const noexcept
  {
  return (*get());
  }

 template<class _Ty2 = _Ty,
  enable_if_t<!is_array_v<_Ty2>, int> = 0>
  _Ty2 * operator->() const noexcept
  {
  return (get());
  }

 template<class _Ty2 = _Ty,
  class _Elem = element_type,
  enable_if_t<is_array_v<_Ty2>, int> = 0>
  _Elem& operator[](ptrdiff_t _Idx) const
  {
  return (get()[_Idx]);
  }

                                    bool unique() const noexcept
  {
  return (this->use_count() == 1);
  }

 explicit operator bool() const noexcept
  {
  return (get() != nullptr);
  }

private:
 template<class _Ux>
  void _Setp(_Ux * _Px, true_type)
  {
  _Setpd(_Px, default_delete<_Ux[]>{});
  }

 template<class _Ux>
  void _Setp(_Ux * _Px, false_type)
  {
  try {
  _Set_ptr_rep_and_enable_shared(_Px, new _Ref_count<_Ux>(_Px));
  } catch (...) {
  delete _Px;
  throw;
  }
  }

 template<class _UxptrOrNullptr,
  class _Dx>
  void _Setpd(_UxptrOrNullptr _Px, _Dx _Dt)
  {
  try {
  _Set_ptr_rep_and_enable_shared(_Px, new _Ref_count_resource<_UxptrOrNullptr, _Dx>(_Px, ::std:: move(_Dt)));
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

 template<class _UxptrOrNullptr,
  class _Dx,
  class _Alloc>
  void _Setpda(_UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax)
  {
  using _Refd = _Ref_count_resource_alloc<_UxptrOrNullptr, _Dx, _Alloc>;
  using _Alref_alloc = _Rebind_alloc_t<_Alloc, _Refd>;
  using _Alref_traits = allocator_traits<_Alref_alloc>;
  _Alref_alloc _Alref(_Ax);

  try {
  const auto _Pfancy = _Alref_traits::allocate(_Alref, 1);
  _Refd * const _Pref = _Unfancy(_Pfancy);
   try {
   _Alref_traits::construct(_Alref, _Pref, _Px, ::std:: move(_Dt), _Ax);
   _Set_ptr_rep_and_enable_shared(_Px, _Pref);
   } catch (...) {
   _Alref_traits::deallocate(_Alref, _Pfancy, 1);
   throw;
   }
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

 template<class _Ty0,
  class... _Types>
  friend shared_ptr<_Ty0> make_shared(_Types&&... _Args);

 template<class _Ty0,
  class _Alloc,
  class... _Types>
  friend shared_ptr<_Ty0> allocate_shared(const _Alloc& _Al_arg, _Types&&... _Args);

 template<class _Ux>
  void _Set_ptr_rep_and_enable_shared(_Ux * _Px, _Ref_count_base * _Rx)
  {
  this->_Set_ptr_rep(_Px, _Rx);
  _Enable_shared_from_this(*this, _Px);
  }

 void _Set_ptr_rep_and_enable_shared(nullptr_t, _Ref_count_base * _Rx)
  {
  this->_Set_ptr_rep(nullptr, _Rx);
  }
 };

template<class _Ty1,
 class _Ty2>
 bool operator==(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator!=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() != _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator<(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() < _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator>=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() >= _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator>(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() > _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator<=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() <= _Right.get());
 }

template<class _Ty>
 bool operator==(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
 {
 return (_Left.get() == nullptr);
 }

template<class _Ty>
 bool operator==(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
 {
 return (nullptr == _Right.get());
 }

template<class _Ty>
 bool operator!=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
 {
 return (_Left.get() != nullptr);
 }

template<class _Ty>
 bool operator!=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
 {
 return (nullptr != _Right.get());
 }

template<class _Ty>
 bool operator<(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
 {
 return (_Left.get() < static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
 }

template<class _Ty>
 bool operator<(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
 {
 return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) < _Right.get());
 }

template<class _Ty>
 bool operator>=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
 {
 return (_Left.get() >= static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
 }

template<class _Ty>
 bool operator>=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
 {
 return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) >= _Right.get());
 }

template<class _Ty>
 bool operator>(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
 {
 return (_Left.get() > static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
 }

template<class _Ty>
 bool operator>(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
 {
 return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) > _Right.get());
 }

template<class _Ty>
 bool operator<=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
 {
 return (_Left.get() <= static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
 }

template<class _Ty>
 bool operator<=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
 {
 return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) <= _Right.get());
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Out, const shared_ptr<_Ty>& _Px)
 {
 return (_Out << _Px.get());
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>& _Left, shared_ptr<_Ty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1> static_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 const auto _Ptr = static_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1> const_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 const auto _Ptr = const_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1> reinterpret_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 const auto _Ptr = reinterpret_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }


template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1> dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 const auto _Ptr = dynamic_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());

 if (_Ptr)
  {
  return (shared_ptr<_Ty1>(_Other, _Ptr));
  }

 return (shared_ptr<_Ty1>());
 }







template<class _Dx,
 class _Ty>
 _Dx * get_deleter(const shared_ptr<_Ty>& _Sx) noexcept
 {
 if (_Sx._Rep)
  {
  return (static_cast<_Dx *>(_Sx._Rep->_Get_deleter(typeid(_Dx))));
  }

 return (nullptr);
 }







template<class _Ty>
 class _Ref_count_obj
  : public _Ref_count_base
 {
public:
 template<class... _Types>
  explicit _Ref_count_obj(_Types&&... _Args)
  : _Ref_count_base()
  {
  ::new (static_cast<void *>(&_Storage)) _Ty(::std:: forward<_Types>(_Args)...);
  }

 _Ty * _Getptr()
  {
  return (reinterpret_cast<_Ty *>(&_Storage));
  }

private:
 virtual void _Destroy() noexcept override
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this() noexcept override
  {
  delete this;
  }

 aligned_union_t<1, _Ty> _Storage;
 };


template<class _Ty,
 class _Alloc>
 class _Ref_count_obj_alloc
  : public _Ref_count_base
 {
public:
 template<class... _Types>
  explicit _Ref_count_obj_alloc(const _Alloc& _Al_arg, _Types&&... _Args)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Al_arg)
  {
  ::new (static_cast<void *>(&_Mypair._Get_second())) _Ty(::std:: forward<_Types>(_Args)...);
  }

 _Ty * _Getptr()
  {
  return (reinterpret_cast<_Ty *>(&_Mypair._Get_second()));
  }

private:
 using _Myalty = _Rebind_alloc_t<_Alloc, _Ref_count_obj_alloc>;
 using _Mystoragety = aligned_union_t<1, _Ty>;

 virtual void _Destroy() noexcept override
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this() noexcept override
  {
  _Myalty _Al = _Mypair._Get_first();
  allocator_traits<_Myalty>::destroy(_Al, this);
  _Deallocate_plain(_Al, this);
  }

 _Compressed_pair<_Myalty, _Mystoragety> _Mypair;
 };


template<class _Ty,
 class... _Types> inline
 shared_ptr<_Ty> make_shared(_Types&&... _Args)
 {
 const auto _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

 shared_ptr<_Ty> _Ret;
 _Ret._Set_ptr_rep_and_enable_shared(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc,
 class... _Types> inline
 shared_ptr<_Ty> allocate_shared(const _Alloc& _Al_arg, _Types&&... _Args)
 {
 using _Refoa = _Ref_count_obj_alloc<_Ty, _Alloc>;
 using _Alref_alloc = _Rebind_alloc_t<_Alloc, _Refoa>;
 using _Alref_traits = allocator_traits<_Alref_alloc>;
 _Alref_alloc _Alref(_Al_arg);

 const auto _Rx = _Alref_traits::allocate(_Alref, 1);

 try {
  _Alref_traits::construct(_Alref, _Unfancy(_Rx), _Al_arg, ::std:: forward<_Types>(_Args)...);
 } catch (...) {
  _Alref_traits::deallocate(_Alref, _Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Set_ptr_rep_and_enable_shared(_Rx->_Getptr(), _Unfancy(_Rx));
 return (_Ret);
 }


template<class _Ty>
 class weak_ptr
  : public _Ptr_base<_Ty>
 {
public:
 constexpr weak_ptr() noexcept
  {
  }

 weak_ptr(const weak_ptr& _Other) noexcept
  {
  this->_Weakly_construct_from(_Other);
  }

 template<class _Ty2,
  enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
  weak_ptr(const shared_ptr<_Ty2>& _Other) noexcept
  {
  this->_Weakly_construct_from(_Other);
  }

 template<class _Ty2,
  enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
  weak_ptr(const weak_ptr<_Ty2>& _Other) noexcept
  {
  this->_Weakly_construct_from(_Other.lock());
  }

 weak_ptr(weak_ptr&& _Other) noexcept
  {
  this->_Move_construct_from(::std:: move(_Other));
  }

 template<class _Ty2,
  enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
  weak_ptr(weak_ptr<_Ty2>&& _Other) noexcept
  {
  this->_Weakly_construct_from(_Other.lock());
  _Other.reset();
  }

 ~weak_ptr() noexcept
  {
  this->_Decwref();
  }

 weak_ptr& operator=(const weak_ptr& _Right) noexcept
  {
  weak_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) noexcept
  {
  weak_ptr(_Right).swap(*this);
  return (*this);
  }

 weak_ptr& operator=(weak_ptr&& _Right) noexcept
  {
  weak_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(weak_ptr<_Ty2>&& _Right) noexcept
  {
  weak_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
  {
  weak_ptr(_Right).swap(*this);
  return (*this);
  }

 void reset() noexcept
  {
  weak_ptr().swap(*this);
  }

 void swap(weak_ptr& _Other) noexcept
  {
  this->_Swap(_Other);
  }

 bool expired() const noexcept
  {
  return (this->use_count() == 0);
  }

 shared_ptr<_Ty> lock() const noexcept
  {
  shared_ptr<_Ty> _Ret;
  (void) _Ret._Construct_from_weak(*this);
  return (_Ret);
  }
 };

template<class _Ty>
 void swap(weak_ptr<_Ty>& _Left, weak_ptr<_Ty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }


template<class _Ty>
 class enable_shared_from_this
 {
public:
 using _Esft_type = enable_shared_from_this;

 shared_ptr<_Ty> shared_from_this()
  {
  return (shared_ptr<_Ty>(_Wptr));
  }

 shared_ptr<const _Ty> shared_from_this() const
  {
  return (shared_ptr<const _Ty>(_Wptr));
  }

 weak_ptr<_Ty> weak_from_this() noexcept
  {
  return (_Wptr);
  }

 weak_ptr<const _Ty> weak_from_this() const noexcept
  {
  return (_Wptr);
  }

protected:
 constexpr enable_shared_from_this() noexcept
  : _Wptr()
  {
  }

 enable_shared_from_this(const enable_shared_from_this&) noexcept
  : _Wptr()
  {
  }

 enable_shared_from_this& operator=(const enable_shared_from_this&) noexcept
  {
  return (*this);
  }

 ~enable_shared_from_this() = default;

private:
 template<class _Other,
  class _Yty>
  friend void _Enable_shared_from_this1(const shared_ptr<_Other>& _This, _Yty * _Ptr, true_type);

 mutable weak_ptr<_Ty> _Wptr;
 };





template<class _Ty>
 struct default_delete
 {
 constexpr default_delete() noexcept = default;

 template<class _Ty2,
  enable_if_t<is_convertible_v<_Ty2 *, _Ty *>, int> = 0>
  default_delete(const default_delete<_Ty2>&) noexcept
  {
  }

 void operator()(_Ty * _Ptr) const noexcept
  {
  static_assert(0 < sizeof (_Ty),
   "can't delete an incomplete type");
  delete _Ptr;
  }
 };

template<class _Ty>
 struct default_delete<_Ty[]>
 {
 constexpr default_delete() noexcept = default;

 template<class _Uty,
  enable_if_t<is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
  default_delete(const default_delete<_Uty[]>&) noexcept
  {
  }

 template<class _Uty,
  enable_if_t<is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
  void operator()(_Uty * _Ptr) const noexcept
  {
  static_assert(0 < sizeof (_Uty),
   "can't delete an incomplete type");
  delete[] _Ptr;
  }
 };


template<class _Ty,
 class _Dx_noref,
 class = void>
 struct _Get_deleter_pointer_type
 {
 typedef _Ty * type;
 };

template<class _Ty,
 class _Dx_noref>
 struct _Get_deleter_pointer_type<_Ty, _Dx_noref, void_t<typename _Dx_noref::pointer>>
 {
 typedef typename _Dx_noref::pointer type;
 };


template<class _Ty,
 class _Dx>
 class _Unique_ptr_base
 {
public:
 typedef remove_reference_t<_Dx> _Dx_noref;
 typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2&& _Dt)
  : _Mypair(_One_then_variadic_args_t(), ::std:: forward<_Dx2>(_Dt), _Ptr)
  {
  }

 template<class _Ptr2>
  constexpr _Unique_ptr_base(_Ptr2 _Ptr)
  : _Mypair(_Zero_then_variadic_args_t(), _Ptr)
  {
  }

 _Dx& get_deleter() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Dx& get_deleter() const noexcept
  {
  return (_Mypair._Get_first());
  }

 pointer& _Myptr() noexcept
  {
  return (_Mypair._Get_second());
  }

 const pointer& _Myptr() const noexcept
  {
  return (_Mypair._Get_second());
  }

 _Compressed_pair<_Dx, pointer> _Mypair;
 };

template<class _Dx2>
 using _Unique_ptr_enable_default_t = enable_if_t<conjunction_v<negation<is_pointer<_Dx2>>,
  is_default_constructible<_Dx2>>, int>;


template<class _Ty,
 class _Dx>
 class unique_ptr
  : public _Unique_ptr_base<_Ty, _Dx>
 {
public:
 typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 template<class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t<_Dx2> = 0>
  constexpr unique_ptr() noexcept
   : _Mybase(pointer())
  {
  }

 template<class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t<_Dx2> = 0>
  constexpr unique_ptr(nullptr_t) noexcept
   : _Mybase(pointer())
  {
  }

 unique_ptr& operator=(nullptr_t) noexcept
  {
  reset();
  return (*this);
  }

 template<class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t<_Dx2> = 0>
  explicit unique_ptr(pointer _Ptr) noexcept
   : _Mybase(_Ptr)
  {
  }

 template<class _Dx2 = _Dx,
  enable_if_t<is_constructible_v<_Dx2, const _Dx2&>, int> = 0>
  unique_ptr(pointer _Ptr, const _Dx& _Dt) noexcept
   : _Mybase(_Ptr, _Dt)
  {
  }

 template<class _Dx2 = _Dx,
  enable_if_t<conjunction_v<negation<is_reference<_Dx2>>,
   is_constructible<_Dx2, _Dx2>>, int> = 0>
  unique_ptr(pointer _Ptr, _Dx&& _Dt) noexcept
   : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  }

 template<class _Dx2 = _Dx,
  enable_if_t<conjunction_v<is_reference<_Dx2>,
   is_constructible<_Dx2, remove_reference_t<_Dx2>>>, int> = 0>
  unique_ptr(pointer, remove_reference_t<_Dx>&&) = delete;

 unique_ptr(unique_ptr&& _Right) noexcept
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class _Dx2,
  enable_if_t<conjunction_v<negation<is_array<_Ty2>>,
   is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer, pointer>,
   conditional_t<is_reference_v<_Dx>, is_same<_Dx2, _Dx>, is_convertible<_Dx2, _Dx>>
  >, int> = 0>
  unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
   : _Mybase(_Right.release(),
    ::std:: forward<_Dx2>(_Right.get_deleter()))
  {
  }


 template<class _Ty2,
  enable_if_t<conjunction_v<is_convertible<_Ty2 *, _Ty *>,
   is_same<_Dx, default_delete<_Ty>>>, int> = 0>
  unique_ptr(auto_ptr<_Ty2>&& _Right) noexcept
   : _Mybase(_Right.release())
  {
  }


 template<class _Ty2,
  class _Dx2,
  enable_if_t<conjunction_v<negation<is_array<_Ty2>>,
   is_assignable<_Dx&, _Dx2>,
   is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer, pointer>
  >, int> = 0>
  unique_ptr& operator=(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
  return (*this);
  }

 unique_ptr& operator=(unique_ptr&& _Right) noexcept
  {
  if (this != ::std:: addressof(_Right))
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
   }
  return (*this);
  }

 void swap(unique_ptr& _Right) noexcept
  {
  _Swap_adl(this->_Myptr(), _Right._Myptr());
  _Swap_adl(this->get_deleter(), _Right.get_deleter());
  }

 ~unique_ptr() noexcept
  {
  if (get() != pointer())
   {
   this->get_deleter()(get());
   }
  }

 add_lvalue_reference_t<_Ty> operator*() const
  {
  return (*get());
  }

 pointer operator->() const noexcept
  {
  return (this->_Myptr());
  }

 pointer get() const noexcept
  {
  return (this->_Myptr());
  }

 explicit operator bool() const noexcept
  {
  return (get() != pointer());
  }

 pointer release() noexcept
  {
  pointer _Ans = get();
  this->_Myptr() = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer()) noexcept
  {
  pointer _Old = get();
  this->_Myptr() = _Ptr;
  if (_Old != pointer())
   {
   this->get_deleter()(_Old);
   }
  }

 unique_ptr(const unique_ptr&) = delete;
 unique_ptr& operator=(const unique_ptr&) = delete;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr<_Ty[], _Dx>
  : public _Unique_ptr_base<_Ty, _Dx>
 {
public:
 typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 template<class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t<_Dx2> = 0>
  constexpr unique_ptr() noexcept
   : _Mybase(pointer())
  {
  }

 template<class _Uty,
  class _Is_nullptr = is_same<_Uty, nullptr_t>>
  using _Enable_ctor_reset = enable_if_t<
   is_same_v<_Uty, pointer>
   || _Is_nullptr::value
   || (is_same_v<pointer, element_type *>
   && is_pointer_v<_Uty>
   && is_convertible_v<
    remove_pointer_t<_Uty>(*)[],
    element_type(*)[]
   >)>;

 template<class _Uty,
  class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t<_Dx2> = 0,
  class = _Enable_ctor_reset<_Uty>>
  explicit unique_ptr(_Uty _Ptr) noexcept
   : _Mybase(_Ptr)
  {
  }

 template<class _Uty,
  class _Dx2 = _Dx,
  enable_if_t<is_constructible_v<_Dx2, const _Dx2&>, int> = 0,
  class = _Enable_ctor_reset<_Uty>>
  unique_ptr(_Uty _Ptr, const _Dx& _Dt) noexcept
   : _Mybase(_Ptr, _Dt)
  {
  }

 template<class _Uty,
  class _Dx2 = _Dx,
  enable_if_t<conjunction_v<negation<is_reference<_Dx2>>,
   is_constructible<_Dx2, _Dx2>>, int> = 0,
  class = _Enable_ctor_reset<_Uty>>
  unique_ptr(_Uty _Ptr, _Dx&& _Dt) noexcept
   : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  }

 template<class _Uty,
  class _Dx2 = _Dx,
  enable_if_t<conjunction_v<is_reference<_Dx2>,
   is_constructible<_Dx2, remove_reference_t<_Dx2>>>, int> = 0>
  unique_ptr(_Uty, remove_reference_t<_Dx>&&) = delete;

 unique_ptr(unique_ptr&& _Right) noexcept
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 unique_ptr& operator=(unique_ptr&& _Right) noexcept
  {
  if (this != ::std:: addressof(_Right))
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: move(_Right.get_deleter());
   }
  return (*this);
  }

 template<class _Uty,
  class _Ex,
  bool _More,
  class _UP_pointer = typename unique_ptr<_Uty, _Ex>::pointer,
  class _UP_element_type = typename unique_ptr<_Uty, _Ex>::element_type>
  using _Enable_conversion = enable_if_t<
   is_array_v<_Uty>
   && is_same_v<pointer, element_type *>
   && is_same_v<_UP_pointer, _UP_element_type *>
   && is_convertible_v<_UP_element_type(*)[], element_type(*)[]>
   && _More>;

 template<class _Uty,
  class _Ex,
  class = _Enable_conversion<_Uty, _Ex,
   is_reference_v<_Dx>
   ? is_same_v<_Ex, _Dx>
   : is_convertible_v<_Ex, _Dx>>>
  unique_ptr(unique_ptr<_Uty, _Ex>&& _Right) noexcept
   : _Mybase(_Right.release(),
    ::std:: forward<_Ex>(_Right.get_deleter()))
  {
  }

 template<class _Uty,
  class _Ex,
  class = _Enable_conversion<_Uty, _Ex,
   is_assignable_v<_Dx&, _Ex>>>
  unique_ptr& operator=(unique_ptr<_Uty, _Ex>&& _Right) noexcept
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Ex>(_Right.get_deleter());
  return (*this);
  }

 template<class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t<_Dx2> = 0>
  constexpr unique_ptr(nullptr_t) noexcept
   : _Mybase(pointer())
  {
  }

 unique_ptr& operator=(nullptr_t) noexcept
  {
  reset();
  return (*this);
  }

 void reset(nullptr_t = nullptr) noexcept
  {
  reset(pointer());
  }

 void swap(unique_ptr& _Right) noexcept
  {
  _Swap_adl(this->_Myptr(), _Right._Myptr());
  _Swap_adl(this->get_deleter(), _Right.get_deleter());
  }

 ~unique_ptr() noexcept
  {
  _Delete();
  }

 _Ty& operator[](size_t _Idx) const
  {
  return (get()[_Idx]);
  }

 pointer get() const noexcept
  {
  return (this->_Myptr());
  }

 explicit operator bool() const noexcept
  {
  return (get() != pointer());
  }

 pointer release() noexcept
  {
  pointer _Ans = get();
  this->_Myptr() = pointer();
  return (_Ans);
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty, false_type>>
  void reset(_Uty _Ptr) noexcept
  {
  pointer _Old = get();
  this->_Myptr() = _Ptr;
  if (_Old != pointer())
   {
   this->get_deleter()(_Old);
   }
  }

 unique_ptr(const unique_ptr&) = delete;
 unique_ptr& operator=(const unique_ptr&) = delete;

private:
 void _Delete()
  {
  if (get() != pointer())
   {
   this->get_deleter()(get());
   }
  }
 };



template<class _Ty,
 class... _Types,
 enable_if_t<!is_array_v<_Ty>, int> = 0> inline
 unique_ptr<_Ty> make_unique(_Types&&... _Args)
 {
 return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
 }

template<class _Ty,
 enable_if_t<is_array_v<_Ty> && extent<_Ty>::value == 0, int> = 0> inline
 unique_ptr<_Ty> make_unique(size_t _Size)
 {
 typedef remove_extent_t<_Ty> _Elem;
 return (unique_ptr<_Ty>(new _Elem[_Size]()));
 }

template<class _Ty,
 class... _Types,
 enable_if_t<extent<_Ty>::value != 0, int> = 0>
 void make_unique(_Types&&...) = delete;



template<class _Alloc>
 struct _Allocator_deleter
 {
 _Alloc _Al;

 using pointer = typename allocator_traits<_Alloc>::pointer;
 void operator()(pointer _Ptr) noexcept
  {
  allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_Ptr));
  _Al.deallocate(_Ptr, 1);
  }
 };

template<class _Alloc>
 using _Unique_ptr_alloc = unique_ptr<typename _Alloc::value_type, _Allocator_deleter<_Alloc>>;

template<class _Alloc,
 class... _Args>
 _Unique_ptr_alloc<_Alloc> _Make_unique_alloc(_Alloc& _Al, _Args&&... _Vals)
 {
 auto _Ptr = _Al.allocate(1);
 try {
  allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Ptr), ::std:: forward<_Args>(_Vals)...);
 } catch (...) {
  _Al.deallocate(_Ptr, 1);
 throw;
 }

 return (_Unique_ptr_alloc<_Alloc>(_Ptr, _Allocator_deleter<_Alloc>{_Al}));
 }

template<class _Ty,
 class _Dx,
 enable_if_t<_Is_swappable<_Dx>::value, int> = 0>
 void swap(unique_ptr<_Ty, _Dx>& _Left, unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
 typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
 typedef common_type_t<_Ptr1, _Ptr2> _Common;
 return (less<_Common>()(_Left.get(), _Right.get()));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator==(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t) noexcept
 {
 return (!_Left);
 }

template<class _Ty,
 class _Dx>
 bool operator==(nullptr_t, const unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 return (!_Right);
 }

template<class _Ty,
 class _Dx>
 bool operator!=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator!=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left.get(), _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left, _Right.get()));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator>(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator<=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator<=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Right < _Left));
 }


enum class pointer_safety {
 relaxed,
 preferred,
 strict
 };

inline void declare_reachable(void *)
 {
 }

template<class _Ty> inline
 _Ty * undeclare_reachable(_Ty * _Ptr)
 {
 return (_Ptr);
 }

inline void declare_no_pointers(char *, size_t)
 {
 }

inline void undeclare_no_pointers(char *, size_t)
 {
 }

inline pointer_safety get_pointer_safety() noexcept
 {
 return (pointer_safety::relaxed);
 }


template<class _Ty = void>
 struct owner_less;

template<class _Ty>
 struct owner_less<shared_ptr<_Ty>>
 {
                                   typedef shared_ptr<_Ty> first_argument_type;
                                   typedef shared_ptr<_Ty> second_argument_type;
                                   typedef bool result_type;

 bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }
 };

template<class _Ty>
 struct owner_less<weak_ptr<_Ty>>
 {
                                   typedef weak_ptr<_Ty> first_argument_type;
                                   typedef weak_ptr<_Ty> second_argument_type;
                                   typedef bool result_type;

 bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }
 };

template<>
 struct owner_less<void>
 {
 using is_transparent = int;

 template<class _Ty,
  class _Uty>
  bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const noexcept
  {
  return (_Left.owner_before(_Right));
  }
 };


template<class _Ty,
 class _Dx>
 struct hash<unique_ptr<_Ty, _Dx>>
  : _Conditionally_enabled_hash<unique_ptr<_Ty, _Dx>,
   is_default_constructible_v<hash<typename unique_ptr<_Ty, _Dx>::pointer>>>
 {
 static size_t _Do_hash(const unique_ptr<_Ty, _Dx>& _Keyval)
   noexcept(_Is_nothrow_hashable<typename unique_ptr<_Ty, _Dx>::pointer>::value)
  {
  return (hash<typename unique_ptr<_Ty, _Dx>::pointer>{}(_Keyval.get()));
  }
 };

template<class _Ty>
 struct hash<shared_ptr<_Ty>>
 {
                                   typedef shared_ptr<_Ty> argument_type;
                                   typedef size_t result_type;

 size_t operator()(const shared_ptr<_Ty>& _Keyval) const noexcept
  {
  return (hash<typename shared_ptr<_Ty>::element_type *>()(_Keyval.get()));
  }
 };


inline void * align(size_t _Bound, size_t _Size, void *& _Ptr, size_t& _Space) noexcept
 {
 size_t _Off = static_cast<size_t>(reinterpret_cast<uintptr_t>(_Ptr) & (_Bound - 1));
 if (_Off != 0)
  {
  _Off = _Bound - _Off;
  }

 if (_Space < _Off || _Space - _Off < _Size)
  {
  return (0);
  }


 _Ptr = static_cast<char *>(_Ptr) + _Off;
 _Space -= _Off;
 return (_Ptr);
 }




extern "C" {
              void __cdecl _Lock_shared_ptr_spin_lock();
              void __cdecl _Unlock_shared_ptr_spin_lock();
}


struct _Shared_ptr_spin_lock
 {
 _Shared_ptr_spin_lock()
  {
  _Lock_shared_ptr_spin_lock();
  }

 ~_Shared_ptr_spin_lock() noexcept
  {
  _Unlock_shared_ptr_spin_lock();
  }
 };

template<class _Ty> inline
 bool atomic_is_lock_free(const shared_ptr<_Ty> *)
 {
 return (false);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> * _Ptr,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr<_Ty> _Result = *_Ptr;
 return (_Result);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> * _Ptr)
 {
 return (::std:: atomic_load_explicit(_Ptr, memory_order_seq_cst));
 }

template<class _Ty> inline
 void atomic_store_explicit(shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 }

template<class _Ty> inline
 void atomic_store(shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other)
 {
 ::std:: atomic_store_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_exchange_explicit(
  shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 return (_Other);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_exchange(
  shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other)
 {
 return (::std:: atomic_exchange_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_weak_explicit(
  shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 shared_ptr<_Ty> _Old_exp;
 _Shared_ptr_spin_lock _Lock;
 bool _Success = _Ptr->get() == _Exp->get()
  && !_Ptr->owner_before(*_Exp)
  && !_Exp->owner_before(*_Ptr);
 if (_Success)
  _Ptr->swap(_Value);
 else
  {
  _Exp->swap(_Old_exp);
  *_Exp = *_Ptr;
  }
 return (_Success);
 }

template<class _Ty> inline
 bool atomic_compare_exchange_weak(
  shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp,
   shared_ptr<_Ty> _Value)
 {
 return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_strong_explicit(
  shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_strong(
 shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp,
  shared_ptr<_Ty> _Value)
 {
 return (::std:: atomic_compare_exchange_strong_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }


namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}


}

#pragma warning(pop)
#pragma pack(pop)
# 57 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h" 2


# 1 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/shared_ptr.h" 1
# 42 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/shared_ptr.h"
namespace google {
namespace protobuf {
namespace internal {
# 60 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/shared_ptr.h"
using std::enable_shared_from_this;
using std::shared_ptr;
using std::static_pointer_cast;
using std::weak_ptr;
# 467 "..\\3rd\\protobuf\\src\\google/protobuf/stubs/shared_ptr.h"
}
}
}
# 59 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h" 2
# 73 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
namespace google {
namespace protobuf {


class Descriptor;
class FieldDescriptor;
class OneofDescriptor;
class EnumDescriptor;
class EnumValueDescriptor;
class ServiceDescriptor;
class MethodDescriptor;
class FileDescriptor;
class DescriptorDatabase;
class DescriptorPool;


class DescriptorProto;
class FieldDescriptorProto;
class OneofDescriptorProto;
class EnumDescriptorProto;
class EnumValueDescriptorProto;
class ServiceDescriptorProto;
class MethodDescriptorProto;
class FileDescriptorProto;
class MessageOptions;
class FieldOptions;
class OneofOptions;
class EnumOptions;
class EnumValueOptions;
class ExtensionRangeOptions;
class ServiceOptions;
class MethodOptions;
class FileOptions;
class UninterpretedOption;
class SourceCodeInfo;


class Message;


class DescriptorBuilder;
class FileDescriptorTables;
struct Symbol;


class UnknownField;


namespace internal {
class GeneratedMessageReflection;
}


namespace compiler {
class CommandLineInterface;
}

namespace descriptor_unittest {
class DescriptorTest;
}


namespace io {
class Printer;
}


struct SourceLocation {
  int start_line;
  int end_line;
  int start_column;
  int end_column;



  string leading_comments;
  string trailing_comments;
  std::vector<string> leading_detached_comments;
};



struct DebugStringOptions {




  bool include_comments;

  bool elide_group_body;
  bool elide_oneof_body;

  DebugStringOptions()
      : include_comments(false),
        elide_group_body(false),
        elide_oneof_body(false) {}
};





namespace internal {
class LazyDescriptor {
 public:


  void Init() {
    descriptor_ = 0;
    name_ = 0;
    once_ = 0;
    file_ = 0;
  }





  void Set(const Descriptor* descriptor);






  void SetLazy(const string& name, const FileDescriptor* file);




  inline const Descriptor* Get() {
    Once();
    return descriptor_;
  }

 private:
  static void OnceStatic(LazyDescriptor* lazy);
  void OnceInternal();
  void Once();

  const Descriptor* descriptor_;
  const string* name_;
  GoogleOnceDynamic* once_;
  const FileDescriptor* file_;
};
}






class Descriptor {
 public:

  const string& name() const;






  const string& full_name() const;



  int index() const;


  const FileDescriptor* file() const;



  const Descriptor* containing_type() const;






  const MessageOptions& options() const;




  void CopyTo(DescriptorProto* proto) const;



  string DebugString() const;



  string DebugStringWithOptions(const DebugStringOptions& options) const;




  bool is_placeholder() const;




  int field_count() const;


  const FieldDescriptor* field(int index) const;



  const FieldDescriptor* FindFieldByNumber(int number) const;

  const FieldDescriptor* FindFieldByName(const string& name) const;




  const FieldDescriptor* FindFieldByLowercaseName(
      const string& lowercase_name) const;





  const FieldDescriptor* FindFieldByCamelcaseName(
      const string& camelcase_name) const;


  int oneof_decl_count() const;


  const OneofDescriptor* oneof_decl(int index) const;


  const OneofDescriptor* FindOneofByName(const string& name) const;




  int nested_type_count() const;


  const Descriptor* nested_type(int index) const;



  const Descriptor* FindNestedTypeByName(const string& name) const;




  int enum_type_count() const;


  const EnumDescriptor* enum_type(int index) const;


  const EnumDescriptor* FindEnumTypeByName(const string& name) const;



  const EnumValueDescriptor* FindEnumValueByName(const string& name) const;





  struct ExtensionRange {
    typedef ExtensionRangeOptions OptionsType;

    int start;
    int end;

    const ExtensionRangeOptions* options_;
  };


  int extension_range_count() const;



  const ExtensionRange* extension_range(int index) const;


  bool IsExtensionNumber(int number) const;


  const ExtensionRange* FindExtensionRangeContainingNumber(int number) const;



  int extension_count() const;


  const FieldDescriptor* extension(int index) const;



  const FieldDescriptor* FindExtensionByName(const string& name) const;



  const FieldDescriptor* FindExtensionByLowercaseName(const string& name) const;



  const FieldDescriptor* FindExtensionByCamelcaseName(const string& name) const;




  struct ReservedRange {
    int start;
    int end;
  };


  int reserved_range_count() const;



  const ReservedRange* reserved_range(int index) const;


  bool IsReservedNumber(int number) const;


  const ReservedRange* FindReservedRangeContainingNumber(int number) const;


  int reserved_name_count() const;


  const string& reserved_name(int index) const;


  bool IsReservedName(const string& name) const;






  bool GetSourceLocation(SourceLocation* out_location) const;

 private:
  typedef MessageOptions OptionsType;


  friend class ::google::protobuf::descriptor_unittest::DescriptorTest;


  friend class ::google::protobuf::io::Printer;


  void CopyJsonNameTo(DescriptorProto* proto) const;





  void DebugString(int depth, string *contents,
                   const DebugStringOptions& options,
                   bool include_opening_clause) const;



  void GetLocationPath(std::vector<int>* output) const;

  const string* name_;
  const string* full_name_;
  const FileDescriptor* file_;
  const Descriptor* containing_type_;
  const MessageOptions* options_;


  FieldDescriptor* fields_;
  OneofDescriptor* oneof_decls_;
  Descriptor* nested_types_;
  EnumDescriptor* enum_types_;
  ExtensionRange* extension_ranges_;
  FieldDescriptor* extensions_;
  ReservedRange* reserved_ranges_;
  const string** reserved_names_;

  int field_count_;
  int oneof_decl_count_;
  int nested_type_count_;
  int enum_type_count_;
  int extension_range_count_;
  int extension_count_;
  int reserved_range_count_;
  int reserved_name_count_;


  bool is_placeholder_;

  bool is_unqualified_placeholder_;






  Descriptor() {}
  friend class DescriptorBuilder;
  friend class DescriptorPool;
  friend class EnumDescriptor;
  friend class FieldDescriptor;
  friend class OneofDescriptor;
  friend class MethodDescriptor;
  friend class FileDescriptor;
  Descriptor(const Descriptor&); void operator=(const Descriptor&);
};
# 501 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
class FieldDescriptor {
 public:


  enum Type {
    TYPE_DOUBLE = 1,
    TYPE_FLOAT = 2,
    TYPE_INT64 = 3,


    TYPE_UINT64 = 4,
    TYPE_INT32 = 5,


    TYPE_FIXED64 = 6,
    TYPE_FIXED32 = 7,
    TYPE_BOOL = 8,
    TYPE_STRING = 9,
    TYPE_GROUP = 10,
    TYPE_MESSAGE = 11,

    TYPE_BYTES = 12,
    TYPE_UINT32 = 13,
    TYPE_ENUM = 14,
    TYPE_SFIXED32 = 15,
    TYPE_SFIXED64 = 16,
    TYPE_SINT32 = 17,
    TYPE_SINT64 = 18,

    MAX_TYPE = 18,

  };




  enum CppType {
    CPPTYPE_INT32 = 1,
    CPPTYPE_INT64 = 2,
    CPPTYPE_UINT32 = 3,
    CPPTYPE_UINT64 = 4,
    CPPTYPE_DOUBLE = 5,
    CPPTYPE_FLOAT = 6,
    CPPTYPE_BOOL = 7,
    CPPTYPE_ENUM = 8,
    CPPTYPE_STRING = 9,
    CPPTYPE_MESSAGE = 10,

    MAX_CPPTYPE = 10,

  };



  enum Label {
    LABEL_OPTIONAL = 1,
    LABEL_REQUIRED = 2,
    LABEL_REPEATED = 3,

    MAX_LABEL = 3,

  };


  static const int kMaxNumber = (1 << 29) - 1;



  static const int kFirstReservedNumber = 19000;


  static const int kLastReservedNumber = 19999;

  const string& name() const;
  const string& full_name() const;
  const string& json_name() const;
  const FileDescriptor* file() const;
  bool is_extension() const;
  int number() const;







  const string& lowercase_name() const;
# 598 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
  const string& camelcase_name() const;

  Type type() const;
  const char* type_name() const;
  CppType cpp_type() const;
  const char* cpp_type_name() const;
  Label label() const;

  bool is_required() const;
  bool is_optional() const;
  bool is_repeated() const;
  bool is_packable() const;

  bool is_packed() const;

  bool is_map() const;




  int index() const;


  bool has_default_value() const;



  bool has_json_name() const;



  int32 default_value_int32() const;


  int64 default_value_int64() const;


  uint32 default_value_uint32() const;


  uint64 default_value_uint64() const;


  float default_value_float() const;


  double default_value_double() const;


  bool default_value_bool() const;




  const EnumValueDescriptor* default_value_enum() const;


  const string& default_value_string() const;



  const Descriptor* containing_type() const;



  const OneofDescriptor* containing_oneof() const;


  int index_in_oneof() const;






  const Descriptor* extension_scope() const;



  const Descriptor* message_type() const;


  const EnumDescriptor* enum_type() const;







  const FieldOptions& options() const;


  void CopyTo(FieldDescriptorProto* proto) const;


  string DebugString() const;


  string DebugStringWithOptions(const DebugStringOptions& options) const;


  static CppType TypeToCppType(Type type);


  static const char* TypeName(Type type);


  static const char* CppTypeName(CppType cpp_type);


  static inline bool IsTypePackable(Type field_type);






  bool GetSourceLocation(SourceLocation* out_location) const;

 private:
  typedef FieldOptions OptionsType;


  friend class ::google::protobuf::io::Printer;


  void CopyJsonNameTo(FieldDescriptorProto* proto) const;


  enum PrintLabelFlag { PRINT_LABEL, OMIT_LABEL };
  void DebugString(int depth, PrintLabelFlag print_label_flag,
                   string* contents, const DebugStringOptions& options) const;




  string DefaultValueAsString(bool quote_string_type) const;


  string FieldTypeNameDebugString() const;



  void GetLocationPath(std::vector<int>* output) const;


  bool is_map_message_type() const;

  const string* name_;
  const string* full_name_;
  const string* lowercase_name_;
  const string* camelcase_name_;


  const string* json_name_;
  const FileDescriptor* file_;
  GoogleOnceDynamic* type_once_;
  static void TypeOnceInit(const FieldDescriptor* to_init);
  void InternalTypeOnceInit() const;
  mutable Type type_;
  Label label_;
  bool has_default_value_;


  bool has_json_name_;
  bool is_extension_;
  int number_;
  int index_in_oneof_;
  const Descriptor* containing_type_;
  const OneofDescriptor* containing_oneof_;
  const Descriptor* extension_scope_;
  mutable const Descriptor* message_type_;
  mutable const EnumDescriptor* enum_type_;
  const FieldOptions* options_;
  const string* type_name_;
  const string* default_value_enum_name_;




  union {
    int32 default_value_int32_;
    int64 default_value_int64_;
    uint32 default_value_uint32_;
    uint64 default_value_uint64_;
    float default_value_float_;
    double default_value_double_;
    bool default_value_bool_;

    mutable const EnumValueDescriptor* default_value_enum_;
    const string* default_value_string_;
  };

  static const CppType kTypeToCppTypeMap[MAX_TYPE + 1];

  static const char * const kTypeToName[MAX_TYPE + 1];

  static const char * const kCppTypeToName[MAX_CPPTYPE + 1];

  static const char * const kLabelToName[MAX_LABEL + 1];


  FieldDescriptor() {}
  friend class DescriptorBuilder;
  friend class FileDescriptor;
  friend class Descriptor;
  friend class OneofDescriptor;
  FieldDescriptor(const FieldDescriptor&); void operator=(const FieldDescriptor&);
};



class OneofDescriptor {
 public:
  const string& name() const;
  const string& full_name() const;


  int index() const;


  const FileDescriptor* file() const;

  const Descriptor* containing_type() const;


  int field_count() const;


  const FieldDescriptor* field(int index) const;

  const OneofOptions& options() const;


  void CopyTo(OneofDescriptorProto* proto) const;


  string DebugString() const;


  string DebugStringWithOptions(const DebugStringOptions& options) const;






  bool GetSourceLocation(SourceLocation* out_location) const;

 private:
  typedef OneofOptions OptionsType;


  friend class ::google::protobuf::io::Printer;


  void DebugString(int depth, string* contents,
                   const DebugStringOptions& options) const;



  void GetLocationPath(std::vector<int>* output) const;

  const string* name_;
  const string* full_name_;
  const Descriptor* containing_type_;
  bool is_extendable_;
  int field_count_;
  const FieldDescriptor** fields_;
  const OneofOptions* options_;






  OneofDescriptor() {}
  friend class DescriptorBuilder;
  friend class Descriptor;
  OneofDescriptor(const OneofDescriptor&); void operator=(const OneofDescriptor&);
};




class EnumDescriptor {
 public:

  const string& name() const;


  const string& full_name() const;


  int index() const;


  const FileDescriptor* file() const;



  int value_count() const;


  const EnumValueDescriptor* value(int index) const;


  const EnumValueDescriptor* FindValueByName(const string& name) const;


  const EnumValueDescriptor* FindValueByNumber(int number) const;



  const Descriptor* containing_type() const;





  const EnumOptions& options() const;


  void CopyTo(EnumDescriptorProto* proto) const;


  string DebugString() const;


  string DebugStringWithOptions(const DebugStringOptions& options) const;




  bool is_placeholder() const;




  struct ReservedRange {
    int start;
    int end;
  };


  int reserved_range_count() const;



  const EnumDescriptor::ReservedRange* reserved_range(int index) const;


  bool IsReservedNumber(int number) const;


  const EnumDescriptor::ReservedRange*
      FindReservedRangeContainingNumber(int number) const;


  int reserved_name_count() const;


  const string& reserved_name(int index) const;


  bool IsReservedName(const string& name) const;






  bool GetSourceLocation(SourceLocation* out_location) const;

 private:
  typedef EnumOptions OptionsType;


  friend class ::google::protobuf::io::Printer;
# 987 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
  const EnumValueDescriptor*
      FindValueByNumberCreatingIfUnknown(int number) const;



  void DebugString(int depth, string *contents,
                   const DebugStringOptions& options) const;



  void GetLocationPath(std::vector<int>* output) const;

  const string* name_;
  const string* full_name_;
  const FileDescriptor* file_;
  const Descriptor* containing_type_;
  const EnumOptions* options_;


  bool is_placeholder_;

  bool is_unqualified_placeholder_;

  int value_count_;
  EnumValueDescriptor* values_;

  int reserved_range_count_;
  int reserved_name_count_;
  EnumDescriptor::ReservedRange* reserved_ranges_;
  const string** reserved_names_;






  EnumDescriptor() {}
  friend class DescriptorBuilder;
  friend class Descriptor;
  friend class FieldDescriptor;
  friend class EnumValueDescriptor;
  friend class FileDescriptor;
  friend class DescriptorPool;
  friend class internal::GeneratedMessageReflection;
  EnumDescriptor(const EnumDescriptor&); void operator=(const EnumDescriptor&);
};






class EnumValueDescriptor {
 public:
  const string& name() const;
  int index() const;
  int number() const;






  const string& full_name() const;


  const FileDescriptor* file() const;

  const EnumDescriptor* type() const;






  const EnumValueOptions& options() const;


  void CopyTo(EnumValueDescriptorProto* proto) const;


  string DebugString() const;


  string DebugStringWithOptions(const DebugStringOptions& options) const;







  bool GetSourceLocation(SourceLocation* out_location) const;

 private:
  typedef EnumValueOptions OptionsType;


  friend class ::google::protobuf::io::Printer;


  void DebugString(int depth, string *contents,
                   const DebugStringOptions& options) const;



  void GetLocationPath(std::vector<int>* output) const;

  const string* name_;
  const string* full_name_;
  int number_;
  const EnumDescriptor* type_;
  const EnumValueOptions* options_;





  EnumValueDescriptor() {}
  friend class DescriptorBuilder;
  friend class EnumDescriptor;
  friend class DescriptorPool;
  friend class FileDescriptorTables;
  EnumValueDescriptor(const EnumValueDescriptor&); void operator=(const EnumValueDescriptor&);
};





class ServiceDescriptor {
 public:

  const string& name() const;

  const string& full_name() const;

  int index() const;


  const FileDescriptor* file() const;






  const ServiceOptions& options() const;


  int method_count() const;


  const MethodDescriptor* method(int index) const;


  const MethodDescriptor* FindMethodByName(const string& name) const;

  void CopyTo(ServiceDescriptorProto* proto) const;


  string DebugString() const;


  string DebugStringWithOptions(const DebugStringOptions& options) const;







  bool GetSourceLocation(SourceLocation* out_location) const;

 private:
  typedef ServiceOptions OptionsType;


  friend class ::google::protobuf::io::Printer;


  void DebugString(string *contents, const DebugStringOptions& options) const;



  void GetLocationPath(std::vector<int>* output) const;

  const string* name_;
  const string* full_name_;
  const FileDescriptor* file_;
  const ServiceOptions* options_;
  MethodDescriptor* methods_;
  int method_count_;





  ServiceDescriptor() {}
  friend class DescriptorBuilder;
  friend class FileDescriptor;
  friend class MethodDescriptor;
  ServiceDescriptor(const ServiceDescriptor&); void operator=(const ServiceDescriptor&);
};






class MethodDescriptor {
 public:

  const string& name() const;

  const string& full_name() const;

  int index() const;


  const FileDescriptor* file() const;

  const ServiceDescriptor* service() const;


  const Descriptor* input_type() const;

  const Descriptor* output_type() const;


  bool client_streaming() const;

  bool server_streaming() const;






  const MethodOptions& options() const;


  void CopyTo(MethodDescriptorProto* proto) const;


  string DebugString() const;


  string DebugStringWithOptions(const DebugStringOptions& options) const;







  bool GetSourceLocation(SourceLocation* out_location) const;

 private:
  typedef MethodOptions OptionsType;


  friend class ::google::protobuf::io::Printer;


  void DebugString(int depth, string *contents,
                   const DebugStringOptions& options) const;



  void GetLocationPath(std::vector<int>* output) const;

  const string* name_;
  const string* full_name_;
  const ServiceDescriptor* service_;
  mutable internal::LazyDescriptor input_type_;
  mutable internal::LazyDescriptor output_type_;
  const MethodOptions* options_;
  bool client_streaming_;
  bool server_streaming_;





  MethodDescriptor() {}
  friend class DescriptorBuilder;
  friend class ServiceDescriptor;
  MethodDescriptor(const MethodDescriptor&); void operator=(const MethodDescriptor&);
};





class FileDescriptor {
 public:


  const string& name() const;


  const string& package() const;



  const DescriptorPool* pool() const;


  int dependency_count() const;


  const FileDescriptor* dependency(int index) const;



  int public_dependency_count() const;



  const FileDescriptor* public_dependency(int index) const;



  int weak_dependency_count() const;



  const FileDescriptor* weak_dependency(int index) const;



  int message_type_count() const;


  const Descriptor* message_type(int index) const;



  int enum_type_count() const;


  const EnumDescriptor* enum_type(int index) const;


  int service_count() const;


  const ServiceDescriptor* service(int index) const;



  int extension_count() const;


  const FieldDescriptor* extension(int index) const;






  const FileOptions& options() const;


  enum Syntax {
    SYNTAX_UNKNOWN = 0,
    SYNTAX_PROTO2 = 2,
    SYNTAX_PROTO3 = 3,
  };
  Syntax syntax() const;
  static const char* SyntaxName(Syntax syntax);


  const Descriptor* FindMessageTypeByName(const string& name) const;

  const EnumDescriptor* FindEnumTypeByName(const string& name) const;


  const EnumValueDescriptor* FindEnumValueByName(const string& name) const;

  const ServiceDescriptor* FindServiceByName(const string& name) const;

  const FieldDescriptor* FindExtensionByName(const string& name) const;


  const FieldDescriptor* FindExtensionByLowercaseName(const string& name) const;


  const FieldDescriptor* FindExtensionByCamelcaseName(const string& name) const;





  void CopyTo(FileDescriptorProto* proto) const;


  void CopySourceCodeInfoTo(FileDescriptorProto* proto) const;


  void CopyJsonNameTo(FileDescriptorProto* proto) const;


  string DebugString() const;


  string DebugStringWithOptions(const DebugStringOptions& options) const;




  bool is_placeholder() const;



  bool GetSourceLocation(SourceLocation* out_location) const;






  bool GetSourceLocation(const std::vector<int>& path,
                         SourceLocation* out_location) const;

 private:
  typedef FileOptions OptionsType;

  const string* name_;
  const string* package_;
  const DescriptorPool* pool_;
  GoogleOnceDynamic* dependencies_once_;
  static void DependenciesOnceInit(const FileDescriptor* to_init);
  void InternalDependenciesOnceInit() const;


  int dependency_count_;
  int public_dependency_count_;
  int weak_dependency_count_;
  int message_type_count_;
  int enum_type_count_;
  int service_count_;
  int extension_count_;
  Syntax syntax_;
  bool is_placeholder_;




  bool finished_building_;

  mutable const FileDescriptor** dependencies_;
  const string** dependencies_names_;
  int* public_dependencies_;
  int* weak_dependencies_;
  Descriptor* message_types_;
  EnumDescriptor* enum_types_;
  ServiceDescriptor* services_;
  FieldDescriptor* extensions_;
  const FileOptions* options_;

  const FileDescriptorTables* tables_;
  const SourceCodeInfo* source_code_info_;





  FileDescriptor() {}
  friend class DescriptorBuilder;
  friend class DescriptorPool;
  friend class Descriptor;
  friend class FieldDescriptor;
  friend class internal::LazyDescriptor;
  friend class OneofDescriptor;
  friend class EnumDescriptor;
  friend class EnumValueDescriptor;
  friend class MethodDescriptor;
  friend class ServiceDescriptor;
  FileDescriptor(const FileDescriptor&); void operator=(const FileDescriptor&);
};
# 1497 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
class DescriptorPool {
 public:

  DescriptorPool();
# 1525 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
  class ErrorCollector;
  explicit DescriptorPool(DescriptorDatabase* fallback_database,
                          ErrorCollector* error_collector = 0);

  ~DescriptorPool();




  static const DescriptorPool* generated_pool();




  const FileDescriptor* FindFileByName(const string& name) const;





  const FileDescriptor* FindFileContainingSymbol(
      const string& symbol_name) const;






  const Descriptor* FindMessageTypeByName(const string& name) const;
  const FieldDescriptor* FindFieldByName(const string& name) const;
  const FieldDescriptor* FindExtensionByName(const string& name) const;
  const OneofDescriptor* FindOneofByName(const string& name) const;
  const EnumDescriptor* FindEnumTypeByName(const string& name) const;
  const EnumValueDescriptor* FindEnumValueByName(const string& name) const;
  const ServiceDescriptor* FindServiceByName(const string& name) const;
  const MethodDescriptor* FindMethodByName(const string& name) const;



  const FieldDescriptor* FindExtensionByNumber(const Descriptor* extendee,
                                               int number) const;






  void FindAllExtensions(const Descriptor* extendee,
                         std::vector<const FieldDescriptor*>* out) const;






  class ErrorCollector {
   public:
    inline ErrorCollector() {}
    virtual ~ErrorCollector();




    enum ErrorLocation {
      NAME,
      NUMBER,
      TYPE,
      EXTENDEE,
      DEFAULT_VALUE,
      INPUT_TYPE,
      OUTPUT_TYPE,
      OPTION_NAME,
      OPTION_VALUE,
      OTHER
    };



    virtual void AddError(
      const string& filename,
      const string& element_name,
      const Message* descriptor,
      ErrorLocation location,
      const string& message
      ) = 0;



    virtual void AddWarning(
      const string& ,
      const string& ,
      const Message* ,
      ErrorLocation ,
      const string&
      ) {}

   private:
    ErrorCollector(const ErrorCollector&); void operator=(const ErrorCollector&);
  };






  const FileDescriptor* BuildFile(const FileDescriptorProto& proto);


  const FileDescriptor* BuildFileCollectingErrors(
    const FileDescriptorProto& proto,
    ErrorCollector* error_collector);
# 1652 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
  void AllowUnknownDependencies() { allow_unknown_ = true; }





  void EnforceWeakDependencies(bool enforce) { enforce_weak_ = enforce; }
# 1685 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
  explicit DescriptorPool(const DescriptorPool* underlay);




  static void InternalAddGeneratedFile(
      const void* encoded_file_descriptor, int size);


  void DisallowEnforceUtf8() { disallow_enforce_utf8_ = true; }






  static DescriptorPool* internal_generated_pool();




  void InternalDontEnforceDependencies();
# 1716 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
  void InternalSetLazilyBuildDependencies() {
    lazily_build_dependencies_ = true;


    InternalDontEnforceDependencies();
  }


  void internal_set_underlay(const DescriptorPool* underlay) {
    underlay_ = underlay;
  }




  bool InternalIsFileLoaded(const string& filename) const;




  void AddUnusedImportTrackFile(const string& file_name);
  void ClearUnusedImportTrackFiles();

 private:
  friend class Descriptor;
  friend class internal::LazyDescriptor;
  friend class FieldDescriptor;
  friend class EnumDescriptor;
  friend class ServiceDescriptor;
  friend class MethodDescriptor;
  friend class FileDescriptor;
  friend class StreamDescriptor;
  friend class DescriptorBuilder;
  friend class FileDescriptorTables;




  bool IsSubSymbolOfBuiltType(const string& name) const;





  bool TryFindFileInFallbackDatabase(const string& name) const;
  bool TryFindSymbolInFallbackDatabase(const string& name) const;
  bool TryFindExtensionInFallbackDatabase(const Descriptor* containing_type,
                                          int field_number) const;




  const FileDescriptor* BuildFileFromDatabase(
    const FileDescriptorProto& proto) const;






  Symbol CrossLinkOnDemandHelper(const string& name, bool expecting_enum) const;


  FileDescriptor* NewPlaceholderFile(const string& name) const;
  FileDescriptor* NewPlaceholderFileWithMutexHeld(const string& name) const;

  enum PlaceholderType {
    PLACEHOLDER_MESSAGE,
    PLACEHOLDER_ENUM,
    PLACEHOLDER_EXTENDABLE_MESSAGE
  };

  Symbol NewPlaceholder(const string& name,
                        PlaceholderType placeholder_type) const;
  Symbol NewPlaceholderWithMutexHeld(const string& name,
                                     PlaceholderType placeholder_type) const;



  Mutex* mutex_;


  DescriptorDatabase* fallback_database_;
  ErrorCollector* default_error_collector_;
  const DescriptorPool* underlay_;



  class Tables;
  google::protobuf::scoped_ptr<Tables> tables_;

  bool enforce_dependencies_;
  bool lazily_build_dependencies_;
  bool allow_unknown_;
  bool enforce_weak_;
  bool disallow_enforce_utf8_;
  std::set<string> unused_import_track_files_;

  DescriptorPool(const DescriptorPool&); void operator=(const DescriptorPool&);
};
# 1835 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
inline const string& Descriptor::name() const { return * name_; }
inline const string& Descriptor::full_name() const { return * full_name_; }
inline const FileDescriptor* Descriptor::file() const { return file_; }
inline const Descriptor* Descriptor::containing_type() const { return containing_type_; }

inline int Descriptor::field_count() const { return field_count_; }
inline int Descriptor::oneof_decl_count() const { return oneof_decl_count_; }
inline int Descriptor::nested_type_count() const { return nested_type_count_; }
inline int Descriptor::enum_type_count() const { return enum_type_count_; }

inline const FieldDescriptor* Descriptor::field(int index) const { return fields_ + index; }
inline const OneofDescriptor* Descriptor::oneof_decl(int index) const { return oneof_decls_ + index; }
inline const Descriptor* Descriptor::nested_type(int index) const { return nested_types_ + index; }
inline const EnumDescriptor* Descriptor::enum_type(int index) const { return enum_types_ + index; }

inline int Descriptor::extension_range_count() const { return extension_range_count_; }
inline int Descriptor::extension_count() const { return extension_count_; }
inline const Descriptor::ExtensionRange* Descriptor::extension_range(int index) const { return extension_ranges_ + index; }

inline const FieldDescriptor* Descriptor::extension(int index) const { return extensions_ + index; }


inline int Descriptor::reserved_range_count() const { return reserved_range_count_; }
inline const Descriptor::ReservedRange* Descriptor::reserved_range(int index) const { return reserved_ranges_ + index; }

inline int Descriptor::reserved_name_count() const { return reserved_name_count_; }

inline const MessageOptions& Descriptor::options() const { return *options_; }
inline bool Descriptor::is_placeholder() const { return is_placeholder_; }

inline const string& FieldDescriptor::name() const { return * name_; }
inline const string& FieldDescriptor::full_name() const { return * full_name_; }
inline const string& FieldDescriptor::json_name() const { return * json_name_; }
inline const string& FieldDescriptor::lowercase_name() const { return * lowercase_name_; }
inline const string& FieldDescriptor::camelcase_name() const { return * camelcase_name_; }
inline const FileDescriptor* FieldDescriptor::file() const { return file_; }
inline int FieldDescriptor::number() const { return number_; }
inline bool FieldDescriptor::is_extension() const { return is_extension_; }
inline FieldDescriptor::Label FieldDescriptor::label() const { return label_; }
inline const Descriptor* FieldDescriptor::containing_type() const { return containing_type_; }
inline const OneofDescriptor* FieldDescriptor::containing_oneof() const { return containing_oneof_; }

inline int FieldDescriptor::index_in_oneof() const { return index_in_oneof_; }
inline const Descriptor* FieldDescriptor::extension_scope() const { return extension_scope_; }
inline const FieldOptions& FieldDescriptor::options() const { return *options_; }
inline bool FieldDescriptor::has_default_value() const { return has_default_value_; }
inline bool FieldDescriptor::has_json_name() const { return has_json_name_; }
inline int32 FieldDescriptor::default_value_int32() const { return default_value_int32_; }
inline int64 FieldDescriptor::default_value_int64() const { return default_value_int64_; }
inline uint32 FieldDescriptor::default_value_uint32() const { return default_value_uint32_; }
inline uint64 FieldDescriptor::default_value_uint64() const { return default_value_uint64_; }
inline float FieldDescriptor::default_value_float() const { return default_value_float_; }
inline double FieldDescriptor::default_value_double() const { return default_value_double_; }
inline bool FieldDescriptor::default_value_bool() const { return default_value_bool_; }
inline const string& FieldDescriptor::default_value_string() const { return * default_value_string_; }

inline const string& OneofDescriptor::name() const { return * name_; }
inline const string& OneofDescriptor::full_name() const { return * full_name_; }
inline const Descriptor* OneofDescriptor::containing_type() const { return containing_type_; }
inline int OneofDescriptor::field_count() const { return field_count_; }
inline const OneofOptions& OneofDescriptor::options() const { return *options_; }

inline const string& EnumDescriptor::name() const { return * name_; }
inline const string& EnumDescriptor::full_name() const { return * full_name_; }
inline const FileDescriptor* EnumDescriptor::file() const { return file_; }
inline const Descriptor* EnumDescriptor::containing_type() const { return containing_type_; }
inline int EnumDescriptor::value_count() const { return value_count_; }
inline const EnumValueDescriptor* EnumDescriptor::value(int index) const { return values_ + index; }

inline const EnumOptions& EnumDescriptor::options() const { return *options_; }
inline bool EnumDescriptor::is_placeholder() const { return is_placeholder_; }
inline int EnumDescriptor::reserved_range_count() const { return reserved_range_count_; }
inline const EnumDescriptor::ReservedRange* EnumDescriptor::reserved_range(int index) const { return reserved_ranges_ + index; }

inline int EnumDescriptor::reserved_name_count() const { return reserved_name_count_; }

inline const string& EnumValueDescriptor::name() const { return * name_; }
inline const string& EnumValueDescriptor::full_name() const { return * full_name_; }
inline int EnumValueDescriptor::number() const { return number_; }
inline const EnumDescriptor* EnumValueDescriptor::type() const { return type_; }
inline const EnumValueOptions& EnumValueDescriptor::options() const { return *options_; }

inline const string& ServiceDescriptor::name() const { return * name_; }
inline const string& ServiceDescriptor::full_name() const { return * full_name_; }
inline const FileDescriptor* ServiceDescriptor::file() const { return file_; }
inline int ServiceDescriptor::method_count() const { return method_count_; }
inline const MethodDescriptor* ServiceDescriptor::method(int index) const { return methods_ + index; }

inline const ServiceOptions& ServiceDescriptor::options() const { return *options_; }

inline const string& MethodDescriptor::name() const { return * name_; }
inline const string& MethodDescriptor::full_name() const { return * full_name_; }
inline const ServiceDescriptor* MethodDescriptor::service() const { return service_; }
inline const MethodOptions& MethodDescriptor::options() const { return *options_; }
inline bool MethodDescriptor::client_streaming() const { return client_streaming_; }
inline bool MethodDescriptor::server_streaming() const { return server_streaming_; }

inline const string& FileDescriptor::name() const { return * name_; }
inline const string& FileDescriptor::package() const { return * package_; }
inline const DescriptorPool* FileDescriptor::pool() const { return pool_; }
inline int FileDescriptor::dependency_count() const { return dependency_count_; }
inline int FileDescriptor::public_dependency_count() const { return public_dependency_count_; }
inline int FileDescriptor::weak_dependency_count() const { return weak_dependency_count_; }
inline int FileDescriptor::message_type_count() const { return message_type_count_; }
inline int FileDescriptor::enum_type_count() const { return enum_type_count_; }
inline int FileDescriptor::service_count() const { return service_count_; }
inline int FileDescriptor::extension_count() const { return extension_count_; }
inline const FileOptions& FileDescriptor::options() const { return *options_; }
inline bool FileDescriptor::is_placeholder() const { return is_placeholder_; }

inline const Descriptor* FileDescriptor::message_type(int index) const { return message_types_ + index; }
inline const EnumDescriptor* FileDescriptor::enum_type(int index) const { return enum_types_ + index; }
inline const ServiceDescriptor* FileDescriptor::service(int index) const { return services_ + index; }

inline const FieldDescriptor* FileDescriptor::extension(int index) const { return extensions_ + index; }
# 1958 "..\\3rd\\protobuf\\src\\google/protobuf/descriptor.h"
inline bool Descriptor::IsExtensionNumber(int number) const {
  return FindExtensionRangeContainingNumber(number) != 0;
}

inline bool Descriptor::IsReservedNumber(int number) const {
  return FindReservedRangeContainingNumber(number) != 0;
}

inline bool Descriptor::IsReservedName(const string& name) const {
  for (int i = 0; i < reserved_name_count(); i++) {
    if (name == reserved_name(i)) {
      return true;
    }
  }
  return false;
}



inline const string& Descriptor::reserved_name(int index) const {
  return *reserved_names_[index];
}

inline bool EnumDescriptor::IsReservedNumber(int number) const {
  return FindReservedRangeContainingNumber(number) != 0;
}

inline bool EnumDescriptor::IsReservedName(const string& name) const {
  for (int i = 0; i < reserved_name_count(); i++) {
    if (name == reserved_name(i)) {
      return true;
    }
  }
  return false;
}



inline const string& EnumDescriptor::reserved_name(int index) const {
  return *reserved_names_[index];
}

inline FieldDescriptor::Type FieldDescriptor::type() const {
  if (type_once_) {
    type_once_->Init(&FieldDescriptor::TypeOnceInit, this);
  }
  return type_;
}

inline bool FieldDescriptor::is_required() const {
  return label() == LABEL_REQUIRED;
}

inline bool FieldDescriptor::is_optional() const {
  return label() == LABEL_OPTIONAL;
}

inline bool FieldDescriptor::is_repeated() const {
  return label() == LABEL_REPEATED;
}

inline bool FieldDescriptor::is_packable() const {
  return is_repeated() && IsTypePackable(type());
}

inline bool FieldDescriptor::is_map() const {
  return type() == TYPE_MESSAGE && is_map_message_type();
}



inline int FieldDescriptor::index() const {
  if (!is_extension_) {
    return static_cast<int>(this - containing_type()->fields_);
  } else if (extension_scope_ != 0) {
    return static_cast<int>(this - extension_scope_->extensions_);
  } else {
    return static_cast<int>(this - file_->extensions_);
  }
}

inline int Descriptor::index() const {
  if (containing_type_ == 0) {
    return static_cast<int>(this - file_->message_types_);
  } else {
    return static_cast<int>(this - containing_type_->nested_types_);
  }
}

inline const FileDescriptor* OneofDescriptor::file() const {
  return containing_type()->file();
}

inline int OneofDescriptor::index() const {
  return static_cast<int>(this - containing_type_->oneof_decls_);
}

inline int EnumDescriptor::index() const {
  if (containing_type_ == 0) {
    return static_cast<int>(this - file_->enum_types_);
  } else {
    return static_cast<int>(this - containing_type_->enum_types_);
  }
}

inline const FileDescriptor* EnumValueDescriptor::file() const {
  return type()->file();
}

inline int EnumValueDescriptor::index() const {
  return static_cast<int>(this - type_->values_);
}

inline int ServiceDescriptor::index() const {
  return static_cast<int>(this - file_->services_);
}

inline const FileDescriptor* MethodDescriptor::file() const {
  return service()->file();
}

inline int MethodDescriptor::index() const {
  return static_cast<int>(this - service_->methods_);
}

inline const char* FieldDescriptor::type_name() const {
  return kTypeToName[type()];
}

inline FieldDescriptor::CppType FieldDescriptor::cpp_type() const {
  return kTypeToCppTypeMap[type()];
}

inline const char* FieldDescriptor::cpp_type_name() const {
  return kCppTypeToName[kTypeToCppTypeMap[type()]];
}

inline FieldDescriptor::CppType FieldDescriptor::TypeToCppType(Type type) {
  return kTypeToCppTypeMap[type];
}

inline const char* FieldDescriptor::TypeName(Type type) {
  return kTypeToName[type];
}

inline const char* FieldDescriptor::CppTypeName(CppType cpp_type) {
  return kCppTypeToName[cpp_type];
}

inline bool FieldDescriptor::IsTypePackable(Type field_type) {
  return (field_type != FieldDescriptor::TYPE_STRING &&
          field_type != FieldDescriptor::TYPE_GROUP &&
          field_type != FieldDescriptor::TYPE_MESSAGE &&
          field_type != FieldDescriptor::TYPE_BYTES);
}

inline const FileDescriptor* FileDescriptor::public_dependency(
    int index) const {
  return dependency(public_dependencies_[index]);
}

inline const FileDescriptor* FileDescriptor::weak_dependency(
    int index) const {
  return dependency(weak_dependencies_[index]);
}

inline FileDescriptor::Syntax FileDescriptor::syntax() const {
  return syntax_;
}



inline const FieldDescriptor* OneofDescriptor::field(int index) const {
  return fields_[index];
}

}

}
# 122 "..\\3rd\\protobuf\\src\\google/protobuf/message.h" 2






namespace google {
namespace protobuf {


class Message;
class Reflection;
class MessageFactory;


class MapKey;
class MapValueRef;
class MapIterator;
class MapReflectionTester;

namespace internal {
class MapFieldBase;
}
class UnknownFieldSet;
namespace io {
class ZeroCopyInputStream;
class ZeroCopyOutputStream;
class CodedInputStream;
class CodedOutputStream;
}
namespace python {
class MapReflectionFriend;
}
namespace expr {
class CelMapReflectionFriend;
}


namespace internal {
class ReflectionOps;
class MapKeySorter;
class WireFormat;
class MapFieldReflectionTest;
}

template<typename T>
class RepeatedField;

template<typename T>
class RepeatedPtrField;


struct Metadata {
  const Descriptor* descriptor;
  const Reflection* reflection;
};
# 189 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
class Message : public MessageLite {
 public:
  inline Message() {}
  virtual ~Message() {}






  virtual Message* New() const = 0;




  virtual Message* New(::google::protobuf::Arena* arena) const {
    Message* message = New();
    if (arena != 0) {
      arena->Own(message);
    }
    return message;
  }




  virtual void CopyFrom(const Message& from);






  virtual void MergeFrom(const Message& from);



  void CheckInitialized() const;





  void FindInitializationErrors(std::vector<string>* errors) const;



  string InitializationErrorString() const;
# 248 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual void DiscardUnknownFields();
# 258 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual size_t SpaceUsedLong() const;


  int SpaceUsed() const { return internal::ToIntSize(SpaceUsedLong()); }





  string DebugString() const;

  string ShortDebugString() const;

  string Utf8DebugString() const;

  void PrintDebugString() const;







  bool ParseFromFileDescriptor(int file_descriptor);


  bool ParsePartialFromFileDescriptor(int file_descriptor);


  bool ParseFromIstream(std::istream* input);


  bool ParsePartialFromIstream(std::istream* input);



  bool SerializeToFileDescriptor(int file_descriptor) const;

  bool SerializePartialToFileDescriptor(int file_descriptor) const;


  bool SerializeToOstream(std::ostream* output) const;

  bool SerializePartialToOstream(std::ostream* output) const;






  virtual string GetTypeName() const;
  virtual void Clear();
  virtual bool IsInitialized() const;
  virtual void CheckTypeAndMergeFrom(const MessageLite& other);
  virtual bool MergePartialFromCodedStream(io::CodedInputStream* input);
  virtual size_t ByteSizeLong() const;
  virtual void SerializeWithCachedSizes(io::CodedOutputStream* output) const;

 private:







  virtual void SetCachedSize(int size) const;

 public:




  typedef google::protobuf::Reflection Reflection;




  const Descriptor* GetDescriptor() const { return GetMetadata().descriptor; }
# 345 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual const Reflection* GetReflection() const final {
    return GetMetadata().reflection;
  }

 protected:



  virtual Metadata GetMetadata() const = 0;


 private:
  Message(const Message&); void operator=(const Message&);
};

namespace internal {


class RepeatedFieldAccessor;
}



template<typename T, typename Enable = void>
class RepeatedFieldRef;

template<typename T, typename Enable = void>
class MutableRepeatedFieldRef;
# 412 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
class Reflection {
 public:
  inline Reflection() {}
  virtual ~Reflection();





  virtual const UnknownFieldSet& GetUnknownFields(
      const Message& message) const = 0;





  virtual UnknownFieldSet* MutableUnknownFields(Message* message) const = 0;


  virtual size_t SpaceUsedLong(const Message& message) const = 0;


  int SpaceUsed(const Message& message) const {
    return internal::ToIntSize(SpaceUsedLong(message));
  }


  virtual bool HasField(const Message& message,
                        const FieldDescriptor* field) const = 0;


  virtual int FieldSize(const Message& message,
                        const FieldDescriptor* field) const = 0;



  virtual void ClearField(Message* message,
                          const FieldDescriptor* field) const = 0;





  virtual bool HasOneof(const Message& ,
                        const OneofDescriptor* ) const {
    return false;
  }

  virtual void ClearOneof(Message* ,
                          const OneofDescriptor* ) const {}



  virtual const FieldDescriptor* GetOneofFieldDescriptor(
      const Message& ,
      const OneofDescriptor* ) const {
    return 0;
  }
# 478 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual void RemoveLast(Message* message,
                          const FieldDescriptor* field) const = 0;


  virtual Message* ReleaseLast(Message* message,
                               const FieldDescriptor* field) const = 0;


  virtual void Swap(Message* message1, Message* message2) const = 0;


  virtual void SwapFields(Message* message1,
                          Message* message2,
                          const std::vector<const FieldDescriptor*>& fields)
      const = 0;


  virtual void SwapElements(Message* message,
                            const FieldDescriptor* field,
                            int index1,
                            int index2) const = 0;
# 508 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual void ListFields(
      const Message& message,
      std::vector<const FieldDescriptor*>* output) const = 0;





  virtual int32 GetInt32 (const Message& message,
                           const FieldDescriptor* field) const = 0;
  virtual int64 GetInt64 (const Message& message,
                           const FieldDescriptor* field) const = 0;
  virtual uint32 GetUInt32(const Message& message,
                           const FieldDescriptor* field) const = 0;
  virtual uint64 GetUInt64(const Message& message,
                           const FieldDescriptor* field) const = 0;
  virtual float GetFloat (const Message& message,
                           const FieldDescriptor* field) const = 0;
  virtual double GetDouble(const Message& message,
                           const FieldDescriptor* field) const = 0;
  virtual bool GetBool (const Message& message,
                           const FieldDescriptor* field) const = 0;
  virtual string GetString(const Message& message,
                           const FieldDescriptor* field) const = 0;
  virtual const EnumValueDescriptor* GetEnum(
      const Message& message, const FieldDescriptor* field) const = 0;






  virtual int GetEnumValue(
      const Message& message, const FieldDescriptor* field) const = 0;


  virtual const Message& GetMessage(const Message& message,
                                    const FieldDescriptor* field,
                                    MessageFactory* factory = 0) const = 0;
# 563 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual const string& GetStringReference(const Message& message,
                                           const FieldDescriptor* field,
                                           string* scratch) const = 0;





  virtual void SetInt32 (Message* message,
                         const FieldDescriptor* field, int32 value) const = 0;
  virtual void SetInt64 (Message* message,
                         const FieldDescriptor* field, int64 value) const = 0;
  virtual void SetUInt32(Message* message,
                         const FieldDescriptor* field, uint32 value) const = 0;
  virtual void SetUInt64(Message* message,
                         const FieldDescriptor* field, uint64 value) const = 0;
  virtual void SetFloat (Message* message,
                         const FieldDescriptor* field, float value) const = 0;
  virtual void SetDouble(Message* message,
                         const FieldDescriptor* field, double value) const = 0;
  virtual void SetBool (Message* message,
                         const FieldDescriptor* field, bool value) const = 0;
  virtual void SetString(Message* message,
                         const FieldDescriptor* field,
                         const string& value) const = 0;
  virtual void SetEnum (Message* message,
                         const FieldDescriptor* field,
                         const EnumValueDescriptor* value) const = 0;




  virtual void SetEnumValue(Message* message,
                            const FieldDescriptor* field,
                            int value) const = 0;
# 609 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual Message* MutableMessage(Message* message,
                                  const FieldDescriptor* field,
                                  MessageFactory* factory = 0) const = 0;




  virtual void SetAllocatedMessage(Message* message,
                                   Message* sub_message,
                                   const FieldDescriptor* field) const = 0;







  virtual Message* ReleaseMessage(Message* message,
                                  const FieldDescriptor* field,
                                  MessageFactory* factory = 0) const = 0;





  virtual int32 GetRepeatedInt32 (const Message& message,
                                   const FieldDescriptor* field,
                                   int index) const = 0;
  virtual int64 GetRepeatedInt64 (const Message& message,
                                   const FieldDescriptor* field,
                                   int index) const = 0;
  virtual uint32 GetRepeatedUInt32(const Message& message,
                                   const FieldDescriptor* field,
                                   int index) const = 0;
  virtual uint64 GetRepeatedUInt64(const Message& message,
                                   const FieldDescriptor* field,
                                   int index) const = 0;
  virtual float GetRepeatedFloat (const Message& message,
                                   const FieldDescriptor* field,
                                   int index) const = 0;
  virtual double GetRepeatedDouble(const Message& message,
                                   const FieldDescriptor* field,
                                   int index) const = 0;
  virtual bool GetRepeatedBool (const Message& message,
                                   const FieldDescriptor* field,
                                   int index) const = 0;
  virtual string GetRepeatedString(const Message& message,
                                   const FieldDescriptor* field,
                                   int index) const = 0;
  virtual const EnumValueDescriptor* GetRepeatedEnum(
      const Message& message,
      const FieldDescriptor* field, int index) const = 0;





  virtual int GetRepeatedEnumValue(
      const Message& message,
      const FieldDescriptor* field, int index) const = 0;
  virtual const Message& GetRepeatedMessage(
      const Message& message,
      const FieldDescriptor* field, int index) const = 0;


  virtual const string& GetRepeatedStringReference(
      const Message& message, const FieldDescriptor* field,
      int index, string* scratch) const = 0;





  virtual void SetRepeatedInt32 (Message* message,
                                 const FieldDescriptor* field,
                                 int index, int32 value) const = 0;
  virtual void SetRepeatedInt64 (Message* message,
                                 const FieldDescriptor* field,
                                 int index, int64 value) const = 0;
  virtual void SetRepeatedUInt32(Message* message,
                                 const FieldDescriptor* field,
                                 int index, uint32 value) const = 0;
  virtual void SetRepeatedUInt64(Message* message,
                                 const FieldDescriptor* field,
                                 int index, uint64 value) const = 0;
  virtual void SetRepeatedFloat (Message* message,
                                 const FieldDescriptor* field,
                                 int index, float value) const = 0;
  virtual void SetRepeatedDouble(Message* message,
                                 const FieldDescriptor* field,
                                 int index, double value) const = 0;
  virtual void SetRepeatedBool (Message* message,
                                 const FieldDescriptor* field,
                                 int index, bool value) const = 0;
  virtual void SetRepeatedString(Message* message,
                                 const FieldDescriptor* field,
                                 int index, const string& value) const = 0;
  virtual void SetRepeatedEnum(Message* message,
                               const FieldDescriptor* field, int index,
                               const EnumValueDescriptor* value) const = 0;




  virtual void SetRepeatedEnumValue(Message* message,
                                    const FieldDescriptor* field, int index,
                                    int value) const = 0;


  virtual Message* MutableRepeatedMessage(
      Message* message, const FieldDescriptor* field, int index) const = 0;





  virtual void AddInt32 (Message* message,
                         const FieldDescriptor* field, int32 value) const = 0;
  virtual void AddInt64 (Message* message,
                         const FieldDescriptor* field, int64 value) const = 0;
  virtual void AddUInt32(Message* message,
                         const FieldDescriptor* field, uint32 value) const = 0;
  virtual void AddUInt64(Message* message,
                         const FieldDescriptor* field, uint64 value) const = 0;
  virtual void AddFloat (Message* message,
                         const FieldDescriptor* field, float value) const = 0;
  virtual void AddDouble(Message* message,
                         const FieldDescriptor* field, double value) const = 0;
  virtual void AddBool (Message* message,
                         const FieldDescriptor* field, bool value) const = 0;
  virtual void AddString(Message* message,
                         const FieldDescriptor* field,
                         const string& value) const = 0;
  virtual void AddEnum (Message* message,
                         const FieldDescriptor* field,
                         const EnumValueDescriptor* value) const = 0;




  virtual void AddEnumValue(Message* message,
                            const FieldDescriptor* field,
                            int value) const = 0;

  virtual Message* AddMessage(Message* message,
                              const FieldDescriptor* field,
                              MessageFactory* factory = 0) const = 0;





  virtual void AddAllocatedMessage(Message* message,
                                   const FieldDescriptor* field,
                                   Message* new_entry) const;
# 790 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  template<typename T>
  RepeatedFieldRef<T> GetRepeatedFieldRef(
      const Message& message, const FieldDescriptor* field) const;



  template<typename T>
  MutableRepeatedFieldRef<T> GetMutableRepeatedFieldRef(
      Message* message, const FieldDescriptor* field) const;
# 817 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  template<typename T>

  const RepeatedField<T>& GetRepeatedField(
      const Message&, const FieldDescriptor*) const;




  template<typename T>

  RepeatedField<T>* MutableRepeatedField(
      Message*, const FieldDescriptor*) const;





  template<typename T>

  const RepeatedPtrField<T>& GetRepeatedPtrField(
      const Message&, const FieldDescriptor*) const;





  template<typename T>

  RepeatedPtrField<T>* MutableRepeatedPtrField(
      Message*, const FieldDescriptor*) const;





  virtual const FieldDescriptor* FindKnownExtensionByName(
      const string& name) const = 0;



  virtual const FieldDescriptor* FindKnownExtensionByNumber(
      int number) const = 0;
# 890 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual bool SupportsUnknownEnumValues() const { return false; }
# 901 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual MessageFactory* GetMessageFactory() const;



 protected:





  virtual void* MutableRawRepeatedField(
      Message* message, const FieldDescriptor* field, FieldDescriptor::CppType,
      int ctype, const Descriptor* message_type) const = 0;


  virtual const void* GetRawRepeatedField(
      const Message& message, const FieldDescriptor* field,
      FieldDescriptor::CppType cpptype, int ctype,
      const Descriptor* message_type) const {
    return MutableRawRepeatedField(
        const_cast<Message*>(&message), field, cpptype, ctype, message_type);
  }
# 940 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual void* RepeatedFieldData(
      Message* message, const FieldDescriptor* field,
      FieldDescriptor::CppType cpp_type,
      const Descriptor* message_type) const;



  virtual const internal::RepeatedFieldAccessor* RepeatedFieldAccessor(
      const FieldDescriptor* field) const;

 private:
  template<typename T, typename Enable>
  friend class RepeatedFieldRef;
  template<typename T, typename Enable>
  friend class MutableRepeatedFieldRef;
  friend class ::google::protobuf::python::MapReflectionFriend;

  friend class ::google::protobuf::expr::CelMapReflectionFriend;
  friend class internal::MapFieldReflectionTest;
  friend class internal::MapKeySorter;
  friend class internal::WireFormat;
  friend class internal::ReflectionOps;







  void* MutableRawRepeatedString(
      Message* message, const FieldDescriptor* field, bool is_string) const;

  friend class MapReflectionTester;



  virtual bool ContainsMapKey(const Message& ,
                              const FieldDescriptor* ,
                              const MapKey& ) const {
    return false;
  }




  virtual bool InsertOrLookupMapValue(Message* ,
                                      const FieldDescriptor* ,
                                      const MapKey& ,
                                      MapValueRef* ) const {
    return false;
  }



  virtual bool DeleteMapValue(Message* ,
                              const FieldDescriptor* ,
                              const MapKey& ) const {
    return false;
  }




  virtual MapIterator MapBegin(
      Message* message,
      const FieldDescriptor* field) const;




  virtual MapIterator MapEnd(
      Message* message,
      const FieldDescriptor* field) const;



  virtual int MapSize(const Message& ,
                      const FieldDescriptor* ) const {
    return 0;
  }


  friend class MapIterator;
  virtual internal::MapFieldBase* MapData(
      Message* , const FieldDescriptor* ) const {
    return 0;
  }

  Reflection(const Reflection&); void operator=(const Reflection&);
};


class MessageFactory {
 public:
  inline MessageFactory() {}
  virtual ~MessageFactory();
# 1055 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  virtual const Message* GetPrototype(const Descriptor* type) = 0;
# 1071 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  static MessageFactory* generated_factory();
# 1081 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
  static void InternalRegisterGeneratedFile(
      const char* filename, void (*register_messages)(const string&));




  static void InternalRegisterGeneratedMessage(const Descriptor* descriptor,
                                               const Message* prototype);


 private:
  MessageFactory(const MessageFactory&); void operator=(const MessageFactory&);
};
# 1106 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
template<> const RepeatedField<int32>& Reflection::GetRepeatedField<int32>( const Message& message, const FieldDescriptor* field) const; template<> RepeatedField<int32>* Reflection::MutableRepeatedField<int32>( Message* message, const FieldDescriptor* field) const;
template<> const RepeatedField<int64>& Reflection::GetRepeatedField<int64>( const Message& message, const FieldDescriptor* field) const; template<> RepeatedField<int64>* Reflection::MutableRepeatedField<int64>( Message* message, const FieldDescriptor* field) const;
template<> const RepeatedField<uint32>& Reflection::GetRepeatedField<uint32>( const Message& message, const FieldDescriptor* field) const; template<> RepeatedField<uint32>* Reflection::MutableRepeatedField<uint32>( Message* message, const FieldDescriptor* field) const;
template<> const RepeatedField<uint64>& Reflection::GetRepeatedField<uint64>( const Message& message, const FieldDescriptor* field) const; template<> RepeatedField<uint64>* Reflection::MutableRepeatedField<uint64>( Message* message, const FieldDescriptor* field) const;
template<> const RepeatedField<float>& Reflection::GetRepeatedField<float>( const Message& message, const FieldDescriptor* field) const; template<> RepeatedField<float>* Reflection::MutableRepeatedField<float>( Message* message, const FieldDescriptor* field) const;
template<> const RepeatedField<double>& Reflection::GetRepeatedField<double>( const Message& message, const FieldDescriptor* field) const; template<> RepeatedField<double>* Reflection::MutableRepeatedField<double>( Message* message, const FieldDescriptor* field) const;
template<> const RepeatedField<bool>& Reflection::GetRepeatedField<bool>( const Message& message, const FieldDescriptor* field) const; template<> RepeatedField<bool>* Reflection::MutableRepeatedField<bool>( Message* message, const FieldDescriptor* field) const;
# 1123 "..\\3rd\\protobuf\\src\\google/protobuf/message.h"
template<>
inline const RepeatedPtrField<string>& Reflection::GetRepeatedPtrField<string>(
    const Message& message, const FieldDescriptor* field) const {
  return *static_cast<RepeatedPtrField<string>* >(
      MutableRawRepeatedString(const_cast<Message*>(&message), field, true));
}

template<>
inline RepeatedPtrField<string>* Reflection::MutableRepeatedPtrField<string>(
    Message* message, const FieldDescriptor* field) const {
  return static_cast<RepeatedPtrField<string>* >(
      MutableRawRepeatedString(message, field, true));
}




template<>
inline const RepeatedPtrField<Message>& Reflection::GetRepeatedPtrField(
    const Message& message, const FieldDescriptor* field) const {
  return *static_cast<const RepeatedPtrField<Message>* >(
      GetRawRepeatedField(message, field, FieldDescriptor::CPPTYPE_MESSAGE,
                          -1, 0));
}

template<>
inline RepeatedPtrField<Message>* Reflection::MutableRepeatedPtrField(
    Message* message, const FieldDescriptor* field) const {
  return static_cast<RepeatedPtrField<Message>* >(
      MutableRawRepeatedField(message, field,
          FieldDescriptor::CPPTYPE_MESSAGE, -1,
          0));
}

template<typename PB>
inline const RepeatedPtrField<PB>& Reflection::GetRepeatedPtrField(
    const Message& message, const FieldDescriptor* field) const {
  return *static_cast<const RepeatedPtrField<PB>* >(
      GetRawRepeatedField(message, field, FieldDescriptor::CPPTYPE_MESSAGE,
                          -1, PB::default_instance().GetDescriptor()));
}

template<typename PB>
inline RepeatedPtrField<PB>* Reflection::MutableRepeatedPtrField(
    Message* message, const FieldDescriptor* field) const {
  return static_cast<RepeatedPtrField<PB>* >(
      MutableRawRepeatedField(message, field,
          FieldDescriptor::CPPTYPE_MESSAGE, -1,
          PB::default_instance().GetDescriptor()));
}
}

}
# 13 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2


#pragma comment(lib,"fmt.lib")



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 1 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winapifamily.h" 1 3
# 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winapifamily.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winpackagefamily.h" 1 3
# 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winpackagefamily.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)
# 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winpackagefamily.h" 3
#pragma warning(pop)
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winapifamily.h" 2 3
# 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winapifamily.h" 3
#pragma warning(pop)
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\sdkddkver.h" 1 3
# 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\sdkddkver.h" 3
#pragma warning(push)
#pragma warning(disable: 4668)

#pragma warning(disable: 4001)
# 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\sdkddkver.h" 3
#pragma warning(pop)
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3
# 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 3
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)


#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\excpt.h" 1 3
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\excpt.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\excpt.h" 2 3


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\excpt.h" 3
 extern "C" {




typedef enum _EXCEPTION_DISPOSITION
{
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;






    struct _EXCEPTION_RECORD;
    struct _CONTEXT;

    EXCEPTION_DISPOSITION __cdecl _except_handler(
             struct _EXCEPTION_RECORD* _ExceptionRecord,
             void* _EstablisherFrame,
                struct _CONTEXT* _ContextRecord,
                void* _DispatcherContext
        );
# 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\excpt.h" 3
unsigned long __cdecl _exception_code(void);
void * __cdecl _exception_info(void);
int __cdecl _abnormal_termination(void);
# 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\excpt.h" 3
}
# 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\excpt.h" 3
#pragma pack(pop)
# 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdarg.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdarg.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\vcruntime.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdarg.h" 2 3


#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdarg.h" 3
 extern "C" {
# 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdarg.h" 3
}
# 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.12.25827\\include\\stdarg.h" 3
#pragma pack(pop)
# 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 1 3
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
extern "C" {







# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 3
#pragma warning(push)
#pragma warning(disable: 4668)
# 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 3
extern "C" {
# 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 3
}
# 674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings_strict.h" 1 3
# 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings_strict.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings_undef.h" 1 3
# 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings_strict.h" 2 3
# 674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 2 3
# 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\driverspecs.h" 1 3
# 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\driverspecs.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/sdv_driverspecs.h" 1 3
# 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\driverspecs.h" 2 3








extern "C" {
# 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\driverspecs.h" 3
}
# 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 2 3
# 711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\specstrings.h" 3
#pragma warning(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 2 3
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 3
extern "C" {
# 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 3
typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
# 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 3
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef void *LPVOID;
typedef const void *LPCVOID;

typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 1 3
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
#pragma warning(push)
#pragma warning(disable: 4668)
#pragma warning(disable: 4820)

#pragma warning(disable: 4200)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)


extern "C" {
# 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\kernelspecs.h" 1 3
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\kernelspecs.h" 3
extern "C" {
# 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\kernelspecs.h" 3
}
# 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 1 3
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 3
#pragma warning(push)
#pragma warning(disable: 4668)
# 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 3
 typedef unsigned long POINTER_64_INT;
# 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 3
extern "C" {


typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef signed __int64 INT64, *PINT64;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef unsigned __int64 UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
# 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 3
    typedef int INT_PTR, *PINT_PTR;
    typedef unsigned int UINT_PTR, *PUINT_PTR;

    typedef long LONG_PTR, *PLONG_PTR;
    typedef unsigned long ULONG_PTR, *PULONG_PTR;
# 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 3
typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef long SHANDLE_PTR;
typedef unsigned long HANDLE_PTR;
# 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 3
__inline
void * __ptr64
PtrToPtr64(
    const void *p
    )
{
    return((void * __ptr64) (unsigned __int64) (ULONG_PTR)p );
}

__inline
void *
Ptr64ToPtr(
    const void * __ptr64 p
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) p);
}

__inline
void * __ptr64
HandleToHandle64(
    const void *h
    )
{
    return((void * __ptr64)(__int64)(LONG_PTR)h );
}

__inline
void *
Handle64ToHandle(
    const void * __ptr64 h
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) h );
}
# 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 3
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
# 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\basetsd.h" 3
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;




}



#pragma warning(pop)
# 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef void *PVOID;
typedef void * __ptr64 PVOID64;
# 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
# 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef wchar_t WCHAR;





typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef const PWSTR *PCZPWSTR;
typedef WCHAR *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef const PCWSTR *PCZPCWSTR;
typedef const WCHAR *LPCUWSTR, *PCUWSTR;

typedef WCHAR *PZZWSTR;
typedef const WCHAR *PCZZWSTR;
typedef WCHAR *PUZZWSTR;
typedef const WCHAR *PCUZZWSTR;

typedef WCHAR *PNZWCH;
typedef const WCHAR *PCNZWCH;
typedef WCHAR *PUNZWCH;
typedef const WCHAR *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;
# 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR *PCUUCSSTR;

typedef UCSCHAR *PUUCSCHAR;
typedef const UCSCHAR *PCUUCSCHAR;







typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef const PSTR *PCZPSTR;
typedef const CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;
typedef const PCSTR *PCZPCSTR;

typedef CHAR *PZZSTR;
typedef const CHAR *PCZZSTR;

typedef CHAR *PNZCH;
typedef const CHAR *PCNZCH;







typedef WCHAR TCHAR, *PTCHAR;
typedef WCHAR TBYTE , *PTBYTE ;



typedef LPWCH LPTCH, PTCH;
typedef LPCWCH LPCTCH, PCTCH;
typedef LPWSTR PTSTR, LPTSTR;
typedef LPCWSTR PCTSTR, LPCTSTR;
typedef LPUWSTR PUTSTR, LPUTSTR;
typedef LPCUWSTR PCUTSTR, LPCUTSTR;
typedef LPWSTR LP;
typedef PZZWSTR PZZTSTR;
typedef PCZZWSTR PCZZTSTR;
typedef PUZZWSTR PUZZTSTR;
typedef PCUZZWSTR PCUZZTSTR;
typedef PZPWSTR PZPTSTR;
typedef PNZWCH PNZTCH;
typedef PCNZWCH PCNZTCH;
typedef PUNZWCH PUNZTCH;
typedef PCUNZWCH PCUNZTCH;
# 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef SHORT *PSHORT;
typedef LONG *PLONG;
# 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _PROCESSOR_NUMBER {
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
# 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef void *HANDLE;
# 643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef HANDLE *PHANDLE;







typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;
# 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef long HRESULT;
# 731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
# 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;
# 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;
# 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
# 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;






typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
    LONGLONG QuadPart;
} LARGE_INTEGER;


typedef LARGE_INTEGER *PLARGE_INTEGER;






typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
    ULONGLONG QuadPart;
} ULARGE_INTEGER;


typedef ULARGE_INTEGER *PULARGE_INTEGER;





typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;
typedef LONG RTL_REFERENCE_COUNT32, *PRTL_REFERENCE_COUNT32;
# 873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
# 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
ULONGLONG
__stdcall
Int64ShllMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
         LONGLONG Value,
         DWORD ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    );


#pragma warning(push)

#pragma warning(disable: 4035 4793)

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shld edx, eax, cl
        shl eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
         LONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shrd eax, edx, cl
        sar edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shrd eax, edx, cl
        shr edx, cl
    }
}


#pragma warning(pop)
# 1017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" {
# 1069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
unsigned int
__cdecl
_rotl (
         unsigned int Value,
         int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
         unsigned __int64 Value,
         int Shift
    );

unsigned int
__cdecl
_rotr (
         unsigned int Value,
         int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
         unsigned __int64 Value,
         int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)




}






typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
# 1140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\guiddef.h" 1 3
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\guiddef.h" 3
typedef struct _GUID {
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[ 8 ];
} GUID;
# 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\guiddef.h" 3
typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;
# 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\guiddef.h" 3
__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}
# 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\guiddef.h" 3
__inline bool operator==(const GUID & guidOne, const GUID & guidOther)
{
    return !!IsEqualGUID(guidOne,guidOther);
}

__inline bool operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
# 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3





typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
# 1250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C++"
template <typename T, size_t N>
char (*RtlpNumberOf( T (&)[N] ))[N];
# 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef


EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
            struct _EXCEPTION_RECORD *ExceptionRecord,
         PVOID EstablisherFrame,
            struct _CONTEXT *ContextRecord,
         PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
# 2368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C++" {

    template <size_t S>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE;

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<1>
    {
        typedef INT8 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<2>
    {
        typedef INT16 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<4>
    {
        typedef INT32 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<8>
    {
        typedef INT64 type;
    };


    template <class T>
    struct _ENUM_FLAG_SIZED_INTEGER
    {
        typedef typename _ENUM_FLAG_INTEGER_FOR_SIZE<sizeof(T)>::type type;
    };

}
# 2513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;







typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
# 2554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
    M128A XmmRegisters[8];
    BYTE Reserved4[224];



} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 CompactionMask;
    DWORD64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
                                   PXSAVE_AREA Area;


    DWORD Reserved2;


    PVOID Buffer;


    DWORD Reserved3;


} XSTATE_CONTEXT, *PXSTATE_CONTEXT;





typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;
# 4104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _SCOPE_TABLE_ARM {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;
# 5076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _SCOPE_TABLE_ARM64 {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM64, *PSCOPE_TABLE_ARM64;
# 6251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {

    PDWORD64 X19;
    PDWORD64 X20;
    PDWORD64 X21;
    PDWORD64 X22;
    PDWORD64 X23;
    PDWORD64 X24;
    PDWORD64 X25;
    PDWORD64 X26;
    PDWORD64 X27;
    PDWORD64 X28;
    PDWORD64 Fp;
    PDWORD64 Lr;

    PDWORD64 D8;
    PDWORD64 D9;
    PDWORD64 D10;
    PDWORD64 D11;
    PDWORD64 D12;
    PDWORD64 D13;
    PDWORD64 D14;
    PDWORD64 D15;

} KNONVOLATILE_CONTEXT_POINTERS_ARM64, *PKNONVOLATILE_CONTEXT_POINTERS_ARM64;
# 6299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" {
# 6346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
void
__int2c (
    void
    );

#pragma intrinsic(__int2c)
# 6449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
}
# 6481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
#pragma warning(push)





#pragma warning(pop)
# 6502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" {
# 6525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
BOOLEAN
_bittest (
                                   LONG const *Base,
                     LONG Offset
    );

BOOLEAN
_bittestandcomplement (
                                        LONG *Base,
                     LONG Offset
    );

BOOLEAN
_bittestandset (
                                        LONG *Base,
                     LONG Offset
    );

BOOLEAN
_bittestandreset (
                                        LONG *Base,
                     LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
                                                              LONG volatile *Base,
                     LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
                                                              LONG volatile *Base,
                     LONG Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)
# 6576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
BOOLEAN
_BitScanForward (
          DWORD *Index,
         DWORD Mask
    );


BOOLEAN
_BitScanReverse (
          DWORD *Index,
         DWORD Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)


__forceinline
BOOLEAN
_InlineBitScanForward64 (
          DWORD *Index,
         DWORD64 Mask
    )
{
    if (_BitScanForward(Index, (DWORD)Mask)) {
        return 1;
    }

    if (_BitScanForward(Index, (DWORD)(Mask >> 32))) {
        *Index += 32;
        return 1;
    }

    return 0;
}




__forceinline
BOOLEAN
_InlineBitScanReverse64 (
          DWORD *Index,
         DWORD64 Mask
    )
{
    if (_BitScanReverse(Index, (DWORD)(Mask >> 32))) {
        *Index += 32;
        return 1;
    }

    if (_BitScanReverse(Index, (DWORD)Mask)) {
        return 1;
    }

    return 0;
}
# 6664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
SHORT
_InterlockedIncrement16 (
                                  SHORT volatile *Addend
    );

SHORT
_InterlockedDecrement16 (
                                  SHORT volatile *Addend
    );

SHORT
_InterlockedCompareExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange,
         SHORT Comperand
    );

LONG64
_InterlockedCompareExchange64 (
                                  LONG64 volatile *Destination,
         LONG64 ExChange,
         LONG64 Comperand
    );

#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedCompareExchange64)
# 6742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
LONG
_InterlockedAnd (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
_InterlockedOr (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
_InterlockedXor (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
__cdecl
_InterlockedIncrement (
                                  LONG volatile *Addend
    );

LONG
__cdecl
_InterlockedDecrement (
                                  LONG volatile *Addend
    );

LONG
__cdecl
_InterlockedExchange (
                                  LONG volatile *Target,
         LONG Value
    );

LONG
__cdecl
_InterlockedExchangeAdd (
                                  LONG volatile *Addend,
         LONG Value
    );

__forceinline
LONG
_InlineInterlockedAdd (
                                  LONG volatile *Addend,
         LONG Value
    )

{

    return _InterlockedExchangeAdd(Addend, Value) + Value;
}

LONG
__cdecl
_InterlockedCompareExchange (
                                  LONG volatile * Destination,
         LONG ExChange,
         LONG Comperand
    );



__forceinline

PVOID
_InlineInterlockedExchangePointer(



                          PVOID volatile * Destination,
             PVOID Value
    )
{
    return (PVOID)_InterlockedExchange((LONG volatile *) Destination,
                                      (LONG) Value);
}






__forceinline

PVOID
_InlineInterlockedCompareExchangePointer (



                          PVOID volatile * Destination,
             PVOID ExChange,
             PVOID Comperand
    )
{
    return (PVOID)_InterlockedCompareExchange((LONG volatile *) Destination,
                                             (LONG) ExChange,
                                             (LONG) Comperand);
}
# 6854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)








CHAR
_InterlockedExchange8 (
                                  CHAR volatile *Target,
         CHAR Value
    );

SHORT
_InterlockedExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange
    );

#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)
# 6900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
char
_InterlockedExchangeAdd8 (
                                  char volatile * _Addend,
         char _Value
    );

char
_InterlockedAnd8 (
                                  char volatile *Destination,
         char Value
    );

char
_InterlockedOr8 (
                                  char volatile *Destination,
         char Value
    );

char
_InterlockedXor8 (
                                  char volatile *Destination,
         char Value
    );

SHORT
_InterlockedAnd16 (
                                  SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedXor16(
                                  SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedCompareExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange,
         SHORT Comperand
    );

SHORT
_InterlockedOr16 (
                                  SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedIncrement16 (
                                  SHORT volatile *Destination
    );

SHORT
_InterlockedDecrement16 (
                                  SHORT volatile *Destination
    );

#pragma intrinsic (_InterlockedExchangeAdd8)
#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)
#pragma intrinsic (_InterlockedCompareExchange16)
#pragma intrinsic (_InterlockedIncrement16)
#pragma intrinsic (_InterlockedDecrement16)
# 6979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__forceinline
LONG64
_InlineInterlockedAnd64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old & Value,
                                          Old) != Old);

    return Old;
}






__forceinline
LONG64
_InlineInterlockedAdd64 (
                                  LONG64 volatile *Addend,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old + Value;
}
# 7040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
LONG
_InterlockedXor (
                                  LONG volatile *Target,
         LONG Set
    );

#pragma intrinsic(_InterlockedXor)





LONGLONG
__forceinline
_InlineInterlockedOr64 (
                                  LONGLONG volatile *Destination,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old | Value,
                                          Old) != Old);

    return Old;
}



__forceinline
LONG64
_InlineInterlockedXor64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old ^ Value,
                                          Old) != Old);

    return Old;
}



LONGLONG
__forceinline
_InlineInterlockedIncrement64 (
                                  LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + 1,
                                          Old) != Old);

    return Old + 1;
}






__forceinline
LONGLONG
_InlineInterlockedDecrement64 (
                                  LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old - 1,
                                          Old) != Old);

    return Old - 1;
}






__forceinline
LONGLONG
_InlineInterlockedExchange64 (
                                  LONGLONG volatile *Target,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Target;
    } while (_InterlockedCompareExchange64(Target,
                                          Value,
                                          Old) != Old);

    return Old;
}






__forceinline
LONGLONG
_InlineInterlockedExchangeAdd64 (
                                  LONGLONG volatile *Addend,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old;
}
# 7184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
void
__incfsbyte (
         DWORD Offset
    );

void
__addfsbyte (
         DWORD Offset,
         BYTE Value
    );

void
__incfsword (
         DWORD Offset
    );

void
__addfsword (
         DWORD Offset,
         WORD Value
    );

void
__incfsdword (
         DWORD Offset
    );

void
__addfsdword (
         DWORD Offset,
         DWORD Value
    );

#pragma intrinsic(__incfsbyte)
#pragma intrinsic(__addfsbyte)
#pragma intrinsic(__incfsword)
#pragma intrinsic(__addfsword)
#pragma intrinsic(__incfsdword)
#pragma intrinsic(__addfsdword)
# 7238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
void
__cpuidex (
    int CPUInfo[4],
    int Function,
    int SubLeaf
    );

#pragma intrinsic(__cpuidex)
# 7255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
BYTE
__readfsbyte (
         DWORD Offset
    );

WORD
__readfsword (
         DWORD Offset
    );

DWORD
__readfsdword (
         DWORD Offset
    );

void
__writefsbyte (
         DWORD Offset,
         BYTE Data
    );

void
__writefsword (
         DWORD Offset,
         WORD Data
    );

void
__writefsdword (
         DWORD Offset,
         DWORD Data
    );

#pragma intrinsic(__readfsbyte)
#pragma intrinsic(__readfsword)
#pragma intrinsic(__readfsdword)
#pragma intrinsic(__writefsbyte)
#pragma intrinsic(__writefsword)
#pragma intrinsic(__writefsdword)





void
_mm_pause (
    void
    );

#pragma intrinsic(_mm_pause)






}
# 7322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
#pragma prefast(push)
#pragma warning(push)
#pragma prefast(disable: 6001 28113, "The barrier variable is accessed only to create a side effect.")
#pragma warning(disable: 4793)
__forceinline
void
MemoryBarrier (
    void
    )
{
    LONG Barrier;

    _InterlockedOr(&Barrier, 0);
    return;
}

#pragma warning(pop)
#pragma prefast(pop)
# 7354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
void
_mm_prefetch (
         CHAR const *a,
         int sel
    );

#pragma intrinsic(_mm_prefetch)
# 7383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
DWORD64
__readpmc (
         DWORD Counter
    );

#pragma intrinsic(__readpmc)







DWORD64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)
# 7412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__inline PVOID GetFiberData( void ) { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10);}
__inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10);}
# 7478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Spare0;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;
# 7500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef char __C_ASSERT__[(sizeof(XSAVE_FORMAT) == 512)?1:-1];







# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack4.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack4.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 7507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 7519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _CONTEXT {
# 7539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} CONTEXT;

typedef CONTEXT *PCONTEXT;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 7607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 7617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
# 7651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" {


__forceinline
CHAR
ReadAcquire8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
CHAR
ReadNoFence8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
SHORT
ReadAcquire16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
SHORT
ReadNoFence16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG
ReadAcquire (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG
ReadNoFence (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG64
ReadAcquire64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG64
ReadNoFence64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *Destination = Value;
    return;
}


}
# 7880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__forceinline
CHAR
ReadRaw8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__forceinline
void
WriteRaw8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__forceinline
SHORT
ReadRaw16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__forceinline
void
WriteRaw16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__forceinline
LONG
ReadRaw (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__forceinline
void
WriteRaw (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__forceinline
LONG64
ReadRaw64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__forceinline
void
WriteRaw64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__forceinline
BYTE
ReadUCharAcquire (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE
ReadUCharNoFence (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE
ReadBooleanAcquire (
                               BOOLEAN const volatile *Source
    )

{

    return (BOOLEAN)ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE
ReadBooleanNoFence (
                               BOOLEAN const volatile *Source
    )

{

    return (BOOLEAN)ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE
ReadUCharRaw (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadRaw8((PCHAR)Source);
}

__forceinline
void
WriteUCharRelease (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharNoFence (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteBooleanRelease (
                                BOOLEAN volatile *Destination,
         BOOLEAN Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteBooleanNoFence (
                                BOOLEAN volatile *Destination,
         BOOLEAN Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharRaw (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
WORD
ReadUShortAcquire (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadAcquire16((PSHORT)Source);
}

__forceinline
WORD
ReadUShortNoFence (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadNoFence16((PSHORT)Source);
}

__forceinline
WORD
ReadUShortRaw (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadRaw16((PSHORT)Source);
}

__forceinline
void
WriteUShortRelease (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortNoFence (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortRaw (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
DWORD
ReadULongAcquire (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadAcquire((PLONG)Source);
}

__forceinline
DWORD
ReadULongNoFence (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadNoFence((PLONG)Source);
}

__forceinline
DWORD
ReadULongRaw (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadRaw((PLONG)Source);
}

__forceinline
void
WriteULongRelease (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongNoFence (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongRaw (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
DWORD64
ReadULong64Acquire (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64NoFence (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64Raw (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WriteULong64Release (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64NoFence (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64Raw (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}
# 8342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__forceinline
PVOID
ReadPointerAcquire (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire((PLONG)Source);
}

__forceinline
PVOID
ReadPointerNoFence (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence((PLONG)Source);
}

__forceinline
PVOID
ReadPointerRaw (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw((PLONG)Source);
}

__forceinline
void
WritePointerRelease (
                                PVOID volatile *Destination,
         PVOID Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WritePointerNoFence (
                                PVOID volatile *Destination,
             PVOID Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WritePointerRaw (
                                PVOID volatile *Destination,
             PVOID Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}
# 8578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack4.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack4.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 8592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 8604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _WOW64_CONTEXT {
# 8624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    WOW64_FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 8692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3



typedef struct _WOW64_LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;
# 8746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
# 8804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef PVOID PCLAIMS_BLOB;
# 8848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
# 8907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
# 8926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 8926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3


typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 8935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 8970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;





typedef struct _SID {
   BYTE Revision;
   BYTE SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];

} SID, *PISID;
# 9018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef union _SE_SID {
    SID Sid;
    BYTE Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
} SE_SID, *PSE_SID;




typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel,
    SidTypeLogonSession
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;

    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
# 9458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum {

    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
    WinAuthenticationFreshKeyAuthSid = 118,
} WELL_KNOWN_SID_TYPE;
# 9676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;
# 9706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _ACE_HEADER {
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;
# 9835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;

typedef struct _SYSTEM_ACCESS_FILTER_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_ACCESS_FILTER_ACE, *PSYSTEM_ACCESS_FILTER_ACE;
# 9912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
# 10035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
# 10086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
# 10176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE Revision;
   BYTE Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;


typedef struct _SECURITY_OBJECT_AI_PARAMS {
    DWORD Size;
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;
# 10253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
# 10273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
# 10327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
# 10348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone = 0x00000000,






    AccessReasonAllowedAce = 0x00010000,
    AccessReasonDeniedAce = 0x00020000,

    AccessReasonAllowedParentAce = 0x00030000,
    AccessReasonDeniedParentAce = 0x00040000,

    AccessReasonNotGrantedByCape = 0x00050000,
    AccessReasonNotGrantedByParentCape = 0x00060000,

    AccessReasonNotGrantedToAppContainer = 0x00070000,

    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,


    AccessReasonIntegrityLevel = 0x00300000,

    AccessReasonOwnership = 0x00400000,

    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,

    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000,

    AccessReasonTrustLabel = 0x00900000,

    AccessReasonFilterAce = 0x00a00000
}
ACCESS_REASON_TYPE;
# 10401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
# 10432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;
# 10537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
# 10619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    TokenPrivateNameSpace,
    TokenSingletonAttributes,
    TokenBnoIsolation,
    TokenChildProcessFlags,
    MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;





typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;



typedef struct _SE_TOKEN_USER {
    union {
        TOKEN_USER TokenUser;
        SID_AND_ATTRIBUTES User;
    } ;

    union {
        SID Sid;
        BYTE Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
    } ;

} SE_TOKEN_USER , PSE_TOKEN_USER;






typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];

} TOKEN_GROUPS, *PTOKEN_GROUPS;

typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;





typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;
# 10795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
    PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE PerUserPolicy[(((59)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;





typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;

typedef struct _TOKEN_BNO_ISOLATION_INFORMATION {
    PWSTR IsolationPrefix;
    BOOLEAN IsolationEnabled;
} TOKEN_BNO_ISOLATION_INFORMATION, *PTOKEN_BNO_ISOLATION_INFORMATION;
# 10918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64 Version;
    PWSTR Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
# 10930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID pValue;
    DWORD ValueLength;
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
# 11002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {






    PWSTR Name;





    WORD ValueType;






    WORD Reserved;





    DWORD Flags;





    DWORD ValueCount;





    union {
        PLONG64 pInt64;
        PDWORD64 pUint64;
        PWSTR *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {






    DWORD Name;





    WORD ValueType;






    WORD Reserved;





    DWORD Flags;





    DWORD ValueCount;





    union {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
# 11121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {





    WORD Version;





    WORD Reserved;

    DWORD AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;
# 11148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
# 11204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef BYTE SE_SIGNING_LEVEL, *PSE_SIGNING_LEVEL;
# 11228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _SE_IMAGE_SIGNATURE_TYPE
{
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded,
    SeImageSignatureCache,
    SeImageSignatureCatalogCached,
    SeImageSignatureCatalogNotCached,
    SeImageSignatureCatalogHint,
    SeImageSignaturePackageCatalog,
} SE_IMAGE_SIGNATURE_TYPE, *PSE_IMAGE_SIGNATURE_TYPE;






typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;



typedef struct _SECURITY_CAPABILITIES {




    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;

    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;
# 11318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        DWORD Version;
    };



    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;


    union {
        DWORD FiberData;
        DWORD Version;
    };




    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;


    union {
        DWORD64 FiberData;
        DWORD Version;
    };





    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;
# 11403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
    DWORD UmsVersion;
        PVOID UmsContext;
        PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;

typedef struct _WOW64_ARCHITECTURE_INFORMATION {
    DWORD Machine : 16;
    DWORD KernelMode : 1;
    DWORD UserMode : 1;
    DWORD Native : 1;
    DWORD Process : 1;
    DWORD ReservedZero0 : 12;
} WOW64_ARCHITECTURE_INFORMATION;
# 11431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessControlFlowGuardPolicy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    ProcessImageLoadPolicy,
    ProcessSystemCallFilterPolicy,
    ProcessPayloadRestrictionPolicy,
    ProcessChildProcessPolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        } ;
    } ;
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD AuditDisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        } ;
    } ;
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD ProhibitDynamicCode : 1;
            DWORD AllowThreadOptOut : 1;
            DWORD AllowRemoteDowngrade : 1;
            DWORD AuditProhibitDynamicCode : 1;
            DWORD ReservedFlags : 28;
        } ;
    } ;
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;

typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableControlFlowGuard : 1;
            DWORD EnableExportSuppression : 1;
            DWORD StrictMode : 1;
            DWORD ReservedFlags : 29;
        } ;
    } ;
} PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, *PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;

typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD MicrosoftSignedOnly : 1;
            DWORD StoreSignedOnly : 1;
            DWORD MitigationOptIn : 1;
            DWORD AuditMicrosoftSignedOnly : 1;
            DWORD AuditStoreSignedOnly : 1;
            DWORD ReservedFlags : 27;
        } ;
    } ;
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableNonSystemFonts : 1;
            DWORD AuditNonSystemFontLoading : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, *PPROCESS_MITIGATION_FONT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD NoRemoteImages : 1;
            DWORD NoLowMandatoryLabelImages : 1;
            DWORD PreferSystem32Images : 1;
            DWORD AuditNoRemoteImages : 1;
            DWORD AuditNoLowMandatoryLabelImages : 1;
            DWORD ReservedFlags : 27;
        } ;
    } ;
} PROCESS_MITIGATION_IMAGE_LOAD_POLICY, *PPROCESS_MITIGATION_IMAGE_LOAD_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD FilterId: 4;
            DWORD ReservedFlags : 28;
        } ;
    } ;
} PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;

typedef struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableExportAddressFilter : 1;
            DWORD AuditExportAddressFilter : 1;

            DWORD EnableExportAddressFilterPlus : 1;
            DWORD AuditExportAddressFilterPlus : 1;

            DWORD EnableImportAddressFilter : 1;
            DWORD AuditImportAddressFilter : 1;

            DWORD EnableRopStackPivot : 1;
            DWORD AuditRopStackPivot : 1;

            DWORD EnableRopCallerCheck : 1;
            DWORD AuditRopCallerCheck : 1;

            DWORD EnableRopSimExec : 1;
            DWORD AuditRopSimExec : 1;

            DWORD ReservedFlags : 20;
        } ;
    } ;
} PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY, *PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;

typedef struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD NoChildProcessCreation : 1;
            DWORD AuditNoChildProcessCreation : 1;
            DWORD AllowSecureProcessCreation : 1;
            DWORD ReservedFlags : 29;
        } ;
    } ;
} PROCESS_MITIGATION_CHILD_PROCESS_POLICY, *PPROCESS_MITIGATION_CHILD_PROCESS_POLICY;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;


typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE, *PJOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
  *PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    union {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
            CpuRateControlToleranceInterval;
    } ;

    DWORD LimitFlags;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;


typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    union {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
    } ;

    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;


typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
        struct {
            WORD MinRate;
            WORD MaxRate;
        } ;
    } ;
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;





typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 0x1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 0x2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 0x4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 0x7
} JOB_OBJECT_NET_RATE_CONTROL_FLAGS;



extern "C++" { inline constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator | (JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_NET_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator |= (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator & (JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_NET_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator &= (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator ~ (JOB_OBJECT_NET_RATE_CONTROL_FLAGS a) throw() { return JOB_OBJECT_NET_RATE_CONTROL_FLAGS(~((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)a)); } inline constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator ^ (JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_NET_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator ^= (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } }
typedef char __C_ASSERT__[(JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS == (JOB_OBJECT_NET_RATE_CONTROL_ENABLE + JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH + JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG))?1:-1];
# 11888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
    DWORD64 MaxBandwidth;
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
    BYTE DscpTag;
} JOBOBJECT_NET_RATE_CONTROL_INFORMATION;
# 11901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 0x1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 0x2,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = JOB_OBJECT_IO_RATE_CONTROL_ENABLE |
                                             JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME
} JOB_OBJECT_IO_RATE_CONTROL_FLAGS;



extern "C++" { inline constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator | (JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_IO_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator |= (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator & (JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_IO_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator &= (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator ~ (JOB_OBJECT_IO_RATE_CONTROL_FLAGS a) throw() { return JOB_OBJECT_IO_RATE_CONTROL_FLAGS(~((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)a)); } inline constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator ^ (JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_IO_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator ^= (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } }



typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;

typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
    LONG64 SoftMaxIops;
    LONG64 SoftMaxBandwidth;
    LONG64 SoftMaxTimePercent;
    LONG64 LimitExcessNotifyIops;
    LONG64 LimitExcessNotifyBandwidth;
    LONG64 LimitExcessNotifyTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;



typedef enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 0x1,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 0x2,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 0x3
} JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;

typedef struct _JOBOBJECT_IO_ATTRIBUTION_STATS {

    ULONG_PTR IoCount;
    ULONGLONG TotalNonOverlappedQueueTime;
    ULONGLONG TotalNonOverlappedServiceTime;
    ULONGLONG TotalSize;

} JOBOBJECT_IO_ATTRIBUTION_STATS, *PJOBOBJECT_IO_ATTRIBUTION_STATS;

typedef struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
    DWORD ControlFlags;

    JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
    JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;

} JOBOBJECT_IO_ATTRIBUTION_INFORMATION, *PJOBOBJECT_IO_ATTRIBUTION_INFORMATION;
# 12117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    JobObjectReserved10Information,
    JobObjectReserved11Information,
    JobObjectReserved12Information,
    JobObjectReserved13Information,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation,
    JobObjectNotificationLimitInformation2,
    JobObjectLimitViolationInformation2,
    JobObjectCreateSilo,
    JobObjectSiloBasicInformation,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;



typedef struct _SILOOBJECT_BASIC_INFORMATION {
    DWORD SiloId;
    DWORD SiloParentId;
    DWORD NumberOfProcesses;
    BOOLEAN IsInServerSilo;
    BYTE Reserved[3];
} SILOOBJECT_BASIC_INFORMATION, *PSILOOBJECT_BASIC_INFORMATION;

typedef enum _SERVERSILO_STATE {
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED,
    SERVERSILO_SHUTTING_DOWN,
    SERVERSILO_TERMINATING,
    SERVERSILO_TERMINATED,
} SERVERSILO_STATE, *PSERVERSILO_STATE;

typedef struct _SERVERSILO_BASIC_INFORMATION {
    DWORD ServiceSessionId;
    SERVERSILO_STATE State;
    DWORD ExitStatus;
} SERVERSILO_BASIC_INFORMATION, *PSERVERSILO_BASIC_INFORMATION;


typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;
# 12232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE Flags;
    BYTE EfficiencyClass;
    BYTE Reserved[20];
    WORD GroupCount;
                             GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

                          struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

typedef enum _CPU_SET_INFORMATION_TYPE {
    CpuSetInformation
} CPU_SET_INFORMATION_TYPE, *PCPU_SET_INFORMATION_TYPE;

                          struct _SYSTEM_CPU_SET_INFORMATION {
    DWORD Size;
    CPU_SET_INFORMATION_TYPE Type;
    union {
        struct {
            DWORD Id;
            WORD Group;
            BYTE LogicalProcessorIndex;
            BYTE CoreIndex;
            BYTE LastLevelCacheIndex;
            BYTE NumaNodeIndex;
            BYTE EfficiencyClass;
            union {






                BYTE AllFlags;
                struct {
                    BYTE Parked : 1;
                    BYTE Allocated : 1;
                    BYTE AllocatedToTargetProcess : 1;
                    BYTE RealTime : 1;
                    BYTE ReservedFlags : 4;
                } ;
            } ;
            DWORD Reserved;
            DWORD64 AllocationTag;
        } CpuSet;
    } ;
};

typedef struct _SYSTEM_CPU_SET_INFORMATION SYSTEM_CPU_SET_INFORMATION, *PSYSTEM_CPU_SET_INFORMATION;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
# 12529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {

    DWORD64 EnabledFeatures;


    DWORD64 EnabledVolatileFeatures;


    DWORD Size;


    union {
        DWORD ControlFlags;
        struct
        {
            DWORD OptimizedSave : 1;
            DWORD CompactionEnabled : 1;
        };
    };


    XSTATE_FEATURE Features[(64)];


    DWORD64 EnabledSupervisorFeatures;


    DWORD64 AlignedFeatures;


    DWORD AllFeatureSize;


    DWORD AllFeatures[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;



typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;



typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
# 12635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _CFG_CALL_TARGET_INFO {
    ULONG_PTR Offset;
    ULONG_PTR Flags;
} CFG_CALL_TARGET_INFO, *PCFG_CALL_TARGET_INFO;
# 12714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _ENCLAVE_CREATE_INFO_SGX {
    BYTE Secs[4096];
} ENCLAVE_CREATE_INFO_SGX, *PENCLAVE_CREATE_INFO_SGX;

typedef struct _ENCLAVE_INIT_INFO_SGX {
    BYTE SigStruct[1808];
    BYTE Reserved1[240];
    BYTE EInitToken[304];
    BYTE Reserved2[1744];
} ENCLAVE_INIT_INFO_SGX, *PENCLAVE_INIT_INFO_SGX;



typedef struct _ENCLAVE_CREATE_INFO_VBS {
    DWORD Flags;
    BYTE OwnerID[32];
} ENCLAVE_CREATE_INFO_VBS, *PENCLAVE_CREATE_INFO_VBS;




typedef struct _ENCLAVE_INIT_INFO_VBS {
    DWORD Length;
    DWORD ThreadCount;
} ENCLAVE_INIT_INFO_VBS, *PENCLAVE_INIT_INFO_VBS;



typedef PVOID (ENCLAVE_TARGET_FUNCTION)(PVOID);
typedef ENCLAVE_TARGET_FUNCTION (*PENCLAVE_TARGET_FUNCTION);
typedef PENCLAVE_TARGET_FUNCTION LPENCLAVE_TARGET_FUNCTION;
# 12886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _FILE_ID_128 {
    BYTE Identifier[16];
} FILE_ID_128, *PFILE_ID_128;





typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;


typedef struct _FILE_NOTIFY_EXTENDED_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastModificationTime;
    LARGE_INTEGER LastChangeTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER AllocatedLength;
    LARGE_INTEGER FileSize;
    DWORD FileAttributes;
    DWORD ReparsePointTag;
    LARGE_INTEGER FileId;
    LARGE_INTEGER ParentFileId;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_EXTENDED_INFORMATION, *PFILE_NOTIFY_EXTENDED_INFORMATION;







typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
# 12999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
# 13147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _SCRUB_DATA_INPUT {





    DWORD Size;
# 13162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
    DWORD Flags;







    DWORD MaximumIos;







    DWORD ObjectId[4];





    DWORD Reserved[13];







    BYTE ResumeContext[816];

} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT;



typedef struct _SCRUB_PARITY_EXTENT {

    LONGLONG Offset;

    ULONGLONG Length;

} SCRUB_PARITY_EXTENT, *PSCRUB_PARITY_EXTENT;

typedef struct _SCRUB_PARITY_EXTENT_DATA {





    WORD Size;





    WORD Flags;





    WORD NumberOfParityExtents;





    WORD MaximumNumberOfParityExtents;





    SCRUB_PARITY_EXTENT ParityExtents[1];

} SCRUB_PARITY_EXTENT_DATA, *PSCRUB_PARITY_EXTENT_DATA;



typedef struct _SCRUB_DATA_OUTPUT {





    DWORD Size;
# 13258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
    DWORD Flags;





    DWORD Status;






    ULONGLONG ErrorFileOffset;






    ULONGLONG ErrorLength;





    ULONGLONG NumberOfBytesRepaired;





    ULONGLONG NumberOfBytesFailed;





    ULONGLONG InternalFileReference;
# 13307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
    WORD ResumeContextLength;







    WORD ParityExtentDataOffset;





    DWORD Reserved[5];
# 13346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
    BYTE ResumeContext[816];

} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT;
# 13360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _SharedVirtualDiskSupportType
{



    SharedVirtualDisksUnsupported = 0,




    SharedVirtualDisksSupported = 1,





    SharedVirtualDiskSnapshotsSupported = 3,





    SharedVirtualDiskCDPSnapshotsSupported = 7
} SharedVirtualDiskSupportType;

typedef enum _SharedVirtualDiskHandleState
{



    SharedVirtualDiskHandleStateNone = 0,





    SharedVirtualDiskHandleStateFileShared = 1,





    SharedVirtualDiskHandleStateHandleShared = 3
} SharedVirtualDiskHandleState;





typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {




    SharedVirtualDiskSupportType SharedVirtualDiskSupport;





    SharedVirtualDiskHandleState HandleState;
} SHARED_VIRTUAL_DISK_SUPPORT, *PSHARED_VIRTUAL_DISK_SUPPORT;
# 13473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _NETWORK_APP_INSTANCE_EA {






    GUID AppInstanceID;





    DWORD CsvFlags;

} NETWORK_APP_INSTANCE_EA, *PNETWORK_APP_INSTANCE_EA;
# 13515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_MAX_POWER_SAVINGS;






extern "C" const GUID GUID_MIN_POWER_SAVINGS;






extern "C" const GUID GUID_TYPICAL_POWER_SAVINGS;







extern "C" const GUID NO_SUBGROUP_GUID;







extern "C" const GUID ALL_POWERSCHEMES_GUID;
# 13582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_POWERSCHEME_PERSONALITY;
# 13591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_ACTIVE_POWERSCHEME;
# 13606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_IDLE_RESILIENCY_SUBGROUP;







extern "C" const GUID GUID_IDLE_RESILIENCY_PERIOD;





extern "C" const GUID GUID_DEEP_SLEEP_ENABLED;
# 13629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_DEEP_SLEEP_PLATFORM_STATE;






extern "C" const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
# 13649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
# 13660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_VIDEO_SUBGROUP;







extern "C" const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;
# 13677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;
# 13686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;







extern "C" const GUID GUID_VIDEO_DIM_TIMEOUT;







extern "C" const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;






extern "C" const GUID GUID_MONITOR_POWER_ON;






extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;






extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;






extern "C" const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;







extern "C" const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;






extern "C" const GUID GUID_CONSOLE_DISPLAY_STATE;







extern "C" const GUID GUID_ALLOW_DISPLAY_REQUIRED;
# 13762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern "C" const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern "C" const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT;






extern "C" const GUID GUID_ADAPTIVE_INPUT_CONTROLLER_STATE;







extern "C" const GUID GUID_DISK_SUBGROUP;




extern "C" const GUID GUID_DISK_MAX_POWER;





extern "C" const GUID GUID_DISK_POWERDOWN_TIMEOUT;






extern "C" const GUID GUID_DISK_IDLE_TIMEOUT;
# 13818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;





extern "C" const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
# 13833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_SLEEP_SUBGROUP;







extern "C" const GUID GUID_SLEEP_IDLE_THRESHOLD;





extern "C" const GUID GUID_STANDBY_TIMEOUT;
# 13856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_UNATTEND_SLEEP_TIMEOUT;





extern "C" const GUID GUID_HIBERNATE_TIMEOUT;





extern "C" const GUID GUID_HIBERNATE_FASTS4_POLICY;
# 13877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_CRITICAL_POWER_TRANSITION;





extern "C" const GUID GUID_SYSTEM_AWAYMODE;






extern "C" const GUID GUID_ALLOW_AWAYMODE;






extern "C" const GUID GUID_USER_PRESENCE_PREDICTION;






extern "C" const GUID GUID_STANDBY_BUDGET_GRACE_PERIOD;






extern "C" const GUID GUID_STANDBY_BUDGET_PERCENT;






extern "C" const GUID GUID_STANDBY_RESERVE_GRACE_PERIOD;






extern "C" const GUID GUID_STANDBY_RESERVE_TIME;






extern "C" const GUID GUID_STANDBY_RESET_PERCENT;







extern "C" const GUID GUID_ALLOW_STANDBY_STATES;






extern "C" const GUID GUID_ALLOW_RTC_WAKE;






extern "C" const GUID GUID_LEGACY_RTC_MITIGATION;







extern "C" const GUID GUID_ALLOW_SYSTEM_REQUIRED;
# 13971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_POWER_SAVING_STATUS;







extern "C" const GUID GUID_ENERGY_SAVER_SUBGROUP;






extern "C" const GUID GUID_ENERGY_SAVER_BATTERY_THRESHOLD;






extern "C" const GUID GUID_ENERGY_SAVER_BRIGHTNESS;






extern "C" const GUID GUID_ENERGY_SAVER_POLICY;
# 14009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
# 14030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_POWERBUTTON_ACTION;





extern "C" const GUID GUID_SLEEPBUTTON_ACTION;






extern "C" const GUID GUID_USERINTERFACEBUTTON_ACTION;





extern "C" const GUID GUID_LIDCLOSE_ACTION;
extern "C" const GUID GUID_LIDOPEN_POWERSTATE;
# 14059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_BATTERY_SUBGROUP;
# 14071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
# 14096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern "C" const GUID GUID_PROCESSOR_THROTTLE_POLICY;
# 14120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;
# 14130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM_1;
# 14140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;
# 14150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MINIMUM_1;






extern "C" const GUID GUID_PROCESSOR_FREQUENCY_LIMIT;



extern "C" const GUID GUID_PROCESSOR_FREQUENCY_LIMIT_1;
# 14170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
# 14180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_IDLESTATE_POLICY;





extern "C" const GUID GUID_PROCESSOR_PERFSTATE_POLICY;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
# 14203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
# 14220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;
# 14237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY_1;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
# 14254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY_1;
# 14263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
# 14272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_TIME_1;
# 14281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;
# 14290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_TIME_1;







extern "C" const GUID GUID_PROCESSOR_PERF_TIME_CHECK;







extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
# 14318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_MODE;
# 14336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_MODE;
# 14347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE;
# 14358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW;
# 14368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_DUTY_CYCLING;
# 14380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern "C" const GUID GUID_PROCESSOR_IDLE_DISABLE;
# 14396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
# 14405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
# 14414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
# 14431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
# 14440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
# 14460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;







extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;







extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern "C" const GUID GUID_PROCESSOR_PARKING_PERF_STATE;







extern "C" const GUID GUID_PROCESSOR_PARKING_PERF_STATE_1;







extern "C" const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_PERF_HISTORY;







extern "C" const GUID GUID_PROCESSOR_PERF_HISTORY_1;
# 14626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_HISTORY;
# 14636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_HISTORY;
# 14646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
# 14656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_PERF_LATENCY_HINT;






extern "C" const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;







extern "C" const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1;







extern "C" const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK;







extern "C" const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1;







extern "C" const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY;
# 14706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_HETEROGENEOUS_POLICY;







extern "C" const GUID GUID_PROCESSOR_HETERO_DECREASE_TIME;







extern "C" const GUID GUID_PROCESSOR_HETERO_INCREASE_TIME;
# 14731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD;
# 14740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD;
# 14749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_CLASS0_FLOOR_PERF;
# 14758 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_CLASS1_INITIAL_PERF;






extern "C" const GUID GUID_PROCESSOR_THREAD_SCHEDULING_POLICY;
# 14774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY;
# 14783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_SYSTEM_COOLING_POLICY;
# 14793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_LOCK_CONSOLE_ON_WAKE;
# 14803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_DEVICE_IDLE_POLICY;
# 14812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_CONNECTIVITY_IN_STANDBY;
# 14822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_DISCONNECTED_STANDBY_MODE;
# 14843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_ACDC_POWER_SOURCE;
# 14859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_LIDSWITCH_STATE_CHANGE;
# 14876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
# 14889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_BATTERY_COUNT;






extern "C" const GUID GUID_GLOBAL_USER_PRESENCE;
# 14907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_SESSION_DISPLAY_STATUS;
# 14917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_SESSION_USER_PRESENCE;






extern "C" const GUID GUID_IDLE_BACKGROUND_TASK;






extern "C" const GUID GUID_BACKGROUND_TASK_NOTIFICATION;







extern "C" const GUID GUID_APPLAUNCH_BUTTON;
# 14950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern "C" const GUID GUID_PCIEXPRESS_ASPM_POLICY;
# 14968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;






extern "C" const GUID GUID_INTSTEER_SUBGROUP;



extern "C" const GUID GUID_INTSTEER_MODE;



extern "C" const GUID GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;



extern "C" const GUID GUID_INTSTEER_TIME_UNPARK_TRIGGER;
# 14999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID GUID_MIXED_REALITY_MODE;



typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject,
    PowerActionDisplayOff
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;
# 15059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;
# 15083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;
# 15109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct CM_Power_Data_s {
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;





typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,
    LastSleepTime,
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerRequestActionInternal,
    BatteryDeviceState,
    PowerInformationInternal,
    ThermalStandby,
    SystemHiberFileType,
    PhysicalPowerButtonPress,
    QueryPotentialDripsConstraint,
    EnergyTrackerCreate,
    EnergyTrackerQuery,
    UpdateBlackBoxRecorder,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
    POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;
    BOOLEAN Console;
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;
    DWORD LastInputTime;
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId;
    BOOLEAN Console;
    BOOLEAN Locked;
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;




typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonBatteryCountChange,
    MonitorRequestReasonGracePeriod,
    MonitorRequestReasonPnP,
    MonitorRequestReasonDP,
    MonitorRequestReasonSxTransition,
    MonitorRequestReasonSystemIdle,
    MonitorRequestReasonNearProximity,
    MonitorRequestReasonThermalStandby,
    MonitorRequestReasonResumePdc,
    MonitorRequestReasonResumeS4,
    MonitorRequestReasonTerminal,
    MonitorRequestReasonPdcSignal,
    MonitorRequestReasonAcDcDisplayBurstSuppressed,
    MonitorRequestReasonSystemStateEntered,


    MonitorRequestReasonWinrt,
    MonitorRequestReasonUserInputKeyboard,
    MonitorRequestReasonUserInputMouse,
    MonitorRequestReasonUserInputTouch,
    MonitorRequestReasonUserInputPen,
    MonitorRequestReasonUserInputAccelerometer,
    MonitorRequestReasonUserInputHid,
    MonitorRequestReasonUserInputPoUserPresent,
    MonitorRequestReasonUserInputSessionSwitch,
    MonitorRequestReasonUserInputInitialization,
    MonitorRequestReasonPdcSignalWindowsMobilePwrNotif,
    MonitorRequestReasonPdcSignalWindowsMobileShell,
    MonitorRequestReasonPdcSignalHeyCortana,
    MonitorRequestReasonPdcSignalHolographicShell,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;

typedef enum _POWER_MONITOR_REQUEST_TYPE {
    MonitorRequestTypeOff,
    MonitorRequestTypeOnAndPresent,
    MonitorRequestTypeToggleOn
} POWER_MONITOR_REQUEST_TYPE;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {





    DWORD Version;





    GUID Guid;






    SYSTEM_POWER_CONDITION PowerCondition;




    DWORD DataLength;




    BYTE Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {





    LARGE_INTEGER ActivationTime;




    DWORD Flags;




    DWORD ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleSlate,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;
# 15462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    DWORD Granularity;
    DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;




typedef struct {
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
                             PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;
# 15698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
extern "C" const GUID PPM_PERFSTATE_CHANGE_GUID;



extern "C" const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;



extern "C" const GUID PPM_IDLESTATE_CHANGE_GUID;



extern "C" const GUID PPM_PERFSTATES_DATA_GUID;



extern "C" const GUID PPM_IDLESTATES_DATA_GUID;



extern "C" const GUID PPM_IDLE_ACCOUNTING_GUID;



extern "C" const GUID PPM_IDLE_ACCOUNTING_EX_GUID;



extern "C" const GUID PPM_THERMALCONSTRAINT_GUID;



extern "C" const GUID PPM_PERFMON_PERFSTATE_GUID;



extern "C" const GUID PPM_THERMAL_POLICY_CHANGE_GUID;



typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

#pragma warning(push)
#pragma warning(disable: 4121)

typedef struct {
    BYTE Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

#pragma warning(pop)




typedef struct {
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
# 15816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct {
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
# 15831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _SYSTEM_POWER_POLICY {
    DWORD Revision;


    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;


    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;

    BYTE DynamicThrottle;
    BYTE Spare2[2];


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;

    DWORD Spare3;



    DWORD DozeS4Timeout;


    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[4];


    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];


    DWORD SpindownTimeout;


    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;
# 15891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct {
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD Revision;
    union {
        WORD AsWORD ;
        struct {
            WORD AllowScaling : 1;
            WORD Disabled : 1;
            WORD Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;
# 15926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _PROCESSOR_POWER_POLICY_INFO {


    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;


    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];


    DWORD AllowDemotion:1;
    DWORD AllowPromotion:1;
    DWORD Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD Revision;


    BYTE DynamicThrottle;
    BYTE Spare[3];


    DWORD DisableCStates:1;
    DWORD Reserved:31;




    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union {
        BYTE Spare;
        union {
            BYTE AsBYTE ;
            struct {
                BYTE NoDomainAccounting : 1;
                BYTE IncreasePolicy: 2;
                BYTE DecreasePolicy: 2;
                BYTE Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;


    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;


    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef enum _HIBERFILE_BUCKET_SIZE {
    HiberFileBucket1GB = 0,
    HiberFileBucket2GB,
    HiberFileBucket4GB,
    HiberFileBucket8GB,
    HiberFileBucket16GB,
    HiberFileBucket32GB,
    HiberFileBucketUnlimited,
    HiberFileBucketMax
} HIBERFILE_BUCKET_SIZE, *PHIBERFILE_BUCKET_SIZE;






typedef struct _HIBERFILE_BUCKET {
    DWORD64 MaxPhysicalMemory;
    DWORD PhysicalMemoryPercent[0x03];
} HIBERFILE_BUCKET, *PHIBERFILE_BUCKET;

typedef struct {

    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;


    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;





    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BOOLEAN Hiberboot;
    BOOLEAN WakeAlarmPresent;
    BOOLEAN AoAc;



    BOOLEAN DiskSpinDown;





    BYTE HiberFileType;
    BOOLEAN AoAcConnectivitySupported;
    BYTE spare3[6];



    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];


    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[3];

    BYTE Tag;

    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;

    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;
# 16116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 16116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3








# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack2.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack2.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 16124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 16136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 16246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3







typedef struct _IMAGE_FILE_HEADER {
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
# 16319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {




    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;





    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
# 16431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;



typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;





typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
# 16528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct ANON_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {

    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;


    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union {
            DWORD PhysicalAddress;
            DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
# 16656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack2.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack2.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 16656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3







typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;
# 16819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack2.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack2.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 16819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3


typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12];
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 16830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3






typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD TagIndex;
        union {
            struct {
                WORD Linenumber;
                WORD Size;
            } LnSz;
           DWORD TotalSize;
        } Misc;
        union {
            struct {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct {
        BYTE Name[18];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
 BYTE bReserved;
 SHORT HighNumber;
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct {
        BYTE Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE rgbReserved[2];
    } ;
    struct {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;
# 16935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_RELOCATION {
    union {
        DWORD VirtualAddress;
        DWORD RelocCount;
    } ;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
# 17337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 17347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3







typedef struct _IMAGE_BASE_RELOCATION {
    DWORD VirtualAddress;
    DWORD SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION * PIMAGE_BASE_RELOCATION;
# 17403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
# 17423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD Hint;
    CHAR Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack8.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack8.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 17446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3


typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 17458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3


typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
# 17481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
# 17536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;


typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    } ;
    DWORD TimeDateStamp;




    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
            DWORD RvaBased : 1;
            DWORD ReservedAttributes : 31;
        } ;
    } Attributes;

    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;


} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;
# 17616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
# 17643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD Name;
        WORD Id;
    } ;
    union {
        DWORD OffsetToData;
        struct {
            DWORD OffsetToDirectory:31;
            DWORD DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
# 17670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD Length;
    CHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD Length;
    WCHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
# 17691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;







typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    WORD Flags;
    WORD Catalog;
    DWORD CatalogOffset;
    DWORD Reserved;
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;





typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
    DWORD Version;
    DWORD Size;

} IMAGE_DYNAMIC_RELOCATION_TABLE, *PIMAGE_DYNAMIC_RELOCATION_TABLE;






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 17725 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3


typedef struct _IMAGE_DYNAMIC_RELOCATION32 {
    DWORD Symbol;
    DWORD BaseRelocSize;

} IMAGE_DYNAMIC_RELOCATION32, *PIMAGE_DYNAMIC_RELOCATION32;

typedef struct _IMAGE_DYNAMIC_RELOCATION64 {
    ULONGLONG Symbol;
    DWORD BaseRelocSize;

} IMAGE_DYNAMIC_RELOCATION64, *PIMAGE_DYNAMIC_RELOCATION64;

typedef struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
    DWORD HeaderSize;
    DWORD FixupInfoSize;
    DWORD Symbol;
    DWORD SymbolGroup;
    DWORD Flags;


} IMAGE_DYNAMIC_RELOCATION32_V2, *PIMAGE_DYNAMIC_RELOCATION32_V2;

typedef struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
    DWORD HeaderSize;
    DWORD FixupInfoSize;
    ULONGLONG Symbol;
    DWORD SymbolGroup;
    DWORD Flags;


} IMAGE_DYNAMIC_RELOCATION64_V2, *PIMAGE_DYNAMIC_RELOCATION64_V2;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 17759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3








typedef IMAGE_DYNAMIC_RELOCATION32 IMAGE_DYNAMIC_RELOCATION;
typedef PIMAGE_DYNAMIC_RELOCATION32 PIMAGE_DYNAMIC_RELOCATION;
typedef IMAGE_DYNAMIC_RELOCATION32_V2 IMAGE_DYNAMIC_RELOCATION_V2;
typedef PIMAGE_DYNAMIC_RELOCATION32_V2 PIMAGE_DYNAMIC_RELOCATION_V2;
# 17780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 17780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3


typedef struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
    BYTE PrologueByteCount;

} IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER * PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;

typedef struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
    DWORD EpilogueCount;
    BYTE EpilogueByteCount;
    BYTE BranchDescriptorElementSize;
    WORD BranchDescriptorCount;


} IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER * PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 17798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3






typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD DependentLoadFlags;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
    DWORD GuardCFCheckFunctionPointer;
    DWORD GuardCFDispatchFunctionPointer;
    DWORD GuardCFFunctionTable;
    DWORD GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    DWORD GuardAddressTakenIatEntryTable;
    DWORD GuardAddressTakenIatEntryCount;
    DWORD GuardLongJumpTargetTable;
    DWORD GuardLongJumpTargetCount;
    DWORD DynamicValueRelocTable;
    DWORD CHPEMetadataPointer;
    DWORD GuardRFFailureRoutine;
    DWORD GuardRFFailureRoutineFunctionPointer;
    DWORD DynamicValueRelocTableOffset;
    WORD DynamicValueRelocTableSection;
    WORD Reserved2;
    DWORD GuardRFVerifyStackPointerFunctionPointer;
    DWORD HotPatchTableOffset;
    DWORD Reserved3;
    DWORD EnclaveConfigurationPointer;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD DependentLoadFlags;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
    ULONGLONG GuardCFCheckFunctionPointer;
    ULONGLONG GuardCFDispatchFunctionPointer;
    ULONGLONG GuardCFFunctionTable;
    ULONGLONG GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONGLONG GuardAddressTakenIatEntryTable;
    ULONGLONG GuardAddressTakenIatEntryCount;
    ULONGLONG GuardLongJumpTargetTable;
    ULONGLONG GuardLongJumpTargetCount;
    ULONGLONG DynamicValueRelocTable;
    ULONGLONG CHPEMetadataPointer;
    ULONGLONG GuardRFFailureRoutine;
    ULONGLONG GuardRFFailureRoutineFunctionPointer;
    DWORD DynamicValueRelocTableOffset;
    WORD DynamicValueRelocTableSection;
    WORD Reserved2;
    ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
    DWORD HotPatchTableOffset;
    DWORD Reserved3;
    ULONGLONG EnclaveConfigurationPointer;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;
# 17899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;




typedef struct _IMAGE_HOT_PATCH_INFO {
    DWORD Version;
    DWORD Size;
    DWORD SequenceNumber;
    DWORD BaseImageList;
    DWORD BaseImageCount;
    DWORD BufferOffset;
} IMAGE_HOT_PATCH_INFO, *PIMAGE_HOT_PATCH_INFO;

typedef struct _IMAGE_HOT_PATCH_BASE {
    DWORD SequenceNumber;
    DWORD Flags;
    DWORD OriginalTimeDateStamp;
    DWORD OriginalCheckSum;
    DWORD CodeIntegrityInfo;
    DWORD CodeIntegritySize;
    DWORD PatchTable;
    DWORD BufferOffset;
} IMAGE_HOT_PATCH_BASE, *PIMAGE_HOT_PATCH_BASE;

typedef struct _IMAGE_HOT_PATCH_HASHES {
    BYTE SHA256[32];
    BYTE SHA1[20];
} IMAGE_HOT_PATCH_HASHES, *PIMAGE_HOT_PATCH_HASHES;
# 17981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD RegF : 3;
            DWORD RegI : 4;
            DWORD H : 1;
            DWORD CR : 2;
            DWORD FrameSize : 9;
        } ;
    } ;
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
# 18075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
# 18087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_ENCLAVE_CONFIG32 {
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    DWORD EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG32, *PIMAGE_ENCLAVE_CONFIG32;

typedef struct _IMAGE_ENCLAVE_CONFIG64 {
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    ULONGLONG EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG64, *PIMAGE_ENCLAVE_CONFIG64;





typedef IMAGE_ENCLAVE_CONFIG32 IMAGE_ENCLAVE_CONFIG;
typedef PIMAGE_ENCLAVE_CONFIG32 PIMAGE_ENCLAVE_CONFIG;
# 18133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_ENCLAVE_IMPORT {
    DWORD MatchType;
    DWORD MinimumSecurityVersion;
    BYTE UniqueOrAuthorID[32];
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImportName;
    DWORD Reserved;
} IMAGE_ENCLAVE_IMPORT, *PIMAGE_ENCLAVE_IMPORT;
# 18153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
# 18183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog : 8;
    WORD cbRegs : 3;
    WORD fHasSEH : 1;
    WORD fUseBP : 1;
    WORD reserved : 1;
    WORD cbFrame : 2;
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType;
    DWORD Length;

    BOOLEAN Unicode;
    BYTE Reserved[ 3 ];
    BYTE Data[ 1 ];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
# 18232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
# 18267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;



typedef struct _NON_PAGED_DEBUG_INFO {
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;


} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;
# 18321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;

    int :7;
    unsigned int AmaskShift: 8;
    int :16;
    DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;
    DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 18335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 18344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct IMPORT_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;

    union {
        WORD Ordinal;
        WORD Hint;
    } ;

    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,

    IMPORT_OBJECT_NAME_EXPORTAS = 4,
} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA =0x00010000,
    COMIMAGE_FLAGS_32BITPREFERRED =0x00020000,


    COR_VERSION_MAJOR_V2 =2,
    COR_VERSION_MAJOR =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR =5,
    COR_DELETED_NAME_LENGTH =8,
    COR_VTABLEGAP_NAME_LENGTH =8,


    NATIVE_TYPE_MAX_CB =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA =0x01,
    IMAGE_COR_MIH_EHRVA =0x02,
    IMAGE_COR_MIH_BASICBLOCK =0x08,


    COR_VTABLE_32BIT =0x01,
    COR_VTABLE_64BIT =0x02,
    COR_VTABLE_FROM_UNMANAGED =0x04,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN =0x08,
    COR_VTABLE_CALL_MOST_DERIVED =0x10,


    IMAGE_COR_EATJ_THUNK_SIZE =32,



    MAX_CLASS_NAME =1024,
    MAX_PACKAGE_NAME =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{

    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;


    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;



    union {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } ;


    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;


    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;


    IMAGE_DATA_DIRECTORY ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;








# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\apiset.h" 1 3
# 18465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3
# 18480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)

WORD
__stdcall
RtlCaptureStackBackTrace(
         DWORD FramesToSkip,
         DWORD FramesToCapture,
                                             PVOID * BackTrace,
              PDWORD BackTraceHash
    );
# 18504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)
void
__stdcall
RtlCaptureContext(
          PCONTEXT ContextRecord
    );
# 18523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)
void
__stdcall
RtlUnwind(
             PVOID TargetFrame,
             PVOID TargetIp,
             PEXCEPTION_RECORD ExceptionRecord,
         PVOID ReturnValue
    );
# 19060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
         PVOID PcValue,
          PVOID * BaseOfImage
    );
# 19086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory(
         const void * Source1,
         const void * Source2,
         SIZE_T Length
    );
# 19140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY, *PSLIST_ENTRY;
# 19177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SLIST_ENTRY Next;
        WORD Depth;
        WORD CpuId;
    } ;
} SLIST_HEADER, *PSLIST_HEADER;
# 19205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
          PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlFirstEntrySList (
         const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx (
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY List,
            PSLIST_ENTRY ListEnd,
         DWORD Count
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD
__stdcall
RtlQueryDepthSList (
         PSLIST_HEADER ListHead
    );
# 19287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;



typedef struct _RTL_BARRIER {
            DWORD Reserved1;
            DWORD Reserved2;
            ULONG_PTR Reserved3[2];
            DWORD Reserved4;
            DWORD Reserved5;
} RTL_BARRIER, *PRTL_BARRIER;
# 19368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(noreturn)
void
__fastfail(
         unsigned int Code
    );

#pragma intrinsic(__fastfail)
# 19397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__forceinline
DWORD
HEAP_MAKE_TAG_FLAGS (
         DWORD TagBase,
         DWORD Tag
    )

{
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}
# 19476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__forceinline
PVOID
RtlSecureZeroMemory(
                                PVOID ptr,
         SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;







    while (cnt) {







        *vptr = 0;



        vptr++;
        cnt--;
    }



    return ptr;
}
# 19535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD Length;
    WORD Flags;
    BYTE Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;

typedef OSVERSIONINFOW OSVERSIONINFO;
typedef POSVERSIONINFOW POSVERSIONINFO;
typedef LPOSVERSIONINFOW LPOSVERSIONINFO;






typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;

typedef OSVERSIONINFOEXW OSVERSIONINFOEX;
typedef POSVERSIONINFOEXW POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXW LPOSVERSIONINFOEX;
# 19682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         DWORD TypeMask,
         BYTE Condition
    );
# 19707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
          DWORD OSMajorVersion,
          DWORD OSMinorVersion,
          DWORD SpMajorVersion,
          DWORD SpMinorVersion,
          PDWORD ReturnedProductType
    );
# 19727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef

void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
         RTL_UMS_SCHEDULER_REASON Reason,
         ULONG_PTR ActivationPayload,
         PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
# 19817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__declspec(dllimport)
DWORD
__stdcall
RtlCrc32(
                           const void *Buffer,
         size_t Size,
         DWORD InitialCrc
    );

__declspec(dllimport)
ULONGLONG
__stdcall
RtlCrc64(
                           const void *Buffer,
         size_t Size,
         ULONGLONG InitialCrc
    );
# 19855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _OS_DEPLOYEMENT_STATE_VALUES {
    OS_DEPLOYMENT_STANDARD = 1,
    OS_DEPLOYMENT_COMPACT
} OS_DEPLOYEMENT_STATE_VALUES;

__declspec(dllimport)
OS_DEPLOYEMENT_STATE_VALUES
__stdcall
RtlOsDeploymentState(
         DWORD Flags
    );
# 19975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct CORRELATION_VECTOR {
    CHAR Version;
    CHAR Vector[129];
} CORRELATION_VECTOR;

typedef CORRELATION_VECTOR *PCORRELATION_VECTOR;



__declspec(dllimport)
DWORD
__stdcall
RtlInitializeCorrelationVector(
          PCORRELATION_VECTOR CorrelationVector,
          int Version,
              const GUID * Guid
    );


__declspec(dllimport)
DWORD
__stdcall
RtlIncrementCorrelationVector(
            PCORRELATION_VECTOR CorrelationVector
    );

__declspec(dllimport)
DWORD
__stdcall
RtlExtendCorrelationVector(
            PCORRELATION_VECTOR CorrelationVector
    );

__declspec(dllimport)
DWORD
__stdcall
RtlValidateCorrelationVector(
         PCORRELATION_VECTOR Vector
    );
# 20026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _IMAGE_POLICY_ENTRY_TYPE {
    ImagePolicyEntryTypeNone = 0,
    ImagePolicyEntryTypeBool,
    ImagePolicyEntryTypeInt8,
    ImagePolicyEntryTypeUInt8,
    ImagePolicyEntryTypeInt16,
    ImagePolicyEntryTypeUInt16,
    ImagePolicyEntryTypeInt32,
    ImagePolicyEntryTypeUInt32,
    ImagePolicyEntryTypeInt64,
    ImagePolicyEntryTypeUInt64,
    ImagePolicyEntryTypeAnsiString,
    ImagePolicyEntryTypeUnicodeString,
    ImagePolicyEntryTypeMaximum
} IMAGE_POLICY_ENTRY_TYPE;

typedef enum _IMAGE_POLICY_ID {
    ImagePolicyIdNone = 0,
    ImagePolicyIdEtw,
    ImagePolicyIdDebug,
    ImagePolicyIdCrashDump,
    ImagePolicyIdCrashDumpKey,
    ImagePolicyIdCrashDumpKeyGuid,
    ImagePolicyIdParentSd,
    ImagePolicyIdParentSdRev,
    ImagePolicyIdSvn,
    ImagePolicyIdDeviceId,
    ImagePolicyIdCapability,
    ImagePolicyIdScenarioId,
    ImagePolicyIdMaximum
} IMAGE_POLICY_ID;

typedef struct _IMAGE_POLICY_ENTRY {
    IMAGE_POLICY_ENTRY_TYPE Type;
    IMAGE_POLICY_ID PolicyId;
    union {
        const void* None;
        BOOLEAN BoolValue;
        INT8 Int8Value;
        UINT8 UInt8Value;
        INT16 Int16Value;
        UINT16 UInt16Value;
        INT32 Int32Value;
        UINT32 UInt32Value;
        INT64 Int64Value;
        UINT64 UInt64Value;
        PCSTR AnsiStringValue;
        PCWSTR UnicodeStringValue;
    } u;
} IMAGE_POLICY_ENTRY;
typedef const IMAGE_POLICY_ENTRY* PCIMAGE_POLICY_ENTRY;

#pragma warning(push)
#pragma warning(disable: 4200)
typedef struct _IMAGE_POLICY_METADATA {
    BYTE Version;
    BYTE Reserved0[7];
    ULONGLONG ApplicationId;
    IMAGE_POLICY_ENTRY Policies[];
} IMAGE_POLICY_METADATA;
typedef const IMAGE_POLICY_METADATA* PCIMAGE_POLICY_METADATA;
#pragma warning(pop)
# 20138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;
# 20166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;






    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {
        PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;

typedef struct _RTL_CONDITION_VARIABLE {
        PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;


typedef
void
(__stdcall *PAPCFUNC)(
         ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1




    ,

    HeapOptimizeResources = 3




} HEAP_INFORMATION_CLASS;






typedef struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
    DWORD Version;
    DWORD Flags;
} HEAP_OPTIMIZE_RESOURCES_INFORMATION, *PHEAP_OPTIMIZE_RESOURCES_INFORMATION;
# 20244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD , PVOID, PVOID);
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
       PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
                            PVOID Addr,
         SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass,




    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
# 20316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;




#pragma warning(push)
#pragma warning(disable: 4200)


typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;


#pragma warning(pop)


typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;



typedef struct _SUPPORTED_OS_INFO {
    WORD MajorVersion;
    WORD MinorVersion;
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;




typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;
# 20509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
void
__stdcall
RtlGetDeviceFamilyInfoEnum(
              ULONGLONG *pullUAPInfo,
              DWORD *pulDeviceFamily,
              DWORD *pulDeviceForm
);

DWORD
__stdcall
RtlConvertDeviceFamilyInfoToString(
            PDWORD pulDeviceFamilyBufferSize,
            PDWORD pulDeviceFormBufferSize,
                                                   PWSTR DeviceFamily,
                                                 PWSTR DeviceForm

);

DWORD
__stdcall
RtlSwitchedVVI(
         PRTL_OSVERSIONINFOEXW VersionInfo,
         DWORD TypeMask,
         ULONGLONG ConditionMask
    );
# 20584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _EVENTLOGRECORD {
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
# 20612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)

#pragma warning(disable: 4200)

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;



struct _EVENTSFORLOGFILE
{
    DWORD ulSize;
    WCHAR szLogicalLogFile[256];
    DWORD ulNumRecords;
    EVENTLOGRECORD pEventLogRecords[];
};

struct _PACKEDEVENTINFO
{
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD ulOffsets[];
};




#pragma warning(pop)
# 20888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
# 20976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
# 20992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;
# 21006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
# 21020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
# 21041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
# 21134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
# 21188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
# 21204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;







extern "C" {




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\ktmtypes.h" 1 3
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\ktmtypes.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)


typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;
# 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\ktmtypes.h" 3
typedef ULONG NOTIFICATION_MASK;
# 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\ktmtypes.h" 3
typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    UOW UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;

} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
                                  ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


#pragma warning(pop)



}
# 21233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 2 3



#pragma warning(push)
#pragma warning(disable: 4820)
# 21410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
                                WCHAR LogPath[1];

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1];

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID EnlistmentId;
    GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation,
    TransactionDTCPrivateInformation
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
# 21595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _KTMOBJECT_CURSOR {





    GUID LastQuery;





    DWORD ObjectIdCount;





    GUID ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;




#pragma warning(pop)



}



typedef DWORD TP_VERSION, *PTP_VERSION;

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL;

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
                PVOID ObjectContext,
                PVOID CleanupContext
    );
# 21666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
        DWORD Flags;
        struct {
            DWORD LongFunction : 1;
            DWORD Persistent : 1;
            DWORD Private : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY CallbackPriority;
    DWORD Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;
# 21714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__forceinline
void
TpInitializeCallbackEnviron(
          PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{



    CallbackEnviron->Version = 3;







    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;



    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);



}

__forceinline
void
TpSetCallbackThreadpool(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_POOL Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__forceinline
void
TpSetCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             PTP_CLEANUP_GROUP CleanupGroup,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__forceinline
void
TpSetCallbackActivationContext(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__forceinline
void
TpSetCallbackNoActivationContext(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1;
}

__forceinline
void
TpSetCallbackLongFunction(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__forceinline
void
TpSetCallbackRaceWithDll(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PVOID DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__forceinline
void
TpSetCallbackFinalizationCallback(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_SIMPLE_CALLBACK FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}



__forceinline
void
TpSetCallbackPriority(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}



__forceinline
void
TpSetCallbackPersistent(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__forceinline
void
TpDestroyCallbackEnviron(
         PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{






    (CallbackEnviron);
}




typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WORK Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_TIMER Timer
    );

typedef DWORD TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WAIT Wait,
                TP_WAIT_RESULT WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;
# 21998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
__inline struct _TEB * NtCurrentTeb( void ) { return (struct _TEB *) (ULONG_PTR) __readfsdword (0x18); }
# 22019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnt.h" 3
}



#pragma warning(pop)
# 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 2 3




typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
# 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 3
typedef HANDLE *SPHANDLE;
typedef HANDLE *LPHANDLE;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;



#pragma warning(push)
#pragma warning(disable: 4255)







typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();







#pragma warning(pop)







typedef WORD ATOM;

struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


typedef int HFILE;
# 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\minwindef.h" 3
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;



}
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 2 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;
# 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
typedef void * HGDIOBJ;






struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;


struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;


struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;


struct HDC__{int unused;}; typedef struct HDC__ *HDC;

struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;

struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;


struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;



struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
# 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;
# 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;
# 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
typedef HICON HCURSOR;




typedef DWORD COLORREF;







typedef DWORD *LPCOLORREF;
# 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT x;
    SHORT y;




} POINTS, *PPOINTS, *LPPOINTS;
# 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
}
# 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\windef.h" 3
struct DPI_AWARENESS_CONTEXT__{int unused;}; typedef struct DPI_AWARENESS_CONTEXT__ *DPI_AWARENESS_CONTEXT;

typedef enum DPI_AWARENESS {
    DPI_AWARENESS_INVALID = -1,
    DPI_AWARENESS_UNAWARE = 0,
    DPI_AWARENESS_SYSTEM_AWARE = 1,
    DPI_AWARENESS_PER_MONITOR_AWARE = 2
} DPI_AWARENESS;
# 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 1 3
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)
#pragma warning(disable: 4668)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)







# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\apisetcconv.h" 1 3
# 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\minwinbase.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\minwinbase.h" 3
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)


#pragma warning(push)
#pragma warning(disable: 4820)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)






extern "C" {
# 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\minwinbase.h" 3
typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
# 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\minwinbase.h" 3
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
              CHAR cFileName[ 260 ];
              CHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
              WCHAR cFileName[ 260 ];
              WCHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

typedef WIN32_FIND_DATAW WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAW PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAW LPWIN32_FIND_DATA;
# 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\minwinbase.h" 3
typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;




typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;




typedef enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS {
    ReadDirectoryNotifyInformation = 1,
    ReadDirectoryNotifyExtendedInformation
} READ_DIRECTORY_NOTIFY_INFORMATION_CLASS, *PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS;



typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;


typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,

    FileStorageInfo,
    FileAlignmentInfo,
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,


    FileDispositionInfoEx,
    FileRenameInfoEx,

    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;


typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
            DWORD dwErrorCode,
            DWORD dwNumberOfBytesTransfered,
            LPOVERLAPPED lpOverlapped
    );




typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;
# 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\minwinbase.h" 3
typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;
# 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\minwinbase.h" 3
typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef LPVOID (__stdcall *PENCLAVE_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PENCLAVE_ROUTINE LPENCLAVE_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;







typedef PCONTEXT LPCONTEXT;
# 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\minwinbase.h" 3
}






#pragma warning(pop)
# 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
extern "C" {
# 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
                                     LPWCH NewEnvironment
    );
# 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
         DWORD nStdHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
         DWORD nStdHandle,
         HANDLE hHandle
    );





__declspec(dllimport)
BOOL
__stdcall
SetStdHandleEx(
         DWORD nStdHandle,
         HANDLE hHandle,
              PHANDLE phPrevValue
    );
# 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );







__declspec(dllimport)

LPCH
__stdcall
GetEnvironmentStrings(
    void
    );


__declspec(dllimport)

LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );
# 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
                                     LPCH penv
    );

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
                                     LPWCH penv
    );







__declspec(dllimport)

DWORD
__stdcall
GetEnvironmentVariableA(
             LPCSTR lpName,
                                           LPSTR lpBuffer,
         DWORD nSize
    );

__declspec(dllimport)

DWORD
__stdcall
GetEnvironmentVariableW(
             LPCWSTR lpName,
                                           LPWSTR lpBuffer,
         DWORD nSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
         LPCSTR lpName,
             LPCSTR lpValue
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
         LPCWSTR lpName,
             LPCWSTR lpValue
    );







__declspec(dllimport)

DWORD
__stdcall
ExpandEnvironmentStringsA(
         LPCSTR lpSrc,
                                       LPSTR lpDst,
         DWORD nSize
    );

__declspec(dllimport)

DWORD
__stdcall
ExpandEnvironmentStringsW(
         LPCWSTR lpSrc,
                                       LPWSTR lpDst,
         DWORD nSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
         LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
         LPCWSTR lpPathName
    );
# 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
__declspec(dllimport)

DWORD
__stdcall
GetCurrentDirectoryA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );

__declspec(dllimport)

DWORD
__stdcall
GetCurrentDirectoryW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );
# 315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
             LPCWSTR lpPath,
         LPCWSTR lpFileName,
             LPCWSTR lpExtension,
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
              LPWSTR * lpFilePart
    );
# 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
             LPCSTR lpPath,
         LPCSTR lpFileName,
             LPCSTR lpExtension,
         DWORD nBufferLength,
                                                   LPSTR lpBuffer,
              LPSTR * lpFilePart
    );





__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
         LPCSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
         LPCWSTR ExeName
    );
# 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processenv.h" 3
}
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 1 3
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
extern "C" {
# 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
         const FILETIME * lpFileTime1,
         const FILETIME * lpFileTime2
    );


__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
         LPCSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
         LPCWSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
# 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
         LPCSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD dwCreationDisposition,
         DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
         LPCWSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD dwCreationDisposition,
         DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
         DWORD dwFlags,
         LPCWSTR lpDeviceName,
             LPCWSTR lpTargetPath
    );
# 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
         LPCSTR lpFileName
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
         LPCWSTR lpFileName
    );







__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint
    );






__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
         const FILETIME * lpFileTime,
          LPFILETIME lpLocalFileTime
    );





__declspec(dllimport)
BOOL
__stdcall
FindClose(
            HANDLE hFindFile
    );
# 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
         HANDLE hChangeHandle
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
         LPCSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
         LPCWSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );
# 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
         LPCSTR lpFileName,
          LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
         LPCWSTR lpFileName,
          LPWIN32_FIND_DATAW lpFindFileData
    );
# 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
         LPCSTR lpFileName,
         FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
         FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
         DWORD dwAdditionalFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
         LPCWSTR lpFileName,
         FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
         FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
         DWORD dwAdditionalFlags
    );
# 335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeW(
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
         HANDLE hChangeHandle
    );
# 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
         HANDLE hFindFile,
          LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
         HANDLE hFindFile,
          LPWIN32_FIND_DATAW lpFindFileData
    );
# 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeW(
            HANDLE hFindVolume,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeClose(
         HANDLE hFindVolume
    );
# 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
         HANDLE hFile
    );
# 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
             LPCSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
             LPCWSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );







__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
             LPCSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
             LPCWSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );







__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
             LPCSTR lpRootPathName
    );

__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
             LPCWSTR lpRootPathName
    );
# 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
         LPCSTR lpFileName
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
         LPCWSTR lpFileName
    );







__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
         LPCSTR lpFileName,
         GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
         LPCWSTR lpFileName,
         GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation
    );
# 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
         HANDLE hFile,
          LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
         HANDLE hFile,
              LPDWORD lpFileSizeHigh
    );
# 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
         HANDLE hFile,
          PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileType(
         HANDLE hFile
    );





__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleA(
         HANDLE hFile,
                              LPSTR lpszFilePath,
         DWORD cchFilePath,
         DWORD dwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleW(
         HANDLE hFile,
                              LPWSTR lpszFilePath,
         DWORD cchFilePath,
         DWORD dwFlags
    );
# 663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
         HANDLE hFile,
              LPFILETIME lpCreationTime,
              LPFILETIME lpLastAccessTime,
              LPFILETIME lpLastWriteTime
    );


__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameW(
         LPCWSTR lpFileName,
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
                 LPWSTR * lpFilePart
    );






__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameA(
         LPCSTR lpFileName,
         DWORD nBufferLength,
                                                   LPSTR lpBuffer,
                 LPSTR * lpFilePart
    );






__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );
# 721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );






__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameA(
         LPCSTR lpszShortPath,
                                               LPSTR lpszLongPath,
         DWORD cchBuffer
    );
# 756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameW(
         LPCWSTR lpszShortPath,
                                               LPWSTR lpszLongPath,
         DWORD cchBuffer
    );
# 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)

DWORD
__stdcall
GetShortPathNameW(
         LPCWSTR lpszLongPath,
                                               LPWSTR lpszShortPath,
         DWORD cchBuffer
    );
# 800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
         LPCWSTR lpPathName,
         LPCWSTR lpPrefixString,
         UINT uUnique,
                           LPWSTR lpTempFileName
    );
# 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationByHandleW(
         HANDLE hFile,
                                      LPWSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );
# 848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
             LPCWSTR lpRootPathName,
                                      LPWSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );
# 874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameW(
         LPCWSTR lpszFileName,
                                  LPWSTR lpszVolumePathName,
         DWORD cchBufferLength
    );
# 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
         const FILETIME * lpLocalFileTime,
          LPFILETIME lpFileTime
    );


__declspec(dllimport)
BOOL
__stdcall
LockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh
    );


__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
         HANDLE hFile,
         DWORD dwFlags,
               DWORD dwReserved,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh,
            LPOVERLAPPED lpOverlapped
    );
# 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
             LPCWSTR lpDeviceName,
                                         LPWSTR lpTargetPath,
         DWORD ucchMax
    );
# 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
ReadFile(
         HANDLE hFile,
                                                                                                  LPVOID lpBuffer,
         DWORD nNumberOfBytesToRead,
              LPDWORD lpNumberOfBytesRead,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)

BOOL
__stdcall
ReadFileEx(
         HANDLE hFile,
                                                                         LPVOID lpBuffer,
         DWORD nNumberOfBytesToRead,
            LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
# 990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
ReadFileScatter(
         HANDLE hFile,
         FILE_SEGMENT_ELEMENT aSegmentArray[],
         DWORD nNumberOfBytesToRead,
               LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );
# 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
         LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
         LPCWSTR lpPathName
    );







__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
         HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
         LPCSTR lpFileName,
         DWORD dwFileAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
         LPCWSTR lpFileName,
         DWORD dwFileAttributes
    );
# 1063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFileInformationByHandle(
         HANDLE hFile,
         FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
                                   LPVOID lpFileInformation,
         DWORD dwBufferSize
    );




__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
         HANDLE hFile,
         LONG lDistanceToMove,
                PLONG lpDistanceToMoveHigh,
         DWORD dwMoveMethod
    );


__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
         HANDLE hFile,
         LARGE_INTEGER liDistanceToMove,
              PLARGE_INTEGER lpNewFilePointer,
         DWORD dwMoveMethod
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
         HANDLE hFile,
             const FILETIME * lpCreationTime,
             const FILETIME * lpLastAccessTime,
             const FILETIME * lpLastWriteTime
    );
# 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
         HANDLE hFile,
         LONGLONG ValidDataLength
    );
# 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh
    );



__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
         HANDLE hFile,
               DWORD dwReserved,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh,
            LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFile(
         HANDLE hFile,
                                                LPCVOID lpBuffer,
         DWORD nNumberOfBytesToWrite,
              LPDWORD lpNumberOfBytesWritten,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
         HANDLE hFile,
                                                LPCVOID lpBuffer,
         DWORD nNumberOfBytesToWrite,
            LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
# 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
         HANDLE hFile,
         FILE_SEGMENT_ELEMENT aSegmentArray[],
         DWORD nNumberOfBytesToWrite,
               LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );
# 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );
# 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );
# 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
         LPCWSTR lpszVolumeName,
                                                                                          LPWCH lpszVolumePathNames,
         DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
# 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
typedef struct _CREATEFILE2_EXTENDED_PARAMETERS {
    DWORD dwSize;
    DWORD dwFileAttributes;
    DWORD dwFileFlags;
    DWORD dwSecurityQosFlags;
    LPSECURITY_ATTRIBUTES lpSecurityAttributes;
    HANDLE hTemplateFile;
} CREATEFILE2_EXTENDED_PARAMETERS, *PCREATEFILE2_EXTENDED_PARAMETERS, *LPCREATEFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HANDLE
__stdcall
CreateFile2(
         LPCWSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
         DWORD dwCreationDisposition,
             LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
    );
# 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFileIoOverlappedRange(
         HANDLE FileHandle,
         PUCHAR OverlappedRangeStart,
         ULONG Length
    );
# 1346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
         LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
         LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );
# 1384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;




__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamW(
         LPCWSTR lpFileName,
         STREAM_INFO_LEVELS InfoLevel,
                                                       LPVOID lpFindStreamData,
               DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
FindNextStreamW(
         HANDLE hFindStream,
                                                       LPVOID lpFindStreamData
    );
# 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI(
    void
    );
# 1448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );
# 1476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameW(
         LPCWSTR lpFileName,
         DWORD dwFlags,
            LPDWORD StringLength,
                                PWSTR LinkName
    );


__declspec(dllimport)
BOOL
__stdcall
FindNextFileNameW(
         HANDLE hFindStream,
            LPDWORD StringLength,
                                PWSTR LinkName
    );
# 1511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
             LPCSTR lpRootPathName,
                                      LPSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );






__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
         LPCSTR lpPathName,
         LPCSTR lpPrefixString,
         UINT uUnique,
                           LPSTR lpTempFileName
    );
# 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
__declspec(dllimport)
void
__stdcall
SetFileApisToOEM(
    void
    );


__declspec(dllimport)
void
__stdcall
SetFileApisToANSI(
    void
    );
# 1582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fileapi.h" 3
}
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\debugapi.h" 1 3
# 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\debugapi.h" 3
extern "C" {
# 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\debugapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );
# 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\debugapi.h" 3
__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );
# 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\debugapi.h" 3
__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
             LPCSTR lpOutputString
    );

__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
             LPCWSTR lpOutputString
    );
# 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\debugapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
         DWORD dwProcessId,
         DWORD dwThreadId,
         DWORD dwContinueStatus
    );


__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
          LPDEBUG_EVENT lpDebugEvent,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
         DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
         DWORD dwProcessId
    );





__declspec(dllimport)
BOOL
__stdcall
CheckRemoteDebuggerPresent(
         HANDLE hProcess,
          PBOOL pbDebuggerPresent
    );
# 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\debugapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEventEx(
          LPDEBUG_EVENT lpDebugEvent,
         DWORD dwMilliseconds
    );
# 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\debugapi.h" 3
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\utilapiset.h" 1 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\utilapiset.h" 3
extern "C" {






__declspec(dllimport)

PVOID
__stdcall
EncodePointer(
             PVOID Ptr
    );


__declspec(dllimport)

PVOID
__stdcall
DecodePointer(
             PVOID Ptr
    );
# 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\utilapiset.h" 3
__declspec(dllimport)

PVOID
__stdcall
EncodeSystemPointer(
             PVOID Ptr
    );


__declspec(dllimport)

PVOID
__stdcall
DecodeSystemPointer(
             PVOID Ptr
    );





__declspec(dllimport)
HRESULT
__stdcall
EncodeRemotePointer(
         HANDLE ProcessHandle,
             PVOID Ptr,
          PVOID * EncodedPtr
    );


__declspec(dllimport)
HRESULT
__stdcall
DecodeRemotePointer(
         HANDLE ProcessHandle,
             PVOID Ptr,
          PVOID * DecodedPtr
    );
# 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\utilapiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
Beep(
         DWORD dwFreq,
         DWORD dwDuration
    );






}
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\handleapi.h" 1 3
# 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\handleapi.h" 3
extern "C" {
# 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\handleapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
                            HANDLE hObject
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
         HANDLE hSourceProcessHandle,
         HANDLE hSourceHandle,
         HANDLE hTargetProcessHandle,
             LPHANDLE lpTargetHandle,
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwOptions
    );


__declspec(dllimport)
BOOL
__stdcall
CompareObjectHandles(
         HANDLE hFirstObjectHandle,
         HANDLE hSecondObjectHandle
    );
# 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\handleapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
         HANDLE hObject,
          LPDWORD lpdwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
         HANDLE hObject,
         DWORD dwMask,
         DWORD dwFlags
    );






}
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 1 3
# 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
extern "C" {
# 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
         struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;





__declspec(dllimport)

void
__stdcall
RaiseException(
         DWORD dwExceptionCode,
         DWORD dwExceptionFlags,
         DWORD nNumberOfArguments,
                                       const ULONG_PTR * lpArguments
    );
# 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
         struct _EXCEPTION_POINTERS * ExceptionInfo
    );
# 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
             LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );




__declspec(dllimport)

DWORD
__stdcall
GetLastError(
    void
    );




__declspec(dllimport)
void
__stdcall
SetLastError(
         DWORD dwErrCode
    );
# 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)
UINT
__stdcall
GetErrorMode(
    void
    );
# 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
         UINT uMode
    );
# 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)

PVOID
__stdcall
AddVectoredExceptionHandler(
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredExceptionHandler(
         PVOID Handle
    );


__declspec(dllimport)

PVOID
__stdcall
AddVectoredContinueHandler(
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredContinueHandler(
         PVOID Handle
    );
# 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)
void
__stdcall
RaiseFailFastException(
             PEXCEPTION_RECORD pExceptionRecord,
             PCONTEXT pContextRecord,
         DWORD dwFlags
    );
# 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)
void
__stdcall
FatalAppExitA(
         UINT uAction,
         LPCSTR lpMessageText
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitW(
         UINT uAction,
         LPCWSTR lpMessageText
    );
# 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetThreadErrorMode(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadErrorMode(
         DWORD dwNewMode,
             LPDWORD lpOldMode
    );
# 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
__declspec(dllimport)
void
__stdcall
TerminateProcessOnMemoryExhaustion(
         SIZE_T FailedAllocationSize
    );
# 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\errhandlingapi.h" 3
}
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fibersapi.h" 1 3
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fibersapi.h" 3
extern "C" {
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fibersapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
             PFLS_CALLBACK_FUNCTION lpCallback
    );


__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
         DWORD dwFlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
         DWORD dwFlsIndex,
             PVOID lpFlsData
    );


__declspec(dllimport)
BOOL
__stdcall
FlsFree(
         DWORD dwFlsIndex
    );
# 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fibersapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsThreadAFiber(
    void
    );
# 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\fibersapi.h" 3
}
# 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namedpipeapi.h" 1 3
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namedpipeapi.h" 3
extern "C" {
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namedpipeapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
          PHANDLE hReadPipe,
          PHANDLE hWritePipe,
             LPSECURITY_ATTRIBUTES lpPipeAttributes,
         DWORD nSize
    );


__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
         HANDLE hNamedPipe,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
         HANDLE hNamedPipe
    );


__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
         HANDLE hNamedPipe,
             LPDWORD lpMode,
             LPDWORD lpMaxCollectionCount,
             LPDWORD lpCollectDataTimeout
    );


__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
         HANDLE hNamedPipe,
                                                         LPVOID lpBuffer,
         DWORD nBufferSize,
              LPDWORD lpBytesRead,
              LPDWORD lpTotalBytesAvail,
              LPDWORD lpBytesLeftThisMessage
    );


__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
         HANDLE hNamedPipe,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
         LPCWSTR lpName,
         DWORD dwOpenMode,
         DWORD dwPipeMode,
         DWORD nMaxInstances,
         DWORD nOutBufferSize,
         DWORD nInBufferSize,
         DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
         LPCWSTR lpNamedPipeName,
         DWORD nTimeOut
    );
# 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namedpipeapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameW(
         HANDLE Pipe,
                                                 LPWSTR ClientComputerName,
         ULONG ClientComputerNameLength
    );
# 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namedpipeapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
ImpersonateNamedPipeClient(
         HANDLE hNamedPipe
    );
# 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namedpipeapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
         HANDLE hNamedPipe,
              LPDWORD lpFlags,
              LPDWORD lpOutBufferSize,
              LPDWORD lpInBufferSize,
              LPDWORD lpMaxInstances
    );


__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
         HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPWSTR lpUserName,
         DWORD nMaxUserNameSize
    );
# 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namedpipeapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
         LPCWSTR lpNamedPipeName,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
         DWORD nTimeOut
    );
# 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namedpipeapi.h" 3
}
# 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\profileapi.h" 1 3
# 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\profileapi.h" 3
extern "C" {
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\profileapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
          LARGE_INTEGER * lpPerformanceCount
    );


__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
          LARGE_INTEGER * lpFrequency
    );






}
# 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\heapapi.h" 1 3
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\heapapi.h" 3
extern "C" {




#pragma warning(push)
#pragma warning(disable: 4820)
# 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\heapapi.h" 3
typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;
# 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\heapapi.h" 3
__declspec(dllimport)

HANDLE
__stdcall
HeapCreate(
         DWORD flOptions,
         SIZE_T dwInitialSize,
         SIZE_T dwMaximumSize
    );


__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
         HANDLE hHeap
    );


__declspec(dllimport)


__declspec(allocator)
LPVOID
__stdcall
HeapAlloc(
         HANDLE hHeap,
         DWORD dwFlags,
         SIZE_T dwBytes
    );


__declspec(dllimport)



__declspec(allocator)
LPVOID
__stdcall
HeapReAlloc(
            HANDLE hHeap,
         DWORD dwFlags,
                    LPVOID lpMem,
         SIZE_T dwBytes
    );


__declspec(dllimport)

BOOL
__stdcall
HeapFree(
            HANDLE hHeap,
         DWORD dwFlags,
                                        LPVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
         HANDLE hHeap,
         DWORD dwFlags,
         LPCVOID lpMem
    );


__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap(
    void
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
         HANDLE hHeap,
         DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation(
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                PVOID HeapInformation,
         SIZE_T HeapInformationLength
    );
# 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\heapapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
         HANDLE hHeap,
         DWORD dwFlags,
             LPCVOID lpMem
    );
# 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\heapapi.h" 3
BOOL
__stdcall
HeapSummary(
         HANDLE hHeap,
         DWORD dwFlags,
          LPHEAP_SUMMARY lpSummary
    );
# 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\heapapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
         DWORD NumberOfHeaps,
                                           PHANDLE ProcessHeaps
    );


__declspec(dllimport)
BOOL
__stdcall
HeapLock(
         HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
         HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
         HANDLE hHeap,
            LPPROCESS_HEAP_ENTRY lpEntry
    );


__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation(
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                                    PVOID HeapInformation,
         SIZE_T HeapInformationLength,
              PSIZE_T ReturnLength
    );
# 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\heapapi.h" 3
#pragma warning(pop)



}
# 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ioapiset.h" 1 3
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ioapiset.h" 3
extern "C" {
# 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ioapiset.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateIoCompletionPort(
         HANDLE FileHandle,
             HANDLE ExistingCompletionPort,
         ULONG_PTR CompletionKey,
         DWORD NumberOfConcurrentThreads
    );


__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
         HANDLE CompletionPort,
          LPDWORD lpNumberOfBytesTransferred,
          PULONG_PTR lpCompletionKey,
          LPOVERLAPPED * lpOverlapped,
         DWORD dwMilliseconds
    );





__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatusEx(
         HANDLE CompletionPort,
                                                   LPOVERLAPPED_ENTRY lpCompletionPortEntries,
         ULONG ulCount,
          PULONG ulNumEntriesRemoved,
         DWORD dwMilliseconds,
         BOOL fAlertable
    );




__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
         HANDLE CompletionPort,
         DWORD dwNumberOfBytesTransferred,
         ULONG_PTR dwCompletionKey,
             LPOVERLAPPED lpOverlapped
    );
# 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ioapiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
         HANDLE hDevice,
         DWORD dwIoControlCode,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                                LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
              LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped
    );
# 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ioapiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
         HANDLE hFile,
         LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
         BOOL bWait
    );





__declspec(dllimport)
BOOL
__stdcall
CancelIoEx(
         HANDLE hFile,
             LPOVERLAPPED lpOverlapped
    );
# 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ioapiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
CancelIo(
         HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResultEx(
         HANDLE hFile,
         LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
# 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ioapiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
CancelSynchronousIo(
         HANDLE hThread
    );
# 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ioapiset.h" 3
}
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 1 3
# 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
extern "C" {
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;
# 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)
void
__stdcall
InitializeSRWLock(
          PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockShared(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockShared(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockShared(
            PSRWLOCK SRWLock
    );
# 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
          LPCRITICAL_SECTION lpCriticalSection
    );




__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)

BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
          LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount
    );





__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionEx(
          LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount,
         DWORD Flags
    );




__declspec(dllimport)
DWORD
__stdcall
SetCriticalSectionSpinCount(
            LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount
    );





__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );




__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );
# 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
# 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
            PINIT_ONCE InitOnce,
                PVOID Parameter,
                                  PVOID *Context
    );







__declspec(dllimport)
void
__stdcall
InitOnceInitialize(
          PINIT_ONCE InitOnce
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceExecuteOnce(
            PINIT_ONCE InitOnce,
                    PINIT_ONCE_FN InitFn,
                PVOID Parameter,
                                  LPVOID * Context
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceBeginInitialize(
            LPINIT_ONCE lpInitOnce,
         DWORD dwFlags,
          PBOOL fPending,
                                  LPVOID * lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceComplete(
            LPINIT_ONCE lpInitOnce,
         DWORD dwFlags,
             LPVOID lpContext
    );
# 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
# 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)
void
__stdcall
InitializeConditionVariable(
          PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeConditionVariable(
            PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeAllConditionVariable(
            PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableCS(
            PCONDITION_VARIABLE ConditionVariable,
            PCRITICAL_SECTION CriticalSection,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableSRW(
            PCONDITION_VARIABLE ConditionVariable,
            PSRWLOCK SRWLock,
         DWORD dwMilliseconds,
         ULONG Flags
    );
# 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetEvent(
         HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
         HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
         HANDLE hSemaphore,
         LONG lReleaseCount,
              LPLONG lpPreviousCount
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
         HANDLE hMutex
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
         HANDLE hHandle,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
DWORD
__stdcall
SleepEx(
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
         HANDLE hHandle,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
         DWORD nCount,
                       const HANDLE * lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
# 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateMutexA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
         BOOL bInitialOwner,
             LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateMutexW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
         BOOL bInitialOwner,
             LPCWSTR lpName
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenMutexW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateEventA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
         BOOL bManualReset,
         BOOL bInitialState,
             LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateEventW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
         BOOL bManualReset,
         BOOL bInitialState,
             LPCWSTR lpName
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenEventA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
OpenEventW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenSemaphoreW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );
# 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
typedef
void
(__stdcall *PTIMERAPCROUTINE)(
             LPVOID lpArgToCompletionRoutine,
             DWORD dwTimerLowValue,
             DWORD dwTimerHighValue
    );

__declspec(dllimport)

HANDLE
__stdcall
OpenWaitableTimerW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpTimerName
    );
# 623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
BOOL
__stdcall
SetWaitableTimerEx(
         HANDLE hTimer,
         const LARGE_INTEGER * lpDueTime,
         LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
             PREASON_CONTEXT WakeContext,
         ULONG TolerableDelay
    );




__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
         HANDLE hTimer,
         const LARGE_INTEGER * lpDueTime,
         LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
         BOOL fResume
    );


__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
         HANDLE hTimer
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateMutexExA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             LPCSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateMutexExW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             LPCWSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );
# 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateEventExA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             LPCSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateEventExW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             LPCWSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreExW(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
         LONG lInitialCount,
         LONG lMaximumCount,
             LPCWSTR lpName,
               DWORD dwFlags,
         DWORD dwDesiredAccess
    );
# 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerExW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             LPCWSTR lpTimerName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );
# 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





BOOL
__stdcall
EnterSynchronizationBarrier(
            LPSYNCHRONIZATION_BARRIER lpBarrier,
         DWORD dwFlags
    );


BOOL
__stdcall
InitializeSynchronizationBarrier(
          LPSYNCHRONIZATION_BARRIER lpBarrier,
         LONG lTotalThreads,
         LONG lSpinCount
    );


BOOL
__stdcall
DeleteSynchronizationBarrier(
            LPSYNCHRONIZATION_BARRIER lpBarrier
    );
# 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)
void
__stdcall
Sleep(
         DWORD dwMilliseconds
    );


BOOL
__stdcall
WaitOnAddress(
                                  volatile void * Address,
                                  PVOID CompareAddress,
         SIZE_T AddressSize,
             DWORD dwMilliseconds
    );


void
__stdcall
WakeByAddressSingle(
         PVOID Address
    );


void
__stdcall
WakeByAddressAll(
         PVOID Address
    );
# 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
# 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
         DWORD nCount,
                       const HANDLE * lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreW(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
         LONG lInitialCount,
         LONG lMaximumCount,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
         BOOL bManualReset,
             LPCWSTR lpTimerName
    );
# 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\synchapi.h" 3
}
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\interlockedapi.h" 1 3
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\interlockedapi.h" 3
extern "C" {
# 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\interlockedapi.h" 3
__declspec(dllimport)
void
__stdcall
InitializeSListHead(
          PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPopEntrySList(
            PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushEntrySList(
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY ListEntry
    );







__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushListSListEx(
            PSLIST_HEADER ListHead,
            PSLIST_ENTRY List,
            PSLIST_ENTRY ListEnd,
         ULONG Count
    );




__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedFlushSList(
            PSLIST_HEADER ListHead
    );


__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList(
         PSLIST_HEADER ListHead
    );
# 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\interlockedapi.h" 3
}
# 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 1 3
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
extern "C" {
# 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;

typedef STARTUPINFOW STARTUPINFO;
typedef LPSTARTUPINFOW LPSTARTUPINFO;
# 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
         PAPCFUNC pfnAPC,
         HANDLE hThread,
         ULONG_PTR dwData
    );




__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
         HANDLE hProcess,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );
# 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
         UINT uExitCode
    );
# 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
         HANDLE hProcess,
         UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
         HANDLE hProcess,
          LPDWORD lpExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateThread(
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
                              LPVOID lpParameter,
         DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateRemoteThread(
         HANDLE hProcess,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
             LPVOID lpParameter,
         DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );
# 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );


__declspec(dllimport)

HANDLE
__stdcall
OpenThread(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwThreadId
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
         HANDLE hThread,
         int nPriority
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
         HANDLE hThread,
         BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
         HANDLE hThread,
          PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
int
__stdcall
GetThreadPriority(
         HANDLE hThread
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
         DWORD dwExitCode
    );







__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
         HANDLE hThread,
         DWORD dwExitCode
    );
# 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
GetExitCodeThread(
         HANDLE hThread,
          LPDWORD lpExitCode
    );


__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
         HANDLE hThread
    );


__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
         HANDLE hThread
    );







__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );


__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
         DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
         DWORD dwTlsIndex,
             LPVOID lpTlsValue
    );


__declspec(dllimport)
BOOL
__stdcall
TlsFree(
         DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
             LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCSTR lpCurrentDirectory,
         LPSTARTUPINFOA lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
             LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCWSTR lpCurrentDirectory,
         LPSTARTUPINFOW lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );
# 463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
         DWORD dwLevel,
         DWORD dwFlags
    );


__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
         DWORD ProcessId
    );


__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
          LPSTARTUPINFOW lpStartupInfo
    );





__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW(
             HANDLE hToken,
             LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCWSTR lpCurrentDirectory,
         LPSTARTUPINFOW lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );
# 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__forceinline
HANDLE
GetCurrentProcessToken (
    void
    )
{
    return (HANDLE)(LONG_PTR) -4;
}

__forceinline
HANDLE
GetCurrentThreadToken (
    void
    )
{
    return (HANDLE)(LONG_PTR) -5;
}

__forceinline
HANDLE
GetCurrentThreadEffectiveToken (
    void
    )
{
    return (HANDLE)(LONG_PTR) -6;
}
# 566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
SetThreadToken(
             PHANDLE Thread,
             HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken(
         HANDLE ProcessHandle,
         DWORD DesiredAccess,
             PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken(
         HANDLE ThreadHandle,
         DWORD DesiredAccess,
         BOOL OpenAsSelf,
             PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
         HANDLE hProcess,
         DWORD dwPriorityClass
    );


__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
         HANDLE hProcess
    );
# 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee(
            PULONG StackSizeInBytes
    );


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
         DWORD dwProcessId,
          DWORD * pSessionId
    );


typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;
# 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
         HANDLE Process
    );







__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
         HANDLE Thread
    );







__declspec(dllimport)
void
__stdcall
FlushProcessWriteBuffers(
    void
    );
# 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
         HANDLE Thread
    );


__declspec(dllimport)

BOOL
__stdcall
InitializeProcThreadAttributeList(
                                                LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
         DWORD dwAttributeCount,
               DWORD dwFlags,
                                                                                          PSIZE_T lpSize
    );


__declspec(dllimport)
void
__stdcall
DeleteProcThreadAttributeList(
            LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );




__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityUpdateMode(
         HANDLE hProcess,
         DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessAffinityUpdateMode(
         HANDLE hProcess,
              LPDWORD lpdwFlags
    );




__declspec(dllimport)
BOOL
__stdcall
UpdateProcThreadAttribute(
            LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
         DWORD dwFlags,
         DWORD_PTR Attribute,
                                 PVOID lpValue,
         SIZE_T cbSize,
                                   PVOID lpPreviousValue,
             PSIZE_T lpReturnSize
    );
# 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateRemoteThreadEx(
         HANDLE hProcess,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
             LPVOID lpParameter,
         DWORD dwCreationFlags,
             LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
              LPDWORD lpThreadId
    );
# 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
void
__stdcall
GetCurrentThreadStackLimits(
          PULONG_PTR LowLimit,
          PULONG_PTR HighLimit
    );




__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
         HANDLE hThread,
            LPCONTEXT lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
GetProcessMitigationPolicy(
         HANDLE hProcess,
         PROCESS_MITIGATION_POLICY MitigationPolicy,
                                 PVOID lpBuffer,
         SIZE_T dwLength
    );
# 846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
         HANDLE hThread,
         const CONTEXT * lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
SetProcessMitigationPolicy(
         PROCESS_MITIGATION_POLICY MitigationPolicy,
                               PVOID lpBuffer,
         SIZE_T dwLength
    );
# 883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
         HANDLE hProcess,
                                 LPCVOID lpBaseAddress,
         SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
         HANDLE hThread,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
IsProcessorFeaturePresent(
         DWORD ProcessorFeature
    );
# 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetProcessHandleCount(
         HANDLE hProcess,
          PDWORD pdwHandleCount
    );
# 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );
# 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetThreadIdealProcessorEx(
         HANDLE hThread,
         PPROCESSOR_NUMBER lpIdealProcessor,
              PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIdealProcessorEx(
         HANDLE hThread,
          PPROCESSOR_NUMBER lpIdealProcessor
    );


__declspec(dllimport)
void
__stdcall
GetCurrentProcessorNumberEx(
          PPROCESSOR_NUMBER ProcNumber
    );
# 1021 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
         HANDLE hProcess,
          PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
         HANDLE hProcess,
         BOOL bDisablePriorityBoost
    );
# 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetThreadIOPendingFlag(
         HANDLE hThread,
          PBOOL lpIOIsPending
    );


__declspec(dllimport)
BOOL
__stdcall
GetSystemTimes(
              PFILETIME lpIdleTime,
              PFILETIME lpKernelTime,
              PFILETIME lpUserTime
    );
# 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadDynamicCodePolicy,
    ThreadPowerThrottling,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;




typedef struct _MEMORY_PRIORITY_INFORMATION {
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetThreadInformation(
         HANDLE hThread,
         THREAD_INFORMATION_CLASS ThreadInformationClass,
                                              LPVOID ThreadInformation,
         DWORD ThreadInformationSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadInformation(
         HANDLE hThread,
         THREAD_INFORMATION_CLASS ThreadInformationClass,
                                            LPVOID ThreadInformation,
         DWORD ThreadInformationSize
    );
# 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
typedef struct _THREAD_POWER_THROTTLING_STATE {
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
} THREAD_POWER_THROTTLING_STATE;






__declspec(dllimport)
BOOL
__stdcall
IsProcessCritical(
         HANDLE hProcess,
          PBOOL Critical
    );







__declspec(dllimport)
BOOL
__stdcall
SetProtectedPolicy(
         LPCGUID PolicyGuid,
         ULONG_PTR PolicyValue,
              PULONG_PTR OldPolicyValue
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProtectedPolicy(
         LPCGUID PolicyGuid,
          PULONG_PTR PolicyValue
    );
# 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
         HANDLE hThread,
         DWORD dwIdealProcessor
    );
# 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessMemoryExhaustionInfo,
    ProcessAppMemoryInfo,
    ProcessInPrivateInfo,
    ProcessPowerThrottling,
    ProcessReservedValue1,
    ProcessTelemetryCoverageInfo,
    ProcessProtectionLevelInfo,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;

typedef struct _APP_MEMORY_INFORMATION {
    ULONG64 AvailableCommit;
    ULONG64 PrivateCommitUsage;
    ULONG64 PeakPrivateCommitUsage;
    ULONG64 TotalCommitUsage;
} APP_MEMORY_INFORMATION, *PAPP_MEMORY_INFORMATION;
# 1227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
typedef enum _PROCESS_MEMORY_EXHAUSTION_TYPE {
    PMETypeFailFastOnCommitFailure,
    PMETypeMax
} PROCESS_MEMORY_EXHAUSTION_TYPE, *PPROCESS_MEMORY_EXHAUSTION_TYPE;




typedef struct _PROCESS_MEMORY_EXHAUSTION_INFO {
    USHORT Version;
    USHORT Reserved;
    PROCESS_MEMORY_EXHAUSTION_TYPE Type;
    ULONG_PTR Value;
} PROCESS_MEMORY_EXHAUSTION_INFO, *PPROCESS_MEMORY_EXHAUSTION_INFO;







typedef struct _PROCESS_POWER_THROTTLING_STATE {
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
} PROCESS_POWER_THROTTLING_STATE, *PPROCESS_POWER_THROTTLING_STATE;

typedef struct PROCESS_PROTECTION_LEVEL_INFORMATION {
    DWORD ProtectionLevel;
} PROCESS_PROTECTION_LEVEL_INFORMATION;




__declspec(dllimport)
BOOL
__stdcall
SetProcessInformation(
         HANDLE hProcess,
         PROCESS_INFORMATION_CLASS ProcessInformationClass,
                                             LPVOID ProcessInformation,
         DWORD ProcessInformationSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessInformation(
         HANDLE hProcess,
         PROCESS_INFORMATION_CLASS ProcessInformationClass,
                                               LPVOID ProcessInformation,
         DWORD ProcessInformationSize
    );
# 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
BOOL
__stdcall
GetSystemCpuSetInformation(
                                                             PSYSTEM_CPU_SET_INFORMATION Information,
         ULONG BufferLength,
                    PULONG ReturnedLength,
             HANDLE Process,
               ULONG Flags
    );



BOOL
__stdcall
GetProcessDefaultCpuSets(
         HANDLE Process,
                                                         PULONG CpuSetIds,
         ULONG CpuSetIdCount,
                    PULONG RequiredIdCount
    );



BOOL
__stdcall
SetProcessDefaultCpuSets(
         HANDLE Process,
                                  const ULONG * CpuSetIds,
         ULONG CpuSetIdCount
    );



BOOL
__stdcall
GetThreadSelectedCpuSets(
         HANDLE Thread,
                                                         PULONG CpuSetIds,
         ULONG CpuSetIdCount,
                    PULONG RequiredIdCount
    );



BOOL
__stdcall
SetThreadSelectedCpuSets(
         HANDLE Thread,
                              const ULONG * CpuSetIds,
         ULONG CpuSetIdCount
    );
# 1351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA(
             HANDLE hToken,
             LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCSTR lpCurrentDirectory,
         LPSTARTUPINFOA lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );






__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
          LPDWORD lpdwLevel,
          LPDWORD lpdwFlags
    );





__declspec(dllimport)
HRESULT
__stdcall
SetThreadDescription(
         HANDLE hThread,
         PCWSTR lpThreadDescription
    );


__declspec(dllimport)
HRESULT
__stdcall
GetThreadDescription(
         HANDLE hThread,
                      PWSTR * ppszThreadDescription
    );
# 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processthreadsapi.h" 3
}
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 1 3
# 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)



#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)
# 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
extern "C" {
# 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;
# 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
          LPMEMORYSTATUSEX lpBuffer
    );


__declspec(dllimport)
void
__stdcall
GetSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );


__declspec(dllimport)
void
__stdcall
GetSystemTime(
          LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
          LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
void
__stdcall
GetLocalTime(
          LPSYSTEMTIME lpSystemTime
    );
# 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(deprecated)
__declspec(dllimport)

DWORD
__stdcall
GetVersion(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
         const SYSTEMTIME * lpSystemTime
    );
# 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );





__declspec(dllimport)
ULONGLONG
__stdcall
GetTickCount64(
    void
    );
# 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
GetSystemTimeAdjustment(
          PDWORD lpTimeAdjustment,
          PDWORD lpTimeIncrement,
          PBOOL lpTimeAdjustmentDisabled
    );


__declspec(dllimport)

UINT
__stdcall
GetSystemDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)

UINT
__stdcall
GetSystemDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );







__declspec(dllimport)


UINT
__stdcall
GetWindowsDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)


UINT
__stdcall
GetWindowsDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );







__declspec(dllimport)

UINT
__stdcall
GetSystemWindowsDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)

UINT
__stdcall
GetSystemWindowsDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );
# 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;
# 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameExA(
         COMPUTER_NAME_FORMAT NameType,
                                            LPSTR lpBuffer,
            LPDWORD nSize
    );

__declspec(dllimport)

BOOL
__stdcall
GetComputerNameExW(
         COMPUTER_NAME_FORMAT NameType,
                                            LPWSTR lpBuffer,
            LPDWORD nSize
    );
# 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExW(
         COMPUTER_NAME_FORMAT NameType,
         LPCWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
         const SYSTEMTIME * lpSystemTime
    );
# 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(deprecated)
__declspec(dllimport)

BOOL
__stdcall
GetVersionExA(
            LPOSVERSIONINFOA lpVersionInformation
    );

__declspec(deprecated)
__declspec(dllimport)

BOOL
__stdcall
GetVersionExW(
            LPOSVERSIONINFOW lpVersionInformation
    );







__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
                                                                PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
            PDWORD ReturnedLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformationEx(
         LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
                                                                PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
            PDWORD ReturnedLength
    );
# 495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)
void
__stdcall
GetNativeSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );







__declspec(dllimport)
void
__stdcall
GetSystemTimePreciseAsFileTime(
          LPFILETIME lpSystemTimeAsFileTime
    );
# 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetProductInfo(
         DWORD dwOSMajorVersion,
         DWORD dwOSMinorVersion,
         DWORD dwSpMajorVersion,
         DWORD dwSpMinorVersion,
          PDWORD pdwReturnedProductType
    );







__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         ULONG TypeMask,
         UCHAR Condition
    );







__declspec(dllimport)
BOOL
__stdcall
GetOsSafeBootMode(
          PDWORD Flags
    );




__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
         DWORD FirmwareTableProviderSignature,
                                                  PVOID pFirmwareTableEnumBuffer,
         DWORD BufferSize
    );


__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
         DWORD FirmwareTableProviderSignature,
         DWORD FirmwareTableID,
                                                  PVOID pFirmwareTableBuffer,
         DWORD BufferSize
    );
# 606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameExW(
         LPCWSTR Hostname,
                                            LPWSTR ComputerName,
            LPDWORD nSize
    );


__declspec(dllimport)

BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
          PULONGLONG TotalMemoryInKilobytes
    );




__declspec(dllimport)
BOOL
__stdcall
SetComputerNameEx2W(
         COMPUTER_NAME_FORMAT NameType,
         DWORD Flags,
         LPCWSTR lpBuffer
    );






__declspec(dllimport)

BOOL
__stdcall
SetSystemTimeAdjustment(
         DWORD dwTimeAdjustment,
         BOOL bTimeAdjustmentDisabled
    );


__declspec(dllimport)
BOOL
__stdcall
InstallELAMCertificateInfo(
         HANDLE ELAMFile
    );
# 674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetProcessorSystemCycleTime(
         USHORT Group,
                                                                PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
            PDWORD ReturnedLength
    );
# 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetOsManufacturingMode(
          PBOOL pbEnabled
    );
# 721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)
HRESULT
__stdcall
GetIntegratedDisplaySize(
          double * sizeInInches
    );
# 738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA(
         LPCSTR lpComputerName
    );

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW(
         LPCWSTR lpComputerName
    );







__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExA(
         COMPUTER_NAME_FORMAT NameType,
         LPCSTR lpBuffer
    );
# 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\sysinfoapi.h" 3
}






#pragma warning(pop)
# 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 1 3
# 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
extern "C" {




#pragma warning(push)
#pragma warning(disable: 4668)
# 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)

LPVOID
__stdcall
VirtualAlloc(
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect
    );


__declspec(dllimport)

BOOL
__stdcall
VirtualProtect(
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flNewProtect,
          PDWORD lpflOldProtect
    );
# 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
                                                                                                                           LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
             LPCVOID lpAddress,
                                            PMEMORY_BASIC_INFORMATION lpBuffer,
         SIZE_T dwLength
    );
# 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)

LPVOID
__stdcall
VirtualAllocEx(
         HANDLE hProcess,
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect
    );
# 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
         HANDLE hProcess,
                                                                                                                           LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );


__declspec(dllimport)

BOOL
__stdcall
VirtualProtectEx(
         HANDLE hProcess,
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flNewProtect,
          PDWORD lpflOldProtect
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
         HANDLE hProcess,
             LPCVOID lpAddress,
                                            PMEMORY_BASIC_INFORMATION lpBuffer,
         SIZE_T dwLength
    );


__declspec(dllimport)

BOOL
__stdcall
ReadProcessMemory(
         HANDLE hProcess,
         LPCVOID lpBaseAddress,
                                                       LPVOID lpBuffer,
         SIZE_T nSize,
              SIZE_T * lpNumberOfBytesRead
    );


__declspec(dllimport)

BOOL
__stdcall
WriteProcessMemory(
         HANDLE hProcess,
         LPVOID lpBaseAddress,
                            LPCVOID lpBuffer,
         SIZE_T nSize,
              SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingW(
         HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
         DWORD flProtect,
         DWORD dwMaximumSizeHigh,
         DWORD dwMaximumSizeLow,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenFileMappingW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFile(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap
    );


__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFileEx(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress
    );
# 316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
         LPCVOID lpBaseAddress,
         SIZE_T dwNumberOfBytesToFlush
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
         LPCVOID lpBaseAddress
    );
# 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );


__declspec(dllimport)

BOOL
__stdcall
GetProcessWorkingSetSizeEx(
         HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize,
          PDWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize,
         DWORD Flags
    );
# 384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );
# 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)

UINT
__stdcall
GetWriteWatch(
         DWORD dwFlags,
         PVOID lpBaseAddress,
         SIZE_T dwRegionSize,
                                                PVOID * lpAddresses,
                ULONG_PTR * lpdwCount,
              LPDWORD lpdwGranularity
    );


__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
         LPVOID lpBaseAddress,
         SIZE_T dwRegionSize
    );
# 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

__declspec(dllimport)

HANDLE
__stdcall
CreateMemoryResourceNotification(
         MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );


__declspec(dllimport)

BOOL
__stdcall
QueryMemoryResourceNotification(
         HANDLE ResourceNotificationHandle,
          PBOOL ResourceState
    );
# 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
GetSystemFileCacheSize(
          PSIZE_T lpMinimumFileCacheSize,
          PSIZE_T lpMaximumFileCacheSize,
          PDWORD lpFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetSystemFileCacheSize(
         SIZE_T MinimumFileCacheSize,
         SIZE_T MaximumFileCacheSize,
         DWORD Flags
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingNumaW(
         HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
         DWORD flProtect,
         DWORD dwMaximumSizeHigh,
         DWORD dwMaximumSizeLow,
             LPCWSTR lpName,
         DWORD nndPreferred
    );
# 527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
typedef struct _WIN32_MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

__declspec(dllimport)
BOOL
__stdcall
PrefetchVirtualMemory(
         HANDLE hProcess,
         ULONG_PTR NumberOfEntries,
                                PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
         ULONG Flags
    );
# 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingFromApp(
         HANDLE hFile,
             PSECURITY_ATTRIBUTES SecurityAttributes,
         ULONG PageProtection,
         ULONG64 MaximumSize,
             PCWSTR Name
    );


__declspec(dllimport)

PVOID
__stdcall
MapViewOfFileFromApp(
         HANDLE hFileMappingObject,
         ULONG DesiredAccess,
         ULONG64 FileOffset,
         SIZE_T NumberOfBytesToMap
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFileEx(
         PVOID BaseAddress,
         ULONG UnmapFlags
    );
# 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
AllocateUserPhysicalPages(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                    PULONG_PTR PageArray
    );


__declspec(dllimport)

BOOL
__stdcall
FreeUserPhysicalPages(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                               PULONG_PTR PageArray
    );


__declspec(dllimport)

BOOL
__stdcall
MapUserPhysicalPages(
         PVOID VirtualAddress,
         ULONG_PTR NumberOfPages,
                                  PULONG_PTR PageArray
    );







__declspec(dllimport)

BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                    PULONG_PTR PageArray,
         DWORD nndPreferred
    );


__declspec(dllimport)

LPVOID
__stdcall
VirtualAllocExNuma(
         HANDLE hProcess,
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect,
         DWORD nndPreferred
    );
# 680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
GetMemoryErrorHandlingCapabilities(
          PULONG Capabilities
    );



typedef
void
__stdcall
BAD_MEMORY_CALLBACK_ROUTINE(
    void
    );

typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE;

__declspec(dllimport)

PVOID
__stdcall
RegisterBadMemoryNotification(
         PBAD_MEMORY_CALLBACK_ROUTINE Callback
    );


__declspec(dllimport)

BOOL
__stdcall
UnregisterBadMemoryNotification(
         PVOID RegistrationHandle
    );
# 744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
typedef enum OFFER_PRIORITY {
    VmOfferPriorityVeryLow = 1,
    VmOfferPriorityLow,
    VmOfferPriorityBelowNormal,
    VmOfferPriorityNormal
} OFFER_PRIORITY;

DWORD
__stdcall
OfferVirtualMemory(
                          PVOID VirtualAddress,
         SIZE_T Size,
         OFFER_PRIORITY Priority
    );


DWORD
__stdcall
ReclaimVirtualMemory(
                     void const * VirtualAddress,
         SIZE_T Size
    );


DWORD
__stdcall
DiscardVirtualMemory(
                          PVOID VirtualAddress,
         SIZE_T Size
    );
# 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetProcessValidCallTargets(
         HANDLE hProcess,
         PVOID VirtualAddress,
         SIZE_T RegionSize,
         ULONG NumberOfOffsets,
                                     PCFG_CALL_TARGET_INFO OffsetInformation
    );


__declspec(dllimport)

PVOID
__stdcall
VirtualAllocFromApp(
             PVOID BaseAddress,
         SIZE_T Size,
         ULONG AllocationType,
         ULONG Protection
    );


__declspec(dllimport)

BOOL
__stdcall
VirtualProtectFromApp(
         PVOID Address,
         SIZE_T Size,
         ULONG NewProtection,
          PULONG OldProtection
    );


__declspec(dllimport)

HANDLE
__stdcall
OpenFileMappingFromApp(
         ULONG DesiredAccess,
         BOOL InheritHandle,
         PCWSTR Name
    );
# 962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
typedef enum WIN32_MEMORY_INFORMATION_CLASS {
    MemoryRegionInfo
} WIN32_MEMORY_INFORMATION_CLASS;



#pragma warning(push)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)


typedef struct WIN32_MEMORY_REGION_INFORMATION {
    PVOID AllocationBase;
    ULONG AllocationProtect;

    union {
        ULONG Flags;

        struct {
            ULONG Private : 1;
            ULONG MappedDataFile : 1;
            ULONG MappedImage : 1;
            ULONG MappedPageFile : 1;
            ULONG MappedPhysical : 1;
            ULONG DirectMapped : 1;
            ULONG Reserved : 26;
        } ;
    } ;

    SIZE_T RegionSize;
    SIZE_T CommitSize;
} WIN32_MEMORY_REGION_INFORMATION;



#pragma warning(pop)


__declspec(dllimport)

BOOL
__stdcall
QueryVirtualMemoryInformation(
         HANDLE Process,
         const void * VirtualAddress,
         WIN32_MEMORY_INFORMATION_CLASS MemoryInformationClass,
                                              PVOID MemoryInformation,
         SIZE_T MemoryInformationSize,
              PSIZE_T ReturnSize
    );
# 1033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
__declspec(dllimport)

PVOID
__stdcall
MapViewOfFileNuma2(
         HANDLE FileMappingHandle,
         HANDLE ProcessHandle,
         ULONG64 Offset,
             PVOID BaseAddress,
         SIZE_T ViewSize,
         ULONG AllocationType,
         ULONG PageProtection,
         ULONG PreferredNode
    );





__forceinline

PVOID
MapViewOfFile2(
         HANDLE FileMappingHandle,
         HANDLE ProcessHandle,
         ULONG64 Offset,
             PVOID BaseAddress,
         SIZE_T ViewSize,
         ULONG AllocationType,
         ULONG PageProtection
    )
{
    return MapViewOfFileNuma2(FileMappingHandle,
                              ProcessHandle,
                              Offset,
                              BaseAddress,
                              ViewSize,
                              AllocationType,
                              PageProtection,
                              ((DWORD) -1));
}



__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile2(
         HANDLE ProcessHandle,
         PVOID BaseAddress,
         ULONG UnmapFlags
    );
# 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\memoryapi.h" 3
#pragma warning(pop)



}
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\enclaveapi.h" 1 3
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\enclaveapi.h" 3
extern "C" {
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\enclaveapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
IsEnclaveTypeSupported(
         DWORD flEnclaveType
    );


__declspec(dllimport)

LPVOID
__stdcall
CreateEnclave(
         HANDLE hProcess,
             LPVOID lpAddress,
         SIZE_T dwSize,
         SIZE_T dwInitialCommitment,
         DWORD flEnclaveType,
                                   LPCVOID lpEnclaveInformation,
         DWORD dwInfoLength,
              LPDWORD lpEnclaveError
    );


__declspec(dllimport)

BOOL
__stdcall
LoadEnclaveData(
         HANDLE hProcess,
         LPVOID lpAddress,
                            LPCVOID lpBuffer,
         SIZE_T nSize,
         DWORD flProtect,
                                   LPCVOID lpPageInformation,
         DWORD dwInfoLength,
          PSIZE_T lpNumberOfBytesWritten,
              LPDWORD lpEnclaveError
    );


__declspec(dllimport)

BOOL
__stdcall
InitializeEnclave(
         HANDLE hProcess,
         LPVOID lpAddress,
                                   LPCVOID lpEnclaveInformation,
         DWORD dwInfoLength,
              LPDWORD lpEnclaveError
    );
# 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\enclaveapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
LoadEnclaveImageA(
         LPVOID lpEnclaveAddress,
         LPCSTR lpImageName
    );

__declspec(dllimport)

BOOL
__stdcall
LoadEnclaveImageW(
         LPVOID lpEnclaveAddress,
         LPCWSTR lpImageName
    );







__declspec(dllimport)

BOOL
__stdcall
CallEnclave(
         LPENCLAVE_ROUTINE lpRoutine,
         LPVOID lpParameter,
         BOOL fWaitForThread,
          LPVOID * lpReturnValue
    );


__declspec(dllimport)

BOOL
__stdcall
TerminateEnclave(
         LPVOID lpAddress,
         BOOL fWait
    );


__declspec(dllimport)

BOOL
__stdcall
DeleteEnclave(
         LPVOID lpAddress
    );
# 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\enclaveapi.h" 3
}
# 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\threadpoollegacyapiset.h" 1 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\threadpoollegacyapiset.h" 3
extern "C" {
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\threadpoollegacyapiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueueUserWorkItem(
         LPTHREAD_START_ROUTINE Function,
             PVOID Context,
         ULONG Flags
    );


__declspec(dllimport)

BOOL
__stdcall
UnregisterWaitEx(
         HANDLE WaitHandle,
             HANDLE CompletionEvent
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateTimerQueue(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
CreateTimerQueueTimer(
             PHANDLE phNewTimer,
             HANDLE TimerQueue,
         WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
         DWORD DueTime,
         DWORD Period,
         ULONG Flags
    );


__declspec(dllimport)

BOOL
__stdcall
ChangeTimerQueueTimer(
             HANDLE TimerQueue,
            HANDLE Timer,
         ULONG DueTime,
         ULONG Period
    );


__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueueTimer(
             HANDLE TimerQueue,
         HANDLE Timer,
             HANDLE CompletionEvent
    );


__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueueEx(
         HANDLE TimerQueue,
             HANDLE CompletionEvent
    );






}
# 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\threadpoolapiset.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\threadpoolapiset.h" 3
extern "C" {
# 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\threadpoolapiset.h" 3
typedef
void
(__stdcall *PTP_WIN32_IO_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PVOID Overlapped,
                ULONG IoResult,
                ULONG_PTR NumberOfBytesTransferred,
                PTP_IO Io
    );




__declspec(dllimport)

PTP_POOL
__stdcall
CreateThreadpool(
               PVOID reserved
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolThreadMaximum(
            PTP_POOL ptpp,
         DWORD cthrdMost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolThreadMinimum(
            PTP_POOL ptpp,
         DWORD cthrdMic
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolStackInformation(
            PTP_POOL ptpp,
         PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
BOOL
__stdcall
QueryThreadpoolStackInformation(
         PTP_POOL ptpp,
          PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpool(
            PTP_POOL ptpp
    );


__declspec(dllimport)

PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
    void
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroupMembers(
            PTP_CLEANUP_GROUP ptpcg,
         BOOL fCancelPendingCallbacks,
                PVOID pvCleanupContext
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroup(
            PTP_CLEANUP_GROUP ptpcg
    );


__declspec(dllimport)
void
__stdcall
SetEventWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE evt
    );


__declspec(dllimport)
void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE sem,
         DWORD crel
    );


__declspec(dllimport)
void
__stdcall
ReleaseMutexWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE mut
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
            PCRITICAL_SECTION pcs
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HMODULE mod
    );


__declspec(dllimport)
BOOL
__stdcall
CallbackMayRunLong(
            PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
void
__stdcall
DisassociateCurrentThreadFromCallback(
            PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)

BOOL
__stdcall
TrySubmitThreadpoolCallback(
         PTP_SIMPLE_CALLBACK pfns,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)

PTP_WORK
__stdcall
CreateThreadpoolWork(
         PTP_WORK_CALLBACK pfnwk,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SubmitThreadpoolWork(
            PTP_WORK pwk
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWorkCallbacks(
            PTP_WORK pwk,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWork(
            PTP_WORK pwk
    );


__declspec(dllimport)

PTP_TIMER
__stdcall
CreateThreadpoolTimer(
         PTP_TIMER_CALLBACK pfnti,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolTimer(
            PTP_TIMER pti,
             PFILETIME pftDueTime,
         DWORD msPeriod,
             DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
IsThreadpoolTimerSet(
            PTP_TIMER pti
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolTimerCallbacks(
            PTP_TIMER pti,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolTimer(
            PTP_TIMER pti
    );


__declspec(dllimport)

PTP_WAIT
__stdcall
CreateThreadpoolWait(
         PTP_WAIT_CALLBACK pfnwa,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolWait(
            PTP_WAIT pwa,
             HANDLE h,
             PFILETIME pftTimeout
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWaitCallbacks(
            PTP_WAIT pwa,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWait(
            PTP_WAIT pwa
    );


__declspec(dllimport)

PTP_IO
__stdcall
CreateThreadpoolIo(
         HANDLE fl,
         PTP_WIN32_IO_CALLBACK pfnio,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
StartThreadpoolIo(
            PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
CancelThreadpoolIo(
            PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolIoCallbacks(
            PTP_IO pio,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolIo(
            PTP_IO pio
    );





__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolTimerEx(
            PTP_TIMER pti,
             PFILETIME pftDueTime,
         DWORD msPeriod,
             DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolWaitEx(
            PTP_WAIT pwa,
             HANDLE h,
             PFILETIME pftTimeout,
               PVOID Reserved
    );
# 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\threadpoolapiset.h" 3
}
# 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\jobapi.h" 1 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\jobapi.h" 3
extern "C" {
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\jobapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsProcessInJob(
         HANDLE ProcessHandle,
             HANDLE JobHandle,
          PBOOL Result
    );
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\jobapi.h" 3
}
# 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\jobapi2.h" 1 3
# 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\jobapi2.h" 3
extern "C" {







typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PCWSTR VolumeName;
    ULONG BaseIoSize;
    ULONG ControlFlags;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION;

__declspec(dllimport)
HANDLE
__stdcall
CreateJobObjectW(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCWSTR lpName
    );




__declspec(dllimport)
void
__stdcall
FreeMemoryJobObject(
                     void * Buffer
    );



__declspec(dllimport)
HANDLE
__stdcall
OpenJobObjectW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );



__declspec(dllimport)
BOOL
__stdcall
AssignProcessToJobObject(
         HANDLE hJob,
         HANDLE hProcess
    );



__declspec(dllimport)
BOOL
__stdcall
TerminateJobObject(
         HANDLE hJob,
         UINT uExitCode
    );



__declspec(dllimport)
BOOL
__stdcall
SetInformationJobObject(
         HANDLE hJob,
         JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                   LPVOID lpJobObjectInformation,
         DWORD cbJobObjectInformationLength
    );




__declspec(dllimport)
DWORD
__stdcall
SetIoRateControlInformationJobObject(
         HANDLE hJob,
         JOBOBJECT_IO_RATE_CONTROL_INFORMATION * IoRateControlInfo
    );



__declspec(dllimport)
BOOL
__stdcall
QueryInformationJobObject(
             HANDLE hJob,
         JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                                         LPVOID lpJobObjectInformation,
         DWORD cbJobObjectInformationLength,
              LPDWORD lpReturnLength
    );




__declspec(dllimport)
DWORD
__stdcall
QueryIoRateControlInformationJobObject(
             HANDLE hJob,
             PCWSTR VolumeName,
                                            JOBOBJECT_IO_RATE_CONTROL_INFORMATION ** InfoBlocks,
          ULONG * InfoBlockCount
    );
# 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\jobapi2.h" 3
}
# 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wow64apiset.h" 1 3
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wow64apiset.h" 3
extern "C" {
# 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wow64apiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
Wow64DisableWow64FsRedirection(
          PVOID * OldValue
    );


__declspec(dllimport)
BOOL
__stdcall
Wow64RevertWow64FsRedirection(
         PVOID OlValue
    );
# 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wow64apiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsWow64Process(
         HANDLE hProcess,
          PBOOL Wow64Process
    );
# 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wow64apiset.h" 3
__declspec(dllimport)


UINT
__stdcall
GetSystemWow64DirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)


UINT
__stdcall
GetSystemWow64DirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );
# 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wow64apiset.h" 3
__declspec(dllimport)
USHORT
__stdcall
Wow64SetThreadDefaultGuestMachine(
         USHORT Machine
    );


__declspec(dllimport)
BOOL
__stdcall
IsWow64Process2(
         HANDLE hProcess,
          USHORT * pProcessMachine,
              USHORT * pNativeMachine
    );


__declspec(dllimport)


UINT
__stdcall
GetSystemWow64Directory2A(
                                           LPSTR lpBuffer,
         UINT uSize,
         WORD ImageFileMachineType
    );

__declspec(dllimport)


UINT
__stdcall
GetSystemWow64Directory2W(
                                           LPWSTR lpBuffer,
         UINT uSize,
         WORD ImageFileMachineType
    );
# 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wow64apiset.h" 3
__declspec(dllimport)

HRESULT
__stdcall
IsWow64GuestMachineSupported(
         USHORT WowGuestMachine,
          BOOL * MachineIsSupported
    );
# 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wow64apiset.h" 3
}
# 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 1 3
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
extern "C" {
# 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
typedef struct tagENUMUILANG {
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
} ENUMUILANG, *PENUMUILANG;



typedef BOOL (__stdcall* ENUMRESLANGPROCA)(
             HMODULE hModule,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
         LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
         LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(
             HMODULE hModule,
         LPCSTR lpType,
         LPSTR lpName,
         LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(
             HMODULE hModule,
         LPCWSTR lpType,
         LPWSTR lpName,
         LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(
             HMODULE hModule,
         LPSTR lpType,
         LONG_PTR lParam
    );
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(
             HMODULE hModule,
         LPWSTR lpType,
         LONG_PTR lParam
    );
# 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
         HMODULE hLibModule
    );
# 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)

HRSRC
__stdcall
FindResourceExW(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage
    );
# 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)
int
__stdcall
FindStringOrdinal(
         DWORD dwFindStringOrdinalFlags,
                          LPCWSTR lpStringSource,
         int cchSource,
                         LPCWSTR lpStringValue,
         int cchValue,
         BOOL bIgnoreCase
    );




__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
         HMODULE hLibModule
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread(
         HMODULE hLibModule,
         DWORD dwExitCode
    );
# 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
FreeResource(
         HGLOBAL hResData
    );
# 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)


DWORD
__stdcall
GetModuleFileNameA(
             HMODULE hModule,
                                                                      LPSTR lpFilename,
         DWORD nSize
    );

__declspec(dllimport)


DWORD
__stdcall
GetModuleFileNameW(
             HMODULE hModule,
                                                                      LPWSTR lpFilename,
         DWORD nSize
    );
# 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleA(
             LPCSTR lpModuleName
    );

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleW(
             LPCWSTR lpModuleName
    );
# 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
                DWORD dwFlags,
                LPCSTR lpModuleName,
             HMODULE* phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
                DWORD dwFlags,
                LPCWSTR lpModuleName,
             HMODULE* phModule
    );






__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExA(
         DWORD dwFlags,
             LPCSTR lpModuleName,
          HMODULE * phModule
    );

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExW(
         DWORD dwFlags,
             LPCWSTR lpModuleName,
          HMODULE * phModule
    );
# 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
         HMODULE hModule,
         LPCSTR lpProcName
    );
# 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryExA(
         LPCSTR lpLibFileName,
               HANDLE hFile,
         DWORD dwFlags
    );

__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryExW(
         LPCWSTR lpLibFileName,
               HANDLE hFile,
         DWORD dwFlags
    );
# 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)

HGLOBAL
__stdcall
LoadResource(
             HMODULE hModule,
         HRSRC hResInfo
    );
# 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)
int
__stdcall
LoadStringA(
             HINSTANCE hInstance,
         UINT uID,
                                              LPSTR lpBuffer,
         int cchBufferMax
    );

__declspec(dllimport)
int
__stdcall
LoadStringW(
             HINSTANCE hInstance,
         UINT uID,
                                              LPWSTR lpBuffer,
         int cchBufferMax
    );
# 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)
LPVOID
__stdcall
LockResource(
         HGLOBAL hResData
    );


__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
             HMODULE hModule,
         HRSRC hResInfo
    );
# 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

__declspec(dllimport)
DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
         PCWSTR NewDirectory
    );


__declspec(dllimport)
BOOL
__stdcall
RemoveDllDirectory(
         DLL_DIRECTORY_COOKIE Cookie
    );


__declspec(dllimport)
BOOL
__stdcall
SetDefaultDllDirectories(
         DWORD DirectoryFlags
    );
# 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExA(
             HMODULE hModule,
         LPCSTR lpType,
         LPCSTR lpName,
         ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExW(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExA(
             HMODULE hModule,
         LPCSTR lpType,
         ENUMRESNAMEPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExW(
             HMODULE hModule,
         LPCWSTR lpType,
         ENUMRESNAMEPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExA(
             HMODULE hModule,
         ENUMRESTYPEPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExW(
             HMODULE hModule,
         ENUMRESTYPEPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
# 691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)

HRSRC
__stdcall
FindResourceW(
             HMODULE hModule,
         LPCWSTR lpName,
         LPCWSTR lpType
    );






__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryA(
         LPCSTR lpLibFileName
    );

__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryW(
         LPCWSTR lpLibFileName
    );
# 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
             HMODULE hModule,
         LPCWSTR lpType,
         ENUMRESNAMEPROCW lpEnumFunc,
         LONG_PTR lParam
    );
# 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\libloaderapi.h" 3
}
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 1 3
# 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
extern "C" {
# 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AccessCheck(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW(
         LPCWSTR SubsystemName,
             LPVOID HandleId,
         LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
         DWORD DesiredAccess,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByType(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
         HANDLE ClientToken,
         DWORD DesiredAccess,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultList(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
         HANDLE ClientToken,
         DWORD DesiredAccess,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList,
          LPBOOL pfGenerateOnClose
    );
# 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );
# 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid
    );
# 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AddAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD dwStartingAceIndex,
                                     LPVOID pAceList,
         DWORD nAceListLength
    );
# 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD dwAccessMask,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD dwAccessMask,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );
# 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AddMandatoryAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD MandatoryPolicy,
         PSID pLabelSid
    );
# 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AddResourceAttributeAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid,
         PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
          PDWORD pReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddScopedPolicyIDAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );
# 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups(
         HANDLE TokenHandle,
         BOOL ResetToDefault,
             PTOKEN_GROUPS NewState,
         DWORD BufferLength,
                                                           PTOKEN_GROUPS PreviousState,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges(
         HANDLE TokenHandle,
         BOOL DisableAllPrivileges,
             PTOKEN_PRIVILEGES NewState,
         DWORD BufferLength,
                                                           PTOKEN_PRIVILEGES PreviousState,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid(
         PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
         BYTE nSubAuthorityCount,
         DWORD nSubAuthority0,
         DWORD nSubAuthority1,
         DWORD nSubAuthority2,
         DWORD nSubAuthority3,
         DWORD nSubAuthority4,
         DWORD nSubAuthority5,
         DWORD nSubAuthority6,
         DWORD nSubAuthority7,
             PSID * pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
          PLUID Luid
    );
# 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted(
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted(
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );
# 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
             HANDLE TokenHandle,
         PSID SidToCheck,
          PBOOL IsMember
    );
# 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CheckTokenCapability(
             HANDLE TokenHandle,
         PSID CapabilitySidToCheck,
          PBOOL HasCapability
    );


__declspec(dllimport)
BOOL
__stdcall
GetAppContainerAce(
         PACL Acl,
         DWORD StartingAceIndex,
             PVOID * AppContainerAce,
              DWORD * AppContainerAceIndex
    );
# 582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembershipEx(
             HANDLE TokenHandle,
         PSID SidToCheck,
         DWORD Flags,
          PBOOL IsMember
    );
# 604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
             PSECURITY_DESCRIPTOR ParentDescriptor,
         PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
             PSECURITY_DESCRIPTOR * NewSecurityDescriptor,
             GUID * ObjectType,
         BOOLEAN IsDirectoryObject,
         PGENERIC_MAPPING GenericMapping
    );
# 624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CopySid(
         DWORD nDestinationSidLength,
                                              PSID pDestinationSid,
         PSID pSourceSid
    );
# 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
         BOOL IsDirectoryObject,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityEx(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
             GUID * ObjectType,
         BOOL IsContainerObject,
         ULONG AutoInheritFlags,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
                              GUID ** ObjectTypes,
         ULONG GuidCount,
         BOOL IsContainerObject,
         ULONG AutoInheritFlags,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
         HANDLE ExistingTokenHandle,
         DWORD Flags,
         DWORD DisableSidCount,
                                    PSID_AND_ATTRIBUTES SidsToDisable,
         DWORD DeletePrivilegeCount,
                                         PLUID_AND_ATTRIBUTES PrivilegesToDelete,
         DWORD RestrictedSidCount,
                                       PSID_AND_ATTRIBUTES SidsToRestrict,
             PHANDLE NewTokenHandle
    );
# 711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
CreateWellKnownSid(
         WELL_KNOWN_SID_TYPE WellKnownSidType,
             PSID DomainSid,
                                              PSID pSid,
            DWORD * cbSid
    );


__declspec(dllimport)

BOOL
__stdcall
EqualDomainSid(
         PSID pSid1,
         PSID pSid2,
          BOOL * pfEqual
    );




__declspec(dllimport)
BOOL
__stdcall
DeleteAce(
            PACL pAcl,
         DWORD dwAceIndex
    );
# 752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity(
                               PSECURITY_DESCRIPTOR * ObjectDescriptor
    );
# 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
         HANDLE ExistingTokenHandle,
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
             PHANDLE DuplicateTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
         HANDLE hExistingToken,
         DWORD dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpTokenAttributes,
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
         TOKEN_TYPE TokenType,
             PHANDLE phNewToken
    );
# 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid(
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid(
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce(
         PACL pAcl,
             LPVOID * pAce
    );
# 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
PVOID
__stdcall
FreeSid(
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce(
         PACL pAcl,
         DWORD dwAceIndex,
             LPVOID * pAce
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation(
         PACL pAcl,
                                              LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );
# 867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW(
         LPCWSTR lpFileName,
         SECURITY_INFORMATION RequestedInformation,
                                                         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD nLength,
          LPDWORD lpnLengthNeeded
    );
# 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity(
         HANDLE Handle,
         SECURITY_INFORMATION RequestedInformation,
                                    PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD nLength,
          LPDWORD lpnLengthNeeded
    );


__declspec(dllimport)


DWORD
__stdcall
GetLengthSid(
                                           PSID pSid
    );
# 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)

BOOL
__stdcall
GetPrivateObjectSecurity(
         PSECURITY_DESCRIPTOR ObjectDescriptor,
         SECURITY_INFORMATION SecurityInformation,
                                                               PSECURITY_DESCRIPTOR ResultantDescriptor,
         DWORD DescriptorLength,
          PDWORD ReturnLength
    );
# 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          PSECURITY_DESCRIPTOR_CONTROL pControl,
          LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          LPBOOL lpbDaclPresent,
             PACL * pDacl,
          LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID * pGroup,
          LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength(
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID * pOwner,
          LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
         PSECURITY_DESCRIPTOR SecurityDescriptor,
          PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          LPBOOL lpbSaclPresent,
             PACL * pSacl,
          LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
         PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired(
         UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority(
         PSID pSid,
         DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount(
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation(
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                                                     LPVOID TokenInformation,
         DWORD TokenInformationLength,
          PDWORD ReturnLength
    );





__declspec(dllimport)

BOOL
__stdcall
GetWindowsAccountDomainSid(
         PSID pSid,
                                                          PSID pDomainSid,
            DWORD * cbDomainSid
    );
# 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
         HANDLE ThreadHandle
    );



__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
         HANDLE hToken
    );



__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );
# 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
InitializeAcl(
                                   PACL pAcl,
         DWORD nAclLength,
         DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor(
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSid(
                                                                                  PSID Sid,
         PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
         BYTE nSubAuthorityCount
    );
# 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
         HANDLE TokenHandle
    );
# 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsValidAcl(
         PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor(
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSid(
         PSID pSid
    );





__declspec(dllimport)
BOOL
__stdcall
IsWellKnownSid(
         PSID pSid,
         WELL_KNOWN_SID_TYPE WellKnownSidType
    );




__declspec(dllimport)

BOOL
__stdcall
MakeAbsoluteSD(
         PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
                                                                                                        PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
            LPDWORD lpdwAbsoluteSecurityDescriptorSize,
                                                            PACL pDacl,
            LPDWORD lpdwDaclSize,
                                                            PACL pSacl,
            LPDWORD lpdwSaclSize,
                                                              PSID pOwner,
            LPDWORD lpdwOwnerSize,
                                                                            PSID pPrimaryGroup,
            LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)

BOOL
__stdcall
MakeSelfRelativeSD(
         PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
                                                                    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
            LPDWORD lpdwBufferLength
    );
# 1235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
void
__stdcall
MapGenericMask(
            PDWORD AccessMask,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
         BOOL ObjectCreation,
         BOOL AccessGranted,
          LPBOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );






__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck(
         HANDLE ClientToken,
            PPRIVILEGE_SET RequiredPrivileges,
          LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
         LPCWSTR SubsystemName,
         LPCWSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
# 1341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
void
__stdcall
QuerySecurityAccessMask(
         SECURITY_INFORMATION SecurityInformation,
          LPDWORD DesiredAccess
    );




__declspec(dllimport)
BOOL
__stdcall
RevertToSelf(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation(
            PACL pAcl,
                                            LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW(
         LPCWSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
# 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity(
         HANDLE Handle,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR SecurityDescriptor
    );
# 1408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity(
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR ModificationDescriptor,
            PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
         PGENERIC_MAPPING GenericMapping,
             HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurityEx(
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR ModificationDescriptor,
            PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
         ULONG AutoInheritFlags,
         PGENERIC_MAPPING GenericMapping,
             HANDLE Token
    );





__declspec(dllimport)
void
__stdcall
SetSecurityAccessMask(
         SECURITY_INFORMATION SecurityInformation,
          LPDWORD DesiredAccess
    );
# 1454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorControl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
         BOOL bDaclPresent,
             PACL pDacl,
         BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pGroup,
         BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pOwner,
         BOOL bOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
            PSECURITY_DESCRIPTOR SecurityDescriptor,
             PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
         BOOL bSaclPresent,
             PACL pSacl,
         BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation(
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                             LPVOID TokenInformation,
         DWORD TokenInformationLength
    );
# 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetCachedSigningLevel(
                                PHANDLE SourceFiles,
         ULONG SourceFileCount,
         ULONG Flags,
             HANDLE TargetFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetCachedSigningLevel(
         HANDLE File,
          PULONG Flags,
          PULONG SigningLevel,
                                                                PUCHAR Thumbprint,
                PULONG ThumbprintSize,
              PULONG ThumbprintAlgorithm
    );
# 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
LONG
__stdcall
CveEventWrite(
         PCWSTR CveId,
             PCWSTR AdditionalDetails
    );
# 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
DeriveCapabilitySidsFromName(
         LPCWSTR CapName,
                                                               PSID ** CapabilityGroupSids,
          DWORD * CapabilityGroupSidCount,
                                                          PSID ** CapabilitySids,
          DWORD * CapabilitySidCount
    );
# 1615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securitybaseapi.h" 3
}
# 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namespaceapi.h" 1 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namespaceapi.h" 3
extern "C" {
# 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\namespaceapi.h" 3
__declspec(dllimport)
HANDLE
__stdcall
CreatePrivateNamespaceW(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
         LPVOID lpBoundaryDescriptor,
         LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenPrivateNamespaceW(
         LPVOID lpBoundaryDescriptor,
         LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
BOOLEAN
__stdcall
ClosePrivateNamespace(
         HANDLE Handle,
         ULONG Flags
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateBoundaryDescriptorW(
         LPCWSTR Name,
         ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
AddSIDToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID RequiredSid
    );


__declspec(dllimport)
void
__stdcall
DeleteBoundaryDescriptor(
         HANDLE BoundaryDescriptor
    );






}
# 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\systemtopologyapi.h" 1 3
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\systemtopologyapi.h" 3
extern "C" {






__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
          PULONG HighestNodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
         USHORT Node,
          PGROUP_AFFINITY ProcessorMask
    );
# 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\systemtopologyapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNodeEx(
         ULONG ProximityId,
          PUSHORT NodeNumber
    );
# 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\systemtopologyapi.h" 3
}
# 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processtopologyapi.h" 1 3
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processtopologyapi.h" 3
extern "C" {
# 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processtopologyapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetProcessGroupAffinity(
         HANDLE hProcess,
            PUSHORT GroupCount,
                              PUSHORT GroupArray
    );
# 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processtopologyapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetThreadGroupAffinity(
         HANDLE hThread,
          PGROUP_AFFINITY GroupAffinity
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadGroupAffinity(
         HANDLE hThread,
         const GROUP_AFFINITY * GroupAffinity,
              PGROUP_AFFINITY PreviousGroupAffinity
    );
# 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\processtopologyapi.h" 3
}
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securityappcontainer.h" 1 3
# 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securityappcontainer.h" 3
extern "C" {
# 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\securityappcontainer.h" 3
BOOL
__stdcall
GetAppContainerNamedObjectPath(
             HANDLE Token,
             PSID AppContainerSid,
         ULONG ObjectPathLength,
                                       LPWSTR ObjectPath,
          PULONG ReturnLength
    );





}
# 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\realtimeapiset.h" 1 3
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\realtimeapiset.h" 3
extern "C" {
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\realtimeapiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryThreadCycleTime(
         HANDLE ThreadHandle,
          PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessCycleTime(
         HANDLE ProcessHandle,
          PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTime(
            PULONG BufferLength,
                                          PULONG64 ProcessorIdleCycleTime
    );







__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTimeEx(
         USHORT Group,
            PULONG BufferLength,
                                          PULONG64 ProcessorIdleCycleTime
    );
# 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\realtimeapiset.h" 3
__declspec(dllimport)
void
__stdcall
QueryInterruptTimePrecise(
          PULONGLONG lpInterruptTimePrecise
    );


__declspec(dllimport)
void
__stdcall
QueryUnbiasedInterruptTimePrecise(
          PULONGLONG lpUnbiasedInterruptTimePrecise
    );


__declspec(dllimport)
void
__stdcall
QueryInterruptTime(
          PULONGLONG lpInterruptTime
    );







__declspec(dllimport)
BOOL
__stdcall
QueryUnbiasedInterruptTime(
          PULONGLONG UnbiasedTime
    );







__declspec(dllimport)
HRESULT
__stdcall
QueryAuxiliaryCounterFrequency(
          PULONGLONG lpAuxiliaryCounterFrequency
    );


__declspec(dllimport)
HRESULT
__stdcall
ConvertAuxiliaryCounterToPerformanceCounter(
         ULONGLONG ullAuxiliaryCounterValue,
          PULONGLONG lpPerformanceCounterValue,
              PULONGLONG lpConversionError
    );


__declspec(dllimport)
HRESULT
__stdcall
ConvertPerformanceCounterToAuxiliaryCounter(
         ULONGLONG ullPerformanceCounterValue,
          PULONGLONG lpAuxiliaryCounterValue,
              PULONGLONG lpConversionError
    );
# 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\realtimeapiset.h" 3
}
# 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3



extern "C" {
# 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;

typedef LPVOID (__stdcall *PFIBER_CALLOUT_ROUTINE)(
    LPVOID lpParameter
    );
# 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef PLDT_ENTRY LPLDT_ENTRY;
# 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
# 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;

    DWORD dwProviderOffset;

    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
} COMMCONFIG,*LPCOMMCONFIG;
# 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
# 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
# 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;
# 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
int




__stdcall




WinMain (
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPSTR lpCmdLine,
         int nShowCmd
    );

int



__stdcall

wWinMain(
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPWSTR lpCmdLine,
         int nShowCmd
    );







__declspec(dllimport)


__declspec(allocator)
HGLOBAL
__stdcall
GlobalAlloc(
         UINT uFlags,
         SIZE_T dwBytes
    );







__declspec(dllimport)

__declspec(allocator)
HGLOBAL
__stdcall
GlobalReAlloc (
                HGLOBAL hMem,
         SIZE_T dwBytes,
         UINT uFlags
    );







__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
         HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
         HGLOBAL hMem
    );

__declspec(dllimport)

LPVOID
__stdcall
GlobalLock (
         HGLOBAL hMem
    );







__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
         HGLOBAL hMem
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalHandle (
         LPCVOID pMem
    );







__declspec(dllimport)


HGLOBAL
__stdcall
GlobalFree(
                    HGLOBAL hMem
    );







__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
         DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
         HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
         HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
         HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
         HGLOBAL hMem
    );


__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
          LPMEMORYSTATUS lpBuffer
    );







__declspec(dllimport)


__declspec(allocator)
HLOCAL
__stdcall
LocalAlloc(
         UINT uFlags,
         SIZE_T uBytes
    );

__declspec(dllimport)

__declspec(allocator)
HLOCAL
__stdcall
LocalReAlloc(
                    HLOCAL hMem,
         SIZE_T uBytes,
         UINT uFlags
    );







__declspec(dllimport)

LPVOID
__stdcall
LocalLock(
         HLOCAL hMem
    );







__declspec(dllimport)

HLOCAL
__stdcall
LocalHandle(
         LPCVOID pMem
    );







__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
         HLOCAL hMem
    );







__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
         HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
         HLOCAL hMem
    );







__declspec(dllimport)


HLOCAL
__stdcall
LocalFree(
                    HLOCAL hMem
    );







__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
         HLOCAL hMem,
         UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
         UINT uMinFree
    );
# 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
          LPCSTR lpApplicationName,
          LPDWORD lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
          LPCWSTR lpApplicationName,
          LPDWORD lpBinaryType
    );






__declspec(dllimport)

DWORD
__stdcall
GetShortPathNameA(
         LPCSTR lpszLongPath,
                                               LPSTR lpszShortPath,
         DWORD cchBuffer
    );






__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameTransactedA(
             LPCSTR lpszShortPath,
                                               LPSTR lpszLongPath,
             DWORD cchBuffer,
             HANDLE hTransaction
    );
__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameTransactedW(
             LPCWSTR lpszShortPath,
                                               LPWSTR lpszLongPath,
             DWORD cchBuffer,
             HANDLE hTransaction
    );
# 1286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
          HANDLE hProcess,
          PDWORD_PTR lpProcessAffinityMask,
          PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
         HANDLE hProcess,
         DWORD_PTR dwProcessAffinityMask
    );







__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
          HANDLE hProcess,
          PIO_COUNTERS lpIoCounters
    );







__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
          HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)

void
__stdcall
FatalExit(
         int ExitCode
    );







__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
                                     LPCH NewEnvironment
    );
# 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
void
__stdcall
SwitchToFiber(
         LPVOID lpFiber
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
         LPVOID lpFiber
    );



__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );



__declspec(dllimport)

LPVOID
__stdcall
CreateFiberEx(
             SIZE_T dwStackCommitSize,
             SIZE_T dwStackReserveSize,
             DWORD dwFlags,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );

__declspec(dllimport)

LPVOID
__stdcall
ConvertThreadToFiberEx(
             LPVOID lpParameter,
             DWORD dwFlags
    );







__declspec(dllimport)

LPVOID
__stdcall
CreateFiber(
             SIZE_T dwStackSize,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );

__declspec(dllimport)

LPVOID
__stdcall
ConvertThreadToFiber(
             LPVOID lpParameter
    );
# 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef void *PUMS_CONTEXT;

typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {




    ULONG UmsVersion;




    PUMS_COMPLETION_LIST CompletionList;





    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;




    PVOID SchedulerParam;

} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
    ULONG UmsVersion;
    union {
        struct {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
        } ;
        ULONG ThreadUmsFlags;
    } ;
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION;


__declspec(dllimport)
BOOL
__stdcall
CreateUmsCompletionList(
             PUMS_COMPLETION_LIST* UmsCompletionList
    );

__declspec(dllimport)
BOOL
__stdcall
DequeueUmsCompletionListItems(
         PUMS_COMPLETION_LIST UmsCompletionList,
         DWORD WaitTimeOut,
          PUMS_CONTEXT* UmsThreadList
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsCompletionListEvent(
         PUMS_COMPLETION_LIST UmsCompletionList,
            PHANDLE UmsCompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ExecuteUmsThread(
            PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
UmsThreadYield(
         PVOID SchedulerParam
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsCompletionList(
         PUMS_COMPLETION_LIST UmsCompletionList
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
    void
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
            PUMS_CONTEXT UmsContext
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUmsThreadInformation(
         PUMS_CONTEXT UmsThread,
         UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
                                                                     PVOID UmsThreadInformation,
         ULONG UmsThreadInformationLength,
              PULONG ReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetUmsThreadInformation(
         PUMS_CONTEXT UmsThread,
         UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
         PVOID UmsThreadInformation,
         ULONG UmsThreadInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsThreadContext(
         PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
CreateUmsThreadContext(
             PUMS_CONTEXT *lpUmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
EnterUmsSchedulingMode(
         PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsSystemThreadInformation(
         HANDLE ThreadHandle,
            PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
    );
# 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
         HANDLE hThread,
         DWORD_PTR dwThreadAffinityMask
    );
# 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetProcessDEPPolicy(
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessDEPPolicy(
         HANDLE hProcess,
          LPDWORD lpFlags,
          PBOOL lpPermanent
    );



__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
         LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
          HANDLE hThread,
          DWORD dwSelector,
          LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
         EXECUTION_STATE esFlags
    );







typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

__declspec(dllimport)
HANDLE
__stdcall
PowerCreateRequest (
         PREASON_CONTEXT Context
    );

__declspec(dllimport)
BOOL
__stdcall
PowerSetRequest (
         HANDLE PowerRequest,
         POWER_REQUEST_TYPE RequestType
    );

__declspec(dllimport)
BOOL
__stdcall
PowerClearRequest (
         HANDLE PowerRequest,
         POWER_REQUEST_TYPE RequestType
    );
# 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFileCompletionNotificationModes(
         HANDLE FileHandle,
         UCHAR Flags
    );
# 1829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadContext(
            HANDLE hThread,
            PWOW64_CONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64SetThreadContext(
         HANDLE hThread,
         const WOW64_CONTEXT *lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadSelectorEntry(
         HANDLE hThread,
         DWORD dwSelector,
          PWOW64_LDT_ENTRY lpSelectorEntry
    );







__declspec(dllimport)
DWORD
__stdcall
Wow64SuspendThread(
         HANDLE hThread
    );



__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
         BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
         HANDLE Process
    );
# 1903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
         DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
         UINT uNumber
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
          HANDLE hDevice,
          BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
         HANDLE hMsgIndicator,
         ULONG ulMsgCount
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
         HANDLE hFile,
         LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
         HANDLE hFile,
         LPCWSTR lpShortName
    );
# 1994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
LoadModule(
         LPCSTR lpModuleName,
         LPVOID lpParameterBlock
    );



__declspec(dllimport)
UINT
__stdcall
WinExec(
         LPCSTR lpCmdLine,
         UINT uCmdShow
    );
# 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
              HANDLE hFile,
              LPDWORD lpErrors,
              LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
         HANDLE hFile,
         DWORD dwInQueue,
         DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
         HANDLE hFile,
         DWORD dwFunc
    );

__declspec(dllimport)

BOOL
__stdcall
GetCommConfig(
              HANDLE hCommDev,
                                      LPCOMMCONFIG lpCC,
              LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
          HANDLE hFile,
          LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
            HANDLE hFile,
            LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
          HANDLE hFile,
          LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
          HANDLE hFile,
          LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
          HANDLE hFile,
          LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
         HANDLE hFile,
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
         HANDLE hCommDev,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
         HANDLE hFile,
         DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
         HANDLE hFile,
         LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
         HANDLE hFile,
         LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
         HANDLE hFile,
         char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
                HANDLE hFile,
                LPDWORD lpEvtMask,
                LPOVERLAPPED lpOverlapped
    );




__declspec(dllimport)
HANDLE
__stdcall
OpenCommPort(
         ULONG uPortNumber,
         DWORD dwDesiredAccess,
         DWORD dwFlagsAndAttributes
    );
# 2187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
         HANDLE hDevice,
         DWORD dwPositionMethod,
         DWORD dwPartition,
         DWORD dwOffsetLow,
         DWORD dwOffsetHigh,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
          HANDLE hDevice,
          DWORD dwPositionType,
          LPDWORD lpdwPartition,
          LPDWORD lpdwOffsetLow,
          LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
         HANDLE hDevice,
         DWORD dwOperation,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
         HANDLE hDevice,
         DWORD dwEraseType,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
         HANDLE hDevice,
         DWORD dwPartitionMethod,
         DWORD dwCount,
         DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
         HANDLE hDevice,
         DWORD dwTapemarkType,
         DWORD dwTapemarkCount,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
         HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
            HANDLE hDevice,
            DWORD dwOperation,
            LPDWORD lpdwSize,
                                  LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
         LPVOID lpTapeInformation
    );
# 2286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
int
__stdcall
MulDiv(
         int nNumber,
         int nNumerator,
         int nDenominator
    );







typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;



__declspec(dllimport)
DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
    void
    );





__declspec(dllimport)
BOOL
__stdcall
GetSystemRegistryQuota(
              PDWORD pdwQuotaAllowed,
              PDWORD pdwQuotaUsed
    );







__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
          const FILETIME *lpFileTime,
          LPWORD lpFatDate,
          LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
          WORD wFatDate,
          WORD wFatTime,
          LPFILETIME lpFileTime
    );
# 2367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

DWORD
__stdcall
FormatMessageA(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,


             LPSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
__declspec(dllimport)

DWORD
__stdcall
FormatMessageW(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,


             LPWSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
# 2448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
             LPCSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
             LPCWSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
              HANDLE hMailslot,
              LPDWORD lpMaxMessageSize,
              LPDWORD lpNextSize,
              LPDWORD lpMessageCount,
              LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
         HANDLE hMailslot,
         DWORD lReadTimeout
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
         LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
               LPCSTR lpFileName,
               DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
               LPCWSTR lpFileName,
               DWORD dwReserved
    );
# 2548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
          LPCSTR lpFileName,
          LPDWORD lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
          LPCWSTR lpFileName,
          LPDWORD lpStatus
    );
# 2574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
                               PBYTE pbData,
             PVOID pvCallbackContext,
             ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
                                                PBYTE pbData,
             PVOID pvCallbackContext,
             PULONG ulLength
    );
# 2602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
                LPCSTR lpFileName,
                ULONG ulFlags,
             PVOID *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
                LPCWSTR lpFileName,
                ULONG ulFlags,
             PVOID *pvContext
    );






__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
             PFE_EXPORT_FUNC pfExportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
             PFE_IMPORT_FUNC pfImportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
         PVOID pvContext
    );
# 2659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
int
__stdcall
lstrcmpA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );






__declspec(dllimport)
int
__stdcall
lstrcmpiA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );







#pragma warning(push)
#pragma warning(disable: 4995)


__declspec(dllimport)




LPSTR
__stdcall
lstrcpynA(
                             LPSTR lpString1,
         LPCSTR lpString2,
         int iMaxLength
    );
__declspec(dllimport)




LPWSTR
__stdcall
lstrcpynW(
                             LPWSTR lpString1,
         LPCWSTR lpString2,
         int iMaxLength
    );






__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
                                                 LPSTR lpString1,
          LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
                                                 LPWSTR lpString1,
          LPCWSTR lpString2
    );






__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
                                                                                   LPSTR lpString1,
            LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
                                                                                   LPWSTR lpString1,
            LPCWSTR lpString2
    );







#pragma warning(pop)


__declspec(dllimport)
int
__stdcall
lstrlenA(
         LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
         LPCWSTR lpString
    );
# 2802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HFILE
__stdcall
OpenFile(
            LPCSTR lpFileName,
            LPOFSTRUCT lpReOpenBuff,
            UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
         LPCSTR lpPathName,
         int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
         LPCSTR lpPathName,
         int iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
         HFILE hFile,
                                          LPVOID lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
         HFILE hFile,
                             LPCCH lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
         HFILE hFile,
                                          LPVOID lpBuffer,
         long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
         HFILE hFile,
                             LPCCH lpBuffer,
         long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
         HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
         HFILE hFile,
         LONG lOffset,
         int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
                            const void* lpv,
                int iSize,
                LPINT lpiResult
    );
# 2895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
# 2912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
BackupRead(
            HANDLE hFile,
                                                                      LPBYTE lpBuffer,
            DWORD nNumberOfBytesToRead,
            LPDWORD lpNumberOfBytesRead,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
            HANDLE hFile,
            DWORD dwLowBytesToSeek,
            DWORD dwHighBytesToSeek,
            LPDWORD lpdwLowByteSeeked,
            LPDWORD lpdwHighByteSeeked,
            LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
            HANDLE hFile,
                                            LPBYTE lpBuffer,
            DWORD nNumberOfBytesToWrite,
            LPDWORD lpNumberOfBytesWritten,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD dwStreamId ;
        DWORD dwStreamAttributes ;
        LARGE_INTEGER Size ;
        DWORD dwStreamNameSize ;
        WCHAR cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
# 3017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;

typedef STARTUPINFOEXW STARTUPINFOEX;
typedef LPSTARTUPINFOEXW LPSTARTUPINFOEX;
# 3043 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

HANDLE
__stdcall
OpenMutexA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );




__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreA(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
             LPCSTR lpName
    );
# 3076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

HANDLE
__stdcall
OpenSemaphoreA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
# 3097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             BOOL bManualReset,
             LPCSTR lpTimerName
    );




__declspec(dllimport)

HANDLE
__stdcall
OpenWaitableTimerA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpTimerName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreExA(
                LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
                LONG lInitialCount,
                LONG lMaximumCount,
                LPCSTR lpName,
                DWORD dwFlags,
                DWORD dwDesiredAccess
    );




__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerExA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             LPCSTR lpTimerName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );
# 3166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingNumaA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName,
             DWORD nndPreferred
    );







__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
# 3222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

DWORD
__stdcall
GetLogicalDriveStringsA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );
# 3249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

HMODULE
__stdcall
LoadPackagedLibrary (
               LPCWSTR lpwLibFileName,
               DWORD Reserved
    );
# 3302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameA(
         HANDLE hProcess,
         DWORD dwFlags,
                                          LPSTR lpExeName,
            PDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameW(
         HANDLE hProcess,
         DWORD dwFlags,
                                          LPWSTR lpExeName,
            PDWORD lpdwSize
    );
# 3341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeHandleList = 2,

    ProcThreadAttributeGroupAffinity = 3,
    ProcThreadAttributePreferredNode = 4,
    ProcThreadAttributeIdealProcessor = 5,
    ProcThreadAttributeUmsThread = 6,
    ProcThreadAttributeMitigationPolicy = 7,


    ProcThreadAttributeSecurityCapabilities = 9,

    ProcThreadAttributeProtectionLevel = 11,



    ProcThreadAttributeJobList = 13,
    ProcThreadAttributeChildProcessPolicy = 14,
    ProcThreadAttributeAllApplicationPackagesPolicy = 15,
    ProcThreadAttributeWin32kFilter = 16,


    ProcThreadAttributeSafeOpenPromptOriginClaim = 17,


    ProcThreadAttributeDesktopAppPolicy = 18,

} PROC_THREAD_ATTRIBUTE_NUM;
# 3684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
          LPSTARTUPINFOA lpStartupInfo
    );
# 3754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize
    );
# 3780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize,
              PDWORD pdwAttribubutes
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize,
              PDWORD pdwAttribubutes
    );
# 3808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                PVOID pValue,
         DWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                PVOID pValue,
         DWORD nSize
    );
# 3834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                PVOID pValue,
         DWORD nSize,
         DWORD dwAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                PVOID pValue,
         DWORD nSize,
         DWORD dwAttributes
    );
# 3870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetFirmwareType (
            PFIRMWARE_TYPE FirmwareType
    );


__declspec(dllimport)
BOOL
__stdcall
IsNativeVhdBoot (
          PBOOL NativeVhdBoot
    );



__declspec(dllimport)

HRSRC
__stdcall
FindResourceA(
             HMODULE hModule,
             LPCSTR lpName,
             LPCSTR lpType
    );




__declspec(dllimport)

HRSRC
__stdcall
FindResourceExA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             WORD wLanguage
    );




__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
             HMODULE hModule,
             ENUMRESTYPEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
             HMODULE hModule,
             ENUMRESTYPEPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
             HMODULE hModule,
             LPCSTR lpType,
             ENUMRESNAMEPROCA lpEnumFunc,
             LONG_PTR lParam
    );





__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
             HMODULE hModule,
             LPCWSTR lpType,
             LPCWSTR lpName,
             ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
         LPCSTR pFileName,
         BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
         LPCWSTR pFileName,
         BOOL bDeleteExistingResources
    );






__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
         HANDLE hUpdate,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
                             LPVOID lpData,
         DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
         HANDLE hUpdate,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
                             LPVOID lpData,
         DWORD cb
    );






__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
         HANDLE hUpdate,
         BOOL fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
         HANDLE hUpdate,
         BOOL fDiscard
    );
# 4046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExA(
             LPCSTR lpString,
         DWORD Flags
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExW(
             LPCWSTR lpString,
         DWORD Flags
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
         ATOM nAtom,
                                       LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
         ATOM nAtom,
                                       LPWSTR lpBuffer,
         int nSize
    );






__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
         ATOM nAtom,
                                       LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
         ATOM nAtom,
                                       LPWSTR lpBuffer,
         int nSize
    );
# 4188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
         LPCSTR lpAppName,
         LPCSTR lpKeyName,
         INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
         LPCWSTR lpAppName,
         LPCWSTR lpKeyName,
         INT nDefault
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                           LPSTR lpReturnedString,
             DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                           LPWSTR lpReturnedString,
             DWORD nSize
    );
# 4242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString
    );
# 4270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
         LPCSTR lpAppName,
                                           LPSTR lpReturnedString,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
         LPCWSTR lpAppName,
                                           LPWSTR lpReturnedString,
         DWORD nSize
    );
# 4298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
         LPCSTR lpAppName,
         LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
         LPCWSTR lpAppName,
         LPCWSTR lpString
    );
# 4324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             INT nDefault,
             LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             INT nDefault,
             LPCWSTR lpFileName
    );
# 4372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                           LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                           LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
# 4428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );






__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
             LPCSTR lpAppName,
                                           LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
             LPCWSTR lpAppName,
                                           LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
# 4500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
             LPCSTR lpAppName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
             LPCWSTR lpAppName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );
# 4528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
                                           LPSTR lpszReturnBuffer,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
                                           LPWSTR lpszReturnBuffer,
             DWORD nSize,
             LPCWSTR lpFileName
    );
# 4572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                        LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                        LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );
# 4624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                      LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                      LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );
# 4677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
         BOOLEAN Wow64FsEnableRedirection
    );




typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)( LPSTR lpBuffer, UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)( LPWSTR lpBuffer, UINT uSize);
# 4755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryA(
             LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryW(
             LPCWSTR lpPathName
    );






__declspec(dllimport)

DWORD
__stdcall
GetDllDirectoryA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );
__declspec(dllimport)

DWORD
__stdcall
GetDllDirectoryW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );
# 4802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetSearchPathMode (
         DWORD Flags
    );
# 4841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
# 4871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedA(
         LPCSTR lpPathName,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedW(
         LPCWSTR lpPathName,
             HANDLE hTransaction
    );






__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameTransactedA(
                    LPCSTR lpFileName,
                    DWORD nBufferLength,
                                                   LPSTR lpBuffer,
                 LPSTR *lpFilePart,
                    HANDLE hTransaction
    );
__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameTransactedW(
                    LPCWSTR lpFileName,
                    DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
                 LPWSTR *lpFilePart,
                    HANDLE hTransaction
    );
# 4957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
             DWORD dwFlags,
             LPCSTR lpDeviceName,
             LPCSTR lpTargetPath
    );




__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
             LPCSTR lpDeviceName,
                                         LPSTR lpTargetPath,
             DWORD ucchMax
    );
# 4991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedA(
               LPCSTR lpFileName,
               DWORD dwDesiredAccess,
               DWORD dwShareMode,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               DWORD dwCreationDisposition,
               DWORD dwFlagsAndAttributes,
               HANDLE hTemplateFile,
               HANDLE hTransaction,
               PUSHORT pusMiniVersion,
               PVOID lpExtendedParameter
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedW(
               LPCWSTR lpFileName,
               DWORD dwDesiredAccess,
               DWORD dwShareMode,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               DWORD dwCreationDisposition,
               DWORD dwFlagsAndAttributes,
               HANDLE hTemplateFile,
               HANDLE hTransaction,
               PUSHORT pusMiniVersion,
               PVOID lpExtendedParameter
    );
# 5037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HANDLE
__stdcall
ReOpenFile(
         HANDLE hOriginalFile,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
         DWORD dwFlagsAndAttributes
    );
# 5058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedA(
             LPCSTR lpFileName,
             DWORD dwFileAttributes,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedW(
             LPCWSTR lpFileName,
             DWORD dwFileAttributes,
             HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedA(
          LPCSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedW(
          LPCWSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation,
             HANDLE hTransaction
    );






__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedA(
              LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh,
              HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedW(
              LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh,
              HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedA(
             LPCSTR lpFileName,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedW(
             LPCWSTR lpFileName,
             HANDLE hTransaction
    );
# 5180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
              LPCSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
              LPCWSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
# 5218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedA(
               LPCSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags,
               HANDLE hTransaction
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedW(
               LPCWSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags,
               HANDLE hTransaction
    );
# 5259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName,
         BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName,
         BOOL bFailIfExists
    );
# 5311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
             LARGE_INTEGER TotalFileSize,
             LARGE_INTEGER TotalBytesTransferred,
             LARGE_INTEGER StreamSize,
             LARGE_INTEGER StreamBytesTransferred,
             DWORD dwStreamNumber,
             DWORD dwCallbackReason,
             HANDLE hSourceFile,
             HANDLE hDestinationFile,
             LPVOID lpData
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
                LPCSTR lpExistingFileName,
                LPCSTR lpNewFileName,
                LPPROGRESS_ROUTINE lpProgressRoutine,
                LPVOID lpData,

                LPBOOL pbCancel,
                DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
                LPCWSTR lpExistingFileName,
                LPCWSTR lpNewFileName,
                LPPROGRESS_ROUTINE lpProgressRoutine,
                LPVOID lpData,

                LPBOOL pbCancel,
                DWORD dwCopyFlags
    );
# 5363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags,
             HANDLE hTransaction
    );
# 5407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef enum _COPYFILE2_MESSAGE_TYPE {
     COPYFILE2_CALLBACK_NONE = 0,
     COPYFILE2_CALLBACK_CHUNK_STARTED,
     COPYFILE2_CALLBACK_CHUNK_FINISHED,
     COPYFILE2_CALLBACK_STREAM_STARTED,
     COPYFILE2_CALLBACK_STREAM_FINISHED,
     COPYFILE2_CALLBACK_POLL_CONTINUE,
     COPYFILE2_CALLBACK_ERROR,
     COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,

    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;



typedef struct COPYFILE2_MESSAGE {

    COPYFILE2_MESSAGE_TYPE Type;
    DWORD dwPadding;

    union {

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } ChunkStarted;

        struct {
            DWORD dwStreamNumber;
            DWORD dwFlags;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } ChunkFinished;

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } StreamStarted;

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } StreamFinished;

        struct {
            DWORD dwReserved;
        } PollContinue;

        struct {
            COPYFILE2_COPY_PHASE CopyPhase;
            DWORD dwStreamNumber;
            HRESULT hrFailure;
            DWORD dwReserved;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } Error;

    } Info;

} COPYFILE2_MESSAGE;

typedef
COPYFILE2_MESSAGE_ACTION (__stdcall *PCOPYFILE2_PROGRESS_ROUTINE)(
            const COPYFILE2_MESSAGE *pMessage,
            PVOID pvCallbackContext
);

typedef struct COPYFILE2_EXTENDED_PARAMETERS {
  DWORD dwSize;
  DWORD dwCopyFlags;
  BOOL *pfCancel;
  PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine;
  PVOID pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HRESULT
__stdcall
CopyFile2(
            PCWSTR pwszExistingFileName,
            PCWSTR pwszNewFileName,
            COPYFILE2_EXTENDED_PARAMETERS *pExtendedParameters
);
# 5544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName
    );
# 5590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             DWORD dwFlags
    );
# 5619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );
# 5653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags,
             HANDLE hTransaction
    );
# 5712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileA(
               LPCSTR lpReplacedFileName,
               LPCSTR lpReplacementFileName,
               LPCSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileW(
               LPCWSTR lpReplacedFileName,
               LPCWSTR lpReplacementFileName,
               LPCWSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );
# 5752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
# 5787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               HANDLE hTransaction
    );
# 5815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamTransactedW (
               LPCWSTR lpFileName,
               STREAM_INFO_LEVELS InfoLevel,
                                                       LPVOID lpFindStreamData,
               DWORD dwFlags,
               HANDLE hTransaction
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameTransactedW (
             LPCWSTR lpFileName,
             DWORD dwFlags,
             LPDWORD StringLength,
                                PWSTR LinkName,
             HANDLE hTransaction
    );
# 5845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
             LPCSTR lpName,
             DWORD dwOpenMode,
             DWORD dwPipeMode,
             DWORD nMaxInstances,
             DWORD nOutBufferSize,
             DWORD nInBufferSize,
             DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
# 5868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPSTR lpUserName,
              DWORD nMaxUserNameSize
    );




__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
          LPCSTR lpNamedPipeName,
                                        LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );





__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
         LPCSTR lpNamedPipeName,
         DWORD nTimeOut
    );
# 5927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameA(
         HANDLE Pipe,
                                                  LPSTR ClientComputerName,
         ULONG ClientComputerNameLength
    );
# 5946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientProcessId(
         HANDLE Pipe,
          PULONG ClientProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientSessionId(
         HANDLE Pipe,
          PULONG ClientSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerProcessId(
         HANDLE Pipe,
          PULONG ServerProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerSessionId(
         HANDLE Pipe,
          PULONG ServerSessionId
    );
# 5986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
             LPCSTR lpRootPathName,
             LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
             LPCWSTR lpRootPathName,
             LPCWSTR lpVolumeName
    );
# 6015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFileBandwidthReservation(
          HANDLE hFile,
          DWORD nPeriodMilliseconds,
          DWORD nBytesPerPeriod,
          BOOL bDiscardable,
          LPDWORD lpTransferSize,
          LPDWORD lpNumOutstandingRequests
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileBandwidthReservation(
          HANDLE hFile,
          LPDWORD lpPeriodMilliseconds,
          LPDWORD lpBytesPerPeriod,
          LPBOOL pDiscardable,
          LPDWORD lpTransferSize,
          LPDWORD lpNumOutstandingRequests
    );







__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
             HANDLE hEventLog,
             LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
             HANDLE hEventLog,
             LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
         HANDLE hEventLog,
         LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
         HANDLE hEventLog,
         LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
         HANDLE hEventLog,
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
          HANDLE hEventLog,
          PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
          HANDLE hEventLog,
          PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                              LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                              LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                LPCSTR *lpStrings,
                                     LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                LPCWSTR *lpStrings,
                                     LPVOID lpRawData
    );
# 6250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
          HANDLE hEventLog,
          DWORD dwInfoLevel,
                                                      LPVOID lpBuffer,
          DWORD cbBufSize,
          LPDWORD pcbBytesNeeded
    );
# 6274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef ULONG OPERATION_ID;





typedef struct _OPERATION_START_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS;







typedef struct _OPERATION_END_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS;



__declspec(dllimport)
BOOL
__stdcall
OperationStart (
         OPERATION_START_PARAMETERS* OperationStartParams
    );

__declspec(dllimport)
BOOL
__stdcall
OperationEnd (
         OPERATION_END_PARAMETERS* OperationEndParams
    );
# 6322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             DWORD DesiredAccess,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
                                             LPDWORD GrantedAccess,
                                             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             HANDLE ClientToken,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
                                             LPDWORD GrantedAccess,
                                             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );





__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             HANDLE ClientToken,
             DWORD DesiredAccess,
             DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
             BOOL ObjectCreation,
             BOOL AccessGranted,
             LPBOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
         LPCSTR SubsystemName,
         LPCSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );





__declspec(dllimport)
BOOL
__stdcall
AddConditionalAce (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AceFlags,
            UCHAR AceType,
            DWORD AccessMask,
            PSID pSid,
                           PWCHAR ConditionStr,
          DWORD *ReturnLength
    );
# 6517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
         LPCSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );




__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
          LPCSTR lpFileName,
          SECURITY_INFORMATION RequestedInformation,
                                                         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
          LPDWORD lpnLengthNeeded
    );
# 6550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
                HANDLE hDirectory,
                                                           LPVOID lpBuffer,
                DWORD nBufferLength,
                BOOL bWatchSubtree,
                DWORD dwNotifyFilter,
                LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped,
                LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesExW(
                HANDLE hDirectory,
                                                           LPVOID lpBuffer,
                DWORD nBufferLength,
                BOOL bWatchSubtree,
                DWORD dwNotifyFilter,
                LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped,
                LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
                READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass
    );
# 6590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFileExNuma(
             HANDLE hFileMappingObject,
             DWORD dwDesiredAccess,
             DWORD dwFileOffsetHigh,
             DWORD dwFileOffsetLow,
             SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress,
             DWORD nndPreferred
    );



__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
             const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
             const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
             FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
             LPCSTR lpsz,
             UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
             LPCWSTR lpsz,
             UINT_PTR ucchMax
    );
# 6671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidA(
             LPCSTR lpSystemName,
         PSID Sid,
                                                LPSTR Name,
             LPDWORD cchName,
                                                                                LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidW(
             LPCWSTR lpSystemName,
         PSID Sid,
                                                LPWSTR Name,
             LPDWORD cchName,
                                                                                LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameA(
             LPCSTR lpSystemName,
             LPCSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
# 6739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameLocalA(
             LPCSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameLocalW(
             LPCWSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidLocalA(
         PSID Sid,
                                                LPSTR Name,
             LPDWORD cchName,
                                                                                LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidLocalW(
         PSID Sid,
                                                LPWSTR Name,
             LPDWORD cchName,
                                                                                LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
# 6825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
             PLUID lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
             PLUID lpLuid
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeNameA(
             LPCSTR lpSystemName,
             PLUID lpLuid,
                                                LPSTR lpName,
             LPDWORD cchName
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeNameW(
             LPCWSTR lpSystemName,
             PLUID lpLuid,
                                                LPWSTR lpName,
             LPDWORD cchName
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeDisplayNameA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
                                                              LPSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeDisplayNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
                                                              LPWSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );
# 6903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
          LPCSTR lpDef,
          LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
          LPCWSTR lpDef,
          LPDCB lpDCB
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
          LPCSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
          LPCWSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );






__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
             LPCSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
             LPCWSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );






__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
            LPCSTR lpszName,
                                                LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
            LPCWSTR lpszName,
                                                LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
         LPCSTR lpszName,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
         LPCWSTR lpszName,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
# 7023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameA (
                                            LPSTR lpBuffer,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameW (
                                            LPWSTR lpBuffer,
            LPDWORD nSize
    );
# 7054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameA (
            LPCSTR Hostname,
                                            LPSTR ComputerName,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameW (
            LPCWSTR Hostname,
                                            LPWSTR ComputerName,
            LPDWORD nSize
    );
# 7080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
                                                LPSTR lpBuffer,
            LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
                                                LPWSTR lpBuffer,
            LPDWORD pcbBuffer
    );
# 7128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
                LPCSTR lpszUsername,
                LPCSTR lpszDomain,
                LPCSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
             PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
                LPCWSTR lpszUsername,
                LPCWSTR lpszDomain,
                LPCWSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
             PHANDLE phToken
    );






__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                    LPCSTR lpszUsername,
                    LPCSTR lpszDomain,
                    LPCSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                 PHANDLE phToken,
                 PSID *ppLogonSid,
                                                          PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                    LPCWSTR lpszUsername,
                    LPCWSTR lpszDomain,
                    LPCWSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                 PHANDLE phToken,
                 PSID *ppLogonSid,
                                                          PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );
# 7212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
                      BOOL
__stdcall
CreateProcessWithLogonW(
                LPCWSTR lpUsername,
                LPCWSTR lpDomain,
                LPCWSTR lpPassword,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );

__declspec(dllimport)
                      BOOL
__stdcall
CreateProcessWithTokenW(
                HANDLE hToken,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );



__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
         HANDLE TokenHandle
    );







__declspec(dllimport)
BOOL
__stdcall
RegisterWaitForSingleObject(
             PHANDLE phNewWaitObject,
                HANDLE hObject,
                WAITORTIMERCALLBACK Callback,
                PVOID Context,
                ULONG dwMilliseconds,
                ULONG dwFlags
    );

__declspec(dllimport)

BOOL
__stdcall
UnregisterWait(
         HANDLE WaitHandle
    );

__declspec(dllimport)
BOOL
__stdcall
BindIoCompletionCallback (
         HANDLE FileHandle,
         LPOVERLAPPED_COMPLETION_ROUTINE Function,
         ULONG Flags
    );

__declspec(dllimport)
HANDLE
__stdcall
SetTimerQueueTimer(
             HANDLE TimerQueue,
             WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
             DWORD DueTime,
             DWORD Period,
             BOOL PreferIo
    );

__declspec(dllimport)

BOOL
__stdcall
CancelTimerQueueTimer(
             HANDLE TimerQueue,
             HANDLE Timer
    );

__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueue(
         HANDLE TimerQueue
    );
# 7329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__forceinline
void
InitializeThreadpoolEnvironment(
          PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}

__forceinline
void
SetThreadpoolCallbackPool(
            PTP_CALLBACK_ENVIRON pcbe,
            PTP_POOL ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

__forceinline
void
SetThreadpoolCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON pcbe,
             PTP_CLEANUP_GROUP ptpcg,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

__forceinline
void
SetThreadpoolCallbackRunsLong(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}

__forceinline
void
SetThreadpoolCallbackLibrary(
            PTP_CALLBACK_ENVIRON pcbe,
            PVOID mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}



__forceinline
void
SetThreadpoolCallbackPriority(
            PTP_CALLBACK_ENVIRON pcbe,
            TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}



__forceinline
void
DestroyThreadpoolEnvironment(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}
# 7416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__forceinline
void
SetThreadpoolCallbackPersistent(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}
# 7437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreatePrivateNamespaceA(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
             LPVOID lpBoundaryDescriptor,
             LPCSTR lpAliasPrefix
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenPrivateNamespaceA(
             LPVOID lpBoundaryDescriptor,
             LPCSTR lpAliasPrefix
    );
# 7473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)

HANDLE
__stdcall
CreateBoundaryDescriptorA(
         LPCSTR Name,
         ULONG Flags
    );
# 7494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID IntegrityLabel
    );
# 7524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;

typedef HW_PROFILE_INFOW HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOW LPHW_PROFILE_INFO;






__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
          LPHW_PROFILE_INFOA lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
          LPHW_PROFILE_INFOW lpHwProfileInfo
    );







__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
            LPOSVERSIONINFOEXA lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
            LPOSVERSIONINFOEXW lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
# 7592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winerror.h" 1 3
# 28298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winerror.h" 3
constexpr

__forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}
# 7592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timezoneapi.h" 1 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timezoneapi.h" 3
extern "C" {
# 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timezoneapi.h" 3
typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

__declspec(dllimport)

BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
             const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpUniversalTime,
          LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)

BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
             const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpLocalTime,
          LPSYSTEMTIME lpUniversalTime
    );


__declspec(dllimport)

BOOL
__stdcall
FileTimeToSystemTime(
         const FILETIME * lpFileTime,
          LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)

BOOL
__stdcall
SystemTimeToFileTime(
         const SYSTEMTIME * lpSystemTime,
          LPFILETIME lpFileTime
    );


__declspec(dllimport)

DWORD
__stdcall
GetTimeZoneInformation(
          LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );
# 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timezoneapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
         const TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );





__declspec(dllimport)
BOOL
__stdcall
SetDynamicTimeZoneInformation(
         const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );
# 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timezoneapi.h" 3
__declspec(dllimport)

DWORD
__stdcall
GetDynamicTimeZoneInformation(
          PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );
# 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timezoneapi.h" 3
BOOL
__stdcall
GetTimeZoneInformationForYear(
         USHORT wYear,
             PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
          LPTIME_ZONE_INFORMATION ptzi
    );
# 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timezoneapi.h" 3
__declspec(dllimport)

DWORD
__stdcall
EnumDynamicTimeZoneInformation(
         const DWORD dwIndex,
          PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
    );


__declspec(dllimport)

DWORD
__stdcall
GetDynamicTimeZoneInformationEffectiveYears(
         const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
          LPDWORD FirstYear,
          LPDWORD LastYear
    );


__declspec(dllimport)

BOOL
__stdcall
SystemTimeToTzSpecificLocalTimeEx(
             const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpUniversalTime,
          LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)

BOOL
__stdcall
TzSpecificLocalTimeToSystemTimeEx(
             const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpLocalTime,
          LPSYSTEMTIME lpUniversalTime
    );
# 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timezoneapi.h" 3
}
# 7593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 2 3
# 7610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetSystemPowerState(
         BOOL fSuspend,
         BOOL fForce
    );
# 7649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE SystemStatusFlag;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

__declspec(dllimport)
BOOL
__stdcall
GetSystemPowerStatus(
          LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );
# 7678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPagesScatter(
                              PVOID *VirtualAddresses,
         ULONG_PTR NumberOfPages,
                                  PULONG_PTR PageArray
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateJobObjectA(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCSTR lpName
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenJobObjectA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
# 7730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CreateJobSet (
         ULONG NumJob,
                       PJOB_SET_ARRAY UserJobSet,
         ULONG Flags);







__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeA(
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );




__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeA(
            HANDLE hFindVolume,
                                  LPSTR lpszVolumeName,
            DWORD cchBufferLength
    );
# 7773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointA(
         LPCSTR lpszRootPathName,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointW(
         LPCWSTR lpszRootPathName,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointA(
         HANDLE hFindVolumeMountPoint,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointW(
         HANDLE hFindVolumeMountPoint,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeMountPointClose(
         HANDLE hFindVolumeMountPoint
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
         LPCSTR lpszVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
         LPCWSTR lpszVolumeName
    );
# 7850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint
    );
# 7870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
);

__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameA(
         LPCSTR lpszFileName,
                                  LPSTR lpszVolumePathName,
         DWORD cchBufferLength
    );
# 7901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
          LPCSTR lpszVolumeName,
                                                                                          LPCH lpszVolumePathNames,
          DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
# 7928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;

typedef ACTCTXW ACTCTX;
typedef PACTCTXW PACTCTX;





typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;

typedef PCACTCTXW PCACTCTX;






__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxA(
         PCACTCTXA pActCtx
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxW(
         PCACTCTXW pActCtx
    );






__declspec(dllimport)
void
__stdcall
AddRefActCtx(
            HANDLE hActCtx
    );


__declspec(dllimport)
void
__stdcall
ReleaseActCtx(
            HANDLE hActCtx
    );

__declspec(dllimport)
BOOL
__stdcall
ZombifyActCtx(
            HANDLE hActCtx
    );



__declspec(dllimport)
BOOL
__stdcall
ActivateActCtx(
                HANDLE hActCtx,
            ULONG_PTR *lpCookie
    );





__declspec(dllimport)
BOOL
__stdcall
DeactivateActCtx(
         DWORD dwFlags,
         ULONG_PTR ulCookie
    );

__declspec(dllimport)
BOOL
__stdcall
GetCurrentActCtx(
             HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;
# 8084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringA(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );

__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringW(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCWSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );






__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionGuid(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               const GUID *lpGuidToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
# 8174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxW(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                               PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );

typedef BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                               PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );
# 8208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );





__declspec(dllimport)
DWORD
__stdcall
WTSGetServiceSessionId(
    void
    );

__declspec(dllimport)
BOOLEAN
__stdcall
WTSIsServerContainer(
    void
    );





__declspec(dllimport)
WORD
__stdcall
GetActiveProcessorGroupCount(
    void
    );

__declspec(dllimport)
WORD
__stdcall
GetMaximumProcessorGroupCount(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetActiveProcessorCount(
         WORD GroupNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetMaximumProcessorCount(
         WORD GroupNumber
    );







__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
          UCHAR Processor,
          PUCHAR NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeNumberFromHandle(
          HANDLE hFile,
          PUSHORT NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNodeEx(
          PPROCESSOR_NUMBER Processor,
          PUSHORT NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
          UCHAR Node,
          PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
          UCHAR Node,
          PULONGLONG AvailableBytes
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
          USHORT Node,
          PULONGLONG AvailableBytes
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNode(
          ULONG ProximityId,
          PUCHAR NodeNumber
    );
# 8352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
# 8390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
          APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
              PVOID pvParameter,
         DWORD dwPingInterval,
         DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRestart(
             PCWSTR pwzCommandline,
         DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRestart(void);
# 8428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRecoveryCallback(
          HANDLE hProcess,
          APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
                                  PVOID* ppvParameter,
              PDWORD pdwPingInterval,
              PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRestartSettings(
         HANDLE hProcess,
                                PWSTR pwzCommandline,
            PDWORD pcchSize,
              PDWORD pdwFlags
    );
# 8459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
HRESULT
__stdcall
ApplicationRecoveryInProgress(
          PBOOL pbCancelled
    );

__declspec(dllimport)
void
__stdcall
ApplicationRecoveryFinished(
         BOOL bSuccess
    );
# 8483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;
# 8513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _FILE_RENAME_INFO {

    union {
        BOOLEAN ReplaceIfExists;
        DWORD Flags;
    } ;



    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileW;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;
# 8568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _FILE_DISPOSITION_INFO_EX {
    DWORD Flags;
} FILE_DISPOSITION_INFO_EX, *PFILE_DISPOSITION_INFO_EX;


typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;





typedef struct _FILE_ALIGNMENT_INFO {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO;
# 8644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _FILE_STORAGE_INFO {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO;




typedef struct _FILE_ID_INFO {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFO, *PFILE_ID_INFO;




typedef struct _FILE_ID_EXTD_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO;
# 8718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
typedef struct _FILE_REMOTE_PROTOCOL_INFO
{

    USHORT StructureVersion;
    USHORT StructureSize;

    ULONG Protocol;


    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;


    ULONG Flags;

    struct {
        ULONG Reserved[8];
    } GenericReserved;
# 8749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
    union {

        struct {

            struct {
                ULONG Capabilities;
            } Server;

            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
            } Share;

        } Smb2;

        ULONG Reserved[16];

    } ProtocolSpecific;



} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandleEx(
          HANDLE hFile,
          FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
                                     LPVOID lpFileInformation,
          DWORD dwBufferSize
);







typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      ExtendedFileIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;
    FILE_ID_TYPE Type;
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;

        FILE_ID_128 ExtendedFileId;

    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

__declspec(dllimport)
HANDLE
__stdcall
OpenFileById (
             HANDLE hVolumeHint,
             LPFILE_ID_DESCRIPTOR lpFileId,
             DWORD dwDesiredAccess,
             DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             DWORD dwFlagsAndAttributes
    );
# 8848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkA (
         LPCSTR lpSymlinkFileName,
         LPCSTR lpTargetFileName,
         DWORD dwFlags
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkW (
         LPCWSTR lpSymlinkFileName,
         LPCWSTR lpTargetFileName,
         DWORD dwFlags
    );
# 8874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxSettingsW(
                  DWORD dwFlags,
                  HANDLE hActCtx,
                  PCWSTR settingsNameSpace,
                  PCWSTR settingName,
                                                               PWSTR pvBuffer,
              SIZE_T dwBuffer,
              SIZE_T *pdwWrittenOrRequired
    );
# 8897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
             LPCSTR lpSymlinkFileName,
             LPCSTR lpTargetFileName,
             DWORD dwFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
             LPCWSTR lpSymlinkFileName,
             LPCWSTR lpTargetFileName,
             DWORD dwFlags,
             HANDLE hTransaction
    );
# 8925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
ReplacePartitionUnit (
         PWSTR TargetPartition,
         PWSTR SparePartition,
         ULONG Flags
    );






__declspec(dllimport)
BOOL
__stdcall
AddSecureMemoryCacheCallback(
                    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
                    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );
# 8964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
CopyContext(
            PCONTEXT Destination,
         DWORD ContextFlags,
         PCONTEXT Source
    );
# 8980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
InitializeContext(
                                           PVOID Buffer,
         DWORD ContextFlags,
          PCONTEXT* Context,
            PDWORD ContextLength
    );
# 8997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD64
__stdcall
GetEnabledXStateFeatures(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetXStateFeaturesMask(
         PCONTEXT Context,
          PDWORD64 FeatureMask
    );


__declspec(dllimport)
PVOID
__stdcall
LocateXStateFeature(
         PCONTEXT Context,
         DWORD FeatureId,
              PDWORD Length
    );
# 9030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetXStateFeaturesMask(
            PCONTEXT Context,
         DWORD64 FeatureMask
    );
# 9050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
__declspec(dllimport)
DWORD
__stdcall
EnableThreadProfiling(
         HANDLE ThreadHandle,
         DWORD Flags,
         DWORD64 HardwareCounters,
          HANDLE *PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
DisableThreadProfiling(
         HANDLE PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
QueryThreadProfiling(
         HANDLE ThreadHandle,
          PBOOLEAN Enabled
    );

__declspec(dllimport)
DWORD
__stdcall
ReadThreadProfilingData(
         HANDLE PerformanceDataHandle,
         DWORD Flags,
          PPERFORMANCE_DATA PerformanceData
    );
# 9098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
}




#pragma warning(pop)
# 9160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winbase.h" 3
extern "C++" {

__forceinline
unsigned
_InterlockedIncrement(
                                  unsigned volatile *Addend
    )
{
    return (unsigned) _InterlockedIncrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedIncrement(
                                  unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedIncrement((volatile long*) Addend);
}




__forceinline
unsigned __int64
_InterlockedIncrement(
                                  unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) (_InlineInterlockedIncrement64)((volatile __int64*) Addend);
}



__forceinline
unsigned
_InterlockedDecrement(
                                  unsigned volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedDecrement(
                                  unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}




__forceinline
unsigned __int64
_InterlockedDecrement(
                                  unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) (_InlineInterlockedDecrement64)((volatile __int64*) Addend);
}





__forceinline
unsigned
_InterlockedExchange(
                                  unsigned volatile *Target,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchange((volatile long*) Target, (long) Value);
}

__forceinline
unsigned long
_InterlockedExchange(
                                  unsigned long volatile *Target,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchange((volatile long*) Target, (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchange(
                                  unsigned __int64 volatile *Target,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedExchange64((volatile __int64*) Target, (__int64) Value);
}



__forceinline
unsigned
_InterlockedExchangeAdd(
                                  unsigned volatile *Addend,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned
InterlockedExchangeSubtract(
                                  unsigned volatile *Addend,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, - (long) Value);
}

__forceinline
unsigned long
_InterlockedExchangeAdd(
                                  unsigned long volatile *Addend,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeSubtract(
                                  unsigned long volatile *Addend,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, - (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchangeAdd(
                                  unsigned __int64 volatile *Addend,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedExchangeAdd64((volatile __int64*) Addend, (__int64) Value);
}

__forceinline
unsigned __int64
InterlockedExchangeSubtract(
                                  unsigned __int64 volatile *Addend,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedExchangeAdd64((volatile __int64*) Addend, - (__int64) Value);
}



__forceinline
unsigned
_InterlockedCompareExchange(
                                  unsigned volatile *Destination,
         unsigned Exchange,
         unsigned Comperand
    )
{
    return (unsigned) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}

__forceinline
unsigned long
_InterlockedCompareExchange(
                                  unsigned long volatile *Destination,
         unsigned long Exchange,
         unsigned long Comperand
    )
{
    return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}



__forceinline
unsigned __int64
_InterlockedCompareExchange(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Exchange,
         unsigned __int64 Comperand
    )
{
    return (unsigned __int64) _InterlockedCompareExchange64((volatile __int64*) Destination, (__int64) Exchange, (__int64) Comperand);
}

__forceinline
unsigned __int64
_InterlockedAnd(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedAnd64((volatile __int64*) Destination, (__int64) Value);
}

__forceinline
unsigned __int64
_InterlockedOr(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedOr64((volatile __int64*) Destination, (__int64) Value);
}

__forceinline
unsigned __int64
_InterlockedXor(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedXor64((volatile __int64*) Destination, (__int64) Value);
}





}
# 172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 1 3
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
#pragma warning(push)
#pragma warning(disable: 4201)



#pragma warning(disable: 4820)
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
extern "C" {
# 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
# 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _PSINJECTDATA {

    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;



} PSINJECTDATA, *PPSINJECTDATA;
# 513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
# 590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagXFORM
  {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM, *PXFORM, *LPXFORM;


typedef struct tagBITMAP
  {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3





typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE;





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3





typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD;







typedef RGBQUAD * LPRGBQUAD;
# 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef LONG LCSCSTYPE;



typedef LONG LCSGAMUTMATCH;
# 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef long FXPT16DOT16, *LPFXPT16DOT16;
typedef long FXPT2DOT30, *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;







typedef CIEXYZ *LPCIEXYZ;







typedef struct tagICEXYZTRIPLE
{
        CIEXYZ ciexyzRed;
        CIEXYZ ciexyzGreen;
        CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;







typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;
# 757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;

typedef LOGCOLORSPACEW LOGCOLORSPACE;
typedef LPLOGCOLORSPACEW LPLOGCOLORSPACE;
# 798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize;
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;







typedef struct tagBITMAPINFOHEADER{
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;
# 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct {
        DWORD bV4Size;
        LONG bV4Width;
        LONG bV4Height;
        WORD bV4Planes;
        WORD bV4BitCount;
        DWORD bV4V4Compression;
        DWORD bV4SizeImage;
        LONG bV4XPelsPerMeter;
        LONG bV4YPelsPerMeter;
        DWORD bV4ClrUsed;
        DWORD bV4ClrImportant;
        DWORD bV4RedMask;
        DWORD bV4GreenMask;
        DWORD bV4BlueMask;
        DWORD bV4AlphaMask;
        DWORD bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD bV4GammaRed;
        DWORD bV4GammaGreen;
        DWORD bV4GammaBlue;
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
# 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct {
        DWORD bV5Size;
        LONG bV5Width;
        LONG bV5Height;
        WORD bV5Planes;
        WORD bV5BitCount;
        DWORD bV5Compression;
        DWORD bV5SizeImage;
        LONG bV5XPelsPerMeter;
        LONG bV5YPelsPerMeter;
        DWORD bV5ClrUsed;
        DWORD bV5ClrImportant;
        DWORD bV5RedMask;
        DWORD bV5GreenMask;
        DWORD bV5BlueMask;
        DWORD bV5AlphaMask;
        DWORD bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD bV5GammaRed;
        DWORD bV5GammaGreen;
        DWORD bV5GammaBlue;
        DWORD bV5Intent;
        DWORD bV5ProfileData;
        DWORD bV5ProfileSize;
        DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;
# 913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;







typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack2.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack2.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3





typedef struct tagBITMAPFILEHEADER {
        WORD bfType;
        DWORD bfSize;
        WORD bfReserved1;
        WORD bfReserved2;
        DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3
# 958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;







typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;
# 990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
# 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagHANDLETABLE
  {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;







typedef struct tagMETARECORD *PMETARECORD;







typedef struct tagMETARECORD *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT, *LPMETAFILEPICT;





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack2.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack2.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3





typedef struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETAHEADER *LPMETAHEADER;





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3






typedef struct tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;

    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;

    WORD sReserved;
    DWORD nDescription;

    DWORD offDescription;

    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;

    DWORD cbPixelFormat;

    DWORD offPixelFormat;

    DWORD bOpenGL;



    SIZEL szlMicrometers;


} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
# 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
    typedef WCHAR BCHAR;
# 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3





typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;

typedef TEXTMETRICW TEXTMETRIC;
typedef PTEXTMETRICW PTEXTMETRIC;
typedef NPTEXTMETRICW NPTEXTMETRIC;
typedef LPTEXTMETRICW LPTEXTMETRIC;
# 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3
# 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3





typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;

typedef NEWTEXTMETRICW NEWTEXTMETRIC;
typedef PNEWTEXTMETRICW PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICW NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICW LPNEWTEXTMETRIC;
# 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 2 3







typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXW;

typedef NEWTEXTMETRICEXW NEWTEXTMETRICEX;
# 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagPELARRAY
  {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY;
# 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagLOGBRUSH
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32;







typedef LOGBRUSH PATTERN;
typedef PATTERN *PPATTERN;
typedef PATTERN *NPPATTERN;
typedef PATTERN *LPPATTERN;
# 1387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagLOGPEN
  {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;







typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;







typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;





typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
                                    PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;






typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;

typedef LOGFONTW LOGFONT;
typedef PLOGFONTW PLOGFONT;
typedef NPLOGFONTW NPLOGFONT;
typedef LPLOGFONTW LPLOGFONT;
# 1505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;

typedef ENUMLOGFONTW ENUMLOGFONT;
typedef LPENUMLOGFONTW LPENUMLOGFONT;






typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;

typedef ENUMLOGFONTEXW ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXW LPENUMLOGFONTEX;
# 1683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, * LPPANOSE;
# 1809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW;

typedef EXTLOGFONTW EXTLOGFONT;
typedef PEXTLOGFONTW PEXTLOGFONT;
typedef NPEXTLOGFONTW NPEXTLOGFONT;
typedef LPEXTLOGFONTW LPEXTLOGFONT;
# 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      } ;

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      } ;
    } ;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    } ;
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      } ;

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      } ;
    } ;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    } ;
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;

typedef DEVMODEW DEVMODE;
typedef PDEVMODEW PDEVMODE;
typedef NPDEVMODEW NPDEVMODE;
typedef LPDEVMODEW LPDEVMODE;
# 2730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;

typedef DISPLAY_DEVICEW DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEW PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEW LPDISPLAY_DEVICE;
# 2796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32 Numerator;
    UINT32 Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64 pixelRate;
    DISPLAYCONFIG_RATIONAL hSyncFreq;
    DISPLAYCONFIG_RATIONAL vSyncFreq;
    DISPLAYCONFIG_2DREGION activeSize;
    DISPLAYCONFIG_2DREGION totalSize;

    union
    {
        struct
        {
            UINT32 videoStandard : 16;


            UINT32 vSyncFreqDivider : 6;

            UINT32 reserved : 10;
        } AdditionalSignalInfo;

        UINT32 videoStandard;
    } ;


    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO
{
    POINTL PathSourceSize;
    RECTL DesktopImageRegion;
    RECTL DesktopImageClip;
} DISPLAYCONFIG_DESKTOP_IMAGE_INFO;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    UINT32 id;
    LUID adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
        DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo;
    } ;
} DISPLAYCONFIG_MODE_INFO;







typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    UINT32 id;
    union
    {
        UINT32 modeInfoIdx;
        struct
        {
            UINT32 cloneGroupId : 16;
            UINT32 sourceModeInfoIdx : 16;
        } ;
    } ;

    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;







typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    UINT32 id;
    union
    {
        UINT32 modeInfoIdx;
        struct
        {
            UINT32 desktopModeInfoIdx : 16;
            UINT32 targetModeInfoIdx : 16;
        } ;
    } ;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;
# 3000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    UINT32 flags;
} DISPLAYCONFIG_PATH_INFO;
# 3016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef enum DISPLAYCONFIG_TOPOLOGY_ID
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;


typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6,
      DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7,
      DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9,
      DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;
# 3048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    UINT32 size;
    LUID adapterId;
    UINT32 id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;







typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32 friendlyNameFromEdid : 1;
            UINT32 friendlyNameForced : 1;
            UINT32 edidIdsValid : 1;
            UINT32 reserved : 29;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    UINT16 edidManufactureId;
    UINT16 edidProductCodeId;
    UINT32 connectorInstance;
    WCHAR monitorFriendlyDeviceName[64];
    WCHAR monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_TARGET_MODE targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_TARGET_BASE_TYPE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
} DISPLAYCONFIG_TARGET_BASE_TYPE;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn : 1;
            UINT32 reserved : 31;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;

typedef struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            UINT32 disableMonitorVirtualResolution : 1;
            UINT32 reserved : 31;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;

typedef enum _DISPLAYCONFIG_COLOR_ENCODING
{
    DISPLAYCONFIG_COLOR_ENCODING_RGB = 0,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3,
    DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4,
    DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_COLOR_ENCODING;

typedef struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
          UINT32 advancedColorSupported :1;
          UINT32 advancedColorEnabled :1;
          UINT32 wideColorEnforced :1;
          UINT32 reserved :29;
        } ;

        UINT32 value;
    } ;

    DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
    UINT32 bitsPerColorChannel;
} DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;

typedef struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
          UINT32 enableAdvancedColor :1;
          UINT32 reserved :31;
        } ;

        UINT32 value;
    };
} DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
# 3233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;
# 3257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
} ABC, *PABC, *NPABC, *LPABC;

typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT;
# 3281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;

typedef OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICW POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICW NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICW LPOUTLINETEXTMETRIC;
# 3373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW;

typedef POLYTEXTW POLYTEXT;
typedef PPOLYTEXTW PPOLYTEXT;
typedef NPPOLYTEXTW NPPOLYTEXT;
typedef LPPOLYTEXTW LPPOLYTEXT;
# 3411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _FIXED {

    WORD fract;
    short value;




} FIXED;


typedef struct _MAT2 {
     FIXED eM11;
     FIXED eM12;
     FIXED eM21;
     FIXED eM22;
} MAT2, *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;
# 3469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;
# 3539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagGCP_RESULTSA
    {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;

typedef GCP_RESULTSW GCP_RESULTS;
typedef LPGCP_RESULTSW LPGCP_RESULTS;
# 3578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;
# 3595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;
# 3667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
# 3684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;

typedef FONTENUMPROCW FONTENUMPROC;




typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);
# 3715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport) int __stdcall AddFontResourceA( LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW( LPCWSTR);






 __declspec(dllimport) BOOL __stdcall AnimatePalette( HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY * ppe);
 __declspec(dllimport) BOOL __stdcall Arc( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
 __declspec(dllimport) BOOL __stdcall BitBlt( HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
__declspec(dllimport) BOOL __stdcall CancelDC( HDC hdc);
 __declspec(dllimport) BOOL __stdcall Chord( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
__declspec(dllimport) int __stdcall ChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE __stdcall CloseMetaFile( HDC hdc);
__declspec(dllimport) int __stdcall CombineRgn( HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA( HMETAFILE, LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW( HMETAFILE, LPCWSTR);





 __declspec(dllimport) HBITMAP __stdcall CreateBitmap( int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void *lpBits);
 __declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect( const BITMAP *pbm);
 __declspec(dllimport) HBRUSH __stdcall CreateBrushIndirect( const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap( HDC hdc, int cx, int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap( HDC hdc, int cx, int cy);
__declspec(dllimport) HDC __stdcall CreateCompatibleDC( HDC hdc);
__declspec(dllimport) HDC __stdcall CreateDCA( LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
__declspec(dllimport) HDC __stdcall CreateDCW( LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap( HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const void *pjBits, const BITMAPINFO *pbmi, UINT iUsage);
__declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrush( HGLOBAL h, UINT iUsage);
 __declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrushPt( const void *lpPackedDIB, UINT iUsage);
__declspec(dllimport) HRGN __stdcall CreateEllipticRgn( int x1, int y1, int x2, int y2);
__declspec(dllimport) HRGN __stdcall CreateEllipticRgnIndirect( const RECT *lprect);
 __declspec(dllimport) HFONT __stdcall CreateFontIndirectA( const LOGFONTA *lplf);
 __declspec(dllimport) HFONT __stdcall CreateFontIndirectW( const LOGFONTW *lplf);





__declspec(dllimport) HFONT __stdcall CreateFontA( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
__declspec(dllimport) HFONT __stdcall CreateFontW( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);






__declspec(dllimport) HBRUSH __stdcall CreateHatchBrush( int iHatch, COLORREF color);
__declspec(dllimport) HDC __stdcall CreateICA( LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
__declspec(dllimport) HDC __stdcall CreateICW( LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





__declspec(dllimport) HDC __stdcall CreateMetaFileA( LPCSTR pszFile);
__declspec(dllimport) HDC __stdcall CreateMetaFileW( LPCWSTR pszFile);





 __declspec(dllimport) HPALETTE __stdcall CreatePalette( const LOGPALETTE * plpal);
__declspec(dllimport) HPEN __stdcall CreatePen( int iStyle, int cWidth, COLORREF color);
 __declspec(dllimport) HPEN __stdcall CreatePenIndirect( const LOGPEN *plpen);
__declspec(dllimport) HRGN __stdcall CreatePolyPolygonRgn( const POINT *pptl,
                                                                  const INT *pc,
                                                     int cPoly,
                                                     int iMode);
 __declspec(dllimport) HBRUSH __stdcall CreatePatternBrush( HBITMAP hbm);
__declspec(dllimport) HRGN __stdcall CreateRectRgn( int x1, int y1, int x2, int y2);
__declspec(dllimport) HRGN __stdcall CreateRectRgnIndirect( const RECT *lprect);
__declspec(dllimport) HRGN __stdcall CreateRoundRectRgn( int x1, int y1, int x2, int y2, int w, int h);
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceA( DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceW( DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);





__declspec(dllimport) HBRUSH __stdcall CreateSolidBrush( COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC( HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile( HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall DeleteObject( HGDIOBJ ho);
__declspec(dllimport) int __stdcall DescribePixelFormat( HDC hdc,
                                                 int iPixelFormat,
                                                 UINT nBytes,
                                                                           LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
# 3909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
                        LPCSTR pDevice,
                        LPCSTR pPort,
                        WORD fwCapability,
                                         LPSTR pOutput,
                        const DEVMODEA *pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
                        LPCWSTR pDevice,
                        LPCWSTR pPort,
                        WORD fwCapability,
                                         LPWSTR pOutput,
                        const DEVMODEW *pDevMode
    );






__declspec(dllimport) int __stdcall DrawEscape( HDC hdc,
                                         int iEscape,
                                         int cjIn,
                                                               LPCSTR lpIn);

 __declspec(dllimport) BOOL __stdcall Ellipse( HDC hdc, int left, int top, int right, int bottom);


__declspec(dllimport) int __stdcall EnumFontFamiliesExA( HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
__declspec(dllimport) int __stdcall EnumFontFamiliesExW( HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);







__declspec(dllimport) int __stdcall EnumFontFamiliesA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
__declspec(dllimport) int __stdcall EnumFontFamiliesW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);





__declspec(dllimport) int __stdcall EnumFontsA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
__declspec(dllimport) int __stdcall EnumFontsW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);







__declspec(dllimport) int __stdcall EnumObjects( HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);





__declspec(dllimport) BOOL __stdcall EqualRgn( HRGN hrgn1, HRGN hrgn2);
 __declspec(dllimport) int __stdcall Escape( HDC hdc,
                                     int iEscape,
                                     int cjIn,
                                                           LPCSTR pvIn,
                                          LPVOID pvOut);
__declspec(dllimport) int __stdcall ExtEscape( HDC hdc,
                                         int iEscape,
                                         int cjInput,
                                                                  LPCSTR lpInData,
                                         int cjOutput,
                                                                     LPSTR lpOutData);
 __declspec(dllimport) int __stdcall ExcludeClipRect( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) HRGN __stdcall ExtCreateRegion( const XFORM * lpx, DWORD nCount, const RGNDATA * lpData);
 __declspec(dllimport) BOOL __stdcall ExtFloodFill( HDC hdc, int x, int y, COLORREF color, UINT type);
 __declspec(dllimport) BOOL __stdcall FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr);
 __declspec(dllimport) BOOL __stdcall FloodFill( HDC hdc, int x, int y, COLORREF color);
 __declspec(dllimport) BOOL __stdcall FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
__declspec(dllimport) int __stdcall GetROP2( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor( HDC hdc);


__declspec(dllimport) COLORREF __stdcall GetDCBrushColor( HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetDCPenColor( HDC hdc);


__declspec(dllimport)
int
__stdcall
GetBkMode(
         HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
         HBITMAP hbit,
         LONG cb,
                           LPVOID lpvBits
    );

__declspec(dllimport) BOOL __stdcall GetBitmapDimensionEx( HBITMAP hbit, LPSIZE lpsize);
__declspec(dllimport) UINT __stdcall GetBoundsRect( HDC hdc, LPRECT lprect, UINT flags);

__declspec(dllimport) BOOL __stdcall GetBrushOrgEx( HDC hdc, LPPOINT lppt);

__declspec(dllimport) BOOL __stdcall GetCharWidthA( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidthW( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





__declspec(dllimport) BOOL __stdcall GetCharWidth32A( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidth32W( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





__declspec(dllimport) BOOL __stdcall GetCharWidthFloatA( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidthFloatW( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);






__declspec(dllimport) BOOL __stdcall GetCharABCWidthsA( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsW( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);






__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatA( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatW( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);





__declspec(dllimport) int __stdcall GetClipBox( HDC hdc, LPRECT lprect);
__declspec(dllimport) int __stdcall GetClipRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) int __stdcall GetMetaRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject( HDC hdc, UINT type);
__declspec(dllimport) BOOL __stdcall GetCurrentPositionEx( HDC hdc, LPPOINT lppt);
__declspec(dllimport) int __stdcall GetDeviceCaps( HDC hdc, int index);
__declspec(dllimport) int __stdcall GetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines,
              LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);


__declspec(dllimport) DWORD __stdcall GetFontData ( HDC hdc,
                                             DWORD dwTable,
                                             DWORD dwOffset,
                                                                                    PVOID pvBuffer,
                                             DWORD cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                             LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                             LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );






__declspec(dllimport) int __stdcall GetGraphicsMode( HDC hdc);
__declspec(dllimport) int __stdcall GetMapMode( HDC hdc);
__declspec(dllimport) UINT __stdcall GetMetaFileBitsEx( HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileA( LPCSTR lpName);
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileW( LPCWSTR lpName);





__declspec(dllimport) COLORREF __stdcall GetNearestColor( HDC hdc, COLORREF color);
__declspec(dllimport) UINT __stdcall GetNearestPaletteIndex( HPALETTE h, COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType( HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA( HDC hdc,
                                                     UINT cjCopy,
                                                                               LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW( HDC hdc,
                                                     UINT cjCopy,
                                                                               LPOUTLINETEXTMETRICW potm);
# 4135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport) UINT __stdcall GetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                                 LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel( HDC hdc, int x, int y);
__declspec(dllimport) int __stdcall GetPixelFormat( HDC hdc);
__declspec(dllimport) int __stdcall GetPolyFillMode( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetRasterizerCaps( LPRASTERIZER_STATUS lpraststat,
                                                 UINT cjBytes);

__declspec(dllimport) int __stdcall GetRandomRgn ( HDC hdc, HRGN hrgn, INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData( HRGN hrgn,
                                             DWORD nCount,
                                                                                  LPRGNDATA lpRgnData);
__declspec(dllimport) int __stdcall GetRgnBox( HRGN hrgn, LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject( int i);
__declspec(dllimport) int __stdcall GetStretchBltMode( HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
         HDC hdc,
         UINT iStart,
         UINT cEntries,
                               LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT __stdcall GetSystemPaletteUse( HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharacterExtra( HDC hdc);
__declspec(dllimport) UINT __stdcall GetTextAlign( HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor( HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
         HDC hdc,
                  LPCSTR lpString,
         int c,
          LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
         HDC hdc,
                  LPCWSTR lpString,
         int c,
          LPSIZE lpsz
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
         HDC hdc,
                  LPCSTR lpString,
         int c,
          LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
         HDC hdc,
                  LPCWSTR lpString,
         int c,
          LPSIZE psizl
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
         HDC hdc,
                          LPCSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                             LPINT lpnDx,
          LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
         HDC hdc,
                          LPCWSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                             LPINT lpnDx,
          LPSIZE lpSize
    );







__declspec(dllimport) int __stdcall GetTextCharset( HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo( HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo( DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo( HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA( HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW( HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
# 4267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;
# 4291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges( HDC hdc, LPGLYPHSET lpgs);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA( HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW( HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);





__declspec(dllimport) BOOL __stdcall GetTextExtentPointI( HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
__declspec(dllimport) BOOL __stdcall GetTextExtentExPointI ( HDC hdc,
                                                                       LPWORD lpwszString,
                                                     int cwchString,
                                                     int nMaxExtent,
                                                          LPINT lpnFit,
                                                                                         LPINT lpnDx,
                                                      LPSIZE lpSize
                                                );

__declspec(dllimport) BOOL __stdcall GetCharWidthI( HDC hdc,
                                             UINT giFirst,
                                             UINT cgi,
                                                            LPWORD pgi,
                                                          LPINT piWidths
                                        );

__declspec(dllimport) BOOL __stdcall GetCharABCWidthsI( HDC hdc,
                                                 UINT giFirst,
                                                 UINT cgi,
                                                                LPWORD pgi,
                                                              LPABC pabc
                                        );
# 4331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;

__declspec(dllimport) int __stdcall AddFontResourceExA( LPCSTR name, DWORD fl, PVOID res);
__declspec(dllimport) int __stdcall AddFontResourceExW( LPCWSTR name, DWORD fl, PVOID res);





__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA( LPCSTR name, DWORD fl, PVOID pdv);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW( LPCWSTR name, DWORD fl, PVOID pdv);





__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx( PVOID pFileView,
                                                     DWORD cjSize,
                                                           PVOID pvResrved,
                                                     DWORD* pNumFonts);

__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx( HANDLE h);
# 4367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW;

typedef AXISINFOW AXISINFO;
typedef PAXISINFOW PAXISINFO;
typedef LPAXISINFOW LPAXISINFO;






typedef struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW;

typedef AXESLISTW AXESLIST;
typedef PAXESLISTW PAXESLIST;
typedef LPAXESLISTW LPAXESLIST;
# 4415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;

typedef ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;






__declspec(dllimport) HFONT __stdcall CreateFontIndirectExA( const ENUMLOGFONTEXDVA *);
__declspec(dllimport) HFONT __stdcall CreateFontIndirectExW( const ENUMLOGFONTEXDVW *);







typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW;

typedef ENUMTEXTMETRICW ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICW PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICW LPENUMTEXTMETRIC;
# 4473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport) BOOL __stdcall GetViewportExtEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) BOOL __stdcall GetViewportOrgEx( HDC hdc, LPPOINT lppoint);
__declspec(dllimport) BOOL __stdcall GetWindowExtEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) BOOL __stdcall GetWindowOrgEx( HDC hdc, LPPOINT lppoint);

 __declspec(dllimport) int __stdcall IntersectClipRect( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) BOOL __stdcall InvertRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA( int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
 __declspec(dllimport) BOOL __stdcall LineTo( HDC hdc, int x, int y);
__declspec(dllimport) BOOL __stdcall MaskBlt( HDC hdcDest, int xDest, int yDest, int width, int height,
                   HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt( HDC hdcDest, const POINT * lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width,
                          int height, HBITMAP hbmMask, int xMask, int yMask);

 __declspec(dllimport) int __stdcall OffsetClipRgn( HDC hdc, int x, int y);
__declspec(dllimport) int __stdcall OffsetRgn( HRGN hrgn, int x, int y);
 __declspec(dllimport) BOOL __stdcall PatBlt( HDC hdc, int x, int y, int w, int h, DWORD rop);
 __declspec(dllimport) BOOL __stdcall Pie( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile( HDC hdc, HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall PaintRgn( HDC hdc, HRGN hrgn);
 __declspec(dllimport) BOOL __stdcall PolyPolygon( HDC hdc, const POINT *apt, const INT *asz, int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion( HRGN hrgn, int x, int y);
__declspec(dllimport) BOOL __stdcall PtVisible( HDC hdc, int x, int y);
__declspec(dllimport) BOOL __stdcall RectInRegion( HRGN hrgn, const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible( HDC hdc, const RECT * lprect);
 __declspec(dllimport) BOOL __stdcall Rectangle( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) BOOL __stdcall RestoreDC( HDC hdc, int nSavedDC);
 __declspec(dllimport) HDC __stdcall ResetDCA( HDC hdc, const DEVMODEA * lpdm);
 __declspec(dllimport) HDC __stdcall ResetDCW( HDC hdc, const DEVMODEW * lpdm);





 __declspec(dllimport) UINT __stdcall RealizePalette( HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA( LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW( LPCWSTR lpFileName);





 __declspec(dllimport) BOOL __stdcall RoundRect( HDC hdc, int left, int top, int right, int bottom, int width, int height);
 __declspec(dllimport) BOOL __stdcall ResizePalette( HPALETTE hpal, UINT n);

 __declspec(dllimport) int __stdcall SaveDC( HDC hdc);
 __declspec(dllimport) int __stdcall SelectClipRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) int __stdcall ExtSelectClipRgn( HDC hdc, HRGN hrgn, int mode);
__declspec(dllimport) int __stdcall SetMetaRgn( HDC hdc);
 __declspec(dllimport) HGDIOBJ __stdcall SelectObject( HDC hdc, HGDIOBJ h);
 __declspec(dllimport) HPALETTE __stdcall SelectPalette( HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
 __declspec(dllimport) COLORREF __stdcall SetBkColor( HDC hdc, COLORREF color);


__declspec(dllimport) COLORREF __stdcall SetDCBrushColor( HDC hdc, COLORREF color);
__declspec(dllimport) COLORREF __stdcall SetDCPenColor( HDC hdc, COLORREF color);


 __declspec(dllimport) int __stdcall SetBkMode( HDC hdc, int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
         HBITMAP hbm,
         DWORD cb,
                         const void *pvBits);

__declspec(dllimport) UINT __stdcall SetBoundsRect( HDC hdc, const RECT * lprect, UINT flags);
__declspec(dllimport) int __stdcall SetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void *lpBits, const BITMAPINFO * lpbmi, UINT ColorUse);
 __declspec(dllimport) int __stdcall SetDIBitsToDevice( HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc,
             int ySrc, UINT StartScan, UINT cLines, const void * lpvBits, const BITMAPINFO * lpbmi, UINT ColorUse);
 __declspec(dllimport) DWORD __stdcall SetMapperFlags( HDC hdc, DWORD flags);
__declspec(dllimport) int __stdcall SetGraphicsMode( HDC hdc, int iMode);
 __declspec(dllimport) int __stdcall SetMapMode( HDC hdc, int iMode);


 __declspec(dllimport) DWORD __stdcall SetLayout( HDC hdc, DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout( HDC hdc);


__declspec(dllimport) HMETAFILE __stdcall SetMetaFileBitsEx( UINT cbBuffer, const BYTE *lpData);
 __declspec(dllimport) UINT __stdcall SetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                 const PALETTEENTRY *pPalEntries);
 __declspec(dllimport) COLORREF __stdcall SetPixel( HDC hdc, int x, int y, COLORREF color);
__declspec(dllimport) BOOL __stdcall SetPixelV( HDC hdc, int x, int y, COLORREF color);
__declspec(dllimport) BOOL __stdcall SetPixelFormat( HDC hdc, int format, const PIXELFORMATDESCRIPTOR * ppfd);
 __declspec(dllimport) int __stdcall SetPolyFillMode( HDC hdc, int mode);
 __declspec(dllimport) BOOL __stdcall StretchBlt( HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
__declspec(dllimport) BOOL __stdcall SetRectRgn( HRGN hrgn, int left, int top, int right, int bottom);
 __declspec(dllimport) int __stdcall StretchDIBits( HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight,
                 const void * lpBits, const BITMAPINFO * lpbmi, UINT iUsage, DWORD rop);
 __declspec(dllimport) int __stdcall SetROP2( HDC hdc, int rop2);
 __declspec(dllimport) int __stdcall SetStretchBltMode( HDC hdc, int mode);
__declspec(dllimport) UINT __stdcall SetSystemPaletteUse( HDC hdc, UINT use);
 __declspec(dllimport) int __stdcall SetTextCharacterExtra( HDC hdc, int extra);
 __declspec(dllimport) COLORREF __stdcall SetTextColor( HDC hdc, COLORREF color);
 __declspec(dllimport) UINT __stdcall SetTextAlign( HDC hdc, UINT align);
 __declspec(dllimport) BOOL __stdcall SetTextJustification( HDC hdc, int extra, int count);
__declspec(dllimport) BOOL __stdcall UpdateColors( HDC hdc);
# 4624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;







typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;







typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;
# 4688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport) BOOL __stdcall AlphaBlend(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         UINT crTransparent);
# 4724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport)
BOOL
__stdcall
GradientFill(
         HDC hdc,
                        PTRIVERTEX pVertex,
         ULONG nVertex,
         PVOID pMesh,
         ULONG nMesh,
         ULONG ulMode
    );
# 4747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport) BOOL __stdcall GdiAlphaBlend( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall GdiTransparentBlt( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc,
                                                int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);

__declspec(dllimport) BOOL __stdcall GdiGradientFill( HDC hdc,
                                                            PTRIVERTEX pVertex,
                                             ULONG nVertex,
                                             PVOID pMesh,
                                             ULONG nCount,
                                             ULONG ulMode);







__declspec(dllimport) BOOL __stdcall PlayMetaFileRecord( HDC hdc,
                                                               LPHANDLETABLE lpHandleTable,
                                                 LPMETARECORD lpMR,
                                                 UINT noObjs);

typedef int (__stdcall* MFENUMPROC)( HDC hdc, HANDLETABLE * lpht, METARECORD * lpMR, int nObj, LPARAM param);
__declspec(dllimport) BOOL __stdcall EnumMetaFile( HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)( HDC hdc, HANDLETABLE * lpht, const ENHMETARECORD * lpmr, int nHandles, LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile( HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA( HENHMETAFILE hEnh, LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW( HENHMETAFILE hEnh, LPCWSTR lpFileName);





__declspec(dllimport) HDC __stdcall CreateEnhMetaFileA( HDC hdc, LPCSTR lpFilename, const RECT *lprc, LPCSTR lpDesc);
__declspec(dllimport) HDC __stdcall CreateEnhMetaFileW( HDC hdc, LPCWSTR lpFilename, const RECT *lprc, LPCWSTR lpDesc);





__declspec(dllimport) BOOL __stdcall DeleteEnhMetaFile( HENHMETAFILE hmf);
__declspec(dllimport) BOOL __stdcall EnumEnhMetaFile( HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc,
                                                 LPVOID param, const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileA( LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileW( LPCWSTR lpName);





__declspec(dllimport) UINT __stdcall GetEnhMetaFileBits( HENHMETAFILE hEMF,
                                                 UINT nSize,
                                                                          LPBYTE lpData);
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionA( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPSTR lpDescription);
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionW( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPWSTR lpDescription);





__declspec(dllimport) UINT __stdcall GetEnhMetaFileHeader( HENHMETAFILE hemf,
                                                     UINT nSize,
                                                                              LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT __stdcall GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf,
                                                         UINT nNumEntries,
                                                                                  LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT __stdcall GetEnhMetaFilePixelFormat( HENHMETAFILE hemf,
                                                         UINT cbBuffer,
                                                                                     PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT __stdcall GetWinMetaFileBits( HENHMETAFILE hemf,
                                                 UINT cbData16,
                                                                             LPBYTE pData16,
                                                 INT iMapMode,
                                                 HDC hdcRef);
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFile( HDC hdc, HENHMETAFILE hmf, const RECT * lprect);
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFileRecord( HDC hdc,
                                                                LPHANDLETABLE pht,
                                                     const ENHMETARECORD *pmr,
                                                     UINT cht);

__declspec(dllimport) HENHMETAFILE __stdcall SetEnhMetaFileBits( UINT nSize,
                                                                            const BYTE * pb);

__declspec(dllimport) HENHMETAFILE __stdcall SetWinMetaFileBits( UINT nSize,
                                                                            const BYTE *lpMeta16Data,
                                                             HDC hdcRef,
                                                             const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL __stdcall GdiComment( HDC hdc, UINT nSize, const BYTE *lpData);





__declspec(dllimport) BOOL __stdcall GetTextMetricsA( HDC hdc, LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW( HDC hdc, LPTEXTMETRICW lptm);
# 4882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc( HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline( HDC hdc, const POINT *apt, const DWORD *asz, DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform( HDC hdc, LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform( HDC hdc, const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform( HDC hdc, const XFORM * lpxf, DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform( LPXFORM lpxfOut, const XFORM *lpxf1, const XFORM *lpxf2);






__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(
                    HDC hdc,
                    const BITMAPINFO *pbmi,
                    UINT usage,


                    void **ppvBits,
                    HANDLE hSection,
                    DWORD offset);



__declspec(dllimport) UINT __stdcall GetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                                         RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                             const RGBQUAD *prgbq);
# 4959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment( HDC hdc, const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment( HDC hdc, LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette( HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)( HDC, int);




typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;

    LPCSTR lpszDatatype;
    DWORD fwType;

} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;

    LPCWSTR lpszDatatype;
    DWORD fwType;

} DOCINFOW, *LPDOCINFOW;

typedef DOCINFOW DOCINFO;
typedef LPDOCINFOW LPDOCINFO;
# 5015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
 __declspec(dllimport) int __stdcall StartDocA( HDC hdc, const DOCINFOA *lpdi);
 __declspec(dllimport) int __stdcall StartDocW( HDC hdc, const DOCINFOW *lpdi);





 __declspec(dllimport) int __stdcall EndDoc( HDC hdc);
 __declspec(dllimport) int __stdcall StartPage( HDC hdc);
 __declspec(dllimport) int __stdcall EndPage( HDC hdc);
 __declspec(dllimport) int __stdcall AbortDoc( HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc( HDC hdc, ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure( HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath( HDC hdc);
__declspec(dllimport) int __stdcall GetPath( HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion( HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw( HDC hdc, const POINT * apt, const BYTE * aj, int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath( HDC hdc, int mode);
__declspec(dllimport) int __stdcall SetArcDirection( HDC hdc, int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit( HDC hdc, FLOAT limit, PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath( HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath( HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen( DWORD iPenStyle,
                                         DWORD cWidth,
                                         const LOGBRUSH *plbrush,
                                         DWORD cStyle,
                                                           const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit( HDC hdc, PFLOAT plimit);
__declspec(dllimport) int __stdcall GetArcDirection( HDC hdc);

__declspec(dllimport) int __stdcall GetObjectA( HANDLE h, int c, LPVOID pv);
__declspec(dllimport) int __stdcall GetObjectW( HANDLE h, int c, LPVOID pv);
# 5082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
 __declspec(dllimport) BOOL __stdcall MoveToEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall TextOutA( HDC hdc, int x, int y, LPCSTR lpString, int c);
 __declspec(dllimport) BOOL __stdcall TextOutW( HDC hdc, int x, int y, LPCWSTR lpString, int c);





 __declspec(dllimport) BOOL __stdcall ExtTextOutA( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCSTR lpString, UINT c, const INT * lpDx);
 __declspec(dllimport) BOOL __stdcall ExtTextOutW( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCWSTR lpString, UINT c, const INT * lpDx);





__declspec(dllimport) BOOL __stdcall PolyTextOutA( HDC hdc, const POLYTEXTA * ppt, int nstrings);
__declspec(dllimport) BOOL __stdcall PolyTextOutW( HDC hdc, const POLYTEXTW * ppt, int nstrings);






__declspec(dllimport) HRGN __stdcall CreatePolygonRgn( const POINT *pptl,
                                                 int cPoint,
                                                 int iMode);
__declspec(dllimport) BOOL __stdcall DPtoLP( HDC hdc, LPPOINT lppt, int c);
__declspec(dllimport) BOOL __stdcall LPtoDP( HDC hdc, LPPOINT lppt, int c);
 __declspec(dllimport) BOOL __stdcall Polygon( HDC hdc, const POINT *apt, int cpt);
 __declspec(dllimport) BOOL __stdcall Polyline( HDC hdc, const POINT *apt, int cpt);

__declspec(dllimport) BOOL __stdcall PolyBezier( HDC hdc, const POINT * apt, DWORD cpt);
__declspec(dllimport) BOOL __stdcall PolyBezierTo( HDC hdc, const POINT * apt, DWORD cpt);
__declspec(dllimport) BOOL __stdcall PolylineTo( HDC hdc, const POINT * apt, DWORD cpt);

 __declspec(dllimport) BOOL __stdcall SetViewportExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall SetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall SetWindowExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall SetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

 __declspec(dllimport) BOOL __stdcall OffsetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall OffsetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall ScaleViewportExtEx( HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall ScaleWindowExtEx( HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
__declspec(dllimport) BOOL __stdcall SetBitmapDimensionEx( HBITMAP hbm, int w, int h, LPSIZE lpsz);
__declspec(dllimport) BOOL __stdcall SetBrushOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

__declspec(dllimport) int __stdcall GetTextFaceA( HDC hdc, int c, LPSTR lpName);
__declspec(dllimport) int __stdcall GetTextFaceW( HDC hdc, int c, LPWSTR lpName);
# 5139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA( HDC hdc,
                                                 DWORD nPairs,
                                                                                LPKERNINGPAIR lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW( HDC hdc,
                                                 DWORD nPairs,
                                                                                LPKERNINGPAIR lpKernPair);







__declspec(dllimport) BOOL __stdcall GetDCOrgEx( HDC hdc, LPPOINT lppt);
__declspec(dllimport) BOOL __stdcall FixBrushOrgEx( HDC hdc, int x, int y, LPPOINT ptl);
__declspec(dllimport) BOOL __stdcall UnrealizeObject( HGDIOBJ h);

__declspec(dllimport) BOOL __stdcall GdiFlush(void);
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit( DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(void);
# 5173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);






__declspec(dllimport) int __stdcall SetICMMode( HDC hdc, int mode);
__declspec(dllimport) BOOL __stdcall CheckColorsInGamut( HDC hdc,
                                                                       LPRGBTRIPLE lpRGBTriple,
                                                                               LPVOID dlpBuffer,
                                                         DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceA( HCOLORSPACE hColorSpace,
                                                                          LPLOGCOLORSPACEA lpBuffer,
                                                     DWORD nSize);
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceW( HCOLORSPACE hColorSpace,
                                                                          LPLOGCOLORSPACEW lpBuffer,
                                                     DWORD nSize);






__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA( LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW( LPLOGCOLORSPACEW lplcs);





__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace( HDC hdc, HCOLORSPACE hcs);
__declspec(dllimport) BOOL __stdcall DeleteColorSpace( HCOLORSPACE hcs);
__declspec(dllimport) BOOL __stdcall GetICMProfileA( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPSTR pszFilename);
__declspec(dllimport) BOOL __stdcall GetICMProfileW( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPWSTR pszFilename);






__declspec(dllimport) BOOL __stdcall SetICMProfileA( HDC hdc, LPSTR lpFileName);
__declspec(dllimport) BOOL __stdcall SetICMProfileW( HDC hdc, LPWSTR lpFileName);





__declspec(dllimport) BOOL __stdcall GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
__declspec(dllimport) BOOL __stdcall SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
__declspec(dllimport) BOOL __stdcall ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action);
__declspec(dllimport) int __stdcall EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param);
__declspec(dllimport) int __stdcall EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param);






__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);

__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);







#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)





__declspec(dllimport) BOOL __stdcall ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
# 5421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
typedef struct tagEMR
{
    DWORD iType;
    DWORD nSize;

} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;

} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
  EMRBEGINPATH, *PEMRBEGINPATH,
  EMRENDPATH, *PEMRENDPATH,
  EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
  EMRFLATTENPATH, *PEMRFLATTENPATH,
  EMRWIDENPATH, *PEMRWIDENPATH,
  EMRSETMETARGN, *PEMRSETMETARGN,
  EMRSAVEDC, *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
  EMRSETBKMODE, *PEMRSETBKMODE,
  EMRSETMAPMODE, *PEMRSETMAPMODE,

  EMRSETLAYOUT, *PEMRSETLAYOUT,

  EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
  EMRSETROP2, *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE, *PEMRSETICMMODE,
  EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;

} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;


} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
} EMRFILLPATH, *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH, *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
} EMRELLIPSE, *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE, *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
  EMRPOLYBEZIER, *PEMRPOLYBEZIER,
  EMRPOLYGON, *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO, *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
  EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
  EMRPOLYGON16, *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16, *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN, *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;

} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];

} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;

} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN32 elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;

} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;

} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;





typedef struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
} EMREXTESCAPE, *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRSETICMPROFILE, *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
# 6189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport) BOOL __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);





__declspec(dllimport) BOOL __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);







typedef struct tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;
# 6308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
__declspec(dllimport) BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);
# 6344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wingdi.h" 3
}



#pragma warning(pop)
# 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
extern "C" {


#pragma warning(push)



#pragma warning(disable: 4820)
# 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;

typedef MENUTEMPLATEW MENUTEMPLATE;



typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;

typedef LPMENUTEMPLATEW LPMENUTEMPLATE;




typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);
# 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);







typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
# 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef PROPENUMPROCW PROPENUMPROC;
typedef PROPENUMPROCEXW PROPENUMPROCEX;
typedef EDITWORDBREAKPROCW EDITWORDBREAKPROC;
# 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
# 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef WINSTAENUMPROCW WINSTAENUMPROC;
typedef DESKTOPENUMPROCW DESKTOPENUMPROC;
# 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
#pragma warning(push)
#pragma warning(disable: 4995)


__declspec(dllimport)
int
__stdcall
wvsprintfA(
          LPSTR,
                                LPCSTR,
         va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
          LPWSTR,
                                LPCWSTR,
         va_list arglist);






__declspec(dllimport)
int
__cdecl
wsprintfA(
          LPSTR,
                                LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
          LPWSTR,
                                LPCWSTR,
    ...);







#pragma warning(pop)
# 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;

typedef CBT_CREATEWNDW CBT_CREATEWND;
typedef LPCBT_CREATEWNDW LPCBT_CREATEWND;
# 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;
# 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;
# 1031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct
{
    HWND hwnd;
    RECT rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT;
# 1098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
# 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;



typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT
{
    DWORD mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;
# 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
# 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
         LPCSTR pwszKLID,
         UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
         LPCWSTR pwszKLID,
         UINT Flags);
# 1237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
         HKL hkl,
         UINT Flags);
# 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
         UINT wVirtKey,
         UINT wScanCode,
                          const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags,
             HKL dwhkl);


__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
         HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
                                LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
                                LPWSTR pwszKLID);







__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
         int nBuff,
                                       HKL *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
         DWORD idThread);
# 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;
# 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
         UINT cbSize,
         LPMOUSEMOVEPOINT lppt,
                             LPMOUSEMOVEPOINT lpptBuf,
         int nBufPoints,
         DWORD resolution);
# 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);
# 1437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
         LPCSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
         LPCWSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
             HWINSTA hwinsta,
         DESKTOPENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
             HWINSTA hwinsta,
         DESKTOPENUMPROCW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
             HDESK hDesktop,
         WNDENUMPROC lpfn,
         LPARAM lParam);


__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
         HDESK hDesktop);


__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
          HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
         HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
         DWORD dwThreadId);
# 1558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
             LPCSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
             LPCWSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
         LPCSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
         LPCWSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
         WINSTAENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
         WINSTAENUMPROCW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);
# 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
         PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
                                    PSECURITY_DESCRIPTOR pSID,
         DWORD nLength,
          LPDWORD lpnLengthNeeded);
# 1680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                                    PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                                    PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);






__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength);
# 1741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagWNDCLASSEXA {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;

typedef WNDCLASSEXW WNDCLASSEX;
typedef PWNDCLASSEXW PWNDCLASSEX;
typedef NPWNDCLASSEXW NPWNDCLASSEX;
typedef LPWNDCLASSEXW LPWNDCLASSEX;
# 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;

typedef WNDCLASSW WNDCLASS;
typedef PWNDCLASSW PWNDCLASS;
typedef NPWNDCLASSW NPWNDCLASS;
typedef LPWNDCLASSW LPWNDCLASS;







__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
         HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);
# 1849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;



} MSG, *PMSG, *NPMSG, *LPMSG;
# 2007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;
# 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
                               PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
} MDINEXTMENU, * PMDINEXTMENU, * LPMDINEXTMENU;
# 2325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;
# 2610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
         LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
         LPCWSTR lpString);
# 2655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;
# 2728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
            LPTRACKMOUSEEVENT lpEventTrack);
# 2946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
         HDC hdc,
            LPRECT qrc,
         UINT edge,
         UINT grfFlags);
# 3009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
         HDC,
            LPRECT,
         UINT,
         UINT);
# 3039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
         HWND hwnd,
         HDC hdc,
         const RECT * lprect,
         UINT flags);
# 3058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
             HWND hwnd,
         int idAni,
         const RECT *lprcFrom,
         const RECT *lprcTo);
# 3141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagACCEL {

    BYTE fVirt;
    WORD key;
    WORD cmd;





} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;

typedef CREATESTRUCTW CREATESTRUCT;
typedef LPCREATESTRUCTW LPCREATESTRUCT;





typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;
# 3225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
} NMHDR;







typedef NMHDR * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
# 3296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;
# 3357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
# 3404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
         const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
         const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
         const MSG *lpMsg);
# 3444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
         int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
# 3496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
             HWND hWnd,
         int id,
         UINT fsModifiers,
         UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
             HWND hWnd,
         int id);
# 3572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
         UINT uFlags,
         DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
         BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
DWORD
__stdcall
GetUnpredictedMessagePos(
    void);



__declspec(dllimport)
BOOL
__stdcall
IsWow64Message(
    void);



__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
         LPARAM lParam);


__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
         HWND hWnd,
         UINT Msg,
                                 WPARAM wParam,
                                 LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
         HWND hWnd,
         UINT Msg,
                                 WPARAM wParam,
                                 LPARAM lParam);
# 3675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);






__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);







typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
} BSMINFO, *PBSMINFO;

__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);
# 3795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
# 3869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;







__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);






__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
         HDEVNOTIFY Handle
    );







typedef PVOID HPOWERNOTIFY;
typedef HPOWERNOTIFY *PHPOWERNOTIFY;



__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
       HANDLE hRecipient,
       LPCGUID PowerSettingGuid,
       DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterPowerSettingNotification(
       HPOWERNOTIFY Handle
    );

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterSuspendResumeNotification (
       HANDLE hRecipient,
       DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterSuspendResumeNotification (
       HPOWERNOTIFY Handle
    );
# 3957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
# 4026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
         DWORD idAttach,
         DWORD idAttachTo,
         BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
         LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);





__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
         HANDLE hProcess,
         DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
void
__stdcall
PostQuitMessage(
         int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
# 4150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);
# 4164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
               LPVOID lpReserved);
# 4187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
         UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
         const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
         const WNDCLASSW *lpWndClass);






__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
         LPCSTR lpClassName,
             HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
         LPCWSTR lpClassName,
             HINSTANCE hInstance);







__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
             HINSTANCE hInstance,
         LPCSTR lpClassName,
          LPWNDCLASSA lpWndClass);

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
             HINSTANCE hInstance,
         LPCWSTR lpClassName,
          LPWNDCLASSW lpWndClass);







__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
         const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
         const WNDCLASSEXW *);







__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
             HINSTANCE hInstance,
         LPCSTR lpszClass,
          LPWNDCLASSEXA lpwcx);

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
             HINSTANCE hInstance,
         LPCWSTR lpszClass,
          LPWNDCLASSEXW lpwcx);
# 4310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);


__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
         DWORD dwExStyle,
             LPCSTR lpClassName,
             LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
         DWORD dwExStyle,
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);
# 4372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsWindow(
             HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
IsMenu(
         HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
         HWND hWndParent,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
         HWND hWnd,
         int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
         HWND hWnd,
         DWORD dwTime,
         DWORD dwFlags);
# 4424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindow(
         HWND hWnd,
             HDC hdcDst,
             POINT* pptDst,
             SIZE* psize,
             HDC hdcSrc,
             POINT* pptSrc,
         COLORREF crKey,
             BLENDFUNCTION* pblend,
         DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;





__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindowIndirect(
         HWND hWnd,
         const UPDATELAYEREDWINDOWINFO* pULWInfo);
# 4476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetLayeredWindowAttributes(
         HWND hwnd,
              COLORREF* pcrKey,
              BYTE* pbAlpha,
              DWORD* pdwFlags);
# 4492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
PrintWindow(
         HWND hwnd,
         HDC hdcBlt,
         UINT nFlags);
# 4508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetLayeredWindowAttributes(
         HWND hwnd,
         COLORREF crKey,
         BYTE bAlpha,
         DWORD dwFlags);
# 4538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
          HWND hWnd,
          int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
          HWND hWnd,
          BOOL bInvert);


typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
         PFLASHWINFO pfwi);
# 4577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
          HWND hWnd,
          BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
         HWND hWnd,
         int X,
         int Y,
         int nWidth,
         int nHeight,
         BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
         HWND hWnd,
             HWND hWndInsertAfter,
         int X,
         int Y,
         int cx,
         int cy,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
         HWND hWnd,
            WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
         HWND hWnd,
         const WINDOWPLACEMENT *lpwndpl);






__declspec(dllimport)
BOOL
__stdcall
GetWindowDisplayAffinity(
         HWND hWnd,
          DWORD* pdwAffinity);

__declspec(dllimport)
BOOL
__stdcall
SetWindowDisplayAffinity(
         HWND hWnd,
         DWORD dwAffinity);
# 4662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
         int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
         HDWP hWinPosInfo,
         HWND hWnd,
             HWND hWndInsertAfter,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);


__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
         HDWP hWinPosInfo);
# 4696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
         HWND hWnd);
# 4765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack2.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack2.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 4765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 2 3








typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;







typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

typedef LPDLGTEMPLATEW LPDLGTEMPLATE;
# 4803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

typedef LPCDLGTEMPLATEW LPCDLGTEMPLATE;
# 4821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

typedef PDLGITEMTEMPLATEW PDLGITEMTEMPLATE;



typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

typedef LPDLGITEMTEMPLATEW LPDLGITEMTEMPLATE;
# 4849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 4849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 2 3





__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);






__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
# 4922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);






__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
# 4990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
EndDialog(
         HWND hDlg,
         INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
             HWND hDlg,
         int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
         UINT uValue,
         BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
              BOOL *lpTranslated,
         BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
         LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
         LPCWSTR lpString);







__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
                         LPSTR lpString,
         int cchMax);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
                         LPWSTR lpString,
         int cchMax);






__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
         HWND hDlg,
         int nIDButton,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
         HWND hDlg,
         int nIDFirstButton,
         int nIDLastButton,
         int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
         HWND hDlg,
         int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
         HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);


__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcA(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcW(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);







typedef enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS {
     DCDC_DEFAULT = 0x0000,
     DCDC_DISABLE_FONT_UPDATE = 0x0001,
     DCDC_DISABLE_RELAYOUT = 0x0002,
} DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;


extern "C++" { inline constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator | (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator |= (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator & (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator &= (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator ~ (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a) throw() { return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(~((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)a)); } inline constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator ^ (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator ^= (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } };


BOOL
__stdcall
SetDialogControlDpiChangeBehavior(
         HWND hWnd,
         DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask,
         DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values);

DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
__stdcall
GetDialogControlDpiChangeBehavior(
         HWND hWnd);

typedef enum DIALOG_DPI_CHANGE_BEHAVIORS {
    DDC_DEFAULT = 0x0000,
    DDC_DISABLE_ALL = 0x0001,
    DDC_DISABLE_RESIZE = 0x0002,
    DDC_DISABLE_CONTROL_RELAYOUT = 0x0004,
} DIALOG_DPI_CHANGE_BEHAVIORS;


extern "C++" { inline constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator | (DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator |= (DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator & (DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator &= (DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator ~ (DIALOG_DPI_CHANGE_BEHAVIORS a) throw() { return DIALOG_DPI_CHANGE_BEHAVIORS(~((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)a)); } inline constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator ^ (DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator ^= (DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } };


BOOL
__stdcall
SetDialogDpiChangeBehavior(
         HWND hDlg,
         DIALOG_DPI_CHANGE_BEHAVIORS mask,
         DIALOG_DPI_CHANGE_BEHAVIORS values);

DIALOG_DPI_CHANGE_BEHAVIORS
__stdcall
GetDialogDpiChangeBehavior(
         HWND hDlg);
# 5239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
         LPMSG lpMsg,
         int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
         LPMSG lpMsg,
         int nCode);
# 5265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
             HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);



__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
         HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
         HWND hWndRemove,
         HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
         UINT uFormat,
             HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
         UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
         LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
         LPCWSTR lpszFormat);






__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
         UINT format,
                              LPSTR lpszFormatName,
         int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
         UINT format,
                              LPWSTR lpszFormatName,
         int cchMaxCount);






__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
                         UINT *paFormatPriorityList,
         int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
AddClipboardFormatListener(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
RemoveClipboardFormatListener(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
GetUpdatedClipboardFormats(
                           PUINT lpuiFormats,
         UINT cFormats,
          PUINT pcFormatsOut);
# 5427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
         LPCSTR pSrc,
                                                    LPSTR pDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
         LPCWSTR pSrc,
                                                    LPSTR pDst);







__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
         LPCSTR pSrc,
                                                    LPSTR pDst);

__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
         LPCSTR pSrc,
                                                    LPWSTR pDst);






__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
         LPCWSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);






__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
         LPCSTR lpszSrc,
                               LPWSTR lpszDst,
         DWORD cchDstLength);
# 5511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
            LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
            LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
                               LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
                               LPWSTR lpsz,
         DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
            LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
            LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
                               LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
                               LPWSTR lpsz,
         DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
         LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
         LPCWSTR lpsz);






__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
         LPCSTR lpszStart,
         LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
         LPCWSTR lpszStart,
         LPCWSTR lpszCurrent);







__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
          WORD CodePage,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
          WORD CodePage,
          LPCSTR lpStart,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);
# 5657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
         WCHAR ch);
# 5729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HWND
__stdcall
SetFocus(
             HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
         int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
         int vKey);

__declspec(dllimport)

BOOL
__stdcall
GetKeyboardState(
                      PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
                    LPBYTE lpKeyState);
# 5785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
         LONG lParam,
                          LPSTR lpString,
         int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
         LONG lParam,
                          LPWSTR lpString,
         int cchSize);
# 5812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
GetKeyboardType(
         int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
         UINT uVirtKey,
         UINT uScanCode,
                        const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
         UINT uVirtKey,
         UINT uScanCode,
                        const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags,
             HKL dwhkl);


__declspec(dllimport)
int
__stdcall
ToUnicode(
         UINT wVirtKey,
         UINT wScanCode,
                              const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
         WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
         CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
         WCHAR ch);







__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
         CHAR ch,
         HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
         WCHAR ch,
         HKL dwhkl);
# 5900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
void
__stdcall
keybd_event(
         BYTE bVk,
         BYTE bScan,
         DWORD dwFlags,
         ULONG_PTR dwExtraInfo);
# 5934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
void
__stdcall
mouse_event(
         DWORD dwFlags,
         DWORD dx,
         DWORD dy,
         DWORD dwData,
         ULONG_PTR dwExtraInfo);






typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;




typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD type;

    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    } ;
} INPUT, *PINPUT, * LPINPUT;

__declspec(dllimport)
UINT
__stdcall
SendInput(
         UINT cInputs,
                        LPINPUT pInputs,
         int cbSize);
# 6015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;

typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;
# 6062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetTouchInputInfo(
         HTOUCHINPUT hTouchInput,
         UINT cInputs,
                          PTOUCHINPUT pInputs,
         int cbSize);

__declspec(dllimport)
BOOL
__stdcall
CloseTouchInputHandle(
         HTOUCHINPUT hTouchInput);
# 6091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
RegisterTouchWindow(
         HWND hwnd,
         ULONG ulFlags);

__declspec(dllimport)
BOOL
__stdcall
UnregisterTouchWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
IsTouchWindow(
         HWND hwnd,
              PULONG pulFlags);
# 6123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
enum tagPOINTER_INPUT_TYPE {
    PT_POINTER = 1,
    PT_TOUCH = 2,
    PT_PEN = 3,
    PT_MOUSE = 4,

    PT_TOUCHPAD = 5,

};


typedef DWORD POINTER_INPUT_TYPE;

typedef UINT32 POINTER_FLAGS;
# 6171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef enum tagPOINTER_BUTTON_CHANGE_TYPE {
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;

typedef struct tagPOINTER_INFO {
    POINTER_INPUT_TYPE pointerType;
    UINT32 pointerId;
    UINT32 frameId;
    POINTER_FLAGS pointerFlags;
    HANDLE sourceDevice;
    HWND hwndTarget;
    POINT ptPixelLocation;
    POINT ptHimetricLocation;
    POINT ptPixelLocationRaw;
    POINT ptHimetricLocationRaw;
    DWORD dwTime;
    UINT32 historyCount;
    INT32 InputData;
    DWORD dwKeyStates;
    UINT64 PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;


typedef UINT32 TOUCH_FLAGS;


typedef UINT32 TOUCH_MASK;





typedef struct tagPOINTER_TOUCH_INFO {
    POINTER_INFO pointerInfo;
    TOUCH_FLAGS touchFlags;
    TOUCH_MASK touchMask;
    RECT rcContact;
    RECT rcContactRaw;
    UINT32 orientation;
    UINT32 pressure;
} POINTER_TOUCH_INFO;

typedef UINT32 PEN_FLAGS;





typedef UINT32 PEN_MASK;






typedef struct tagPOINTER_PEN_INFO {
    POINTER_INFO pointerInfo;
    PEN_FLAGS penFlags;
    PEN_MASK penMask;
    UINT32 pressure;
    UINT32 rotation;
    INT32 tiltX;
    INT32 tiltY;
} POINTER_PEN_INFO;
# 6298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
InitializeTouchInjection(
         UINT32 maxCount,
         DWORD dwMode);

__declspec(dllimport)
BOOL
__stdcall
InjectTouchInput(
         UINT32 count,
                      const POINTER_TOUCH_INFO *contacts);

typedef struct tagUSAGE_PROPERTIES {
    USHORT level;
    USHORT page;
    USHORT usage;
    INT32 logicalMinimum;
    INT32 logicalMaximum;
    USHORT unit;
    USHORT exponent;
    BYTE count;
    INT32 physicalMinimum;
    INT32 physicalMaximum;
}USAGE_PROPERTIES, *PUSAGE_PROPERTIES;

typedef struct tagPOINTER_TYPE_INFO {
    POINTER_INPUT_TYPE type;
    union{
        POINTER_TOUCH_INFO touchInfo;
        POINTER_PEN_INFO penInfo;
    } ;
}POINTER_TYPE_INFO, *PPOINTER_TYPE_INFO;

typedef struct tagINPUT_INJECTION_VALUE {
    USHORT page;
    USHORT usage;
    INT32 value;
    USHORT index;
}INPUT_INJECTION_VALUE, *PINPUT_INJECTION_VALUE;

__declspec(dllimport)
BOOL
__stdcall
GetPointerType(
         UINT32 pointerId,
          POINTER_INPUT_TYPE *pointerType);

__declspec(dllimport)
BOOL
__stdcall
GetPointerCursorId(
         UINT32 pointerId,
          UINT32 *cursorId);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfo(
         UINT32 pointerId,
                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfo(
         UINT32 pointerId,
                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfo(
         UINT32 pointerId,
                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
SkipPointerFrameMessages(
         UINT32 pointerId);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTarget(
         HWND hwnd,
         POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTarget(
         HWND hwnd,
         POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTargetEx(
         HWND hwnd,
         POINTER_INPUT_TYPE pointerType,
         BOOL fObserve);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTargetEx(
         HWND hwnd,
         POINTER_INPUT_TYPE pointerType);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointer(
         BOOL fEnable);

__declspec(dllimport)
BOOL
__stdcall
IsMouseInPointerEnabled(
    void);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointerForThread();






__declspec(dllimport)
BOOL
__stdcall
RegisterTouchHitTestingWindow(
         HWND hwnd,
         ULONG value);

typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;





typedef struct tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT;





__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToRect(
         const RECT *controlBoundingBox,
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
          TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToPolygon(
    UINT32 numVertices,
                            const POINT *controlPolygon,
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
          TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
LRESULT
__stdcall
PackTouchHitTestingProximityEvaluation(
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
         const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);


typedef enum tagFEEDBACK_TYPE {
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION = 2,
    FEEDBACK_PEN_TAP = 3,
    FEEDBACK_PEN_DOUBLETAP = 4,
    FEEDBACK_PEN_PRESSANDHOLD = 5,
    FEEDBACK_PEN_RIGHTTAP = 6,
    FEEDBACK_TOUCH_TAP = 7,
    FEEDBACK_TOUCH_DOUBLETAP = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD = 9,
    FEEDBACK_TOUCH_RIGHTTAP = 10,
    FEEDBACK_GESTURE_PRESSANDTAP = 11,
    FEEDBACK_MAX = 0xFFFFFFFF
} FEEDBACK_TYPE;





__declspec(dllimport)
BOOL
__stdcall
GetWindowFeedbackSetting(
         HWND hwnd,
         FEEDBACK_TYPE feedback,
         DWORD dwFlags,
            UINT32* pSize,
                                   void* config);

__declspec(dllimport)
BOOL
__stdcall
SetWindowFeedbackSetting(
         HWND hwnd,
         FEEDBACK_TYPE feedback,
         DWORD dwFlags,
         UINT32 size,
                               const void* configuration);
# 6616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct tagINPUT_TRANSFORM {
    union {
        struct {
            float _11, _12, _13, _14;
            float _21, _22, _23, _24;
            float _31, _32, _33, _34;
            float _41, _42, _43, _44;
        } ;
        float m[4][4];
    } ;
} INPUT_TRANSFORM;


#pragma warning(pop)



__declspec(dllimport)
BOOL
__stdcall
GetPointerInputTransform(
         UINT32 pointerId,
         UINT32 historyCount,
                               INPUT_TRANSFORM *inputTransform);
# 6660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

__declspec(dllimport)
BOOL
__stdcall
GetLastInputInfo(
          PLASTINPUTINFO plii);
# 6678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
         UINT uCode,
         UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
         UINT uCode,
         UINT uMapType);







__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
# 6732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
         UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
         DWORD nCount,
                           const HANDLE *pHandles,
         BOOL fWaitAll,
         DWORD dwMilliseconds,
         DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
         DWORD nCount,
                           const HANDLE *pHandles,
         DWORD dwMilliseconds,
         DWORD dwWakeMask,
         DWORD dwFlags);
# 6860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
             HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
             TIMERPROC lpTimerFunc);
# 6877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
UINT_PTR
__stdcall
SetCoalescableTimer(
             HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
             TIMERPROC lpTimerFunc,
         ULONG uToleranceDelay);



__declspec(dllimport)
BOOL
__stdcall
KillTimer(
             HWND hWnd,
         UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
         HWND hWnd,
         BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
         HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
             HINSTANCE hInstance,
         LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
             HINSTANCE hInstance,
         LPCWSTR lpTableName);






__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
                       LPACCEL paccel,
         int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
                       LPACCEL paccel,
         int cAccel);






__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
         HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
         HACCEL hAccelSrc,
                                               LPACCEL lpAccelDst,
         int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
         HACCEL hAccelSrc,
                                               LPACCEL lpAccelDst,
         int cAccelEntries);
# 6979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
# 7169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
         int nIndex);



__declspec(dllimport)
int
__stdcall
GetSystemMetricsForDpi(
         int nIndex,
         UINT dpi);
# 7196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
             HINSTANCE hInstance,
         LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
             HINSTANCE hInstance,
         LPCWSTR lpMenuName);






__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
         const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
         const MENUTEMPLATEW *lpMenuTemplate);






__declspec(dllimport)
HMENU
__stdcall
GetMenu(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
         HWND hWnd,
             HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
         HMENU hMenu,
         UINT cmd,
             LPCSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
         HMENU hMenu,
         UINT cmd,
             LPCWSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);






__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
         HWND hWnd,
         HMENU hMenu,
         UINT uIDHiliteItem,
         UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
         HMENU hMenu,
         UINT uIDItem,
                             LPSTR lpString,
         int cchMax,
         UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
         HMENU hMenu,
         UINT uIDItem,
                             LPWSTR lpString,
         int cchMax,
         UINT flags);






__declspec(dllimport)
UINT
__stdcall
GetMenuState(
         HMENU hMenu,
         UINT uId,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
         HWND hWnd);







__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
         HWND hWnd,
         BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
         HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
         HMENU hMenu,
         UINT uIDCheckItem,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
         HMENU hMenu,
         UINT uIDEnableItem,
         UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
             HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
             HBITMAP hBitmapUnchecked,
             HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
               int nReserved,
         HWND hWnd,
               const RECT *prcRect);
# 7502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
         HWND hwnd,
             LPTPMPARAMS lptpm);



__declspec(dllimport)
BOOL
__stdcall
CalculatePopupWindowPosition(
         const POINT *anchorPoint,
         const SIZE *windowSize,
         UINT flags,
             RECT *excludeRect,
          RECT *popupWindowPosition);
# 7550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
         HMENU,
            LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
         HMENU,
         LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;
# 7638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOW, *LPMENUITEMINFOW;

typedef MENUITEMINFOW MENUITEMINFO;
typedef LPMENUITEMINFOW LPMENUITEMINFO;




typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;

typedef LPCMENUITEMINFOW LPCMENUITEMINFO;





__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOW lpmi);






__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOW lpmii);






__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOW lpmii);
# 7758 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
         HMENU hMenu,
         UINT fByPos,
         UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
         HMENU hMenu,
         UINT uItem,
         UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
             HWND hWnd,
         HMENU hMenu,
         UINT uItem,
          LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
             HWND hWnd,
         HMENU hMenu,
         POINT ptScreen);
# 7843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;
# 7869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
DWORD
__stdcall
DragObject(
         HWND hwndParent,
         HWND hwndFrom,
         UINT fmt,
         ULONG_PTR data,
             HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
         HWND hwnd,
         POINT pt);
# 7894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
         HDC hDC,
         int X,
         int Y,
         HICON hIcon);
# 7945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;
# 7971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)

int
__stdcall
DrawTextA(
         HDC hdc,


    LPCSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
__declspec(dllimport)

int
__stdcall
DrawTextW(
         HDC hdc,


    LPCWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
# 8029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)

int
__stdcall
DrawTextExA(
         HDC hdc,



    LPSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)

int
__stdcall
DrawTextExW(
         HDC hdc,



    LPWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);
# 8072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
# 8130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);
# 8172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
         HDC hdc,
         int x,
         int y,
                        LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions,
         int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
         HDC hdc,
         int x,
         int y,
                        LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions,
         int nTabOrigin);






__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
         HDC hdc,
                        LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
         HDC hdc,
                        LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions);






__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
         HWND hWnd);


__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
         HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
         HWND hwnd,
         BOOL fUnknown);



__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
         HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
AllowSetForegroundWindow(
         DWORD dwProcessId);



__declspec(dllimport)
BOOL
__stdcall
LockSetForegroundWindow(
         UINT uLockCode);






__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
             HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
             HWND hWnd,
             HRGN hrgnClip,
         DWORD flags);
# 8330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
             HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
             HWND hWnd,
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
         HWND hWnd,
          LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
         HWND hWnd,
         const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
         HWND hWnd,
              LPRECT lpRect,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
         HWND hWnd,
         HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bRedraw);
# 8388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
GetWindowRgn(
         HWND hWnd,
         HRGN hRgn);



__declspec(dllimport)
int
__stdcall
GetWindowRgnBox(
         HWND hWnd,
          LPRECT lprc);



__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
         HDC hDC,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
             HWND hWnd,
             const RECT *lpRect,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
             HWND hWnd,
             const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
         HWND hWnd,
             HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
             HWND hWnd,
             const RECT *lprcUpdate,
             HRGN hrgnUpdate,
         UINT flags);
# 8484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
             HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
         HWND hWnd,
         int XAmount,
         int YAmount,
             const RECT *lpRect,
             const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
         HDC hDC,
         int dx,
         int dy,
             const RECT *lprcScroll,
             const RECT *lprcClip,
             HRGN hrgnUpdate,
              LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
         HWND hWnd,
         int dx,
         int dy,
             const RECT *prcScroll,
             const RECT *prcClip,
             HRGN hrgnUpdate,
              LPRECT prcUpdate,
         UINT flags);
# 8540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
SetScrollPos(
         HWND hWnd,
         int nBar,
         int nPos,
         BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
         HWND hWnd,
         int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
         HWND hWnd,
         int nBar,
         int nMinPos,
         int nMaxPos,
         BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
         HWND hWnd,
         int nBar,
          LPINT lpMinPos,
          LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
         HWND hWnd,
         int wBar,
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
         HWND hWnd,
         UINT wSBflags,
         UINT wArrows);
# 8610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetPropA(
         HWND hWnd,
         LPCSTR lpString,
             HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
         HWND hWnd,
         LPCWSTR lpString,
             HANDLE hData);






__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
         HWND hWnd,
         LPCWSTR lpString);






__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
         HWND hWnd,
         LPCWSTR lpString);






__declspec(dllimport)
int
__stdcall
EnumPropsExA(
         HWND hWnd,
         PROPENUMPROCEXA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
         HWND hWnd,
         PROPENUMPROCEXW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
int
__stdcall
EnumPropsA(
         HWND hWnd,
         PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
         HWND hWnd,
         PROPENUMPROCW lpEnumFunc);






__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
         HWND hWnd,
             LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
         HWND hWnd,
             LPCWSTR lpString);







__declspec(dllimport)
int
__stdcall
GetWindowTextA(
         HWND hWnd,
                            LPSTR lpString,
         int nMaxCount);

__declspec(dllimport)
int
__stdcall
GetWindowTextW(
         HWND hWnd,
                            LPWSTR lpString,
         int nMaxCount);






__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
         HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
         HWND hWnd);






__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
         HWND hWnd,
          LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
         HWND hWnd,
          LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu,
         DWORD dwExStyle);


__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectExForDpi(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu,
         DWORD dwExStyle,
         UINT dpi);
# 8814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
} HELPINFO, *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
         HWND,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
         HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
         HMENU,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
         HMENU);
# 8929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
MessageBoxA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType);
# 8975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
MessageBoxExA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
# 9001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;

typedef MSGBOXPARAMSW MSGBOXPARAMS;
typedef PMSGBOXPARAMSW PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSW LPMSGBOXPARAMS;






__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
         const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
         const MSGBOXPARAMSW * lpmbp);
# 9064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
         UINT uType);
# 9079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
int
__stdcall
ShowCursor(
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
         int X,
         int Y);


__declspec(dllimport)
BOOL
__stdcall
SetPhysicalCursorPos(
         int X,
         int Y);


__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
             HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
          LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
GetPhysicalCursorPos(
          LPPOINT lpPoint);



__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
          LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
         HWND hWnd,
             HBITMAP hBitmap,
         int nWidth,
         int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
         UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
             HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
             HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
         int X,
         int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
          LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
         HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
         HWND hWnd,
            LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPoint(
         HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPoint(
         HWND hWnd,
            LPPOINT lpPoint);




__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPointForPerMonitorDPI(
             HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPointForPerMonitorDPI(
             HWND hWnd,
            LPPOINT lpPoint);



__declspec(dllimport)
int
__stdcall
MapWindowPoints(
             HWND hWndFrom,
             HWND hWndTo,
                             LPPOINT lpPoints,
         UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
         POINT Point);


__declspec(dllimport)
HWND
__stdcall
WindowFromPhysicalPoint(
         POINT Point);


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
         HWND hWndParent,
         POINT Point);






__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
             const RECT *lpRect);
# 9286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
         HWND hwnd,
         POINT pt,
         UINT flags);
# 9365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
         int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
         int nIndex);




__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
         int cElements,
                          const INT * lpaElements,
                          const COLORREF * lpaRgbValues);
# 9397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
         HDC hDC,
         const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
         HDC hDC,
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
          LPRECT lprc,
         int xLeft,
         int yTop,
         int xRight,
         int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
          LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
          LPRECT lprcDst,
         const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
            LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
            LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
         const RECT *lprc1,
         const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
         const RECT *lprc,
         POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
# 9625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
WORD
__stdcall
GetClassWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
# 9741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
          DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
         DWORD dwDefaultLayout);


__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
         HWND hWndChild,
             HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
             HWND hWndParent,
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);


__declspec(dllimport)
HWND
__stdcall
FindWindowA(
             LPCSTR lpClassName,
             LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName);







__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCSTR lpszClass,
             LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCWSTR lpszClass,
             LPCWSTR lpszWindow);






__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);




__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
         DWORD dwThreadId,
         WNDENUMPROC lpfn,
         LPARAM lParam);




__declspec(dllimport)
int
__stdcall
GetClassNameA(
         HWND hWnd,
                                       LPSTR lpClassName,
         int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
         HWND hWnd,
                                       LPWSTR lpClassName,
         int nMaxCount
    );
# 9909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
             HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
         HWND hWnd,
              LPDWORD lpdwProcessId);


__declspec(dllimport)
BOOL
__stdcall
IsGUIThread(
         BOOL bConvert);







__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
         HWND hWnd);
# 9961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HWND
__stdcall
GetWindow(
         HWND hWnd,
         UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
         int nFilterType,
         HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
         int nFilterType,
         HOOKPROC pfnFilterProc);
# 10013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
         int nCode,
         HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);






__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
         HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
             HHOOK hhk,
         int nCode,
         WPARAM wParam,
         LPARAM lParam);
# 10152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
         HMENU hmenu,
         UINT first,
         UINT last,
         UINT check,
         UINT flags);





typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;
# 10232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
             HINSTANCE hInstance,
         LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
             HINSTANCE hInstance,
         LPCWSTR lpBitmapName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
             HINSTANCE hInstance,
         LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
             HINSTANCE hInstance,
         LPCWSTR lpCursorName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
         LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
         LPCWSTR lpFileName);






__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
             HINSTANCE hInst,
         int xHotSpot,
         int yHotSpot,
         int nWidth,
         int nHeight,
         const void *pvANDPlane,
         const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
         HCURSOR hCursor);
# 10347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
         HCURSOR hcur,
         DWORD id);

typedef struct _ICONINFO {
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
             HINSTANCE hInstance,
         LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
             HINSTANCE hInstance,
         LPCWSTR lpIconName);







__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
                         LPCSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                             HICON *phicon,
                             UINT *piconid,
         UINT nIcons,
         UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
                         LPCWSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                             HICON *phicon,
                             UINT *piconid,
         UINT nIcons,
         UINT flags);






__declspec(dllimport)
HICON
__stdcall
CreateIcon(
             HINSTANCE hInstance,
         int nWidth,
         int nHeight,
         BYTE cPlanes,
         BYTE cBitsPixel,
         const BYTE *lpbANDbits,
         const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
         HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
                                       PBYTE presbits,
         BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
                                       PBYTE presbits,
         BOOL fIcon,
         int cxDesired,
         int cyDesired,
         UINT Flags);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
                                PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
                                PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer,
         int cxDesired,
         int cyDesired,
         UINT Flags);


typedef struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
} CURSORSHAPE, *LPCURSORSHAPE;
# 10510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
             HINSTANCE hInst,
         LPCSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
             HINSTANCE hInst,
         LPCWSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);






__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
         HANDLE h,
         UINT type,
         int cx,
         int cy,
         UINT flags);
# 10555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport) BOOL __stdcall DrawIconEx(
         HDC hdc,
         int xLeft,
         int yTop,
         HICON hIcon,
         int cxWidth,
         int cyWidth,
         UINT istepIfAniCur,
             HBRUSH hbrFlickerFreeDraw,
         UINT diFlags);
# 10574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
         PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
         HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
         HICON hIcon,
          PICONINFO piconinfo);


typedef struct _ICONINFOEXA {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    CHAR szModName[260];
    CHAR szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    WCHAR szModName[260];
    WCHAR szResName[260];
} ICONINFOEXW, *PICONINFOEXW;

typedef ICONINFOEXW ICONINFOEX;
typedef PICONINFOEXW PICONINFOEX;





__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExA(
         HICON hicon,
            PICONINFOEXA piconinfo);
__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExW(
         HICON hicon,
            PICONINFOEXW piconinfo);
# 10973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef enum {
    EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0,
    EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1,
} EDIT_CONTROL_FEATURE;
# 11157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
         HWND hDlg,
         LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
         HWND hDlg,
         LPMSG lpMsg);
# 11177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
         HWND hDlg,
            LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
# 11228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
         HWND hwndDlg,
                          LPSTR lpString,
         int chCount,
         int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
         HWND hwndDlg,
                          LPWSTR lpString,
         int chCount,
         int idListBox);






__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);






__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
         HWND hwndDlg,
                         LPSTR lpString,
         int cchOut,
         int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
         HWND hwndDlg,
                         LPWSTR lpString,
         int cchOut,
         int idComboBox);
# 11644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
         HWND hwnd,
         int nBar,
         LPCSCROLLINFO lpsi,
         BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
         HWND hwnd,
         int nBar,
            LPSCROLLINFO lpsi);
# 11701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;

typedef MDICREATESTRUCTW MDICREATESTRUCT;
typedef LPMDICREATESTRUCTW LPMDICREATESTRUCT;





typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcA(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcW(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
# 11794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
         HWND hWndClient,
         LPMSG lpMsg);



__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
         LPCSTR lpClassName,
         LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
         LPCWSTR lpClassName,
         LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);







__declspec(dllimport)
WORD
__stdcall
TileWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                          const HWND * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                          const HWND * lpKids);
# 11879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD mkSize;



    CHAR mkKeylist;
    CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD mkSize;



    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;

typedef MULTIKEYHELPW MULTIKEYHELP;
typedef PMULTIKEYHELPW PMULTIKEYHELP;
typedef LPMULTIKEYHELPW LPMULTIKEYHELP;






typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;

typedef HELPWININFOW HELPWININFO;
typedef PHELPWININFOW PHELPWININFO;
typedef LPHELPWININFOW LPHELPWININFO;
# 11976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
             HWND hWndMain,
             LPCSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
             HWND hWndMain,
             LPCWSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
# 12021 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
         HANDLE hProcess,
         DWORD uiFlags);
# 12218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagTouchPredictionParameters
{
    UINT cbSize;
    UINT dwLatency;
    UINT dwSampleTime;
    UINT bUseHWTimeStamp;
} TOUCHPREDICTIONPARAMETERS, *PTOUCHPREDICTIONPARAMETERS;
# 12438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;

typedef NONCLIENTMETRICSW NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSW PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSW LPNONCLIENTMETRICS;
# 12513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;

typedef ICONMETRICSW ICONMETRICS;
typedef PICONMETRICSW PICONMETRICS;
typedef LPICONMETRICSW LPICONMETRICS;
# 12552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSW, *LPSERIALKEYSW;

typedef SERIALKEYSW SERIALKEYS;
typedef LPSERIALKEYSW LPSERIALKEYS;
# 12592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;

typedef HIGHCONTRASTW HIGHCONTRAST;
typedef LPHIGHCONTRASTW LPHIGHCONTRAST;
# 12641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\tvout.h" 1 3
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\tvout.h" 3
typedef struct _VIDEOPARAMETERS {
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;
# 12641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 2 3
# 12661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
             DEVMODEA* lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
             DEVMODEW* lpDevMode,
         DWORD dwFlags);






__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
             LPCSTR lpszDeviceName,
             DEVMODEA* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
             DEVMODEW* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
# 12707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode);
# 12729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode,
         DWORD dwFlags);
# 12755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
             LPCSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEA lpDisplayDevice,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
             LPCWSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEW lpDisplayDevice,
         DWORD dwFlags);
# 12784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
LONG
__stdcall
GetDisplayConfigBufferSizes(
         UINT32 flags,
          UINT32* numPathArrayElements,
          UINT32* numModeInfoArrayElements);

__declspec(dllimport)
LONG
__stdcall
SetDisplayConfig(
         UINT32 numPathArrayElements,
                                         DISPLAYCONFIG_PATH_INFO* pathArray,
         UINT32 numModeInfoArrayElements,
                                             DISPLAYCONFIG_MODE_INFO* modeInfoArray,
         UINT32 flags);

__declspec(dllimport)
                                   LONG
__stdcall
QueryDisplayConfig(
         UINT32 flags,
            UINT32* numPathArrayElements,
                                                                  DISPLAYCONFIG_PATH_INFO* pathArray,
            UINT32* numModeInfoArrayElements,
                                                                          DISPLAYCONFIG_MODE_INFO* modeInfoArray,


        DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigGetDeviceInfo(
            DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigSetDeviceInfo(
         DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);
# 12834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)

BOOL
__stdcall
SystemParametersInfoA(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni);
__declspec(dllimport)

BOOL
__stdcall
SystemParametersInfoW(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni);
# 12860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)

BOOL
__stdcall
SystemParametersInfoForDpi(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni,
         UINT dpi);
# 12884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
} FILTERKEYS, *LPFILTERKEYS;
# 12911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;
# 12954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;
# 12990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
# 13026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;

typedef SOUNDSENTRYW SOUNDSENTRY;
typedef LPSOUNDSENTRYW LPSOUNDSENTRY;
# 13077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
SoundSentry(void);






typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;
# 13110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagAUDIODESCRIPTION {
    UINT cbSize;
    BOOL Enabled;
    LCID Locale;
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;







__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
         DWORD dwLevel);
# 13142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
         DWORD dwErrCode,
         DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
         HWND hWnd,
                                             LPWSTR pString,
         int cchMaxCount);
# 13168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
CancelShutdown(
    void);
# 13191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
         POINT pt,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
         LPCRECT lprc,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
         HWND hwnd,
         DWORD dwFlags);
# 13224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;

typedef MONITORINFOEXW MONITORINFOEX;
typedef LPMONITORINFOEXW LPMONITORINFOEX;
# 13268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);






typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
             HDC hdc,
             LPCRECT lprcClip,
         MONITORENUMPROC lpfnEnum,
         LPARAM dwData);
# 13310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
         DWORD event,
         HWND hwnd,
         LONG idObject,
         LONG idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild,
    DWORD idEventThread,
    DWORD dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
         DWORD eventMin,
         DWORD eventMax,
             HMODULE hmodWinEventProc,
         WINEVENTPROC pfnWinEventProc,
         DWORD idProcess,
         DWORD idThread,
         DWORD dwFlags);


__declspec(dllimport)
BOOL
__stdcall
IsWinEventHookInstalled(
         DWORD event);
# 13362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
         HWINEVENTHOOK hWinEventHook);
# 13980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, * LPGUITHREADINFO;
# 14012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
         DWORD idThread,
            PGUITHREADINFO pgui);

__declspec(dllimport)
BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);





__declspec(dllimport)
BOOL
__stdcall
SetProcessDPIAware(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsProcessDPIAware(
    void);




__declspec(dllimport)
DPI_AWARENESS_CONTEXT
__stdcall
SetThreadDpiAwarenessContext(
         DPI_AWARENESS_CONTEXT dpiContext);

__declspec(dllimport)
DPI_AWARENESS_CONTEXT
__stdcall
GetThreadDpiAwarenessContext(
    void);

__declspec(dllimport)
DPI_AWARENESS_CONTEXT
__stdcall
GetWindowDpiAwarenessContext(
         HWND hwnd);

__declspec(dllimport)
DPI_AWARENESS
__stdcall
GetAwarenessFromDpiAwarenessContext(
         DPI_AWARENESS_CONTEXT value);

__declspec(dllimport)
BOOL
__stdcall
AreDpiAwarenessContextsEqual(
         DPI_AWARENESS_CONTEXT dpiContextA,
         DPI_AWARENESS_CONTEXT dpiContextB);

__declspec(dllimport)
BOOL
__stdcall
IsValidDpiAwarenessContext(
         DPI_AWARENESS_CONTEXT value);

__declspec(dllimport)
UINT
__stdcall
GetDpiForWindow(
         HWND hwnd);

__declspec(dllimport)
UINT
__stdcall
GetDpiForSystem(
    void);

__declspec(dllimport)
BOOL
__stdcall
EnableNonClientDpiScaling(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
InheritWindowMonitor(
         HWND hwnd,
             HWND hwndInherit);




__declspec(dllimport)
BOOL
__stdcall
SetProcessDpiAwarenessContext(
         DPI_AWARENESS_CONTEXT value);




__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
         HWND hwnd,
                                            LPSTR pszFileName,
         UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
         HWND hwnd,
                                            LPWSTR pszFileName,
         UINT cchFileNameMax);
# 14185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;






__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
            PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
         HWND hwnd,
            PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
         HWND hwnd,
            PTITLEBARINFO pti);


typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;





typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    BOOL fBarFocused:1;
    BOOL fFocused:1;
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
         HWND hwnd,
         LONG idObject,
         LONG idItem,
            PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
         HWND hwnd,
         LONG idObject,
            PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
         HWND hwndCombo,
            PCOMBOBOXINFO pcbi);
# 14335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HWND
__stdcall
GetAncestor(
         HWND hwnd,
         UINT gaFlags);
# 14349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
         HWND hwndParent,
         POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
         HWND hwnd,
                                             LPSTR ptszClassName,
         UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
         HWND hwnd,
                                             LPWSTR ptszClassName,
         UINT cchClassNameMax);
# 14388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPSTR pszItemText,
         UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPWSTR pszItemText,
         UINT cchItemText);
# 14429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
         HWND hwnd);
# 14446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
LockWorkStation(
    void);




__declspec(dllimport)
BOOL
__stdcall
UserHandleGrantAccess(
         HANDLE hUserHandle,
         HANDLE hJob,
         BOOL bGrant);
# 14477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;
# 14510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;
# 14533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
#pragma warning(push)

#pragma warning(disable: 4201)




typedef struct tagRAWMOUSE {



    USHORT usFlags;




    union {
        ULONG ulButtons;
        struct {
            USHORT usButtonFlags;
            USHORT usButtonData;
        } ;
    } ;





    ULONG ulRawButtons;




    LONG lLastX;




    LONG lLastY;




    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;


#pragma warning(pop)
# 14636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagRAWKEYBOARD {



    USHORT MakeCode;





    USHORT Flags;

    USHORT Reserved;




    USHORT VKey;
    UINT Message;




    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;
# 14689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;
# 14705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;
# 14735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
UINT
__stdcall
GetRawInputData(
         HRAWINPUT hRawInput,
         UINT uiCommand,
                                                LPVOID pData,
            PUINT pcbSize,
         UINT cbSizeHeader);
# 14758 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;




    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    } ;
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoA(
             HANDLE hDevice,
         UINT uiCommand,
                                                     LPVOID pData,
            PUINT pcbSize);
__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoW(
             HANDLE hDevice,
         UINT uiCommand,
                                                     LPVOID pData,
            PUINT pcbSize);
# 14822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
UINT
__stdcall
GetRawInputBuffer(
                                     PRAWINPUT pData,
            PUINT pcbSize,
         UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;
# 14878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
RegisterRawInputDevices(
                             PCRAWINPUTDEVICE pRawInputDevices,
         UINT uiNumDevices,
         UINT cbSize);

__declspec(dllimport)
UINT
__stdcall
GetRegisteredRawInputDevices(
                                      PRAWINPUTDEVICE pRawInputDevices,
            PUINT puiNumDevices,
         UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceList(
                                     PRAWINPUTDEVICELIST pRawInputDeviceList,
            PUINT puiNumDevices,
         UINT cbSize);

__declspec(dllimport)
LRESULT
__stdcall
DefRawInputProc(
                       PRAWINPUT* paRawInput,
         INT nInput,
         UINT cbSizeHeader);
# 14944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef enum tagPOINTER_DEVICE_TYPE {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH = 0x00000003,

    POINTER_DEVICE_TYPE_TOUCH_PAD = 0x00000004,

    POINTER_DEVICE_TYPE_MAX = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;

typedef struct tagPOINTER_DEVICE_INFO {
    DWORD displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    ULONG startingCursorId;
    USHORT maxActiveContacts;
    WCHAR productString[520];
} POINTER_DEVICE_INFO;

typedef struct tagPOINTER_DEVICE_PROPERTY {
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
} POINTER_DEVICE_PROPERTY;

typedef enum tagPOINTER_DEVICE_CURSOR_TYPE {
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX = 0xFFFFFFFF
} POINTER_DEVICE_CURSOR_TYPE;

typedef struct tagPOINTER_DEVICE_CURSOR_INFO {
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevices(
            UINT32* deviceCount,
                                   POINTER_DEVICE_INFO *pointerDevices);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevice(
         HANDLE device,
                    POINTER_DEVICE_INFO *pointerDevice);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceProperties(
         HANDLE device,
            UINT32* propertyCount,
                                     POINTER_DEVICE_PROPERTY *pointerProperties);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerDeviceNotifications(
         HWND window,
         BOOL notifyRange);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceRects(
         HANDLE device,
                    RECT* pointerDeviceRect,
                    RECT* displayRect);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceCursors(
         HANDLE device,
            UINT32* cursorCount,
                                   POINTER_DEVICE_CURSOR_INFO *deviceCursors);

__declspec(dllimport)
BOOL
__stdcall
GetRawPointerDeviceData(
         UINT32 pointerId,
         UINT32 historyCount,
         UINT32 propertiesCount,
                                POINTER_DEVICE_PROPERTY* pProperties,
                                                 LONG* pValues);
# 15061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilter(
         UINT message,
         DWORD dwFlag);
# 15086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;
# 15104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilterEx(
         HWND hwnd,
         UINT message,
         DWORD action,
                PCHANGEFILTERSTRUCT pChangeFilterStruct);
# 15133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;
# 15168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagGESTUREINFO {
    UINT cbSize;
    DWORD dwFlags;
    DWORD dwID;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
    DWORD dwSequenceID;
    ULONGLONG ullArguments;
    UINT cbExtraArgs;
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;
# 15189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize;
    DWORD dwFlags;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;
# 15209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetGestureInfo(
         HGESTUREINFO hGestureInfo,
          PGESTUREINFO pGestureInfo);







__declspec(dllimport)
BOOL
__stdcall
GetGestureExtraArgs(
         HGESTUREINFO hGestureInfo,
         UINT cbExtraArgs,
                                    PBYTE pExtraArgs);
# 15240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
CloseGestureInfoHandle(
         HGESTUREINFO hGestureInfo);
# 15254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef struct tagGESTURECONFIG {
    DWORD dwID;
    DWORD dwWant;
    DWORD dwBlock;
} GESTURECONFIG, *PGESTURECONFIG;
# 15308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetGestureConfig(
         HWND hwnd,
         DWORD dwReserved,
         UINT cIDs,
                     PGESTURECONFIG pGestureConfig,

         UINT cbSize);





__declspec(dllimport)
BOOL
__stdcall
GetGestureConfig(
         HWND hwnd,
         DWORD dwReserved,
         DWORD dwFlags,
         PUINT pcIDs,

                            PGESTURECONFIG pGestureConfig,

         UINT cbSize);
# 15363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonCreate(
         HWND hWnd,
         LPCWSTR pwszReason);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonQuery(
         HWND hWnd,
                                LPWSTR pwszBuff,
            DWORD *pcchBuff);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonDestroy(
         HWND hWnd);
# 15396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef enum tagINPUT_MESSAGE_DEVICE_TYPE {
    IMDT_UNAVAILABLE = 0x00000000,
    IMDT_KEYBOARD = 0x00000001,
    IMDT_MOUSE = 0x00000002,
    IMDT_TOUCH = 0x00000004,
    IMDT_PEN = 0x00000008,

    IMDT_TOUCHPAD = 0x00000010,

 } INPUT_MESSAGE_DEVICE_TYPE;

typedef enum tagINPUT_MESSAGE_ORIGIN_ID {
     IMO_UNAVAILABLE = 0x00000000,
     IMO_HARDWARE = 0x00000001,
     IMO_INJECTED = 0x00000002,
     IMO_SYSTEM = 0x00000004,
} INPUT_MESSAGE_ORIGIN_ID;




 typedef struct tagINPUT_MESSAGE_SOURCE {
     INPUT_MESSAGE_DEVICE_TYPE deviceType;
     INPUT_MESSAGE_ORIGIN_ID originId;
 } INPUT_MESSAGE_SOURCE;





__declspec(dllimport)
BOOL
__stdcall
GetCurrentInputMessageSource(
          INPUT_MESSAGE_SOURCE *inputMessageSource);

__declspec(dllimport)
BOOL
__stdcall
GetCIMSSM(
          INPUT_MESSAGE_SOURCE *inputMessageSource);
# 15451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef enum tagAR_STATE {
    AR_ENABLED = 0x0,
    AR_DISABLED = 0x1,
    AR_SUPPRESSED = 0x2,
    AR_REMOTESESSION = 0x4,
    AR_MULTIMON = 0x8,
    AR_NOSENSOR = 0x10,
    AR_NOT_SUPPORTED = 0x20,
    AR_DOCKED = 0x40,
    AR_LAPTOP = 0x80
} AR_STATE, *PAR_STATE;
# 15470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
extern "C++" { inline constexpr AR_STATE operator | (AR_STATE a, AR_STATE b) throw() { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator |= (AR_STATE &a, AR_STATE b) throw() { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline constexpr AR_STATE operator & (AR_STATE a, AR_STATE b) throw() { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator &= (AR_STATE &a, AR_STATE b) throw() { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline constexpr AR_STATE operator ~ (AR_STATE a) throw() { return AR_STATE(~((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a)); } inline constexpr AR_STATE operator ^ (AR_STATE a, AR_STATE b) throw() { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator ^= (AR_STATE &a, AR_STATE b) throw() { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } }
# 15480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
typedef enum ORIENTATION_PREFERENCE {
    ORIENTATION_PREFERENCE_NONE = 0x0,
    ORIENTATION_PREFERENCE_LANDSCAPE = 0x1,
    ORIENTATION_PREFERENCE_PORTRAIT = 0x2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 0x8
} ORIENTATION_PREFERENCE;






extern "C++" { inline constexpr ORIENTATION_PREFERENCE operator | (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) throw() { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator |= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) throw() { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline constexpr ORIENTATION_PREFERENCE operator & (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) throw() { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator &= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) throw() { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline constexpr ORIENTATION_PREFERENCE operator ~ (ORIENTATION_PREFERENCE a) throw() { return ORIENTATION_PREFERENCE(~((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a)); } inline constexpr ORIENTATION_PREFERENCE operator ^ (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) throw() { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator ^= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) throw() { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } }


__declspec(dllimport)
BOOL
__stdcall
GetAutoRotationState(
          PAR_STATE pState);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferences(
          ORIENTATION_PREFERENCE *pOrientation);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferencesByProcessId(
         DWORD dwProcessId,
          ORIENTATION_PREFERENCE *pOrientation,
          BOOL *fRotateScreen);

__declspec(dllimport)
BOOL
__stdcall
SetDisplayAutoRotationPreferences(
         ORIENTATION_PREFERENCE orientation);
# 15533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsImmersiveProcess(
         HANDLE hProcess);

__declspec(dllimport)
BOOL
__stdcall
SetProcessRestrictionExemption(
         BOOL fEnableExemption);
# 15563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
#pragma warning(pop)
# 15574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winuser.h" 3
}
# 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
extern "C" {






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\datetimeapi.h" 1 3
# 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\datetimeapi.h" 3
extern "C" {
# 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\datetimeapi.h" 3
__declspec(dllimport)
int
__stdcall
GetDateFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCSTR lpFormat,
                              LPSTR lpDateStr,
         int cchDate
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate
    );
# 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\datetimeapi.h" 3
__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCSTR lpFormat,
                              LPSTR lpTimeStr,
         int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
    );
# 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\datetimeapi.h" 3
__declspec(dllimport)
int
__stdcall
GetTimeFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate,
             LPCWSTR lpCalendar
    );
# 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\datetimeapi.h" 3
__declspec(dllimport)
int
__stdcall
GetDurationFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration
    );
# 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\datetimeapi.h" 3
}
# 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 2 3






#pragma warning(push)
#pragma warning(disable: 4820)
# 1053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef DWORD LGRPID;




typedef DWORD LCTYPE;




typedef DWORD CALTYPE;





typedef DWORD CALID;
# 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
} CPINFO, *LPCPINFO;



typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;

typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;

typedef CPINFOEXW CPINFOEX;
typedef LPCPINFOEXW LPCPINFOEX;
# 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;

typedef NUMBERFMTW NUMBERFMT;
typedef LPNUMBERFMTW LPNUMBERFMT;
# 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;

typedef CURRENCYFMTW CURRENCYFMT;
typedef LPCURRENCYFMTW LPCURRENCYFMT;
# 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
enum SYSNLS_FUNCTION{
    COMPARE_STRING = 0x0001,
};
typedef DWORD NLS_FUNCTION;
# 1198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFO, *LPNLSVERSIONINFO;
# 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;




typedef DWORD GEOTYPE;
typedef DWORD GEOCLASS;
# 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef LONG GEOID;
# 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
    GEO_ISO_UN_NUMBER = 0x000C,
    GEO_PARENT = 0x000D,
    GEO_DIALINGCODE = 0x000E,
    GEO_CURRENCYCODE= 0x000F,
    GEO_CURRENCYSYMBOL= 0x0010,

    GEO_NAME = 0x0011,
    GEO_ID = 0x0012

};





enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
};






typedef enum _NORM_FORM {
    NormalizationOther = 0,
    NormalizationC = 0x1,
    NormalizationD = 0x2,
    NormalizationKC = 0x5,

    NormalizationKD = 0x6

} NORM_FORM;
# 1328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);

typedef BOOL (__stdcall* GEO_ENUMNAMEPROC)(PWSTR, LPARAM);
# 1415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
} FILEMUIINFO, *PFILEMUIINFO;



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\stringapiset.h" 1 3
# 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\stringapiset.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 1 3
# 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\stringapiset.h" 2 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\stringapiset.h" 3
extern "C" {
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\stringapiset.h" 3
__declspec(dllimport)
int
__stdcall
CompareStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwCmpFlags,
                               LPCWCH lpString1,
         int cchCount1,
                               LPCWCH lpString2,
         int cchCount2,
               LPNLSVERSIONINFO lpVersionInformation,
               LPVOID lpReserved,
               LPARAM lParam
    );


__declspec(dllimport)
int
__stdcall
CompareStringOrdinal(
                               LPCWCH lpString1,
         int cchCount1,
                               LPCWCH lpString2,
         int cchCount2,
         BOOL bIgnoreCase
    );
# 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\stringapiset.h" 3
__declspec(dllimport)
int
__stdcall
CompareStringW(
         LCID Locale,
         DWORD dwCmpFlags,
                               PCNZWCH lpString1,
         int cchCount1,
                               PCNZWCH lpString2,
         int cchCount2
    );





__declspec(dllimport)
int
__stdcall
FoldStringW(
         DWORD dwMapFlags,
                            LPCWCH lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest
    );
# 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\stringapiset.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
         LCID Locale,
         DWORD dwInfoType,
                            LPCWCH lpSrcStr,
         int cchSrc,
                         LPWORD lpCharType
    );





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
         DWORD dwInfoType,
                            LPCWCH lpSrcStr,
         int cchSrc,
          LPWORD lpCharType
    );







__declspec(dllimport)


int
__stdcall
MultiByteToWideChar(
         UINT CodePage,
         DWORD dwFlags,
                                 LPCCH lpMultiByteStr,
         int cbMultiByte,
                                             LPWSTR lpWideCharStr,
         int cchWideChar
    );


__declspec(dllimport)


int
__stdcall
WideCharToMultiByte(
         UINT CodePage,
         DWORD dwFlags,
                                 LPCWCH lpWideCharStr,
         int cchWideChar,
                                                   LPSTR lpMultiByteStr,
         int cbMultiByte,
             LPCCH lpDefaultChar,
              LPBOOL lpUsedDefaultChar
    );






}
# 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 2 3
# 1500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
         UINT CodePage);

__declspec(dllimport)
UINT
__stdcall
GetACP(void);







__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);
# 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
         UINT CodePage,
          LPCPINFO lpCPInfo);


__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXA lpCPInfoEx);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXW lpCPInfoEx);
# 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
CompareStringA(
         LCID Locale,
         DWORD dwCmpFlags,
                          PCNZCH lpString1,
         int cchCount1,
                          PCNZCH lpString2,
         int cchCount2);
# 1615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
FindNLSString(
                            LCID Locale,
                            DWORD dwFindNLSStringFlags,
                           LPCWSTR lpStringSource,
                            int cchSource,
                           LPCWSTR lpStringValue,
                            int cchValue,
                            LPINT pcchFound);




__declspec(dllimport)
int
__stdcall
LCMapStringW(
         LCID Locale,
         DWORD dwMapFlags,
                       LPCWSTR lpSrcStr,
         int cchSrc,
                                               LPWSTR lpDestStr,
         int cchDest);





__declspec(dllimport)
int
__stdcall
LCMapStringA(
         LCID Locale,
         DWORD dwMapFlags,
                       LPCSTR lpSrcStr,
         int cchSrc,
                                               LPSTR lpDestStr,
         int cchDest);
# 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
                              LPWSTR lpLCData,
         int cchData);






__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
                              LPSTR lpLCData,
         int cchData
    );
# 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
         LPCSTR lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
         LPCWSTR lpLCData);
# 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPSTR lpCalData,
         int cchData,
              LPDWORD lpValue);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue);






__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCSTR lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCWSTR lpCalData);
# 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
LoadStringByReference(
               DWORD Flags,
                   PCWSTR Language,
               PCWSTR SourceString,
                                  PWSTR Buffer,
               ULONG cchBuffer,
               PCWSTR Directory,
               PULONG pcchBufferOut
    );
# 1811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
         BYTE TestChar
    );


__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
         UINT CodePage,
         BYTE TestChar
    );




__declspec(dllimport)
int
__stdcall
LCIDToLocaleName(
         LCID Locale,
                              LPWSTR lpName,
         int cchName,
         DWORD dwFlags);



__declspec(dllimport)
LCID
__stdcall
LocaleNameToLCID(
         LPCWSTR lpName,
         DWORD dwFlags);
# 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
GetDurationFormat(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME *lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration);
# 1878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const NUMBERFMTA *lpFormat,
                                LPSTR lpNumberStr,
         int cchNumber);

__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber);







__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const CURRENCYFMTA *lpFormat,
                                  LPSTR lpCurrencyStr,
         int cchCurrency);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency);







__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
         CALINFO_ENUMPROCA lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
         CALINFO_ENUMPROCW lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
# 1959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
         CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
         CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
# 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
         TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
         TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);







__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
         DATEFMT_ENUMPROCA lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
         DATEFMT_ENUMPROCW lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);
# 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
         DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
         DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);
# 2053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
         LGRPID LanguageGroup,
         DWORD dwFlags);



__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
            NLS_FUNCTION Function,
            LCID Locale,
            LPNLSVERSIONINFO lpVersionInformation);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
         NLS_FUNCTION Function,
         DWORD dwFlags,
         LPNLSVERSIONINFO lpVersionInformation,
                       LPCWSTR lpString,
         INT cchStr);


__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
         LCID Locale,
         DWORD dwFlags);
# 2095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
         GEOID Location,
         GEOTYPE GeoType,
                              LPSTR lpGeoData,
         int cchData,
         LANGID LangId);

__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
         GEOID Location,
         GEOTYPE GeoType,
                              LPWSTR lpGeoData,
         int cchData,
         LANGID LangId);







__declspec(dllimport)
int
__stdcall
GetGeoInfoEx(
         PWSTR location,
         GEOTYPE geoType,
                                   PWSTR geoData,
         int geoDataCount);
# 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
         GEOCLASS GeoClass,
         GEOID ParentGeoId,
         GEO_ENUMPROC lpGeoEnumProc);


__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoNames(
         GEOCLASS geoClass,
         GEO_ENUMNAMEPROC geoEnumProc,
             LPARAM data);
# 2164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
         GEOCLASS GeoClass);

__declspec(dllimport)
int
__stdcall
GetUserDefaultGeoName(
                          LPWSTR geoName,
         int geoNameCount
);
# 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
         GEOID GeoId);



__declspec(dllimport)
BOOL
__stdcall
SetUserGeoName(
         PWSTR geoName);



__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
         LCID Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
         LCID Locale
    );



__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);
# 2234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);



__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);
# 2253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);


__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);


__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);
# 2283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
LANGID
__stdcall
SetThreadUILanguage( LANGID LangId);




__declspec(dllimport)
LANGID
__stdcall
GetThreadUILanguage(void);

__declspec(dllimport)
BOOL
__stdcall
GetProcessPreferredUILanguages(
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetProcessPreferredUILanguages(
                DWORD dwFlags,
                PCZZWSTR pwszLanguagesBuffer,
                PULONG pulNumLanguages
);
# 2324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetUserPreferredUILanguages (
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);
# 2344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetSystemPreferredUILanguages (
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetThreadPreferredUILanguages(
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetThreadPreferredUILanguages(
                DWORD dwFlags,
                PCZZWSTR pwszLanguagesBuffer,
                PULONG pulNumLanguages
);

__declspec(dllimport)

BOOL
__stdcall
GetFileMUIInfo(
                        DWORD dwFlags,
                        PCWSTR pcwszFilePath,
                                                                  PFILEMUIINFO pFileMUIInfo,
                        DWORD* pcbFileMUIInfo);

__declspec(dllimport)
BOOL
__stdcall
GetFileMUIPath(
         DWORD dwFlags,
         PCWSTR pcwszFilePath ,
                                             PWSTR pwszLanguage,
            PULONG pcchLanguage,
                                           PWSTR pwszFileMUIPath,
                    PULONG pcchFileMUIPath,
                    PULONGLONG pululEnumerator
);


__declspec(dllimport)
BOOL
__stdcall
GetUILanguageInfo(
         DWORD dwFlags,
         PCZZWSTR pwmszLanguage,
                                             PZZWSTR pwszFallbackLanguages,
                PDWORD pcchFallbackLanguages,
          PDWORD pAttributes
);
# 2420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
NotifyUILanguageChange(
                DWORD dwFlags,
                PCWSTR pcwstrNewLanguage,
                PCWSTR pcwstrPreviousLanguage,
                DWORD dwReserved,
                PDWORD pdwStatusRtrn
);
# 2444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
                         LCID Locale,
                         DWORD dwInfoType,
                         LPCSTR lpSrcStr,
                         int cchSrc,
                         LPWORD lpCharType);
# 2474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
         LCID Locale,
         DWORD dwInfoType,
                       LPCSTR lpSrcStr,
         int cchSrc,
          LPWORD lpCharType);

__declspec(dllimport)
int
__stdcall
FoldStringA(
         DWORD dwMapFlags,
                       LPCSTR lpSrcStr,
         int cchSrc,
                              LPSTR lpDestStr,
         int cchDest);







__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
         LOCALE_ENUMPROCA lpLocaleEnumProc,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
         LOCALE_ENUMPROCW lpLocaleEnumProc,
         DWORD dwFlags);
# 2524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
         LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
         LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);







__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
         LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
         LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);
# 2576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
         UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
         UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
# 2606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
         CODEPAGE_ENUMPROCA lpCodePageEnumProc,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
         CODEPAGE_ENUMPROCW lpCodePageEnumProc,
         DWORD dwFlags);
# 2637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall NormalizeString( NORM_FORM NormForm,
                                                     LPCWSTR lpSrcString,
                                                      int cwSrcLength,
                                                      LPWSTR lpDstString,
                                                      int cwDstLength );

__declspec(dllimport)
BOOL
__stdcall IsNormalizedString( NORM_FORM NormForm,
                                                 LPCWSTR lpString,
                                                  int cwLength );
# 2659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall IdnToAscii( DWORD dwFlags,
                                               LPCWSTR lpUnicodeCharStr,
                                                int cchUnicodeChar,
                                                 LPWSTR lpASCIICharStr,
                                                int cchASCIIChar);





__declspec(dllimport)
int
__stdcall IdnToNameprepUnicode( DWORD dwFlags,
                                                            LPCWSTR lpUnicodeCharStr,
                                                             int cchUnicodeChar,
                                                                LPWSTR lpNameprepCharStr,
                                                             int cchNameprepChar);





__declspec(dllimport)
int
__stdcall IdnToUnicode( DWORD dwFlags,
                                                  LPCWSTR lpASCIICharStr,
                                                   int cchASCIIChar,
                                                     LPWSTR lpUnicodeCharStr,
                                                   int cchUnicodeChar);





__declspec(dllimport)
BOOL
__stdcall VerifyScripts(
            DWORD dwFlags,
            LPCWSTR lpLocaleScripts,
            int cchLocaleScripts,
            LPCWSTR lpTestScripts,
            int cchTestScripts);

__declspec(dllimport)
int
__stdcall GetStringScripts(
                                     DWORD dwFlags,
                                     LPCWSTR lpString,
                                     int cchString,
                                     LPWSTR lpScripts,
                                     int cchScripts);
# 2731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
GetLocaleInfoEx(
             LPCWSTR lpLocaleName,
         LCTYPE LCType,
                                         LPWSTR lpLCData,
         int cchData
);







__declspec(dllimport)
int
__stdcall
GetCalendarInfoEx(
             LPCWSTR lpLocaleName,
         CALID Calendar,
             LPCWSTR lpReserved,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue
);
# 2787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
GetNumberFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber
);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency
);

__declspec(dllimport)
int
__stdcall
GetUserDefaultLocaleName(
                                LPWSTR lpLocaleName,
         int cchLocaleName
);







__declspec(dllimport)
int
__stdcall
GetSystemDefaultLocaleName(
                                LPWSTR lpLocaleName,
         int cchLocaleName
);

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersionEx(
             NLS_FUNCTION function,
                LPCWSTR lpLocaleName,
                LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
DWORD
__stdcall
IsValidNLSVersion(
                NLS_FUNCTION function,
                LPCWSTR lpLocaleName,
                LPNLSVERSIONINFOEX lpVersionInformation
);
# 2859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
FindNLSStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwFindNLSStringFlags,
                          LPCWSTR lpStringSource,
         int cchSource,
                         LPCWSTR lpStringValue,
         int cchValue,
              LPINT pcchFound,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM sortHandle
);
# 2882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
LCMapStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwMapFlags,
                       LPCWSTR lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM sortHandle
);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocaleName(
         LPCWSTR lpLocaleName
);






typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExEx(
         CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
             LPCWSTR lpLocaleName,
         CALID Calendar,
             LPCWSTR lpReserved,
         CALTYPE CalType,
         LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExEx(
         DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsEx(
         TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesEx(
         LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
         DWORD dwFlags,
         LPARAM lParam,
             LPVOID lpReserved
);
# 2969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
__declspec(dllimport)
int
__stdcall
ResolveLocaleName(
                                    LPCWSTR lpNameToResolve,
                                    LPWSTR lpLocaleName,
                                    int cchLocaleName
);
# 2997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnls.h" 3
#pragma warning(pop)



}
# 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 1 3
# 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)
# 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;







typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;







typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
# 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
# 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;
# 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
# 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;




typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;
# 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;
# 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
         DWORD CtrlType
    );
# 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );




__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
         HANDLE hConsoleInput,
                        const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
         HANDLE hConsoleInput,
                        const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
         HANDLE hConsoleOutput,
                                                const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
         HANDLE hConsoleOutput,
                                                const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                          LPSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                          LPWSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                          LPWORD lpAttribute,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                        LPCSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                        LPCWSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                        const WORD *lpAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
         CHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
         WCHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
         HANDLE hConsoleOutput,
         WORD wAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );




__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
            PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
         PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
         HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );
# 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFont(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );


__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

__declspec(dllimport)
BOOL
__stdcall
SetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
         PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);


__declspec(dllimport)
BOOL
__stdcall
GetConsoleHistoryInfo(
          PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleHistoryInfo(
         PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
COORD
__stdcall
GetConsoleFontSize(
         HANDLE hConsoleOutput,
         DWORD nFont
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleSelectionInfo(
          PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
          LPDWORD lpNumberOfMouseButtons
    );







__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
         HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
         HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
         HANDLE hConsoleOutput,
         COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
         HANDLE hConsoleOutput,
         COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
         HANDLE hConsoleOutput,
         const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );






__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
         HANDLE hConsoleOutput,
         BOOL bAbsolute,
         const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
         HANDLE hConsoleOutput,
         WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
         DWORD dwCtrlEvent,
         DWORD dwProcessGroupId);

__declspec(dllimport)
BOOL
__stdcall
FreeConsole(
    void);


__declspec(dllimport)
BOOL
__stdcall
AttachConsole(
         DWORD dwProcessId);





__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize
    );
# 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize);
# 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
         LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
         LPCWSTR lpConsoleTitle
    );
# 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;








# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\consoleapi.h" 1 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\consoleapi.h" 3
extern "C" {






__declspec(dllimport)
BOOL
__stdcall
AllocConsole(
    void
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
         HANDLE hConsoleHandle,
          LPDWORD lpMode
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
         HANDLE hConsoleInput,
          LPDWORD lpNumberOfEvents
    );


__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );






__declspec(dllimport)

BOOL
__stdcall
ReadConsoleA(
         HANDLE hConsoleInput,
                                                                                                    LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
                                                      LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );

__declspec(dllimport)

BOOL
__stdcall
ReadConsoleW(
         HANDLE hConsoleInput,
                                                                                                      LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
                                                      LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );







__declspec(dllimport)

BOOL
__stdcall
ReadConsoleInputA(
         HANDLE hConsoleInput,
                                                    PINPUT_RECORD lpBuffer,
         DWORD nLength,
                                         LPDWORD lpNumberOfEventsRead
    );

__declspec(dllimport)

BOOL
__stdcall
ReadConsoleInputW(
         HANDLE hConsoleInput,
                                                    PINPUT_RECORD lpBuffer,
         DWORD nLength,
                                         LPDWORD lpNumberOfEventsRead
    );







__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
             PHANDLER_ROUTINE HandlerRoutine,
         BOOL Add
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
         HANDLE hConsoleHandle,
         DWORD dwMode
    );


__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
         HANDLE hConsoleOutput,
                                      const void * lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
         HANDLE hConsoleOutput,
                                      const void * lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved
    );
# 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\consoleapi.h" 3
}
# 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 2 3






__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             const SECURITY_ATTRIBUTES *lpSecurityAttributes,
         DWORD dwFlags,
               LPVOID lpScreenBufferData
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
         UINT wCodePageID
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
         UINT wCodePageID
    );
# 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
__declspec(dllimport)
BOOL
__stdcall
GetConsoleDisplayMode(
          LPDWORD lpModeFlags);




BOOL
__stdcall
SetConsoleDisplayMode(
         HANDLE hConsoleOutput,
         DWORD dwFlags,
              PCOORD lpNewScreenBufferDimensions);

__declspec(dllimport)
HWND
__stdcall
GetConsoleWindow(
    void
    );
# 925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
__declspec(dllimport)
DWORD
__stdcall
GetConsoleProcessList(
                                 LPDWORD lpdwProcessList,
         DWORD dwProcessCount);
# 942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasA(
         LPSTR Source,
         LPSTR Target,
         LPSTR ExeName);
__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasW(
         LPWSTR Source,
         LPWSTR Target,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasA(
         LPSTR Source,
                                     LPSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasW(
         LPWSTR Source,
                                     LPWSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthA(
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthW(
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesA(
                                    LPSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesW(
                                    LPWSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesA(
                                      LPSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesW(
                                      LPWSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
# 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincon.h" 3
#pragma warning(pop)



}
# 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 1 3
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\verrsrc.h" 1 3
# 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\verrsrc.h" 3
extern "C" {
# 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\verrsrc.h" 3
typedef struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;


}
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 2 3




extern "C" {
# 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 3
DWORD
__stdcall
VerFindFileA(
                                     DWORD uFlags,
                                     LPCSTR szFileName,
                                     LPCSTR szWinDir,
                                     LPCSTR szAppDir,
                                     LPSTR szCurDir,
                                     PUINT puCurDirLen,
                                     LPSTR szDestDir,
                                     PUINT puDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                     DWORD uFlags,
                                     LPCWSTR szFileName,
                                     LPCWSTR szWinDir,
                                     LPCWSTR szAppDir,
                                     LPWSTR szCurDir,
                                     PUINT puCurDirLen,
                                     LPWSTR szDestDir,
                                     PUINT puDestDirLen
        );
# 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 3
DWORD
__stdcall
VerInstallFileA(
                                     DWORD uFlags,
                                     LPCSTR szSrcFileName,
                                     LPCSTR szDestFileName,
                                     LPCSTR szSrcDir,
                                     LPCSTR szDestDir,
                                     LPCSTR szCurDir,
                                     LPSTR szTmpFile,
                                     PUINT puTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                     DWORD uFlags,
                                     LPCWSTR szSrcFileName,
                                     LPCWSTR szDestFileName,
                                     LPCWSTR szSrcDir,
                                     LPCWSTR szDestDir,
                                     LPCWSTR szCurDir,
                                     LPWSTR szTmpFile,
                                     PUINT puTmpFileLen
        );
# 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 3
DWORD
__stdcall
GetFileVersionInfoSizeA(
                    LPCSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                    LPCWSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );







BOOL
__stdcall
GetFileVersionInfoA(
                            LPCSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                                  LPVOID lpData
        );

BOOL
__stdcall
GetFileVersionInfoW(
                            LPCWSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                                  LPVOID lpData
        );
# 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 3
DWORD __stdcall GetFileVersionInfoSizeExA( DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW( DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);






BOOL __stdcall GetFileVersionInfoExA( DWORD dwFlags,
                                         LPCSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                              LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW( DWORD dwFlags,
                                         LPCWSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                              LPVOID lpData);
# 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 3
DWORD
__stdcall
VerLanguageNameA(
                              DWORD wLang,
                              LPSTR szLang,
                              DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                              DWORD wLang,
                              LPWSTR szLang,
                              DWORD cchLang
        );






BOOL
__stdcall
VerQueryValueA(
             LPCVOID pBlock,
             LPCSTR lpSubBlock,
                                                                                 LPVOID * lplpBuffer,
              PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
             LPCVOID pBlock,
             LPCWSTR lpSubBlock,
                                                                                 LPVOID * lplpBuffer,
              PUINT puLen
        );
# 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winver.h" 3
}
# 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 1 3
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
extern "C" {




#pragma warning(push)
#pragma warning(disable: 4820)
# 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
typedef LONG LSTATUS;
# 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
typedef ACCESS_MASK REGSAM;
# 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
struct val_context {
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
};

typedef struct val_context *PVALCONTEXT;

typedef struct pvalueA {
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA, *PPVALUEA;
typedef struct pvalueW {
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW, *PPVALUEW;

typedef PVALUEW PVALUE;
typedef PPVALUEW PPVALUE;





typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);

typedef QUERYHANDLER *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info *PPROVIDER;

typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA, *PVALENTA;
typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW, *PVALENTW;

typedef VALENTW VALENT;
typedef PVALENTW PVALENT;
# 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
LSTATUS
__stdcall
RegCloseKey(
         HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOverridePredefKey (
         HKEY hKey,
             HKEY hNewHKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenUserClassesRoot(
         HANDLE hToken,
               DWORD dwOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenCurrentUser(
         REGSAM samDesired,
          PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryA (
             LPCSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryW (
             LPCWSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExA (
             LPCSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExW (
             LPCWSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExA(
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExW(
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyA (
         HKEY hKey,
         LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyW (
         HKEY hKey,
         LPCWSTR lpSubKey
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExA(
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExW(
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );






__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
         HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
         HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
         HKEY hBase,
          BOOL *bIsReflectionDisabled
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueA(
         HKEY hKey,
             LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueW(
         HKEY hKey,
             LPCWSTR lpValueName
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyA (
         HKEY hKey,
         DWORD dwIndex,
                              LPSTR lpName,
         DWORD cchName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyW (
         HKEY hKey,
         DWORD dwIndex,
                              LPWSTR lpName,
         DWORD cchName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExA(
         HKEY hKey,
         DWORD dwIndex,
                                                    LPSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                     LPSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExW(
         HKEY hKey,
         DWORD dwIndex,
                                                    LPWSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                     LPWSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueA(
         HKEY hKey,
         DWORD dwIndex,
                                                              LPSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,
                LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueW(
         HKEY hKey,
         DWORD dwIndex,
                                                              LPWSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,
                LPDWORD lpcbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegFlushKey(
         HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegGetKeySecurity(
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
                                                    PSECURITY_DESCRIPTOR pSecurityDescriptor,
            LPDWORD lpcbSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyA(
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpFile
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyW(
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpFile
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegNotifyChangeKeyValue(
         HKEY hKey,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter,
             HANDLE hEvent,
         BOOL fAsynchronous
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExA(
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExW(
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedA (
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedW (
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyA(
         HKEY hKey,
                                                      LPSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyW(
         HKEY hKey,
                                                      LPWSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
                                                                                LPSTR lpData,
                PLONG lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
                                                                                LPWSTR lpData,
                PLONG lpcbData
    );
# 847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesA(
         HKEY hKey,
                           PVALENTA val_list,
         DWORD num_vals,
                                                                                    LPSTR lpValueBuf,
                LPDWORD ldwTotsize
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesW(
         HKEY hKey,
                           PVALENTW val_list,
         DWORD num_vals,
                                                                                    LPWSTR lpValueBuf,
                LPDWORD ldwTotsize
    );
# 878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExA(
         HKEY hKey,
             LPCSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,

                                                 LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExW(
         HKEY hKey,
             LPCWSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,

                                                 LPDWORD lpcbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpNewFile,
         LPCSTR lpOldFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpNewFile,
         LPCWSTR lpOldFile
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyA(
         HKEY hKey,
         LPCSTR lpFile,
         DWORD dwFlags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyW(
         HKEY hKey,
         LPCWSTR lpFile,
         DWORD dwFlags
    );
# 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
LSTATUS
__stdcall
RegRenameKey(
         HKEY hKey,
             LPCWSTR lpSubKeyName,
         LPCWSTR lpNewKeyName
    );



__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyA (
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyW (
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeySecurity(
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
         DWORD dwType,
                                 LPCSTR lpData,
         DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         DWORD dwType,
                                 LPCWSTR lpData,
         DWORD cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExA(
         HKEY hKey,
             LPCSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                                 const BYTE * lpData,
         DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExW(
         HKEY hKey,
             LPCWSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                                 const BYTE * lpData,
         DWORD cbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyA(
         HKEY hKey,
             LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyW(
         HKEY hKey,
             LPCWSTR lpSubKey
    );
# 1091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueA(
         HKEY hKey,
             LPCSTR lpSubKey,
             LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueW(
         HKEY hKey,
             LPCWSTR lpSubKey,
             LPCWSTR lpValueName
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueA(
         HKEY hKey,
             LPCSTR lpSubKey,
             LPCSTR lpValueName,
         DWORD dwType,
                                 LPCVOID lpData,
         DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueW(
         HKEY hKey,
             LPCWSTR lpSubKey,
             LPCWSTR lpValueName,
         DWORD dwType,
                                 LPCVOID lpData,
         DWORD cbData
    );
# 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeA(
         HKEY hKey,
             LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeW(
         HKEY hKey,
             LPCWSTR lpSubKey
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeA (
                HKEY hKeySrc,
                LPCSTR lpSubKey,
                HKEY hKeyDest
    );
# 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueA(
         HKEY hkey,
             LPCSTR lpSubKey,
             LPCSTR lpValue,
         DWORD dwFlags,
              LPDWORD pdwType,







                                                 PVOID pvData,
                LPDWORD pcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueW(
         HKEY hkey,
             LPCWSTR lpSubKey,
             LPCWSTR lpValue,
         DWORD dwFlags,
              LPDWORD pdwType,







                                                 PVOID pvData,
                LPDWORD pcbData
    );
# 1237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeW(
         HKEY hKeySrc,
             LPCWSTR lpSubKey,
         HKEY hKeyDest
    );





__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringA(
         HKEY hKey,
             LPCSTR pszValue,
                                     LPSTR pszOutBuf,
         DWORD cbOutBuf,
              LPDWORD pcbData,
         DWORD Flags,
             LPCSTR pszDirectory
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringW(
         HKEY hKey,
             LPCWSTR pszValue,
                                     LPWSTR pszOutBuf,
         DWORD cbOutBuf,
              LPDWORD pcbData,
         DWORD Flags,
             LPCWSTR pszDirectory
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyA(
         LPCSTR lpFile,
          PHKEY phkResult,
         REGSAM samDesired,
         DWORD dwOptions,
               DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyW(
         LPCWSTR lpFile,
          PHKEY phkResult,
         REGSAM samDesired,
         DWORD dwOptions,
               DWORD Reserved
    );
# 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );

__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );







__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
             LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
             LPWSTR lpMachineName
    );
# 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\reason.h" 1 3
# 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 2 3
# 1389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );



__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );
# 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );






__declspec(dllimport)
DWORD
__stdcall
CheckForHiberboot(
            PBOOLEAN pHiberboot,
         BOOLEAN bClearFlag
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExA(
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExW(
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );
# 1504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winreg.h" 3
#pragma warning(pop)



}
# 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 1 3
# 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)
# 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wnnc.h" 1 3
# 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 2 3
# 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment ;
    LPSTR lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment ;
    LPWSTR lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;

typedef NETRESOURCEW NETRESOURCE;
typedef LPNETRESOURCEW LPNETRESOURCE;
# 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetAddConnectionA(
             LPCSTR lpRemoteName,
             LPCSTR lpPassword,
             LPCSTR lpLocalName
    );

DWORD __stdcall
WNetAddConnectionW(
             LPCWSTR lpRemoteName,
             LPCWSTR lpPassword,
             LPCWSTR lpLocalName
    );







DWORD __stdcall
WNetAddConnection2A(
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection2W(
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetAddConnection3A(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection3W(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetCancelConnectionA(
         LPCSTR lpName,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnectionW(
         LPCWSTR lpName,
         BOOL fForce
    );







DWORD __stdcall
WNetCancelConnection2A(
         LPCSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnection2W(
         LPCWSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );







DWORD __stdcall
WNetGetConnectionA(
         LPCSTR lpLocalName,
                                 LPSTR lpRemoteName,
            LPDWORD lpnLength
    );

DWORD __stdcall
WNetGetConnectionW(
         LPCWSTR lpLocalName,
                                 LPWSTR lpRemoteName,
            LPDWORD lpnLength
    );
# 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetRestoreSingleConnectionW(
             HWND hwndParent,
             LPCWSTR lpDevice,
             BOOL fUseUI
    );
# 322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetUseConnectionA(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserId,
             DWORD dwFlags,
                                    LPSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );

DWORD __stdcall
WNetUseConnectionW(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserId,
             DWORD dwFlags,
                                    LPWSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );
# 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetConnectionDialog(
         HWND hwnd,
         DWORD dwType
    );


DWORD __stdcall
WNetDisconnectDialog(
             HWND hwnd,
         DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;

typedef CONNECTDLGSTRUCTW CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTW LPCONNECTDLGSTRUCT;
# 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetConnectionDialog1A(
            LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetConnectionDialog1W(
            LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );






typedef struct _DISCDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;

typedef DISCDLGSTRUCTW DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTW LPDISCDLGSTRUCT;
# 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetDisconnectDialog1A(
         LPDISCDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetDisconnectDialog1W(
         LPDISCDLGSTRUCTW lpConnDlgStruct
    );
# 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetOpenEnumA(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEA lpNetResource,
          LPHANDLE lphEnum
    );

DWORD __stdcall
WNetOpenEnumW(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEW lpNetResource,
          LPHANDLE lphEnum
    );







DWORD __stdcall
WNetEnumResourceA(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetEnumResourceW(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );







DWORD __stdcall
WNetCloseEnum(
         HANDLE hEnum
    );



DWORD __stdcall
WNetGetResourceParentA(
         LPNETRESOURCEA lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );

DWORD __stdcall
WNetGetResourceParentW(
         LPNETRESOURCEW lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );







DWORD __stdcall
WNetGetResourceInformationA(
         LPNETRESOURCEA lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
             LPSTR *lplpSystem
    );

DWORD __stdcall
WNetGetResourceInformationW(
         LPNETRESOURCEW lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
             LPWSTR *lplpSystem
    );
# 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;

typedef UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOW LPUNIVERSAL_NAME_INFO;





typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;

typedef REMOTE_NAME_INFOW REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOW LPREMOTE_NAME_INFO;






DWORD __stdcall
WNetGetUniversalNameA(
         LPCSTR lpLocalPath,
         DWORD dwInfoLevel,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetUniversalNameW(
         LPCWSTR lpLocalPath,
         DWORD dwInfoLevel,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );
# 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetGetUserA(
             LPCSTR lpName,
                             LPSTR lpUserName,
             LPDWORD lpnLength
    );




DWORD __stdcall
WNetGetUserW(
             LPCWSTR lpName,
                             LPWSTR lpUserName,
             LPDWORD lpnLength
    );
# 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetGetProviderNameA(
            DWORD dwNetType,
                                LPSTR lpProviderName,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetProviderNameW(
            DWORD dwNetType,
                                LPWSTR lpProviderName,
            LPDWORD lpBufferSize
    );






typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;






DWORD __stdcall
WNetGetNetworkInformationA(
          LPCSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );

DWORD __stdcall
WNetGetNetworkInformationW(
          LPCWSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );
# 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
DWORD __stdcall
WNetGetLastErrorA(
          LPDWORD lpError,
                                LPSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPSTR lpNameBuf,
         DWORD nNameBufSize
    );

DWORD __stdcall
WNetGetLastErrorW(
          LPDWORD lpError,
                                LPWSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPWSTR lpNameBuf,
         DWORD nNameBufSize
    );
# 818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT, *LPNETCONNECTINFOSTRUCT;







DWORD __stdcall
MultinetGetConnectionPerformanceA(
          LPNETRESOURCEA lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );

DWORD __stdcall
MultinetGetConnectionPerformanceW(
          LPNETRESOURCEW lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
# 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winnetwk.h" 3
#pragma warning(pop)



}
# 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\cderr.h" 1 3
# 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dde.h" 1 3
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dde.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)



extern "C" {
# 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dde.h" 3
typedef struct {

        unsigned short bAppReturnCode:8,
                 reserved:6,
                 fBusy:1,
   fAck:1;



} DDEACK;
# 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dde.h" 3
typedef struct {

        unsigned short reserved:14,
                 fDeferUpd:1,
   fAckReq:1;



 short cfFormat;
} DDEADVISE;
# 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dde.h" 3
typedef struct {

 unsigned short unused:12,
                 fResponse:1,
                 fRelease:1,
                 reserved:1,
                 fAckReq:1;



 short cfFormat;
 BYTE Value[1];
} DDEDATA;
# 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dde.h" 3
typedef struct {

 unsigned short unused:13,

   fRelease:1,
   fReserved:2;



 short cfFormat;
 BYTE Value[1];


} DDEPOKE;
# 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dde.h" 3
typedef struct {

        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
   fAckReq:1;



 short cfFormat;
} DDELN;

typedef struct {

 unsigned short unused:12,
                 fAck:1,
                 fRelease:1,
                 fReserved:1,
                 fAckReq:1;



 short cfFormat;
 BYTE rgb[1];
} DDEUP;






BOOL
__stdcall
DdeSetQualityOfService(
    HWND hwndClient,
    const SECURITY_QUALITY_OF_SERVICE *pqosNew,
    PSECURITY_QUALITY_OF_SERVICE pqosPrev);

BOOL
__stdcall
ImpersonateDdeClientWindow(
    HWND hWndClient,
    HWND hWndServer);




LPARAM __stdcall PackDDElParam( UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
BOOL __stdcall UnpackDDElParam( UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
BOOL __stdcall FreeDDElParam( UINT msg, LPARAM lParam);
LPARAM __stdcall ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);





}



#pragma warning(pop)
# 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)



extern "C" {
# 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 3
struct HCONVLIST__{int unused;}; typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__{int unused;}; typedef struct HCONV__ *HCONV;
struct HSZ__{int unused;}; typedef struct HSZ__ *HSZ;
struct HDDEDATA__{int unused;}; typedef struct HDDEDATA__ *HDDEDATA;




typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR, *PHSZPAIR;




typedef struct tagCONVCONTEXT {
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
} CONVCONTEXT, *PCONVCONTEXT;




typedef struct tagCONVINFO {
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
} CONVINFO, *PCONVINFO;
# 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 3
typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);





UINT
__stdcall
DdeInitializeA(
            LPDWORD pidInst,
         PFNCALLBACK pfnCallback,
         DWORD afCmd,
               DWORD ulRes);
UINT
__stdcall
DdeInitializeW(
            LPDWORD pidInst,
         PFNCALLBACK pfnCallback,
         DWORD afCmd,
               DWORD ulRes);
# 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 3
BOOL
__stdcall
DdeUninitialize(
         DWORD idInst);




HCONVLIST
__stdcall
DdeConnectList(
         DWORD idInst,
         HSZ hszService,
         HSZ hszTopic,
         HCONVLIST hConvList,
             PCONVCONTEXT pCC);

HCONV
__stdcall
DdeQueryNextServer(
         HCONVLIST hConvList,
         HCONV hConvPrev);
BOOL
__stdcall
DdeDisconnectList(
         HCONVLIST hConvList);




HCONV
__stdcall
DdeConnect(
         DWORD idInst,
         HSZ hszService,
         HSZ hszTopic,
             PCONVCONTEXT pCC);

BOOL
__stdcall
DdeDisconnect(
         HCONV hConv);

HCONV
__stdcall
DdeReconnect(
         HCONV hConv);

UINT
__stdcall
DdeQueryConvInfo(
         HCONV hConv,
         DWORD idTransaction,
            PCONVINFO pConvInfo);

BOOL
__stdcall
DdeSetUserHandle(
         HCONV hConv,
         DWORD id,
         DWORD_PTR hUser);

BOOL
__stdcall
DdeAbandonTransaction(
         DWORD idInst,
         HCONV hConv,
         DWORD idTransaction);





BOOL
__stdcall
DdePostAdvise(
         DWORD idInst,
         HSZ hszTopic,
         HSZ hszItem);

BOOL
__stdcall
DdeEnableCallback(
         DWORD idInst,
         HCONV hConv,
         UINT wCmd);

BOOL
__stdcall
DdeImpersonateClient(
         HCONV hConv);







HDDEDATA
__stdcall
DdeNameService(
         DWORD idInst,
             HSZ hsz1,
             HSZ hsz2,
         UINT afCmd);
# 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 3
HDDEDATA
__stdcall
DdeClientTransaction(
             LPBYTE pData,
         DWORD cbData,
         HCONV hConv,
             HSZ hszItem,
         UINT wFmt,
         UINT wType,
         DWORD dwTimeout,
              LPDWORD pdwResult);






HDDEDATA
__stdcall
DdeCreateDataHandle(
         DWORD idInst,
                             LPBYTE pSrc,
         DWORD cb,
         DWORD cbOff,
             HSZ hszItem,
         UINT wFmt,
         UINT afCmd);

HDDEDATA
__stdcall
DdeAddData(
         HDDEDATA hData,
                         LPBYTE pSrc,
         DWORD cb,
         DWORD cbOff);

DWORD
__stdcall
DdeGetData(
         HDDEDATA hData,
                                  LPBYTE pDst,
         DWORD cbMax,
         DWORD cbOff);

LPBYTE
__stdcall
DdeAccessData(
         HDDEDATA hData,
              LPDWORD pcbDataSize);

BOOL
__stdcall
DdeUnaccessData(
         HDDEDATA hData);

BOOL
__stdcall
DdeFreeDataHandle(
         HDDEDATA hData);




UINT
__stdcall
DdeGetLastError(
         DWORD idInst);
# 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 3
HSZ
__stdcall
DdeCreateStringHandleA(
         DWORD idInst,
         LPCSTR psz,
         int iCodePage);
HSZ
__stdcall
DdeCreateStringHandleW(
         DWORD idInst,
         LPCWSTR psz,
         int iCodePage);






DWORD
__stdcall
DdeQueryStringA(
         DWORD idInst,
         HSZ hsz,
                             LPSTR psz,
         DWORD cchMax,
         int iCodePage);
DWORD
__stdcall
DdeQueryStringW(
         DWORD idInst,
         HSZ hsz,
                             LPWSTR psz,
         DWORD cchMax,
         int iCodePage);






BOOL
__stdcall
DdeFreeStringHandle(
         DWORD idInst,
         HSZ hsz);

BOOL
__stdcall
DdeKeepStringHandle(
         DWORD idInst,
         HSZ hsz);

int
__stdcall
DdeCmpStringHandles(
         HSZ hsz1,
         HSZ hsz2);






typedef struct tagDDEML_MSG_HOOK_DATA {
    UINT_PTR uiLo;
    UINT_PTR uiHi;
    DWORD cbData;
    DWORD Data[8];
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;


typedef struct tagMONMSGSTRUCT {
    UINT cb;
    HWND hwndTo;
    DWORD dwTime;
    HANDLE hTask;
    UINT wMsg;
    WPARAM wParam;
    LPARAM lParam;
    DDEML_MSG_HOOK_DATA dmhd;
} MONMSGSTRUCT, *PMONMSGSTRUCT;

typedef struct tagMONCBSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    DWORD dwRet;
    UINT wType;
    UINT wFmt;
    HCONV hConv;
    HSZ hsz1;
    HSZ hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;
    DWORD cbData;
    DWORD Data[8];
} MONCBSTRUCT, *PMONCBSTRUCT;

typedef struct tagMONHSZSTRUCTA {
    UINT cb;
    BOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    CHAR str[1];
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW {
    UINT cb;
    BOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    WCHAR str[1];
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;

typedef MONHSZSTRUCTW MONHSZSTRUCT;
typedef PMONHSZSTRUCTW PMONHSZSTRUCT;
# 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 3
typedef struct tagMONERRSTRUCT {
    UINT cb;
    UINT wLastError;
    DWORD dwTime;
    HANDLE hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;

typedef struct tagMONLINKSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    BOOL fEstablished;
    BOOL fNoData;
    HSZ hszSvc;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    BOOL fServer;
    HCONV hConvServer;
    HCONV hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;

typedef struct tagMONCONVSTRUCT {
    UINT cb;
    BOOL fConnect;
    DWORD dwTime;
    HANDLE hTask;
    HSZ hszSvc;
    HSZ hszTopic;
    HCONV hConvClient;
    HCONV hConvServer;
} MONCONVSTRUCT, *PMONCONVSTRUCT;
# 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ddeml.h" 3
}



#pragma warning(pop)
# 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dlgs.h" 1 3
# 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dlgs.h" 3
typedef struct tagCRGB
{
    BYTE bRed;
    BYTE bGreen;
    BYTE bBlue;
    BYTE bExtra;
} CRGB;
# 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\lzexpand.h" 1 3
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\lzexpand.h" 3
extern "C" {
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\lzexpand.h" 3
INT
__stdcall
LZStart(
    void
    );

void
__stdcall
LZDone(
    void
    );




LONG
__stdcall
CopyLZFile(
         INT hfSource,
         INT hfDest
    );



LONG
__stdcall
LZCopy(
         INT hfSource,
         INT hfDest
    );



INT
__stdcall
LZInit(
         INT hfSource
    );



INT
__stdcall
GetExpandedNameA(
         LPSTR lpszSource,
                           LPSTR lpszBuffer
    );


INT
__stdcall
GetExpandedNameW(
         LPWSTR lpszSource,
                           LPWSTR lpszBuffer
    );
# 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\lzexpand.h" 3
INT
__stdcall
LZOpenFileA(
         LPSTR lpFileName,
            LPOFSTRUCT lpReOpenBuf,
         WORD wStyle
    );


INT
__stdcall
LZOpenFileW(
         LPWSTR lpFileName,
            LPOFSTRUCT lpReOpenBuf,
         WORD wStyle
    );
# 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\lzexpand.h" 3
LONG
__stdcall
LZSeek(
         INT hFile,
         LONG lOffset,
         INT iOrigin
    );



INT
__stdcall
LZRead(
         INT hFile,
                                          CHAR* lpBuffer,
         INT cbRead
    );

void
__stdcall
LZClose(
         INT hFile
    );





}
# 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 1 3
# 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 1 3
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 3
#pragma warning(disable: 4201)



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 2 3








extern "C" {
# 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 3
typedef UINT MMVERSION;



typedef UINT MMRESULT;



typedef UINT *LPUINT;




typedef struct mmtime_tag
{
    UINT wType;
    union
    {
        DWORD ms;
        DWORD sample;
        DWORD cb;
        DWORD ticks;


        struct
        {
            BYTE hour;
            BYTE min;
            BYTE sec;
            BYTE frame;
            BYTE fps;
            BYTE dummy;

            BYTE pad[2];

        } smpte;


        struct
        {
            DWORD songptrpos;
        } midi;
    } u;
} MMTIME, *PMMTIME, *NPMMTIME, *LPMMTIME;
# 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 3
struct HDRVR__{int unused;}; typedef struct HDRVR__ *HDRVR;
# 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 3
typedef void (__stdcall DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef DRVCALLBACK *LPDRVCALLBACK;

typedef DRVCALLBACK *PDRVCALLBACK;






}




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 2 3
# 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3








extern "C" {
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 2 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
extern "C" {
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef DWORD MCIERROR;




typedef UINT MCIDEVICEID;



typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);




__declspec(dllimport)
MCIERROR
__stdcall
mciSendCommandA(
         MCIDEVICEID mciId,
         UINT uMsg,
             DWORD_PTR dwParam1,
             DWORD_PTR dwParam2
    );

__declspec(dllimport)
MCIERROR
__stdcall
mciSendCommandW(
         MCIDEVICEID mciId,
         UINT uMsg,
             DWORD_PTR dwParam1,
             DWORD_PTR dwParam2
    );






__declspec(dllimport)
MCIERROR
__stdcall
mciSendStringA(
         LPCSTR lpstrCommand,
                                    LPSTR lpstrReturnString,
         UINT uReturnLength,
             HWND hwndCallback
    );

__declspec(dllimport)
MCIERROR
__stdcall
mciSendStringW(
         LPCWSTR lpstrCommand,
                                    LPWSTR lpstrReturnString,
         UINT uReturnLength,
             HWND hwndCallback
    );






__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDA(
         LPCSTR pszDevice
    );

__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDW(
         LPCWSTR pszDevice
    );






__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDFromElementIDA(
         DWORD dwElementID,
         LPCSTR lpstrType
    );

__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDFromElementIDW(
         DWORD dwElementID,
         LPCWSTR lpstrType
    );






__declspec(dllimport)
BOOL
__stdcall
mciGetErrorStringA(
         MCIERROR mcierr,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
BOOL
__stdcall
mciGetErrorStringW(
         MCIERROR mcierr,
                          LPWSTR pszText,
         UINT cchText
    );
# 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
mciSetYieldProc(
         MCIDEVICEID mciId,
             YIELDPROC fpYieldProc,
         DWORD dwYieldData
    );




__declspec(dllimport)
HTASK
__stdcall
mciGetCreatorTask(
         MCIDEVICEID mciId
    );

__declspec(dllimport)
YIELDPROC
__stdcall
mciGetYieldProc(
         MCIDEVICEID mciId,
         LPDWORD pdwYieldData
    );
# 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_GENERIC_PARMS {
    DWORD_PTR dwCallback;
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS, *LPMCI_GENERIC_PARMS;





typedef struct tagMCI_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;

typedef MCI_OPEN_PARMSW MCI_OPEN_PARMS;
typedef PMCI_OPEN_PARMSW PMCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSW LPMCI_OPEN_PARMS;
# 566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS, *LPMCI_PLAY_PARMS;



typedef struct tagMCI_SEEK_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTo;
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS, *LPMCI_SEEK_PARMS;



typedef struct tagMCI_STATUS_PARMS {
    DWORD_PTR dwCallback;
    DWORD_PTR dwReturn;
    DWORD dwItem;
    DWORD dwTrack;
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS, * LPMCI_STATUS_PARMS;





typedef struct tagMCI_INFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSA, * LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSW, * LPMCI_INFO_PARMSW;

typedef MCI_INFO_PARMSW MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSW LPMCI_INFO_PARMS;
# 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_GETDEVCAPS_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwReturn;
    DWORD dwItem;
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS, * LPMCI_GETDEVCAPS_PARMS;





typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, * LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, * LPMCI_SYSINFO_PARMSW;

typedef MCI_SYSINFO_PARMSW MCI_SYSINFO_PARMS;
typedef PMCI_SYSINFO_PARMSW PMCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSW LPMCI_SYSINFO_PARMS;
# 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
} MCI_SET_PARMS, *PMCI_SET_PARMS, *LPMCI_SET_PARMS;



typedef struct tagMCI_BREAK_PARMS {
    DWORD_PTR dwCallback;

    int nVirtKey;
    HWND hwndBreak;






} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS, * LPMCI_BREAK_PARMS;






typedef struct tagMCI_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, * LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, * LPMCI_SAVE_PARMSW;

typedef MCI_SAVE_PARMSW MCI_SAVE_PARMS;
typedef PMCI_SAVE_PARMSW PMCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSW LPMCI_SAVE_PARMS;
# 721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, * LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, * LPMCI_LOAD_PARMSW;

typedef MCI_LOAD_PARMSW MCI_LOAD_PARMS;
typedef PMCI_LOAD_PARMSW PMCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSW LPMCI_LOAD_PARMS;
# 748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_RECORD_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_RECORD_PARMS, *LPMCI_RECORD_PARMS;
# 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_VD_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS, *LPMCI_VD_PLAY_PARMS;



typedef struct tagMCI_VD_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS, *LPMCI_VD_STEP_PARMS;





typedef struct tagMCI_VD_ESCAPE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;

typedef MCI_VD_ESCAPE_PARMSW MCI_VD_ESCAPE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSW PMCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSW LPMCI_VD_ESCAPE_PARMS;
# 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_WAVE_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;

typedef MCI_WAVE_OPEN_PARMSW MCI_WAVE_OPEN_PARMS;
typedef PMCI_WAVE_OPEN_PARMSW PMCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSW LPMCI_WAVE_OPEN_PARMS;
# 942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_WAVE_DELETE_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS, *LPMCI_WAVE_DELETE_PARMS;



typedef struct tagMCI_WAVE_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;

    UINT wInput;
    UINT wOutput;






    WORD wFormatTag;
    WORD wReserved2;
    WORD nChannels;
    WORD wReserved3;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wReserved4;
    WORD wBitsPerSample;
    WORD wReserved5;
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS, * LPMCI_WAVE_SET_PARMS;
# 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_SEQ_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    DWORD dwTempo;
    DWORD dwPort;
    DWORD dwSlave;
    DWORD dwMaster;
    DWORD dwOffset;
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS, * LPMCI_SEQ_SET_PARMS;
# 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_ANIM_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;

typedef MCI_ANIM_OPEN_PARMSW MCI_ANIM_OPEN_PARMS;
typedef PMCI_ANIM_OPEN_PARMSW PMCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSW LPMCI_ANIM_OPEN_PARMS;
# 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_ANIM_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS, *LPMCI_ANIM_PLAY_PARMS;



typedef struct tagMCI_ANIM_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS, *LPMCI_ANIM_STEP_PARMS;





typedef struct tagMCI_ANIM_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, * LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, * LPMCI_ANIM_WINDOW_PARMSW;

typedef MCI_ANIM_WINDOW_PARMSW MCI_ANIM_WINDOW_PARMS;
typedef PMCI_ANIM_WINDOW_PARMSW PMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSW LPMCI_ANIM_WINDOW_PARMS;
# 1191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_ANIM_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

} MCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * PMCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * LPMCI_ANIM_RECT_PARMS;



typedef struct tagMCI_ANIM_UPDATE_PARMS {
    DWORD_PTR dwCallback;
    RECT rc;
    HDC hDC;
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS, * LPMCI_ANIM_UPDATE_PARMS;
# 1257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_OVLY_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;

typedef MCI_OVLY_OPEN_PARMSW MCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_OPEN_PARMSW PMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSW LPMCI_OVLY_OPEN_PARMS;
# 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_OVLY_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, * LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, * LPMCI_OVLY_WINDOW_PARMSW;

typedef MCI_OVLY_WINDOW_PARMSW MCI_OVLY_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSW PMCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSW LPMCI_OVLY_WINDOW_PARMS;
# 1337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_OVLY_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS, * LPMCI_OVLY_RECT_PARMS;





typedef struct tagMCI_OVLY_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, * LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, * LPMCI_OVLY_SAVE_PARMSW;

typedef MCI_OVLY_SAVE_PARMSW MCI_OVLY_SAVE_PARMS;
typedef PMCI_OVLY_SAVE_PARMSW PMCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSW LPMCI_OVLY_SAVE_PARMS;
# 1382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
typedef struct tagMCI_OVLY_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, * LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, * LPMCI_OVLY_LOAD_PARMSW;

typedef MCI_OVLY_LOAD_PARMSW MCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_LOAD_PARMSW PMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSW LPMCI_OVLY_LOAD_PARMS;
# 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mciapi.h" 3
DWORD_PTR
__stdcall
mciGetDriverData(
    MCIDEVICEID wDeviceID
    );

UINT
__stdcall
mciLoadCommandResource(
    HANDLE hInstance,
    LPCWSTR lpResName,
    UINT wType
    );

BOOL
__stdcall
mciSetDriverData(
    MCIDEVICEID wDeviceID,
    DWORD_PTR dwData
    );

UINT
__stdcall
mciDriverYield(
    MCIDEVICEID wDeviceID
    );

BOOL
__stdcall
mciDriverNotify(
    HANDLE hwndCallback,
    MCIDEVICEID wDeviceID,
    UINT uStatus
    );

BOOL
__stdcall
mciFreeCommandResource(
    UINT wTable
    );






}
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 2 3
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
extern "C" {
# 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
typedef struct DRVCONFIGINFOEX {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
    DWORD dnDevNode;
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX, *NPDRVCONFIGINFOEX, *LPDRVCONFIGINFOEX;
# 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
typedef struct tagDRVCONFIGINFO {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
} DRVCONFIGINFO, *PDRVCONFIGINFO, *NPDRVCONFIGINFO, *LPDRVCONFIGINFO;
# 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
typedef LRESULT (__stdcall* DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);

__declspec(dllimport)
LRESULT
__stdcall
CloseDriver(
         HDRVR hDriver,
         LPARAM lParam1,
         LPARAM lParam2
    );

__declspec(dllimport)
HDRVR
__stdcall
OpenDriver(
         LPCWSTR szDriverName,
         LPCWSTR szSectionName,
         LPARAM lParam2
    );

__declspec(dllimport)
LRESULT
__stdcall
SendDriverMessage(
         HDRVR hDriver,
         UINT message,
         LPARAM lParam1,
         LPARAM lParam2
    );

__declspec(dllimport)
HMODULE
__stdcall
DrvGetModuleHandle(
         HDRVR hDriver
    );

__declspec(dllimport)
HMODULE
__stdcall
GetDriverModuleHandle(
         HDRVR hDriver
    );

__declspec(dllimport)
LRESULT
__stdcall
DefDriverProc(
         DWORD_PTR dwDriverIdentifier,
         HDRVR hdrvr,
         UINT uMsg,
         LPARAM lParam1,
         LPARAM lParam2
    );
# 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
BOOL
__stdcall
DriverCallback(
    DWORD_PTR dwCallback,
    DWORD dwFlags,
    HDRVR hDevice,
    DWORD dwMsg,
    DWORD_PTR dwUser,
    DWORD_PTR dwParam1,
    DWORD_PTR dwParam2
    );
# 222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
LONG
__stdcall
sndOpenSound(
         LPCWSTR EventName,
         LPCWSTR AppName,
         INT32 Flags,
             PHANDLE FileHandle
    );
# 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
typedef DWORD (__stdcall *DRIVERMSGPROC)(DWORD, DWORD, DWORD_PTR, DWORD_PTR, DWORD_PTR);

UINT
__stdcall
mmDrvInstall(
    HDRVR hDriver,
    LPCWSTR wszDrvEntry,
    DRIVERMSGPROC drvMessage,
    UINT wFlags
    );
# 292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
typedef DWORD FOURCC;
typedef char * HPSTR;
struct HMMIO__{int unused;}; typedef struct HMMIO__ *HMMIO;
typedef LRESULT (__stdcall MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg,
            LPARAM lParam1, LPARAM lParam2);
typedef MMIOPROC *LPMMIOPROC;



typedef struct _MMIOINFO
{

        DWORD dwFlags;
        FOURCC fccIOProc;
        LPMMIOPROC pIOProc;
        UINT wErrorRet;
        HTASK htask;


        LONG cchBuffer;
        HPSTR pchBuffer;
        HPSTR pchNext;
        HPSTR pchEndRead;
        HPSTR pchEndWrite;
        LONG lBufOffset;


        LONG lDiskOffset;
        DWORD adwInfo[3];


        DWORD dwReserved1;
        DWORD dwReserved2;
        HMMIO hmmio;
} MMIOINFO, *PMMIOINFO, *NPMMIOINFO, *LPMMIOINFO;
typedef const MMIOINFO *LPCMMIOINFO;


typedef struct _MMCKINFO
{
        FOURCC ckid;
        DWORD cksize;
        FOURCC fccType;
        DWORD dwDataOffset;
        DWORD dwFlags;
} MMCKINFO, *PMMCKINFO, *NPMMCKINFO, *LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;
# 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
__declspec(dllimport)
FOURCC
__stdcall
mmioStringToFOURCCA(
    LPCSTR sz,
         UINT uFlags
    );

__declspec(dllimport)
FOURCC
__stdcall
mmioStringToFOURCCW(
    LPCWSTR sz,
         UINT uFlags
    );






__declspec(dllimport)
LPMMIOPROC
__stdcall
mmioInstallIOProcA(
         FOURCC fccIOProc,
             LPMMIOPROC pIOProc,
         DWORD dwFlags
    );

__declspec(dllimport)
LPMMIOPROC
__stdcall
mmioInstallIOProcW(
         FOURCC fccIOProc,
             LPMMIOPROC pIOProc,
         DWORD dwFlags
    );






__declspec(dllimport)
HMMIO
__stdcall
mmioOpenA(
                                   LPSTR pszFileName,
                LPMMIOINFO pmmioinfo,
         DWORD fdwOpen
    );

__declspec(dllimport)
HMMIO
__stdcall
mmioOpenW(
                                   LPWSTR pszFileName,
                LPMMIOINFO pmmioinfo,
         DWORD fdwOpen
    );






__declspec(dllimport)
MMRESULT
__stdcall
mmioRenameA(
         LPCSTR pszFileName,
         LPCSTR pszNewFileName,
             LPCMMIOINFO pmmioinfo,
         DWORD fdwRename
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioRenameW(
         LPCWSTR pszFileName,
         LPCWSTR pszNewFileName,
             LPCMMIOINFO pmmioinfo,
         DWORD fdwRename
    );
# 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
mmioClose(
         HMMIO hmmio,
         UINT fuClose
    );

__declspec(dllimport)
LONG
__stdcall
mmioRead(
         HMMIO hmmio,
                            HPSTR pch,
         LONG cch
    );

__declspec(dllimport)
LONG
__stdcall
mmioWrite(
         HMMIO hmmio,
                          const char * pch,
         LONG cch
    );

__declspec(dllimport)
LONG
__stdcall
mmioSeek(
         HMMIO hmmio,
         LONG lOffset,
         int iOrigin
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioGetInfo(
         HMMIO hmmio,
          LPMMIOINFO pmmioinfo,
         UINT fuInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioSetInfo(
         HMMIO hmmio,
         LPCMMIOINFO pmmioinfo,
         UINT fuInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioSetBuffer(
         HMMIO hmmio,
                                LPSTR pchBuffer,
         LONG cchBuffer,
         UINT fuBuffer
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioFlush(
         HMMIO hmmio,
         UINT fuFlush
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioAdvance(
         HMMIO hmmio,
             LPMMIOINFO pmmioinfo,
         UINT fuAdvance
    );

__declspec(dllimport)
LRESULT
__stdcall
mmioSendMessage(
         HMMIO hmmio,
         UINT uMsg,
             LPARAM lParam1,
             LPARAM lParam2
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioDescend(
         HMMIO hmmio,
            LPMMCKINFO pmmcki,
             const MMCKINFO * pmmckiParent,
         UINT fuDescend
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioAscend(
         HMMIO hmmio,
         LPMMCKINFO pmmcki,
         UINT fuAscend
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioCreateChunk(
         HMMIO hmmio,
         LPMMCKINFO pmmcki,
         UINT fuCreate
    );
# 649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi.h" 3
}
# 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi2.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi2.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi2.h" 2 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi2.h" 3
extern "C" {






typedef void (__stdcall TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
typedef TIMECALLBACK *LPTIMECALLBACK;
# 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmiscapi2.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
timeSetEvent(
         UINT uDelay,
         UINT uResolution,
         LPTIMECALLBACK fptc,
         DWORD_PTR dwUser,
         UINT fuEvent
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeKillEvent(
         UINT uTimerID
    );






}
# 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\playsoundapi.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\playsoundapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\playsoundapi.h" 2 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\playsoundapi.h" 3
extern "C" {
# 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\playsoundapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
sndPlaySoundA(
             LPCSTR pszSound,
         UINT fuSound
    );

__declspec(dllimport)
BOOL
__stdcall
sndPlaySoundW(
             LPCWSTR pszSound,
         UINT fuSound
    );
# 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\playsoundapi.h" 3
__declspec(dllimport)
BOOL
__stdcall
PlaySoundA(
             LPCSTR pszSound,
             HMODULE hmod,
         DWORD fdwSound
    );

__declspec(dllimport)
BOOL
__stdcall
PlaySoundW(
             LPCWSTR pszSound,
             HMODULE hmod,
         DWORD fdwSound
    );
# 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\playsoundapi.h" 3
}
# 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 2 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
extern "C" {
# 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
struct HWAVE__{int unused;}; typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__{int unused;}; typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__{int unused;}; typedef struct HWAVEOUT__ *HWAVEOUT;
typedef HWAVEIN *LPHWAVEIN;
typedef HWAVEOUT *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
# 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct wavehdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    struct wavehdr_tag *lpNext;
    DWORD_PTR reserved;
} WAVEHDR, *PWAVEHDR, *NPWAVEHDR, *LPWAVEHDR;
# 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tagWAVEOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;

typedef WAVEOUTCAPSW WAVEOUTCAPS;
typedef PWAVEOUTCAPSW PWAVEOUTCAPS;
typedef NPWAVEOUTCAPSW NPWAVEOUTCAPS;
typedef LPWAVEOUTCAPSW LPWAVEOUTCAPS;






typedef struct tagWAVEOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2A, *PWAVEOUTCAPS2A, *NPWAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2W, *PWAVEOUTCAPS2W, *NPWAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;

typedef WAVEOUTCAPS2W WAVEOUTCAPS2;
typedef PWAVEOUTCAPS2W PWAVEOUTCAPS2;
typedef NPWAVEOUTCAPS2W NPWAVEOUTCAPS2;
typedef LPWAVEOUTCAPS2W LPWAVEOUTCAPS2;
# 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tagWAVEINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;

typedef WAVEINCAPSW WAVEINCAPS;
typedef PWAVEINCAPSW PWAVEINCAPS;
typedef NPWAVEINCAPSW NPWAVEINCAPS;
typedef LPWAVEINCAPSW LPWAVEINCAPS;






typedef struct tagWAVEINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2A, *PWAVEINCAPS2A, *NPWAVEINCAPS2A, *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2W, *PWAVEINCAPS2W, *NPWAVEINCAPS2W, *LPWAVEINCAPS2W;

typedef WAVEINCAPS2W WAVEINCAPS2;
typedef PWAVEINCAPS2W PWAVEINCAPS2;
typedef NPWAVEINCAPS2W NPWAVEINCAPS2;
typedef LPWAVEINCAPS2W LPWAVEINCAPS2;
# 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct waveformat_tag {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
} WAVEFORMAT, *PWAVEFORMAT, *NPWAVEFORMAT, *LPWAVEFORMAT;






typedef struct pcmwaveformat_tag {
    WAVEFORMAT wf;
    WORD wBitsPerSample;
} PCMWAVEFORMAT, *PPCMWAVEFORMAT, *NPPCMWAVEFORMAT, *LPPCMWAVEFORMAT;
# 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tWAVEFORMATEX
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;

} WAVEFORMATEX, *PWAVEFORMATEX, *NPWAVEFORMATEX, *LPWAVEFORMATEX;


typedef const WAVEFORMATEX *LPCWAVEFORMATEX;


__declspec(dllimport)
UINT
__stdcall
waveOutGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetDevCapsA(
         UINT_PTR uDeviceID,
          LPWAVEOUTCAPSA pwoc,
         UINT cbwoc
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetDevCapsW(
         UINT_PTR uDeviceID,
          LPWAVEOUTCAPSW pwoc,
         UINT cbwoc
    );
# 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetVolume(
             HWAVEOUT hwo,
          LPDWORD pdwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetVolume(
             HWAVEOUT hwo,
         DWORD dwVolume
    );
# 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetErrorTextA(
         MMRESULT mmrError,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetErrorTextW(
         MMRESULT mmrError,
                          LPWSTR pszText,
         UINT cchText
    );
# 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
waveOutOpen(
              LPHWAVEOUT phwo,
         UINT uDeviceID,
         LPCWAVEFORMATEX pwfx,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
waveOutClose(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutPrepareHeader(
         HWAVEOUT hwo,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutUnprepareHeader(
         HWAVEOUT hwo,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutWrite(
         HWAVEOUT hwo,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutPause(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutRestart(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutReset(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutBreakLoop(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPosition(
         HWAVEOUT hwo,
                                 LPMMTIME pmmt,
         UINT cbmmt
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPitch(
         HWAVEOUT hwo,
          LPDWORD pdwPitch
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetPitch(
         HWAVEOUT hwo,
         DWORD dwPitch
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPlaybackRate(
         HWAVEOUT hwo,
          LPDWORD pdwRate
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetPlaybackRate(
         HWAVEOUT hwo,
         DWORD dwRate
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetID(
         HWAVEOUT hwo,
          LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
waveOutMessage(
             HWAVEOUT hwo,
         UINT uMsg,
         DWORD_PTR dw1,
         DWORD_PTR dw2
    );






__declspec(dllimport)
UINT
__stdcall
waveInGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
waveInGetDevCapsA(
         UINT_PTR uDeviceID,
                              LPWAVEINCAPSA pwic,
         UINT cbwic
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetDevCapsW(
         UINT_PTR uDeviceID,
                              LPWAVEINCAPSW pwic,
         UINT cbwic
    );
# 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
waveInGetErrorTextA(
         MMRESULT mmrError,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetErrorTextW(
         MMRESULT mmrError,
                          LPWSTR pszText,
         UINT cchText
    );
# 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
waveInOpen(
              LPHWAVEIN phwi,
         UINT uDeviceID,
         LPCWAVEFORMATEX pwfx,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
waveInClose(
         HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInPrepareHeader(
         HWAVEIN hwi,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInUnprepareHeader(
         HWAVEIN hwi,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInAddBuffer(
         HWAVEIN hwi,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInStart(
         HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInStop(
         HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInReset(
         HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetPosition(
         HWAVEIN hwi,
                                 LPMMTIME pmmt,
         UINT cbmmt
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetID(
         HWAVEIN hwi,
         LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
waveInMessage(
             HWAVEIN hwi,
         UINT uMsg,
             DWORD_PTR dw1,
             DWORD_PTR dw2
    );
# 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
struct HMIDI__{int unused;}; typedef struct HMIDI__ *HMIDI;
struct HMIDIIN__{int unused;}; typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIOUT__{int unused;}; typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDISTRM__{int unused;}; typedef struct HMIDISTRM__ *HMIDISTRM;
typedef HMIDI *LPHMIDI;
typedef HMIDIIN *LPHMIDIIN;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HMIDISTRM *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK *LPMIDICALLBACK;

typedef WORD PATCHARRAY[128];
typedef WORD *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD *LPKEYARRAY;
# 839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tagMIDIOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;

typedef MIDIOUTCAPSW MIDIOUTCAPS;
typedef PMIDIOUTCAPSW PMIDIOUTCAPS;
typedef NPMIDIOUTCAPSW NPMIDIOUTCAPS;
typedef LPMIDIOUTCAPSW LPMIDIOUTCAPS;






typedef struct tagMIDIOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2A, *PMIDIOUTCAPS2A, *NPMIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2W, *PMIDIOUTCAPS2W, *NPMIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;

typedef MIDIOUTCAPS2W MIDIOUTCAPS2;
typedef PMIDIOUTCAPS2W PMIDIOUTCAPS2;
typedef NPMIDIOUTCAPS2W NPMIDIOUTCAPS2;
typedef LPMIDIOUTCAPS2W LPMIDIOUTCAPS2;
# 947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tagMIDIINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];


    DWORD dwSupport;

} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];


    DWORD dwSupport;

} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;

typedef MIDIINCAPSW MIDIINCAPS;
typedef PMIDIINCAPSW PMIDIINCAPS;
typedef NPMIDIINCAPSW NPMIDIINCAPS;
typedef LPMIDIINCAPSW LPMIDIINCAPS;






typedef struct tagMIDIINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];


    DWORD dwSupport;

    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2A, *PMIDIINCAPS2A, *NPMIDIINCAPS2A, *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];


    DWORD dwSupport;

    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2W, *PMIDIINCAPS2W, *NPMIDIINCAPS2W, *LPMIDIINCAPS2W;

typedef MIDIINCAPS2W MIDIINCAPS2;
typedef PMIDIINCAPS2W PMIDIINCAPS2;
typedef NPMIDIINCAPS2W NPMIDIINCAPS2;
typedef LPMIDIINCAPS2W LPMIDIINCAPS2;
# 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct midihdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    struct midihdr_tag *lpNext;
    DWORD_PTR reserved;


    DWORD dwOffset;
    DWORD_PTR dwReserved[8];

} MIDIHDR, *PMIDIHDR, *NPMIDIHDR, *LPMIDIHDR;



typedef struct midievent_tag
{
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD dwParms[1];
} MIDIEVENT;

typedef struct midistrmbuffver_tag
{
    DWORD dwVersion;
    DWORD dwMid;
    DWORD dwOEMVersion;
} MIDISTRMBUFFVER;
# 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct midiproptimediv_tag
{
    DWORD cbStruct;
    DWORD dwTimeDiv;
} MIDIPROPTIMEDIV, *LPMIDIPROPTIMEDIV;

typedef struct midiproptempo_tag
{
    DWORD cbStruct;
    DWORD dwTempo;
} MIDIPROPTEMPO, *LPMIDIPROPTEMPO;




__declspec(dllimport)
UINT
__stdcall
midiOutGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
midiStreamOpen(
          LPHMIDISTRM phms,
                           LPUINT puDeviceID,
         DWORD cMidi,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamClose(
         HMIDISTRM hms
    );


__declspec(dllimport)
MMRESULT
__stdcall
midiStreamProperty(
         HMIDISTRM hms,
                                                       LPBYTE lppropdata,
         DWORD dwProperty
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamPosition(
         HMIDISTRM hms,
                              LPMMTIME lpmmt,
         UINT cbmmt
    );


__declspec(dllimport)
MMRESULT
__stdcall
midiStreamOut(
         HMIDISTRM hms,
                             LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamPause(
         HMIDISTRM hms
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamRestart(
         HMIDISTRM hms
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamStop(
         HMIDISTRM hms
    );



__declspec(dllimport)
MMRESULT
__stdcall
midiConnect(
         HMIDI hmi,
         HMIDIOUT hmo,
             LPVOID pReserved
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiDisconnect(
         HMIDI hmi,
         HMIDIOUT hmo,
             LPVOID pReserved
    );






__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetDevCapsA(
         UINT_PTR uDeviceID,
                              LPMIDIOUTCAPSA pmoc,
         UINT cbmoc
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetDevCapsW(
         UINT_PTR uDeviceID,
                              LPMIDIOUTCAPSW pmoc,
         UINT cbmoc
    );
# 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetVolume(
             HMIDIOUT hmo,
          LPDWORD pdwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutSetVolume(
             HMIDIOUT hmo,
         DWORD dwVolume
    );
# 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetErrorTextA(
         MMRESULT mmrError,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetErrorTextW(
         MMRESULT mmrError,
                          LPWSTR pszText,
         UINT cchText
    );
# 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
midiOutOpen(
          LPHMIDIOUT phmo,
         UINT uDeviceID,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutClose(
         HMIDIOUT hmo
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutPrepareHeader(
         HMIDIOUT hmo,
                                LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutUnprepareHeader(
         HMIDIOUT hmo,
                                LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutShortMsg(
         HMIDIOUT hmo,
         DWORD dwMsg
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutLongMsg(
         HMIDIOUT hmo,
                           LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutReset(
         HMIDIOUT hmo
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutCachePatches(
         HMIDIOUT hmo,
         UINT uBank,
                              LPWORD pwpa,
         UINT fuCache
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutCacheDrumPatches(
         HMIDIOUT hmo,
         UINT uPatch,
                              LPWORD pwkya,
         UINT fuCache
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetID(
         HMIDIOUT hmo,
          LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
midiOutMessage(
             HMIDIOUT hmo,
         UINT uMsg,
             DWORD_PTR dw1,
             DWORD_PTR dw2
    );






__declspec(dllimport)
UINT
__stdcall
midiInGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
midiInGetDevCapsA(
         UINT_PTR uDeviceID,
                              LPMIDIINCAPSA pmic,
         UINT cbmic
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetDevCapsW(
         UINT_PTR uDeviceID,
                              LPMIDIINCAPSW pmic,
         UINT cbmic
    );






__declspec(dllimport)
MMRESULT
__stdcall
midiInGetErrorTextA(
         MMRESULT mmrError,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetErrorTextW(
         MMRESULT mmrError,
                          LPWSTR pszText,
         UINT cchText
    );
# 1482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
midiInOpen(
          LPHMIDIIN phmi,
         UINT uDeviceID,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInClose(
         HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInPrepareHeader(
         HMIDIIN hmi,
                                LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInUnprepareHeader(
         HMIDIIN hmi,
                                LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInAddBuffer(
         HMIDIIN hmi,
                             LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInStart(
         HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInStop(
         HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInReset(
         HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetID(
         HMIDIIN hmi,
          LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
midiInMessage(
             HMIDIIN hmi,
         UINT uMsg,
             DWORD_PTR dw1,
             DWORD_PTR dw2
    );
# 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tagAUXCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;

typedef AUXCAPSW AUXCAPS;
typedef PAUXCAPSW PAUXCAPS;
typedef NPAUXCAPSW NPAUXCAPS;
typedef LPAUXCAPSW LPAUXCAPS;






typedef struct tagAUXCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2A, *PAUXCAPS2A, *NPAUXCAPS2A, *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2W, *PAUXCAPS2W, *NPAUXCAPS2W, *LPAUXCAPS2W;

typedef AUXCAPS2W AUXCAPS2;
typedef PAUXCAPS2W PAUXCAPS2;
typedef NPAUXCAPS2W NPAUXCAPS2;
typedef LPAUXCAPS2W LPAUXCAPS2;
# 1677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
UINT
__stdcall
auxGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
auxGetDevCapsA(
         UINT_PTR uDeviceID,
                             LPAUXCAPSA pac,
         UINT cbac
    );

__declspec(dllimport)
MMRESULT
__stdcall
auxGetDevCapsW(
         UINT_PTR uDeviceID,
                             LPAUXCAPSW pac,
         UINT cbac
    );
# 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
auxSetVolume(
         UINT uDeviceID,
         DWORD dwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
auxGetVolume(
         UINT uDeviceID,
          LPDWORD pdwVolume
    );





__declspec(dllimport)
MMRESULT
__stdcall
auxOutMessage(
         UINT uDeviceID,
         UINT uMsg,
             DWORD_PTR dw1,
             DWORD_PTR dw2
    );
# 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
struct HMIXEROBJ__{int unused;}; typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef HMIXEROBJ *LPHMIXEROBJ;

struct HMIXER__{int unused;}; typedef struct HMIXER__ *HMIXER;
typedef HMIXER *LPHMIXER;
# 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
UINT
__stdcall
mixerGetNumDevs(
    void
    );




typedef struct tagMIXERCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;

typedef MIXERCAPSW MIXERCAPS;
typedef PMIXERCAPSW PMIXERCAPS;
typedef LPMIXERCAPSW LPMIXERCAPS;





typedef struct tagMIXERCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIXERCAPS2A, *PMIXERCAPS2A, *LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIXERCAPS2W, *PMIXERCAPS2W, *LPMIXERCAPS2W;

typedef MIXERCAPS2W MIXERCAPS2;
typedef PMIXERCAPS2W PMIXERCAPS2;
typedef LPMIXERCAPS2W LPMIXERCAPS2;
# 1870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
mixerGetDevCapsA(
         UINT_PTR uMxId,
                                 LPMIXERCAPSA pmxcaps,
         UINT cbmxcaps
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetDevCapsW(
         UINT_PTR uMxId,
                                 LPMIXERCAPSW pmxcaps,
         UINT cbmxcaps
    );
# 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
mixerOpen(
              LPHMIXER phmx,
         UINT uMxId,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
mixerClose(
         HMIXER hmx
    );


__declspec(dllimport)
DWORD
__stdcall
mixerMessage(
             HMIXER hmx,
         UINT uMsg,
             DWORD_PTR dwParam1,
             DWORD_PTR dwParam2
    );




typedef struct tagMIXERLINEA {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR szShortName[16];
    CHAR szName[64];
    struct {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
    } Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR szShortName[16];
    WCHAR szName[64];
    struct {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
    } Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;

typedef MIXERLINEW MIXERLINE;
typedef PMIXERLINEW PMIXERLINE;
typedef LPMIXERLINEW LPMIXERLINE;
# 2065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineInfoA(
             HMIXEROBJ hmxobj,
            LPMIXERLINEA pmxl,
         DWORD fdwInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineInfoW(
             HMIXEROBJ hmxobj,
            LPMIXERLINEW pmxl,
         DWORD fdwInfo
    );
# 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
mixerGetID(
             HMIXEROBJ hmxobj,
          UINT * puMxId,
         DWORD fdwId
    );
# 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tagMIXERCONTROLA {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR szShortName[16];
    CHAR szName[64];
    union {
        struct {
            LONG lMinimum;
            LONG lMaximum;
        } ;
        struct {
            DWORD dwMinimum;
            DWORD dwMaximum;
        } ;
        DWORD dwReserved[6];
    } Bounds;
    union {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR szShortName[16];
    WCHAR szName[64];
    union {
        struct {
            LONG lMinimum;
            LONG lMaximum;
        } ;
        struct {
            DWORD dwMinimum;
            DWORD dwMaximum;
        } ;
        DWORD dwReserved[6];
    } Bounds;
    union {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;

typedef MIXERCONTROLW MIXERCONTROL;
typedef PMIXERCONTROLW PMIXERCONTROL;
typedef LPMIXERCONTROLW LPMIXERCONTROL;
# 2294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tagMIXERLINECONTROLSA {
    DWORD cbStruct;
    DWORD dwLineID;
    union {
        DWORD dwControlID;
        DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
    DWORD cbStruct;
    DWORD dwLineID;
    union {
        DWORD dwControlID;
        DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;

typedef MIXERLINECONTROLSW MIXERLINECONTROLS;
typedef PMIXERLINECONTROLSW PMIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSW LPMIXERLINECONTROLS;
# 2346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineControlsA(
             HMIXEROBJ hmxobj,
            LPMIXERLINECONTROLSA pmxlc,
         DWORD fdwControls
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineControlsW(
             HMIXEROBJ hmxobj,
            LPMIXERLINECONTROLSW pmxlc,
         DWORD fdwControls
    );
# 2381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tMIXERCONTROLDETAILS {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;
    union {
        HWND hwndOwner;
        DWORD cMultipleItems;
    } ;
    DWORD cbDetails;
    LPVOID paDetails;
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS, *LPMIXERCONTROLDETAILS;
# 2400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;

typedef MIXERCONTROLDETAILS_LISTTEXTW MIXERCONTROLDETAILS_LISTTEXT;
typedef PMIXERCONTROLDETAILS_LISTTEXTW PMIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTW LPMIXERCONTROLDETAILS_LISTTEXT;
# 2432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
    LONG fValue;
} MIXERCONTROLDETAILS_BOOLEAN,
      *PMIXERCONTROLDETAILS_BOOLEAN,
     *LPMIXERCONTROLDETAILS_BOOLEAN;

typedef struct tMIXERCONTROLDETAILS_SIGNED {
    LONG lValue;
} MIXERCONTROLDETAILS_SIGNED,
      *PMIXERCONTROLDETAILS_SIGNED,
     *LPMIXERCONTROLDETAILS_SIGNED;


typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
    DWORD dwValue;
} MIXERCONTROLDETAILS_UNSIGNED,
      *PMIXERCONTROLDETAILS_UNSIGNED,
     *LPMIXERCONTROLDETAILS_UNSIGNED;




__declspec(dllimport)
MMRESULT
__stdcall
mixerGetControlDetailsA(
             HMIXEROBJ hmxobj,
            LPMIXERCONTROLDETAILS pmxcd,
         DWORD fdwDetails
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetControlDetailsW(
             HMIXEROBJ hmxobj,
            LPMIXERCONTROLDETAILS pmxcd,
         DWORD fdwDetails
    );
# 2487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
mixerSetControlDetails(
             HMIXEROBJ hmxobj,
         LPMIXERCONTROLDETAILS pmxcd,
         DWORD fdwDetails
    );
# 2508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmeapi.h" 3
}
# 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3
# 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timeapi.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timeapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timeapi.h" 2 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timeapi.h" 3
extern "C" {
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timeapi.h" 3
typedef struct timecaps_tag {
    UINT wPeriodMin;
    UINT wPeriodMax;
} TIMECAPS, *PTIMECAPS, *NPTIMECAPS, *LPTIMECAPS;


__declspec(dllimport)
MMRESULT
__stdcall
timeGetSystemTime(
                              LPMMTIME pmmt,
         UINT cbmmt
    );

__declspec(dllimport)
DWORD
__stdcall
timeGetTime(
    void
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeGetDevCaps(
                             LPTIMECAPS ptc,
         UINT cbtc
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeBeginPeriod(
         UINT uPeriod
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeEndPeriod(
         UINT uPeriod
    );
# 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\timeapi.h" 3
}
# 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3
# 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\joystickapi.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\joystickapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsyscom.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\joystickapi.h" 2 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\joystickapi.h" 3
extern "C" {
# 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\joystickapi.h" 3
typedef struct tagJOYCAPSA {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;


    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];

} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;


    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];

} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;

typedef JOYCAPSW JOYCAPS;
typedef PJOYCAPSW PJOYCAPS;
typedef NPJOYCAPSW NPJOYCAPS;
typedef LPJOYCAPSW LPJOYCAPS;






typedef struct tagJOYCAPS2A {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2A, *PJOYCAPS2A, *NPJOYCAPS2A, *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2W, *PJOYCAPS2W, *NPJOYCAPS2W, *LPJOYCAPS2W;

typedef JOYCAPS2W JOYCAPS2;
typedef PJOYCAPS2W PJOYCAPS2;
typedef NPJOYCAPS2W NPJOYCAPS2;
typedef LPJOYCAPS2W LPJOYCAPS2;
# 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\joystickapi.h" 3
typedef struct joyinfo_tag {
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
} JOYINFO, *PJOYINFO, *NPJOYINFO, *LPJOYINFO;



typedef struct joyinfoex_tag {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
} JOYINFOEX, *PJOYINFOEX, *NPJOYINFOEX, *LPJOYINFOEX;






__declspec(dllimport)
MMRESULT
__stdcall
joyGetPosEx(
         UINT uJoyID,
          LPJOYINFOEX pji
    );



__declspec(dllimport)
UINT
__stdcall
joyGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
joyGetDevCapsA(
         UINT_PTR uJoyID,
                             LPJOYCAPSA pjc,
         UINT cbjc
    );

__declspec(dllimport)
MMRESULT
__stdcall
joyGetDevCapsW(
         UINT_PTR uJoyID,
                             LPJOYCAPSW pjc,
         UINT cbjc
    );
# 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\joystickapi.h" 3
__declspec(dllimport)
MMRESULT
__stdcall
joyGetPos(
         UINT uJoyID,
          LPJOYINFO pji
    );


__declspec(dllimport)
MMRESULT
__stdcall
joyGetThreshold(
         UINT uJoyID,
          LPUINT puThreshold
    );


__declspec(dllimport)
MMRESULT
__stdcall
joyReleaseCapture(
         UINT uJoyID
    );


__declspec(dllimport)
MMRESULT
__stdcall
joySetCapture(
         HWND hwnd,
         UINT uJoyID,
         UINT uPeriod,
         BOOL fChanged
    );


__declspec(dllimport)
MMRESULT
__stdcall
joySetThreshold(
         UINT uJoyID,
         UINT uThreshold
    );




__declspec(dllimport)
MMRESULT
__stdcall
joyConfigChanged(
         DWORD dwFlags
    );
# 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\joystickapi.h" 3
}
# 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3
# 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 3
}




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mmsystem.h" 2 3
# 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\nb30.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\nb30.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)
# 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\nb30.h" 3
typedef struct _NCB {
    UCHAR ncb_command;
    UCHAR ncb_retcode;
    UCHAR ncb_lsn;
    UCHAR ncb_num;
    PUCHAR ncb_buffer;
    WORD ncb_length;
    UCHAR ncb_callname[16];
    UCHAR ncb_name[16];
    UCHAR ncb_rto;
    UCHAR ncb_sto;
    void (__stdcall *ncb_post)( struct _NCB * );
    UCHAR ncb_lana_num;
    UCHAR ncb_cmd_cplt;



    UCHAR ncb_reserve[10];

    HANDLE ncb_event;



} NCB, *PNCB;






typedef struct _ADAPTER_STATUS {
    UCHAR adapter_address[6];
    UCHAR rev_major;
    UCHAR reserved0;
    UCHAR adapter_type;
    UCHAR rev_minor;
    WORD duration;
    WORD frmr_recv;
    WORD frmr_xmit;

    WORD iframe_recv_err;

    WORD xmit_aborts;
    DWORD xmit_success;
    DWORD recv_success;

    WORD iframe_xmit_err;

    WORD recv_buff_unavail;
    WORD t1_timeouts;
    WORD ti_timeouts;
    DWORD reserved1;
    WORD free_ncbs;
    WORD max_cfg_ncbs;
    WORD max_ncbs;
    WORD xmit_buf_unavail;
    WORD max_dgram_size;
    WORD pending_sess;
    WORD max_cfg_sess;
    WORD max_sess;
    WORD max_sess_pkt_size;
    WORD name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;

typedef struct _NAME_BUFFER {
    UCHAR name[16];
    UCHAR name_num;
    UCHAR name_flags;
} NAME_BUFFER, *PNAME_BUFFER;
# 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\nb30.h" 3
typedef struct _SESSION_HEADER {
    UCHAR sess_name;
    UCHAR num_sess;
    UCHAR rcv_dg_outstanding;
    UCHAR rcv_any_outstanding;
} SESSION_HEADER, *PSESSION_HEADER;

typedef struct _SESSION_BUFFER {
    UCHAR lsn;
    UCHAR state;
    UCHAR local_name[16];
    UCHAR remote_name[16];
    UCHAR rcvs_outstanding;
    UCHAR sends_outstanding;
} SESSION_BUFFER, *PSESSION_BUFFER;
# 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\nb30.h" 3
typedef struct _LANA_ENUM {
    UCHAR length;
    UCHAR lana[254 +1];
} LANA_ENUM, *PLANA_ENUM;






typedef struct _FIND_NAME_HEADER {
    WORD node_count;
    UCHAR reserved;
    UCHAR unique_group;
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;

typedef struct _FIND_NAME_BUFFER {
    UCHAR length;
    UCHAR access_control;
    UCHAR frame_control;
    UCHAR destination_addr[6];
    UCHAR source_addr[6];
    UCHAR routing_info[18];
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;






typedef struct _ACTION_HEADER {
    ULONG transport_id;
    USHORT action_code;
    USHORT reserved;
} ACTION_HEADER, *PACTION_HEADER;
# 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\nb30.h" 3
UCHAR
__stdcall
Netbios(
    PNCB pncb
    );
# 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\nb30.h" 3
#pragma warning(pop)



}
# 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 1 3
# 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 3
extern "C" {
# 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 3
typedef void * I_RPC_HANDLE;




typedef long RPC_STATUS;
# 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 1 3
# 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4668)
#pragma warning(disable: 4820)
# 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef unsigned char * RPC_CSTR;





typedef unsigned short * RPC_WSTR;
typedef const unsigned short * RPC_CWSTR;


typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
# 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef GUID UUID;
# 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
                        RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;




typedef struct _UUID_VECTOR
{
  unsigned long Count;
                      UUID *Uuid[1];
} UUID_VECTOR;
# 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef void * RPC_IF_HANDLE;



typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
# 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short * Protseq[1];
} RPC_PROTSEQ_VECTORW;
# 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY, *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
         UUID * ObjectUuid,
          UUID * TypeUuid,
          RPC_STATUS * Status
    );


typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
         RPC_IF_HANDLE InterfaceUuid,
         void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
         void *Context
    ) ;
# 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingCopy (
         RPC_BINDING_HANDLE SourceBinding,
          RPC_BINDING_HANDLE * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
            RPC_BINDING_HANDLE * Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetOption (
         RPC_BINDING_HANDLE hBinding,
         unsigned long option,
         ULONG_PTR optionValue
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqOption (
          RPC_BINDING_HANDLE hBinding,
          unsigned long option,
          ULONG_PTR *pOptionValue
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (
         RPC_CSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
         RPC_WSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );
# 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
         void *ContextHandle,
          RPC_BINDING_HANDLE * Binding
    );
# 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqObject (
         RPC_BINDING_HANDLE Binding,
          UUID * ObjectUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingReset (
         RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetObject (
         RPC_BINDING_HANDLE Binding,
         UUID * ObjectUuid
    );
# 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel (
          unsigned long AuthnSvc,
          unsigned long *AuthnLevel
    );
# 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR * StringBinding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR * StringBinding
    );
# 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
            RPC_BINDING_VECTOR * * BindingVector
    );
# 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingComposeA (
             RPC_CSTR ObjUuid,
             RPC_CSTR ProtSeq,
             RPC_CSTR NetworkAddr,
             RPC_CSTR Endpoint,
             RPC_CSTR Options,
                 RPC_CSTR * StringBinding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingComposeW (
             RPC_WSTR ObjUuid,
             RPC_WSTR ProtSeq,
             RPC_WSTR NetworkAddr,
             RPC_WSTR Endpoint,
             RPC_WSTR Options,
                 RPC_WSTR * StringBinding
    );
# 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingParseA (
         RPC_CSTR StringBinding,
                 RPC_CSTR * ObjUuid,
                 RPC_CSTR * Protseq,
                 RPC_CSTR * NetworkAddr,
                 RPC_CSTR * Endpoint,
                 RPC_CSTR * NetworkOptions
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingParseW (
         RPC_WSTR StringBinding,
                 RPC_WSTR * ObjUuid,
                 RPC_WSTR * Protseq,
                 RPC_WSTR * NetworkAddr,
                 RPC_WSTR * Endpoint,
                 RPC_WSTR * NetworkOptions
    );
# 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
            RPC_CSTR * String
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
            RPC_WSTR * String
    );
# 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcIfInqId (
         RPC_IF_HANDLE RpcIfHandle,
          RPC_IF_ID * RpcIfId
    );
# 703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
         RPC_CSTR Protseq
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
         RPC_WSTR Protseq
    );
# 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
         RPC_BINDING_HANDLE Binding,
          unsigned int * Timeout
    );
# 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
         RPC_BINDING_HANDLE Binding,
         unsigned int Timeout
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
         long Timeout
    );
# 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
             RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
             RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
# 821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectInqType (
         UUID * ObjUuid,
                       UUID * TypeUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectSetInqFn (
         RPC_OBJECT_INQ_FN * InquiryFn
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectSetType (
         UUID * ObjUuid,
                      UUID * TypeUuid
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
            RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
            RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
# 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqBindings (
             RPC_BINDING_VECTOR * * BindingVector
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqBindingsEx (
             void * SecurityDescriptor,
             RPC_BINDING_VECTOR * * BindingVector
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * * MgrEpv
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerListen (
         unsigned int MinimumCallThreads,
         unsigned int MaxCalls,
         unsigned int DontWait
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
             RPC_IF_CALLBACK_FN *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
         unsigned int MaxRpcSize,
             RPC_IF_CALLBACK_FN *IfCallbackFn
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf3 (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
         unsigned int MaxRpcSize,
             RPC_IF_CALLBACK_FN *IfCallback,
             void * SecurityDescriptor
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUnregisterIf (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         unsigned int WaitForCallsToComplete
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         int RundownContextHandles
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );






__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
# 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
# 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
# 1292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
void
__stdcall
RpcServerYield (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
            RPC_STATS_VECTOR ** StatsVector
    );
# 1314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqStats (
             RPC_BINDING_HANDLE Binding,
             RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
             RPC_BINDING_HANDLE Binding
    );
# 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
             RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
         unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
             RPC_BINDING_HANDLE Binding,
             RPC_IF_ID_VECTOR * * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
            RPC_IF_ID_VECTOR * * IfIdVector
    );
# 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
             RPC_CSTR * ServerPrincName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
             RPC_WSTR * ServerPrincName
    );
# 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
         unsigned long AuthnSvc,
             RPC_CSTR * PrincName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
         unsigned long AuthnSvc,
             RPC_WSTR * PrincName
    );
# 1496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpResolveBinding (
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );
# 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
             RPC_CSTR * EntryName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
             RPC_WSTR * EntryName
    );
# 1560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef void * RPC_AUTH_IDENTITY_HANDLE;
typedef void * RPC_AUTHZ_HANDLE;
# 1635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
                                                   unsigned short *User;
  unsigned long UserLength;
                                                     unsigned short *Domain;
  unsigned long DomainLength;
                                                       unsigned short *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;





typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
                             unsigned char *User;
  unsigned long UserLength;
                               unsigned char *Domain;
  unsigned long DomainLength;
                                 unsigned char *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
# 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;



typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;





typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;



typedef struct _RPC_SECURITY_QOS_V2_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;




typedef struct _RPC_SECURITY_QOS_V3_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

typedef struct _RPC_SECURITY_QOS_V3_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;






typedef struct _RPC_SECURITY_QOS_V4_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;

typedef struct _RPC_SECURITY_QOS_V4_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;






typedef struct _RPC_SECURITY_QOS_V5_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_W, *PRPC_SECURITY_QOS_V5_W;

typedef struct _RPC_SECURITY_QOS_V5_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_A, *PRPC_SECURITY_QOS_V5_A;
# 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short *NetworkAddress;
    unsigned short *StringEndpoint;
    union
    {
        unsigned short *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char *NetworkAddress;
    unsigned char *StringEndpoint;
    union
    {
        unsigned char *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
    unsigned long Version;
    unsigned short *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;



typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
    unsigned long Version;
    unsigned char *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;



typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;
# 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateA (
         RPC_BINDING_HANDLE_TEMPLATE_V1_A * Template,
             RPC_BINDING_HANDLE_SECURITY_V1_A * Security,
             RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
          RPC_BINDING_HANDLE * Binding
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateW (
         RPC_BINDING_HANDLE_TEMPLATE_V1_W * Template,
             RPC_BINDING_HANDLE_SECURITY_V1_W * Security,
             RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
          RPC_BINDING_HANDLE * Binding
    );
# 2142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingGetTrainingContextHandle (
         RPC_BINDING_HANDLE Binding,
             void ** ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqBindingHandle (
          RPC_BINDING_HANDLE * Binding
    );
# 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;
# 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
         RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
         RPC_WSTR ServerName,
         RPC_WSTR ServerPort,
             RPC_WSTR RemoteUser,
             RPC_WSTR AuthType,
            void * ResourceUuid,
            void * SessionId,
             void * Interface,
             void * Reserved,
         unsigned long Flags,
                 RPC_WSTR * NewServerName,
                 RPC_WSTR * NewServerPort
    );
# 2211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
         RPC_WSTR String
    );
# 2235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcImpersonateClient (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient2 (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcRevertToSelfEx (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcRevertToSelf (
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcImpersonateClientContainer (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcRevertContainerImpersonation (
    void
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
         RPC_BINDING_HANDLE Binding,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
         RPC_BINDING_HANDLE Binding,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQos
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQOS
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
          unsigned long RpcQosVersion,
              RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
         unsigned long RpcQosVersion,
              RPC_SECURITY_QOS * SecurityQOS
    );







typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
         void * Arg,
         RPC_WSTR ServerPrincName,
         unsigned long KeyVer,
             void * * Key,
          RPC_STATUS * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerCompleteSecurityCallback(
         RPC_BINDING_HANDLE BindingHandle,
         RPC_STATUS Status
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
             RPC_CSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
             RPC_WSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );
# 2601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct {
    unsigned char * UserName;
    unsigned char * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1, * PRPC_CLIENT_INFORMATION1;



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingServerFromClient (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_BINDING_HANDLE * ServerBinding
    );







__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
RpcRaiseException (
         RPC_STATUS exception
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcTestCancel(
    void
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerTestCancel (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcCancelThread(
         void * Thread
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThreadEx(
         void * Thread,
         long Timeout
    );
# 2678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
UuidCreate (
          UUID * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateSequential (
          UUID * Uuid
    );




__declspec(dllimport)

RPC_STATUS
__stdcall
UuidToStringA (
         const UUID * Uuid,
             RPC_CSTR * StringUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidFromStringA (
             RPC_CSTR StringUuid,
          UUID * Uuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidToStringW (
         const UUID * Uuid,
             RPC_WSTR * StringUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidFromStringW (
             RPC_WSTR StringUuid,
          UUID * Uuid
    );
# 2766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
signed int
__stdcall
UuidCompare (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
UuidCreateNil (
          UUID * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
         UUID * Uuid,
          RPC_STATUS * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
         UUID * Uuid,
          RPC_STATUS * Status
    );
# 2816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );
# 2893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpUnregister(
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector
    );
# 2913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
DceErrorInqTextA (
         RPC_STATUS RpcStatus,
                                         RPC_CSTR ErrorText
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
DceErrorInqTextW (
         RPC_STATUS RpcStatus,
                                         RPC_WSTR ErrorText
    );
# 2955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;
# 2968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
                      RPC_BINDING_HANDLE EpBinding,
         unsigned long InquiryType,
             RPC_IF_ID * IfId,
             unsigned long VersOption,
             UUID * ObjectUuid,
          RPC_EP_INQ_HANDLE * InquiryContext
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
            RPC_EP_INQ_HANDLE * InquiryContext
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                 RPC_CSTR * Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                 RPC_WSTR * Annotation
    );
# 3035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
             RPC_BINDING_HANDLE EpBinding,
         RPC_IF_ID * IfId,
         RPC_BINDING_HANDLE Binding,
             UUID * ObjectUuid
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
         RPC_BINDING_HANDLE ClientBinding,
         unsigned long RequestedMgmtOperation,
          RPC_STATUS * Status
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
         RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );
# 3074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
int
__stdcall
RpcExceptionFilter (
         unsigned long ExceptionCode
    );
# 3109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef void *RPC_INTERFACE_GROUP, **PRPC_INTERFACE_GROUP;


typedef struct
{
    unsigned long Version;
    RPC_WSTR ProtSeq;
    RPC_WSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEW, *PRPC_ENDPOINT_TEMPLATEW;

typedef struct
{
    unsigned long Version;
    RPC_CSTR ProtSeq;
    RPC_CSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEA, *PRPC_ENDPOINT_TEMPLATEA;
# 3150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef struct
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_CSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEA, *PRPC_INTERFACE_TEMPLATEA;

typedef struct
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_WSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEW, *PRPC_INTERFACE_TEMPLATEW;
# 3209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
typedef void __stdcall
RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN (
         RPC_INTERFACE_GROUP IfGroup,
         void* IdleCallbackContext,
         unsigned long IsGroupIdle
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateW (
                       RPC_INTERFACE_TEMPLATEW *Interfaces,
         unsigned long NumIfs,
                             RPC_ENDPOINT_TEMPLATEW *Endpoints,
         unsigned long NumEndpoints,
         unsigned long IdlePeriod,
         RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
         void* IdleCallbackContext,
          PRPC_INTERFACE_GROUP IfGroup
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateA (
                       RPC_INTERFACE_TEMPLATEA *Interfaces,
         unsigned long NumIfs,
                             RPC_ENDPOINT_TEMPLATEA *Endpoints,
         unsigned long NumEndpoints,
         unsigned long IdlePeriod,
         RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
         void* IdleCallbackContext,
          PRPC_INTERFACE_GROUP IfGroup
    );
# 3274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupClose (
         RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupActivate (
         RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupDeactivate (
         RPC_INTERFACE_GROUP IfGroup,
         unsigned long ForceDeactivation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupInqBindings (
         RPC_INTERFACE_GROUP IfGroup,
             RPC_BINDING_VECTOR * * BindingVector
    );








#pragma warning(pop)



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4668)
#pragma warning(disable: 4820)





typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void * RpcInterfaceInformation;
    void * ReservedForRuntime;
    void * ManagerEpv;
    void * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE, * PRPC_MESSAGE;







typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                          UUID * InterfaceId,
                          RPC_VERSION * InterfaceVersion,
                          UUID * ObjectId,
                          unsigned char * Rpcpro,
                          void * * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                           void * arg
                        );
# 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
typedef
void
(__stdcall * RPC_DISPATCH_FUNCTION) (
           PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION * DispatchTable;
    LONG_PTR Reserved;
} RPC_DISPATCH_TABLE, * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char * RpcProtocolSequence;
    unsigned char * Endpoint;
} RPC_PROTSEQ_ENDPOINT, * PRPC_PROTSEQ_ENDPOINT;
# 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE, * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const * InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE, * PRPC_CLIENT_INTERFACE;
# 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
           RPC_MESSAGE * Message
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcGetBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
           RPC_MESSAGE * Message,
       UUID * ObjectUuid
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSendReceive (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcFreeBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSend (
           PRPC_MESSAGE Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcReceive (
           PRPC_MESSAGE Message,
       unsigned int Size
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
         PRPC_MESSAGE Message,
     unsigned int NewSize
    );

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
           I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
       I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
       I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void *
__stdcall
I_RpcAllocate (
       unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
       void * Object
    );






__declspec(dllimport)
unsigned long
__stdcall
I_RpcFreeSystemHandleCollection (
            void * CallObj,
         unsigned long FreeFlags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSetSystemHandle (
         void * Handle,
         unsigned char Type,
         unsigned long AccessMask,
            void * CallObj,
          unsigned long * HandleIndex
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetSystemHandle (
                                       unsigned char* pMemory,
         unsigned char Type,
         unsigned long AccessMask,
         unsigned long HandleIndex,
            void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcFreeSystemHandle (
         unsigned char Type,
         void * Handle
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
       unsigned long Milliseconds
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    void
    );


typedef enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION
{
    MarshalDirectionMarshal,
    MarshalDirectionUnmarshal
}LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSystemHandleTypeSpecificWork (
            void * Handle,
         unsigned char ActualType,
         unsigned char IdlType,
         LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection
    );

typedef
void
(__stdcall * PRPC_RUNDOWN) (
    void * AssociationContext
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
       RPC_BINDING_HANDLE Handle,
       PRPC_RUNDOWN RundownRoutine,
       void * Context
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
       RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
       RPC_BINDING_HANDLE BindingHandle,
        void * * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
       RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
       RPC_BINDING_HANDLE BindingHandle,
        void * ServerContextList
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
       RPC_BINDING_HANDLE Binding,
        unsigned short **StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
       RPC_BINDING_HANDLE Binding,
        void **SecurityContextHandle
    );


typedef struct _RPC_SEC_CONTEXT_KEY_INFO
{
    unsigned long EncryptAlgorithm;
    unsigned long KeySize;
    unsigned long SignatureAlgorithm;
}
RPC_SEC_CONTEXT_KEY_INFO, *PRPC_SEC_CONTEXT_KEY_INFO;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContextKeyInfo (
             RPC_BINDING_HANDLE Binding,
            void *KeyInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
         RPC_BINDING_HANDLE Binding,
          unsigned char * WireId
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqMarshalledTargetInfo (
         RPC_BINDING_HANDLE Binding,
          unsigned long * MarshalledTargetInfoSize,
                                                           RPC_CSTR * MarshalledTargetInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
       RPC_BINDING_HANDLE Binding,
        unsigned long *Pid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
       RPC_BINDING_HANDLE Binding,
        void **AsyncHandle
    );




__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );
# 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartService (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint,
         RPC_IF_HANDLE IfSpec
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
         RPC_BINDING_HANDLE Binding,
                              RPC_WSTR *DynamicEndpoint
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
         RPC_BINDING_HANDLE Binding,
                              RPC_CSTR *DynamicEndpoint
    );
# 727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerCheckClientRestriction (
       RPC_BINDING_HANDLE Context
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
       RPC_BINDING_HANDLE Binding,
        unsigned int * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
       RPC_IF_HANDLE RpcIfHandle,
        RPC_TRANSFER_SYNTAX * TransferSyntaxes,
       unsigned int TransferSyntaxSize,
        unsigned int * TransferSyntaxCount
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_UuidCreate (
        UUID * Uuid
    );

__declspec(dllimport)
void
__stdcall
I_RpcUninitializeNdrOle (
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingCopy (
       RPC_BINDING_HANDLE SourceBinding,
        RPC_BINDING_HANDLE * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
                RPC_BINDING_HANDLE BindingHandle,
        unsigned int * ClientLocalFlag
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
       RPC_BINDING_HANDLE Binding,
        void **ConnId,
        int *pfFirstCall
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCreateNP (
         RPC_WSTR ServerName,
         RPC_WSTR ServiceName,
         RPC_WSTR NetworkOptions,
          RPC_BINDING_HANDLE *Binding
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void * pAddress
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
       RPC_FORWARD_FUNCTION * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn(
    void
    );

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
       RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );
# 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqRemoteConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );

__declspec(dllimport)
void
__stdcall
I_RpcSessionStrictContextHandle (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
      unsigned long * RecvBuffSize,
      unsigned long * SendBuffSize
  );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
      unsigned long RecvBuffSize,
      unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
       void *Buffer,
       unsigned int BufferLength,
       int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
       RPCLT_PDU_FILTER_FUNC pfnFilter
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerStopListening(
    void
    );

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
       void * hWnd,
       void * Context,
                void * hSyncEvent
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
       RPC_BINDING_HANDLE Binding,
       RPC_BLOCKING_FN BlockingFn,
       unsigned long ServerTid
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSetThreadParams(
       int fClientFree,
                void *Context,
                void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
       void * hWnd,
       unsigned int Message,
       unsigned int wParam,
       unsigned long lParam
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
         RPC_CSTR Protseq,
         RPC_CSTR Endpoint
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint
    );
# 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
        unsigned int * Type
    );

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
       RPC_STATUS Status
    );







typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    unsigned long BufferSize;
                                   char *Buffer;
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;

typedef struct _RDR_CALLOUT_STATE
{

    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;


    unsigned short *ServerName;
    unsigned short *ServerPort;
    unsigned short *RemoteUser;
    unsigned short *AuthType;
    unsigned char ResourceTypePresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;


} RDR_CALLOUT_STATE;



typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
             RPC_WSTR Machine,
             RPC_WSTR DotMachine,
             unsigned long PortNumber
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
           void *Context,
            char *Buffer,
            unsigned long *BufferLength
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
            unsigned long *ConnectionTimeout
        );


typedef RPC_STATUS
(__stdcall *I_RpcPerformCalloutFn)
    (
       void *Context,
       RDR_CALLOUT_STATE *CallOutState,
       RPC_HTTP_REDIRECTOR_STAGE Stage
    );

typedef void
(__stdcall *I_RpcFreeCalloutStateFn)
    (
       RDR_CALLOUT_STATE *CallOutState
    );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)
        (
             void *Context,
                  int *SessionIdPresent,
                  UUID *SessionId,
              int *ResourceIdPresent,
              UUID *ResourceId
        );




typedef RPC_STATUS
(__stdcall *I_RpcProxyFilterIfFn)
    (
         void *Context,
         UUID *IfUuid,
         unsigned short IfMajorVersion,
          int *fAllow
    );

typedef enum RpcProxyPerfCounters
{
    RpcCurrentUniqueUser = 1,
    RpcBackEndConnectionAttempts,
    RpcBackEndConnectionFailed,
    RpcRequestsPerSecond,
    RpcIncomingConnections,
    RpcIncomingBandwidth,
    RpcOutgoingBandwidth,
    RpcAttemptedLbsDecisions,
    RpcFailedLbsDecisions,
    RpcAttemptedLbsMessages,
    RpcFailedLbsMessages,
    RpcLastCounter
} RpcPerfCounters;

typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterFn)
    (
         RpcPerfCounters Counter,
         int ModifyTrend,
         unsigned long Size
    );

 typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterBackendServerFn)
    (
         unsigned short* MachineName,
         int IsConnectEvent
    );







typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
    I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;

    I_RpcProxyFilterIfFn ProxyFilterIfFn;
    I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
    I_RpcProxyUpdatePerfCounterBackendServerFn RpcProxyUpdatePerfCounterBackendServerFn;

} I_RpcProxyCallbackInterface;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcProxyNewConnection (
       unsigned long ConnectionType,
       unsigned short *ServerAddress,
       unsigned short *ServerPort,
       unsigned short *MinConnTimeout,
       void *ConnectionParameter,
                RDR_CALLOUT_STATE *CallOutState,
       I_RpcProxyCallbackInterface *ProxyCallbackInterface
    );
# 1203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdcep.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReplyToClientWithStatus (
       void *ConnectionParameter,
       RPC_STATUS RpcStatus
    );

__declspec(dllimport)
void
__stdcall
I_RpcRecordCalloutFailure (
       RPC_STATUS RpcStatus,
       RDR_CALLOUT_STATE *CallOutState,
       unsigned short *DllName
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMgmtEnableDedicatedThreadPool (
    void
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetDefaultSD(
          void ** ppSecurityDescriptor
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcOpenClientProcess(
             RPC_BINDING_HANDLE Binding,
         unsigned long DesiredAccess,
             void** ClientProcess
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsServerLocal(
         RPC_BINDING_HANDLE Binding,
          unsigned int * ServerLocalFlag
    );

RPC_STATUS __stdcall
I_RpcBindingSetPrivateOption (
         RPC_BINDING_HANDLE hBinding,
         unsigned long option,
         ULONG_PTR optionValue
    );







RPC_STATUS
__stdcall
I_RpcServerSubscribeForDisconnectNotification (
         RPC_BINDING_HANDLE Binding,
         void * hEvent
    );

RPC_STATUS
__stdcall
I_RpcServerGetAssociationID (
         RPC_BINDING_HANDLE Binding,
          unsigned long * AssociationID
    );

__declspec(dllimport)
long
__stdcall
I_RpcServerDisableExceptionFilter (
    void
    );







#pragma warning(pop)



}
# 3314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcdce.h" 2 3



}
# 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\rpcnsi.h" 1 3
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\rpcnsi.h" 3
typedef void * RPC_NS_HANDLE;
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\rpcnsi.h" 3
__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );





RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
        RPC_NS_HANDLE LookupContext,
        RPC_BINDING_VECTOR * * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
           RPC_NS_HANDLE * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
         unsigned long GroupNameSyntax,
             RPC_CSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
            RPC_NS_HANDLE InquiryContext,
             RPC_CSTR *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
         unsigned long GroupNameSyntax,
             RPC_WSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
            RPC_NS_HANDLE InquiryContext,
             RPC_WSTR *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName,
         unsigned long Priority,
             RPC_CSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_CSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_CSTR *MemberName,
          unsigned long *Priority,
          RPC_CSTR *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName,
         unsigned long Priority,
             RPC_WSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_WSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_WSTR *MemberName,
          unsigned long *Priority,
          RPC_WSTR *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
        RPC_NS_HANDLE InquiryContext,
        UUID * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_CSTR *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
       RPC_NS_HANDLE NsHandle,
       unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
        unsigned long * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
       unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_WSTR *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
       RPC_NS_HANDLE ImportContext,
        RPC_BINDING_HANDLE * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
           RPC_NS_HANDLE * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
           RPC_BINDING_VECTOR * BindingVec,
        RPC_BINDING_HANDLE * Binding
    );
# 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcnterr.h" 1 3
# 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcnterr.h" 3
#pragma warning(push)
#pragma warning(disable: 4668)
# 557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcnterr.h" 3
#pragma warning(pop)
# 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 2 3
# 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 1 3
# 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
extern "C" {
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)




typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,

    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;


typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel
    } RPC_ASYNC_EVENT;
# 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO {




    struct {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
        } APC;







    struct {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
        } IOC;






    struct {
        HWND hWnd;
        UINT Msg;
        } HWND;
# 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
    HANDLE hEvent;
# 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

typedef struct _RPC_ASYNC_STATE {
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;
# 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
         PRPC_ASYNC_STATE pAsync
    ) ;


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
                             PRPC_ASYNC_STATE pAsync,
         unsigned int Size
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
         PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
            PRPC_ASYNC_STATE pAsync,
              void *Reply
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncAbortCall (
            PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncCancelCall (
            PRPC_ASYNC_STATE pAsync,
         BOOL fAbort
    ) ;






typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;
# 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;



        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorStartEnumeration (
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorGetNextRecord (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
         BOOL CopyStrings,
          RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorEndEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorResetEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorGetNumberOfRecords (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
          int *Records
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorSaveErrorInfo (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
                                          PVOID *ErrorBlob,
          size_t *BlobSize
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorLoadErrorInfo (
                               PVOID ErrorBlob,
         size_t BlobSize,
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorAddRecord (
         RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
void
__stdcall
RpcErrorClearInformation (
    void
    );
# 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
         DWORD dwTimeout
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
             RPC_BINDING_HANDLE ClientBinding,
         BOOL ImpersonateOnReturn,
             PVOID Reserved1,
             PLARGE_INTEGER pExpirationTime,
         LUID Reserved2,
         DWORD Reserved3,
             PVOID Reserved4,
          PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcFreeAuthorizationContext (
            PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
             RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockShared (
         RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );


typedef enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4,
    rlafIPv6
} RpcLocalAddressFormat;

typedef struct _RPC_CALL_LOCAL_ADDRESS_V1
{
    unsigned int Version;
    void *Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;
# 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;






typedef enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal,
    rctTraining,
    rctGuaranteed
} RpcCallType;

typedef enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality
} RpcCallClientLocality;


typedef struct tagRPC_CALL_ATTRIBUTES_V2_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V2_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_A;



typedef struct tagRPC_CALL_ATTRIBUTES_V3_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long ClientIdentifierBufferLength;
    unsigned char *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V3_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long ClientIdentifierBufferLength;
    unsigned char *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_A;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );
# 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
typedef RPC_CALL_ATTRIBUTES_V3_W RPC_CALL_ATTRIBUTES;
# 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
typedef enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2
} RPC_NOTIFICATIONS;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerSubscribeForNotification (
             RPC_BINDING_HANDLE Binding,
         RPC_NOTIFICATIONS Notification,
         RPC_NOTIFICATION_TYPES NotificationType,
         RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnsubscribeForNotification (
             RPC_BINDING_HANDLE Binding,
         RPC_NOTIFICATIONS Notification,
          unsigned long *NotificationsQueued
    );
# 703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingBind (
             PRPC_ASYNC_STATE pAsync,
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingUnbind (
         RPC_BINDING_HANDLE Binding
    );
# 733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcasync.h" 3
RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
          PRPC_MESSAGE Message,
          PRPC_ASYNC_STATE pAsync
    );


RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
         PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;


int
__stdcall
I_RpcExceptionFilter (
         unsigned long ExceptionCode
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqClientTokenAttributes (
         RPC_BINDING_HANDLE Binding,
              LUID * TokenId,
              LUID * AuthenticationId,
              LUID * ModifiedId
    );




#pragma warning(pop)






}
# 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 2 3
# 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpc.h" 3
}
# 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4820)
# 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 2 3




extern "C" {
# 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
struct HDROP__{int unused;}; typedef struct HDROP__ *HDROP;


extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileA( HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch);

extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileW( HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch);





extern "C" __declspec(dllimport) BOOL __stdcall DragQueryPoint( HDROP hDrop, POINT *ppt);
extern "C" __declspec(dllimport) void __stdcall DragFinish( HDROP hDrop);
extern "C" __declspec(dllimport) void __stdcall DragAcceptFiles( HWND hWnd, BOOL fAccept);

extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteA( HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters,
             LPCSTR lpDirectory, INT nShowCmd);
extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteW( HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters,
             LPCWSTR lpDirectory, INT nShowCmd);






extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableA( LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);

extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableW( LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);





extern "C" __declspec(dllimport) LPWSTR * __stdcall CommandLineToArgvW( LPCWSTR lpCmdLine, int* pNumArgs);

extern "C" __declspec(dllimport) INT __stdcall ShellAboutA( HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
extern "C" __declspec(dllimport) INT __stdcall ShellAboutW( HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);





extern "C" __declspec(dllimport) HICON __stdcall DuplicateIcon( HINSTANCE hInst, HICON hIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconA( HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconW( HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon);





extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconExA( HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconExW( HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);





extern "C" __declspec(dllimport) HICON __stdcall ExtractIconA( HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex);
extern "C" __declspec(dllimport) HICON __stdcall ExtractIconW( HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex);
# 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _DRAGINFOA {
    UINT uSize;
    POINT pt;
    BOOL fNC;
    PZZSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW {
    UINT uSize;
    POINT pt;
    BOOL fNC;
    PZZWSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;

typedef DRAGINFOW DRAGINFO;
typedef LPDRAGINFOW LPDRAGINFO;
# 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
} APPBARDATA, *PAPPBARDATA;


extern "C" __declspec(dllimport) UINT_PTR __stdcall SHAppBarMessage( DWORD dwMessage, PAPPBARDATA pData);





extern "C" __declspec(dllimport) DWORD __stdcall DoEnvironmentSubstA( LPSTR pszSrc, UINT cchSrc);
extern "C" __declspec(dllimport) DWORD __stdcall DoEnvironmentSubstW( LPWSTR pszSrc, UINT cchSrc);







extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExA( LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExW( LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
# 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef WORD FILEOP_FLAGS;
# 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef WORD PRINTEROP_FLAGS;
# 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _SHFILEOPSTRUCTA
{
    HWND hwnd;
    UINT wFunc;
    PCZZSTR pFrom;
    PCZZSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCSTR lpszProgressTitle;
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
    HWND hwnd;
    UINT wFunc;
    PCZZWSTR pFrom;
    PCZZWSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCWSTR lpszProgressTitle;
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;

typedef SHFILEOPSTRUCTW SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTW LPSHFILEOPSTRUCT;





extern "C" __declspec(dllimport) int __stdcall SHFileOperationA( LPSHFILEOPSTRUCTA lpFileOp);
extern "C" __declspec(dllimport) int __stdcall SHFileOperationW( LPSHFILEOPSTRUCTW lpFileOp);





extern "C" __declspec(dllimport) void __stdcall SHFreeNameMappings( HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR pszOldPath;
    LPSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR pszOldPath;
    LPWSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;

typedef SHNAMEMAPPINGW SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGW LPSHNAMEMAPPING;
# 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _SHELLEXECUTEINFOA
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpFile;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union
    {
        HANDLE hIcon;

        HANDLE hMonitor;

    } ;
    HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union
    {
        HANDLE hIcon;

        HANDLE hMonitor;

    } ;
    HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;

typedef SHELLEXECUTEINFOW SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOW LPSHELLEXECUTEINFO;





extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExA( SHELLEXECUTEINFOA *pExecInfo);
extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExW( SHELLEXECUTEINFOW *pExecInfo);
# 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _SHCREATEPROCESSINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR pszFile;
    LPCWSTR pszParameters;
    LPCWSTR pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    BOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;

extern "C" __declspec(dllimport) BOOL __stdcall SHCreateProcessAsUserW( PSHCREATEPROCESSINFOW pscpi);




extern "C" __declspec(dllimport) HRESULT __stdcall SHEvaluateSystemCommandTemplate( PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters);
# 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef enum ASSOCCLASS
{
    ASSOCCLASS_SHELL_KEY = 0,
    ASSOCCLASS_PROGID_KEY,
    ASSOCCLASS_PROGID_STR,
    ASSOCCLASS_CLSID_KEY,
    ASSOCCLASS_CLSID_STR,
    ASSOCCLASS_APP_KEY,
    ASSOCCLASS_APP_STR,
    ASSOCCLASS_SYSTEM_STR,
    ASSOCCLASS_FOLDER,
    ASSOCCLASS_STAR,

    ASSOCCLASS_FIXED_PROGID_STR,
    ASSOCCLASS_PROTOCOL_STR,

} ASSOCCLASS;

typedef struct ASSOCIATIONELEMENT
{
    ASSOCCLASS ac;
    HKEY hkClass;
    PCWSTR pszClass;
} ASSOCIATIONELEMENT;



extern "C" __declspec(dllimport) HRESULT __stdcall AssocCreateForClasses( const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID & riid, void **ppv);
# 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _SHQUERYRBINFO {
    DWORD cbSize;

    __int64 i64Size;
    __int64 i64NumItems;




} SHQUERYRBINFO, *LPSHQUERYRBINFO;
# 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinA( LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinW( LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);





extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinA( HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinW( HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);
# 978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef enum
{
    QUNS_NOT_PRESENT = 1,
    QUNS_BUSY = 2,
    QUNS_RUNNING_D3D_FULL_SCREEN = 3,
    QUNS_PRESENTATION_MODE = 4,
    QUNS_ACCEPTS_NOTIFICATIONS = 5,

    QUNS_QUIET_TIME = 6,


    QUNS_APP = 7,

} QUERY_USER_NOTIFICATION_STATE;

extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryUserNotificationState( QUERY_USER_NOTIFICATION_STATE *pquns);




extern "C" __declspec(dllimport) HRESULT __stdcall SHGetPropertyStoreForWindow( HWND hwnd, const IID & riid, void** ppv);



typedef struct _NOTIFYICONDATAA {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;




    CHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    CHAR szInfo[256];

    union {
        UINT uTimeout;
        UINT uVersion;
    } ;

    CHAR szInfoTitle[64];
    DWORD dwInfoFlags;


    GUID guidItem;


    HICON hBalloonIcon;

} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;




    WCHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR szInfo[256];

    union {
        UINT uTimeout;
        UINT uVersion;
    } ;

    WCHAR szInfoTitle[64];
    DWORD dwInfoFlags;


    GUID guidItem;


    HICON hBalloonIcon;

} NOTIFYICONDATAW, *PNOTIFYICONDATAW;

typedef NOTIFYICONDATAW NOTIFYICONDATA;
typedef PNOTIFYICONDATAW PNOTIFYICONDATA;
# 1169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _NOTIFYICONIDENTIFIER {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    GUID guidItem;
} NOTIFYICONIDENTIFIER, *PNOTIFYICONIDENTIFIER;


extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);







extern "C" __declspec(dllimport) HRESULT __stdcall Shell_NotifyIconGetRect( const NOTIFYICONIDENTIFIER* identifier, RECT* iconLocation);
# 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _SHFILEINFOA
{
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        CHAR szDisplayName[260];
        CHAR szTypeName[80];
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        WCHAR szDisplayName[260];
        WCHAR szTypeName[80];
} SHFILEINFOW;

typedef SHFILEINFOW SHFILEINFO;
# 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoA( LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi,
    UINT cbFileInfo, UINT uFlags);
extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoW( LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi,
    UINT cbFileInfo, UINT uFlags);







typedef struct _SHSTOCKICONINFO
{
    DWORD cbSize;
    HICON hIcon;
    int iSysImageIndex;
    int iIcon;
    WCHAR szPath[260];
} SHSTOCKICONINFO;
# 1296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef enum SHSTOCKICONID
{
    SIID_DOCNOASSOC = 0,
    SIID_DOCASSOC = 1,
    SIID_APPLICATION = 2,
    SIID_FOLDER = 3,
    SIID_FOLDEROPEN = 4,
    SIID_DRIVE525 = 5,
    SIID_DRIVE35 = 6,
    SIID_DRIVEREMOVE = 7,
    SIID_DRIVEFIXED = 8,
    SIID_DRIVENET = 9,
    SIID_DRIVENETDISABLED = 10,
    SIID_DRIVECD = 11,
    SIID_DRIVERAM = 12,
    SIID_WORLD = 13,
    SIID_SERVER = 15,
    SIID_PRINTER = 16,
    SIID_MYNETWORK = 17,
    SIID_FIND = 22,
    SIID_HELP = 23,
    SIID_SHARE = 28,
    SIID_LINK = 29,
    SIID_SLOWFILE = 30,
    SIID_RECYCLER = 31,
    SIID_RECYCLERFULL = 32,
    SIID_MEDIACDAUDIO = 40,
    SIID_LOCK = 47,
    SIID_AUTOLIST = 49,
    SIID_PRINTERNET = 50,
    SIID_SERVERSHARE = 51,
    SIID_PRINTERFAX = 52,
    SIID_PRINTERFAXNET = 53,
    SIID_PRINTERFILE = 54,
    SIID_STACK = 55,
    SIID_MEDIASVCD = 56,
    SIID_STUFFEDFOLDER = 57,
    SIID_DRIVEUNKNOWN = 58,
    SIID_DRIVEDVD = 59,
    SIID_MEDIADVD = 60,
    SIID_MEDIADVDRAM = 61,
    SIID_MEDIADVDRW = 62,
    SIID_MEDIADVDR = 63,
    SIID_MEDIADVDROM = 64,
    SIID_MEDIACDAUDIOPLUS = 65,
    SIID_MEDIACDRW = 66,
    SIID_MEDIACDR = 67,
    SIID_MEDIACDBURN = 68,
    SIID_MEDIABLANKCD = 69,
    SIID_MEDIACDROM = 70,
    SIID_AUDIOFILES = 71,
    SIID_IMAGEFILES = 72,
    SIID_VIDEOFILES = 73,
    SIID_MIXEDFILES = 74,
    SIID_FOLDERBACK = 75,
    SIID_FOLDERFRONT = 76,
    SIID_SHIELD = 77,
    SIID_WARNING = 78,
    SIID_INFO = 79,
    SIID_ERROR = 80,
    SIID_KEY = 81,
    SIID_SOFTWARE = 82,
    SIID_RENAME = 83,
    SIID_DELETE = 84,
    SIID_MEDIAAUDIODVD = 85,
    SIID_MEDIAMOVIEDVD = 86,
    SIID_MEDIAENHANCEDCD = 87,
    SIID_MEDIAENHANCEDDVD = 88,
    SIID_MEDIAHDDVD = 89,
    SIID_MEDIABLURAY = 90,
    SIID_MEDIAVCD = 91,
    SIID_MEDIADVDPLUSR = 92,
    SIID_MEDIADVDPLUSRW = 93,
    SIID_DESKTOPPC = 94,
    SIID_MOBILEPC = 95,
    SIID_USERS = 96,
    SIID_MEDIASMARTMEDIA = 97,
    SIID_MEDIACOMPACTFLASH = 98,
    SIID_DEVICECELLPHONE = 99,
    SIID_DEVICECAMERA = 100,
    SIID_DEVICEVIDEOCAMERA = 101,
    SIID_DEVICEAUDIOPLAYER = 102,
    SIID_NETWORKCONNECT = 103,
    SIID_INTERNET = 104,
    SIID_ZIPFILE = 105,
    SIID_SETTINGS = 106,


    SIID_DRIVEHDDVD = 132,
    SIID_DRIVEBD = 133,
    SIID_MEDIAHDDVDROM = 134,
    SIID_MEDIAHDDVDR = 135,
    SIID_MEDIAHDDVDRAM = 136,
    SIID_MEDIABDROM = 137,
    SIID_MEDIABDR = 138,
    SIID_MEDIABDRE = 139,
    SIID_CLUSTEREDDRIVE = 140,

    SIID_MAX_ICONS = 181,
} SHSTOCKICONID;



extern "C" __declspec(dllimport) HRESULT __stdcall SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii);







extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExA( LPCSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
              ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExW( LPCWSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
              ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);






extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoA( LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags);

extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoW( LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags);
# 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandA( HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandW( HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);
# 1461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct _OPEN_PRINTER_PROPS_INFOA
{
    DWORD dwSize;
    LPSTR pszSheetName;
    UINT uSheetIndex;
    DWORD dwFlags;
    BOOL bModal;
} OPEN_PRINTER_PROPS_INFOA, *POPEN_PRINTER_PROPS_INFOA;
typedef struct _OPEN_PRINTER_PROPS_INFOW
{
    DWORD dwSize;
    LPWSTR pszSheetName;
    UINT uSheetIndex;
    DWORD dwFlags;
    BOOL bModal;
} OPEN_PRINTER_PROPS_INFOW, *POPEN_PRINTER_PROPS_INFOW;

typedef OPEN_PRINTER_PROPS_INFOW OPEN_PRINTER_PROPS_INFO;
typedef POPEN_PRINTER_PROPS_INFOW POPEN_PRINTER_PROPS_INFO;
# 1504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall SHLoadNonloadedIconOverlayIdentifiers(void);
# 1525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall SHIsFileAvailableOffline( PCWSTR pwszPath, DWORD *pdwStatus);
# 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall SHSetLocalizedName( PCWSTR pszPath, PCWSTR pszResModule, int idsRes);




extern "C" __declspec(dllimport) HRESULT __stdcall SHRemoveLocalizedName( PCWSTR pszPath);

extern "C" __declspec(dllimport) HRESULT __stdcall SHGetLocalizedName( PCWSTR pszPath, PWSTR pszResModule, UINT cch, int *pidsRes);
# 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" __declspec(dllimport) int __cdecl ShellMessageBoxA(
             HINSTANCE hAppInst,
             HWND hWnd,
         LPCSTR lpcText,
             LPCSTR lpcTitle,
         UINT fuStyle, ...);
extern "C" __declspec(dllimport) int __cdecl ShellMessageBoxW(
             HINSTANCE hAppInst,
             HWND hWnd,
         LPCWSTR lpcText,
             LPCWSTR lpcTitle,
         UINT fuStyle, ...);







extern "C" __declspec(dllimport) BOOL __stdcall IsLFNDriveA( LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall IsLFNDriveW( LPCWSTR pszPath);
# 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsA( HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress);
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsW( HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress);





extern "C" HRESULT __stdcall SHGetUnreadMailCountA( HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
extern "C" HRESULT __stdcall SHGetUnreadMailCountW( HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);





extern "C" HRESULT __stdcall SHSetUnreadMailCountA( LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
extern "C" HRESULT __stdcall SHSetUnreadMailCountW( LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);
# 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" BOOL __stdcall SHTestTokenMembership( HANDLE hToken, ULONG ulRID);





extern "C" __declspec(dllimport) HRESULT __stdcall SHGetImageList( int iImageList, const IID & riid, void **ppvObj);
# 1658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef HRESULT (__stdcall *PFNCANSHAREFOLDERW)( PCWSTR pszPath);
typedef HRESULT (__stdcall *PFNSHOWSHAREFOLDERUIW)( HWND hwndParent, PCWSTR pszPath);
# 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
}




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 2 3
# 1684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" __declspec(dllimport) BOOL __stdcall InitNetworkAddressControl(void);
# 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
typedef struct tagNC_ADDRESS
{
   struct NET_ADDRESS_INFO_ *pAddrInfo;
   USHORT PortNumber;
   BYTE PrefixLength;
} NC_ADDRESS, *PNC_ADDRESS;
# 1725 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
extern "C" HRESULT __stdcall SHGetDriveMedia( PCWSTR pszDrive, DWORD *pdwMediaContent);
# 1739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\shellapi.h" 3
#pragma warning(pop)
# 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 1 3
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 2 3
# 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
typedef struct _PERF_DATA_BLOCK {
    WCHAR Signature[4];
    DWORD LittleEndian;
    DWORD Version;

    DWORD Revision;

    DWORD TotalByteLength;
    DWORD HeaderLength;
    DWORD NumObjectTypes;

    LONG DefaultObject;




    SYSTEMTIME SystemTime;

    LARGE_INTEGER PerfTime;

    LARGE_INTEGER PerfFreq;

    LARGE_INTEGER PerfTime100nSec;

    DWORD SystemNameLength;
    DWORD SystemNameOffset;


} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;
# 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
typedef struct _PERF_OBJECT_TYPE {
    DWORD TotalByteLength;







    DWORD DefinitionLength;







    DWORD HeaderLength;



    DWORD ObjectNameTitleIndex;




    LPWSTR ObjectNameTitle;



    DWORD ObjectHelpTitleIndex;




    LPWSTR ObjectHelpTitle;



    DWORD DetailLevel;



    DWORD NumCounters;


    LONG DefaultCounter;



    LONG NumInstances;
# 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
    DWORD CodePage;


    LARGE_INTEGER PerfTime;

    LARGE_INTEGER PerfFreq;

} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;
# 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
typedef struct _PERF_COUNTER_DEFINITION {
    DWORD ByteLength;
    DWORD CounterNameTitleIndex;





    LPWSTR CounterNameTitle;



    DWORD CounterHelpTitleIndex;





    LPWSTR CounterHelpTitle;



    LONG DefaultScale;


    DWORD DetailLevel;

    DWORD CounterType;
    DWORD CounterSize;
    DWORD CounterOffset;


} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;
# 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
typedef struct _PERF_INSTANCE_DEFINITION {
    DWORD ByteLength;

    DWORD ParentObjectTitleIndex;





    DWORD ParentObjectInstance;



    LONG UniqueID;


    DWORD NameOffset;


    DWORD NameLength;





} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;
# 639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
typedef struct _PERF_COUNTER_BLOCK {
    DWORD ByteLength;

} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
# 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
typedef DWORD (__stdcall PM_OPEN_PROC) ( LPWSTR);
typedef DWORD (__stdcall PM_COLLECT_PROC) ( LPWSTR lpValueName,



                                                  LPVOID *lppData,
                                                  LPDWORD lpcbTotalBytes,
                                                  LPDWORD lpNumObjectTypes);
typedef DWORD (__stdcall PM_CLOSE_PROC) (void);
typedef DWORD (__stdcall PM_QUERY_PROC) (LPDWORD, LPVOID *, LPDWORD, LPDWORD);
# 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winperf.h" 2 3






#pragma warning(pop)
# 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 1 3
# 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)





typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;






typedef UINT_PTR SOCKET;
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
typedef struct fd_set {
        u_int fd_count;
        SOCKET fd_array[64];
} fd_set;


extern "C" {


extern int __stdcall __WSAFDIsSet(SOCKET, fd_set *);


}
# 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
struct timeval {
        long tv_sec;
        long tv_usec;
};
# 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
struct hostent {
        char * h_name;
        char * * h_aliases;
        short h_addrtype;
        short h_length;
        char * * h_addr_list;

};





struct netent {
        char * n_name;
        char * * n_aliases;
        short n_addrtype;
        u_long n_net;
};

struct servent {
        char * s_name;
        char * * s_aliases;




        short s_port;
        char * s_proto;

};

struct protoent {
        char * p_name;
        char * * p_aliases;
        short p_proto;
};
# 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\inaddr.h" 1 3
# 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\inaddr.h" 3
typedef struct in_addr {
        union {
                struct { UCHAR s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { USHORT s_w1,s_w2; } S_un_w;
                ULONG S_addr;
        } S_un;






} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;
# 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 2 3
# 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
struct sockaddr_in {
        short sin_family;
        u_short sin_port;
        struct in_addr sin_addr;
        char sin_zero[8];
};




typedef struct WSAData {
        WORD wVersion;
        WORD wHighVersion;







        char szDescription[256 +1];
        char szSystemStatus[128 +1];
        unsigned short iMaxSockets;
        unsigned short iMaxUdpDg;
        char * lpVendorInfo;

} WSADATA;

typedef WSADATA *LPWSADATA;
# 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
struct ip_mreq {
        struct in_addr imr_multiaddr;
        struct in_addr imr_interface;
};
# 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
struct sockaddr {
        u_short sa_family;
        char sa_data[14];
};





struct sockproto {
        u_short sp_family;
        u_short sp_protocol;
};
# 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
struct linger {
        u_short l_onoff;
        u_short l_linger;
};
# 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
extern "C" {


SOCKET __stdcall accept (
                               SOCKET s,
                                                           struct sockaddr *addr,
                                      int *addrlen);

int __stdcall bind (
                          SOCKET s,
                                               const struct sockaddr *addr,
                          int namelen);

int __stdcall closesocket ( SOCKET s);

int __stdcall connect (
                             SOCKET s,
                                                  const struct sockaddr *name,
                             int namelen);

int __stdcall ioctlsocket (
                                 SOCKET s,
                                 long cmd,
                                    u_long *argp);

int __stdcall getpeername (
                                 SOCKET s,
                                                                      struct sockaddr *name,
                                    int * namelen);

int __stdcall getsockname (
                                 SOCKET s,
                                                                      struct sockaddr *name,
                                    int * namelen);

int __stdcall getsockopt (
                                SOCKET s,
                                int level,
                                int optname,
                                                       char * optval,
                                   int *optlen);

u_long __stdcall htonl ( u_long hostlong);

u_short __stdcall htons ( u_short hostshort);

unsigned long __stdcall inet_addr ( const char * cp);

char * __stdcall inet_ntoa ( struct in_addr in);

int __stdcall listen (
                            SOCKET s,
                            int backlog);

u_long __stdcall ntohl ( u_long netlong);

u_short __stdcall ntohs ( u_short netshort);

int __stdcall recv (
                          SOCKET s,
                                                                                   char * buf,
                          int len,
                          int flags);

int __stdcall recvfrom (
                              SOCKET s,
                                                                                       char * buf,
                              int len,
                              int flags,
                                                                       struct sockaddr * from,
                                     int * fromlen);

int __stdcall select (
                             int nfds,
                                    fd_set *readfds,
                                    fd_set *writefds,
                                    fd_set *exceptfds,
                                  const struct timeval *timeout);

int __stdcall send (
                          SOCKET s,
                                           const char * buf,
                          int len,
                          int flags);

int __stdcall sendto (
                            SOCKET s,
                                             const char * buf,
                            int len,
                            int flags,
                                                   const struct sockaddr *to,
                            int tolen);

int __stdcall setsockopt (
                                SOCKET s,
                                int level,
                                int optname,
                                                        const char * optval,
                                int optlen);

int __stdcall shutdown (
                              SOCKET s,
                              int how);

SOCKET __stdcall socket (
                               int af,
                               int type,
                               int protocol);



struct hostent * __stdcall gethostbyaddr(
                                                                    const char * addr,
                                                   int len,
                                                   int type);

struct hostent * __stdcall gethostbyname( const char * name);

int __stdcall gethostname (
                                                                   char * name,
                                 int namelen);

struct servent * __stdcall getservbyport(
                                                   int port,
                                                     const char * proto);

struct servent * __stdcall getservbyname(
                                                     const char * name,
                                                     const char * proto);

struct protoent * __stdcall getprotobynumber( int proto);

struct protoent * __stdcall getprotobyname( const char * name);



int __stdcall WSAStartup(
                               WORD wVersionRequired,
                                LPWSADATA lpWSAData);

int __stdcall WSACleanup(void);

void __stdcall WSASetLastError( int iError);

int __stdcall WSAGetLastError(void);

BOOL __stdcall WSAIsBlocking(void);

int __stdcall WSAUnhookBlockingHook(void);

FARPROC __stdcall WSASetBlockingHook( FARPROC lpBlockFunc);

int __stdcall WSACancelBlockingCall(void);

HANDLE __stdcall WSAAsyncGetServByName(
                                             HWND hWnd,
                                             u_int wMsg,
                                               const char * name,
                                               const char * proto,
                                                                   char * buf,
                                             int buflen);

HANDLE __stdcall WSAAsyncGetServByPort(
                                             HWND hWnd,
                                             u_int wMsg,
                                             int port,
                                             const char * proto,
                                                                   char * buf,
                                             int buflen);

HANDLE __stdcall WSAAsyncGetProtoByName(
                                              HWND hWnd,
                                              u_int wMsg,
                                                const char * name,
                                                                    char * buf,
                                              int buflen);

HANDLE __stdcall WSAAsyncGetProtoByNumber(
                                                HWND hWnd,
                                                u_int wMsg,
                                                int number,
                                                                      char * buf,
                                                int buflen);

HANDLE __stdcall WSAAsyncGetHostByName(
                                             HWND hWnd,
                                             u_int wMsg,
                                               const char * name,
                                                                   char * buf,
                                             int buflen);

HANDLE __stdcall WSAAsyncGetHostByAddr(
                                             HWND hWnd,
                                             u_int wMsg,
                                             const char * addr,
                                             int len,
                                             int type,
                                                                   char * buf,
                                             int buflen);

int __stdcall WSACancelAsyncRequest( HANDLE hAsyncTaskHandle);

int __stdcall WSAAsyncSelect(
                                   SOCKET s,
                                   HWND hWnd,
                                   u_int wMsg,
                                   long lEvent);

int __stdcall WSARecvEx (
                               SOCKET s,
                                                                                        char * buf,
                               int len,
                                  int *flags);

typedef struct _TRANSMIT_FILE_BUFFERS {
    PVOID Head;
    DWORD HeadLength;
    PVOID Tail;
    DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;





BOOL
__stdcall
TransmitFile (
         SOCKET hSocket,
         HANDLE hFile,
         DWORD nNumberOfBytesToWrite,
         DWORD nNumberOfBytesPerSend,
                LPOVERLAPPED lpOverlapped,
             LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
         DWORD dwReserved
    );

BOOL
__stdcall
AcceptEx (
         SOCKET sListenSocket,
         SOCKET sAcceptSocket,

                           PVOID lpOutputBuffer,
         DWORD dwReceiveDataLength,
         DWORD dwLocalAddressLength,
         DWORD dwRemoteAddressLength,
          LPDWORD lpdwBytesReceived,
            LPOVERLAPPED lpOverlapped
    );

void
__stdcall
GetAcceptExSockaddrs (
                                                                                     PVOID lpOutputBuffer,
         DWORD dwReceiveDataLength,
         DWORD dwLocalAddressLength,
         DWORD dwRemoteAddressLength,
                                                     struct sockaddr **LocalSockaddr,
          LPINT LocalSockaddrLength,
                                                      struct sockaddr **RemoteSockaddr,
          LPINT RemoteSockaddrLength
    );


}



typedef struct sockaddr SOCKADDR;
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr *LPSOCKADDR;

typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger *LPLINGER;

typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set *LPFD_SET;

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent *LPPROTOENT;

typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval *LPTIMEVAL;
# 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsock.h" 3
#pragma warning(pop)
# 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
#pragma warning(push)
#pragma warning(disable: 4668)
#pragma warning(disable: 4820)

#pragma warning(disable: 4201)
# 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
extern "C" {
# 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef unsigned int ALG_ID;
# 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;
# 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMS_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    BYTE *pbOID;
    DWORD cbOID;
} CMS_KEY_INFO, *PCMS_KEY_INFO;


typedef struct _HMAC_Info {
    ALG_ID HashAlgid;
    BYTE *pbInnerString;
    DWORD cbInnerString;
    BYTE *pbOuterString;
    DWORD cbOuterString;
} HMAC_INFO, *PHMAC_INFO;


typedef struct _SCHANNEL_ALG {
    DWORD dwUse;
    ALG_ID Algid;
    DWORD cBits;
    DWORD dwFlags;
    DWORD dwReserved;
} SCHANNEL_ALG, *PSCHANNEL_ALG;
# 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _PROV_ENUMALGS {
    ALG_ID aiAlgid;
    DWORD dwBitLen;
    DWORD dwNameLen;
    CHAR szName[20];
} PROV_ENUMALGS;


typedef struct _PROV_ENUMALGS_EX {
    ALG_ID aiAlgid;
    DWORD dwDefaultLen;
    DWORD dwMinLen;
    DWORD dwMaxLen;
    DWORD dwProtocols;
    DWORD dwNameLen;
    CHAR szName[20];
    DWORD dwLongNameLen;
    CHAR szLongName[40];
} PROV_ENUMALGS_EX;


typedef struct _PUBLICKEYSTRUC {
        BYTE bType;
        BYTE bVersion;
        WORD reserved;
        ALG_ID aiKeyAlg;
} BLOBHEADER, PUBLICKEYSTRUC;

typedef struct _RSAPUBKEY {
        DWORD magic;
        DWORD bitlen;
        DWORD pubexp;

} RSAPUBKEY;

typedef struct _PUBKEY {
        DWORD magic;
        DWORD bitlen;
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;

typedef struct _DSSSEED {
        DWORD counter;
        BYTE seed[20];
} DSSSEED;

typedef struct _PUBKEYVER3 {
        DWORD magic;
        DWORD bitlenP;
        DWORD bitlenQ;
        DWORD bitlenJ;
        DSSSEED DSSSeed;
} DHPUBKEY_VER3, DSSPUBKEY_VER3;

typedef struct _PRIVKEYVER3 {
        DWORD magic;
        DWORD bitlenP;
        DWORD bitlenQ;
        DWORD bitlenJ;
        DWORD bitlenX;
        DSSSEED DSSSeed;
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;

typedef struct _KEY_TYPE_SUBTYPE {
        DWORD dwKeySpec;
        GUID Type;
        GUID Subtype;
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;

typedef struct _CERT_FORTEZZA_DATA_PROP {
    unsigned char SerialNumber[8];
    int CertIndex;
    unsigned char CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;


typedef struct _CRYPT_RC4_KEY_STATE {
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;

typedef struct _CRYPT_DES_KEY_STATE {
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;

typedef struct _CRYPT_3DES_KEY_STATE {
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;



typedef struct _CRYPT_AES_128_KEY_STATE {
    unsigned char Key[16];
    unsigned char IV[16];
    unsigned char EncryptionState[11][16];
    unsigned char DecryptionState[11][16];
    unsigned char Feedback[16];
} CRYPT_AES_128_KEY_STATE, *PCRYPT_AES_128_KEY_STATE;

typedef struct _CRYPT_AES_256_KEY_STATE {
    unsigned char Key[32];
    unsigned char IV[16];
    unsigned char EncryptionState[15][16];
    unsigned char DecryptionState[15][16];
    unsigned char Feedback[16];
} CRYPT_AES_256_KEY_STATE, *PCRYPT_AES_256_KEY_STATE;
# 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPTOAPI_BLOB {
                            DWORD cbData;
                                BYTE *pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
CERT_NAME_BLOB, *PCERT_NAME_BLOB,
CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
CERT_BLOB, *PCERT_BLOB,
CRL_BLOB, *PCRL_BLOB,
DATA_BLOB, *PDATA_BLOB,
CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;




typedef struct _CMS_DH_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void *pReserved;
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;







__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextA(
                HCRYPTPROV *phProv,
                LPCSTR szContainer,
                LPCSTR szProvider,
                DWORD dwProvType,
                DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextW(
                HCRYPTPROV *phProv,
                LPCWSTR szContainer,
                LPCWSTR szProvider,
                DWORD dwProvType,
                DWORD dwFlags
    );
# 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptReleaseContext(
            HCRYPTPROV hProv,
            DWORD dwFlags
    );







__declspec(dllimport)
BOOL
__stdcall
CryptGenKey(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            DWORD dwFlags,
            HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDeriveKey(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            HCRYPTHASH hBaseData,
            DWORD dwFlags,
            HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyKey(
            HCRYPTKEY hKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyParam(
            HCRYPTKEY hKey,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyParam(
                                                    HCRYPTKEY hKey,
                                                    DWORD dwParam,
                                                        BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetHashParam(
            HCRYPTHASH hHash,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetHashParam(
                                                HCRYPTHASH hHash,
                                                DWORD dwParam,
                                                        BYTE *pbData,
                                                DWORD *pdwDataLen,
                                                DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetProvParam(
            HCRYPTPROV hProv,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetProvParam(
                                                    HCRYPTPROV hProv,
                                                    DWORD dwParam,
                                                        BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGenRandom(
                            HCRYPTPROV hProv,
                            DWORD dwLen,
                                   BYTE *pbBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetUserKey(
            HCRYPTPROV hProv,
            DWORD dwKeySpec,
            HCRYPTKEY *phUserKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptExportKey(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTKEY hExpKey,
                                                    DWORD dwBlobType,
                                                    DWORD dwFlags,
                                                        BYTE *pbData,
                                                    DWORD *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptImportKey(
                            HCRYPTPROV hProv,
                                 const BYTE *pbData,
                            DWORD dwDataLen,
                            HCRYPTKEY hPubKey,
                            DWORD dwFlags,
                            HCRYPTKEY *phKey
    );

__declspec(dllimport)
                       BOOL
__stdcall
CryptEncrypt(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTHASH hHash,
                                                    BOOL Final,
                                                    DWORD dwFlags,
                                                         BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwBufLen
    );

__declspec(dllimport)
                       BOOL
__stdcall
CryptDecrypt(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTHASH hHash,
                                                    BOOL Final,
                                                    DWORD dwFlags,
                                                         BYTE *pbData,
                                                    DWORD *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateHash(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            HCRYPTKEY hKey,
            DWORD dwFlags,
            HCRYPTHASH *phHash
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashData(
                            HCRYPTHASH hHash,
                                 const BYTE *pbData,
                            DWORD dwDataLen,
                            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashSessionKey(
            HCRYPTHASH hHash,
            HCRYPTKEY hKey,
            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyHash(
            HCRYPTHASH hHash
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSignHashA(
                                                  HCRYPTHASH hHash,
                                                  DWORD dwKeySpec,
                                                  LPCSTR szDescription,
                                                  DWORD dwFlags,
                                                      BYTE *pbSignature,
                                                  DWORD *pdwSigLen
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSignHashW(
                                                  HCRYPTHASH hHash,
                                                  DWORD dwKeySpec,
                                                  LPCWSTR szDescription,
                                                  DWORD dwFlags,
                                                      BYTE *pbSignature,
                                                  DWORD *pdwSigLen
    );






__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureA(
                            HCRYPTHASH hHash,
                                 const BYTE *pbSignature,
                            DWORD dwSigLen,
                            HCRYPTKEY hPubKey,
                            LPCSTR szDescription,
                            DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureW(
                            HCRYPTHASH hHash,
                                 const BYTE *pbSignature,
                            DWORD dwSigLen,
                            HCRYPTKEY hPubKey,
                            LPCWSTR szDescription,
                            DWORD dwFlags
    );






__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderA(
            LPCSTR pszProvName,
            DWORD dwProvType
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderW(
            LPCWSTR pszProvName,
            DWORD dwProvType
    );






__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExA(
                LPCSTR pszProvName,
                DWORD dwProvType,
                DWORD *pdwReserved,
                DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExW(
                LPCWSTR pszProvName,
                DWORD dwProvType,
                DWORD *pdwReserved,
                DWORD dwFlags
    );






__declspec(dllimport)
                       BOOL
__stdcall
CryptGetDefaultProviderA(
                                                    DWORD dwProvType,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                            LPSTR pszProvName,
                                                    DWORD *pcbProvName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptGetDefaultProviderW(
                                                    DWORD dwProvType,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                            LPWSTR pszProvName,
                                                    DWORD *pcbProvName
    );






__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProviderTypesA(
                                                    DWORD dwIndex,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                    DWORD *pdwProvType,
                                                            LPSTR szTypeName,
                                                    DWORD *pcbTypeName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProviderTypesW(
                                                    DWORD dwIndex,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                    DWORD *pdwProvType,
                                                            LPWSTR szTypeName,
                                                    DWORD *pcbTypeName
    );






__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProvidersA(
                                                        DWORD dwIndex,
                                                        DWORD *pdwReserved,
                                                        DWORD dwFlags,
                                                        DWORD *pdwProvType,
                                                            LPSTR szProvName,
                                                        DWORD *pcbProvName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProvidersW(
                                                        DWORD dwIndex,
                                                        DWORD *pdwReserved,
                                                        DWORD dwFlags,
                                                        DWORD *pdwProvType,
                                                            LPWSTR szProvName,
                                                        DWORD *pcbProvName
    );






__declspec(dllimport)
BOOL
__stdcall
CryptContextAddRef(
                HCRYPTPROV hProv,
                DWORD *pdwReserved,
                DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateKey(
                HCRYPTKEY hKey,
                DWORD *pdwReserved,
                DWORD dwFlags,
                HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateHash(
                HCRYPTHASH hHash,
                DWORD *pdwReserved,
                DWORD dwFlags,
                HCRYPTHASH *phHash
    );
# 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
BOOL
__cdecl
GetEncSChannel(
                                       BYTE **pData,
          DWORD *dwDecSize
    );
# 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 1 3
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)



extern "C" {
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef LONG NTSTATUS;
typedef NTSTATUS *PNTSTATUS;
# 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct __BCRYPT_KEY_LENGTHS_STRUCT
{
    ULONG dwMinLength;
    ULONG dwMaxLength;
    ULONG dwIncrement;
} BCRYPT_KEY_LENGTHS_STRUCT;

typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;

typedef struct _BCRYPT_OID
{
    ULONG cbOID;
    PUCHAR pbOID;
} BCRYPT_OID;

typedef struct _BCRYPT_OID_LIST
{
    ULONG dwOIDCount;
    BCRYPT_OID *pOIDs;
} BCRYPT_OID_LIST;

typedef struct _BCRYPT_PKCS1_PADDING_INFO
{
    LPCWSTR pszAlgId;
} BCRYPT_PKCS1_PADDING_INFO;

typedef struct _BCRYPT_PSS_PADDING_INFO
{
    LPCWSTR pszAlgId;
    ULONG cbSalt;
} BCRYPT_PSS_PADDING_INFO;

typedef struct _BCRYPT_OAEP_PADDING_INFO
{
    LPCWSTR pszAlgId;
    PUCHAR pbLabel;
    ULONG cbLabel;
} BCRYPT_OAEP_PADDING_INFO;






typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
{
    ULONG cbSize;
    ULONG dwInfoVersion;
    PUCHAR pbNonce;
    ULONG cbNonce;
    PUCHAR pbAuthData;
    ULONG cbAuthData;
    PUCHAR pbTag;
    ULONG cbTag;
    PUCHAR pbMacContext;
    ULONG cbMacContext;
    ULONG cbAAD;
    ULONGLONG cbData;
    ULONG dwFlags;
} BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
# 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCryptBuffer {
    ULONG cbBuffer;
    ULONG BufferType;
    PVOID pvBuffer;
} BCryptBuffer, * PBCryptBuffer;

typedef struct _BCryptBufferDesc {
    ULONG ulVersion;
    ULONG cBuffers;
    PBCryptBuffer pBuffers;
} BCryptBufferDesc, * PBCryptBufferDesc;





typedef PVOID BCRYPT_HANDLE;
typedef PVOID BCRYPT_ALG_HANDLE;
typedef PVOID BCRYPT_KEY_HANDLE;
typedef PVOID BCRYPT_HASH_HANDLE;
typedef PVOID BCRYPT_SECRET_HANDLE;
# 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCRYPT_KEY_BLOB
{
    ULONG Magic;
} BCRYPT_KEY_BLOB;
# 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCRYPT_RSAKEY_BLOB
{
    ULONG Magic;
    ULONG BitLength;
    ULONG cbPublicExp;
    ULONG cbModulus;
    ULONG cbPrime1;
    ULONG cbPrime2;
} BCRYPT_RSAKEY_BLOB;
# 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCRYPT_ECCKEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
} BCRYPT_ECCKEY_BLOB, *PBCRYPT_ECCKEY_BLOB;



typedef struct _SSL_ECCKEY_BLOB
{
    ULONG dwCurveType;
    ULONG cbKey;
} SSL_ECCKEY_BLOB, *PSSL_ECCKEY_BLOB;




typedef enum
{
    BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 0x1,
    BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 0x2,
    BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 0x3
} ECC_CURVE_TYPE_ENUM;

typedef enum
{
    BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0x0
} ECC_CURVE_ALG_ID_ENUM;



typedef struct _BCRYPT_ECCFULLKEY_BLOB
{
    ULONG dwMagic;
    ULONG dwVersion;
    ECC_CURVE_TYPE_ENUM dwCurveType;
    ECC_CURVE_ALG_ID_ENUM dwCurveGenerationAlgId;
    ULONG cbFieldLength;
    ULONG cbSubgroupOrder;
    ULONG cbCofactor;
    ULONG cbSeed;
# 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
} BCRYPT_ECCFULLKEY_BLOB, *PBCRYPT_ECCFULLKEY_BLOB;
# 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCRYPT_DH_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
} BCRYPT_DH_KEY_BLOB, *PBCRYPT_DH_KEY_BLOB;






typedef struct _BCRYPT_DH_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
} BCRYPT_DH_PARAMETER_HEADER;
# 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCRYPT_DSA_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
} BCRYPT_DSA_KEY_BLOB, *PBCRYPT_DSA_KEY_BLOB;


typedef enum
{
    DSA_HASH_ALGORITHM_SHA1,
    DSA_HASH_ALGORITHM_SHA256,
    DSA_HASH_ALGORITHM_SHA512
} HASHALGORITHM_ENUM;

typedef enum
{
    DSA_FIPS186_2,
    DSA_FIPS186_3
} DSAFIPSVERSION_ENUM;

typedef struct _BCRYPT_DSA_KEY_BLOB_V2
{
    ULONG dwMagic;
    ULONG cbKey;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR Count[4];
} BCRYPT_DSA_KEY_BLOB_V2, *PBCRYPT_DSA_KEY_BLOB_V2;


typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER
{
    ULONG dwMagic;
    ULONG dwVersion;
    ULONG cbKeyData;
} BCRYPT_KEY_DATA_BLOB_HEADER, *PBCRYPT_KEY_DATA_BLOB_HEADER;
# 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCRYPT_DSA_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
} BCRYPT_DSA_PARAMETER_HEADER;


typedef struct _BCRYPT_DSA_PARAMETER_HEADER_V2
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR Count[4];
} BCRYPT_DSA_PARAMETER_HEADER_V2;
# 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCRYPT_ECC_CURVE_NAMES
{
    ULONG dwEccCurveNames;
    LPWSTR *pEccCurveNames;
} BCRYPT_ECC_CURVE_NAMES;
# 713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef enum {
    BCRYPT_HASH_OPERATION_HASH_DATA = 1,
    BCRYPT_HASH_OPERATION_FINISH_HASH = 2,
} BCRYPT_HASH_OPERATION_TYPE;

typedef struct _BCRYPT_MULTI_HASH_OPERATION {
                            ULONG iHash;
                            BCRYPT_HASH_OPERATION_TYPE hashOperation;
                            PUCHAR pbBuffer;
                            ULONG cbBuffer;
} BCRYPT_MULTI_HASH_OPERATION;


typedef enum{
    BCRYPT_OPERATION_TYPE_HASH = 1,
} BCRYPT_MULTI_OPERATION_TYPE;

typedef struct _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
{
    ULONG cbPerObject;
    ULONG cbPerElement;
} BCRYPT_MULTI_OBJECT_LENGTH_STRUCT;
# 942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
NTSTATUS
__stdcall
BCryptOpenAlgorithmProvider(
                BCRYPT_ALG_HANDLE *phAlgorithm,
                LPCWSTR pszAlgId,
                LPCWSTR pszImplementation,
                ULONG dwFlags);
# 967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _BCRYPT_ALGORITHM_IDENTIFIER
{
    LPWSTR pszName;
    ULONG dwClass;
    ULONG dwFlags;

} BCRYPT_ALGORITHM_IDENTIFIER;



NTSTATUS
__stdcall
BCryptEnumAlgorithms(
            ULONG dwAlgOperations,
            ULONG *pAlgCount,
            BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList,
            ULONG dwFlags);

typedef struct _BCRYPT_PROVIDER_NAME
{
    LPWSTR pszProviderName;
} BCRYPT_PROVIDER_NAME;


NTSTATUS
__stdcall
BCryptEnumProviders(
            LPCWSTR pszAlgId,
            ULONG *pImplCount,
            BCRYPT_PROVIDER_NAME **ppImplList,
            ULONG dwFlags);
# 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
NTSTATUS
__stdcall
BCryptGetProperty(
                                                BCRYPT_HANDLE hObject,
                                                LPCWSTR pszProperty,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptSetProperty(
                            BCRYPT_HANDLE hObject,
                            LPCWSTR pszProperty,
                                 PUCHAR pbInput,
                            ULONG cbInput,
                            ULONG dwFlags);


NTSTATUS
__stdcall
BCryptCloseAlgorithmProvider(
            BCRYPT_ALG_HANDLE hAlgorithm,
            ULONG dwFlags);


void
__stdcall
BCryptFreeBuffer(
         PVOID pvBuffer);






NTSTATUS
__stdcall
BCryptGenerateSymmetricKey(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_KEY_HANDLE *phKey,
                                             PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                             PUCHAR pbSecret,
                                        ULONG cbSecret,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptGenerateKeyPair(
            BCRYPT_ALG_HANDLE hAlgorithm,
            BCRYPT_KEY_HANDLE *phKey,
            ULONG dwLength,
            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptEncrypt(
                                                BCRYPT_KEY_HANDLE hKey,
                                                     PUCHAR pbInput,
                                                ULONG cbInput,
                                                void *pPaddingInfo,
                                                       PUCHAR pbIV,
                                                ULONG cbIV,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDecrypt(
                                                BCRYPT_KEY_HANDLE hKey,
                                                     PUCHAR pbInput,
                                                ULONG cbInput,
                                                void *pPaddingInfo,
                                                       PUCHAR pbIV,
                                                ULONG cbIV,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptExportKey(
                                                BCRYPT_KEY_HANDLE hKey,
                                                BCRYPT_KEY_HANDLE hExportKey,
                                                LPCWSTR pszBlobType,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptImportKey(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_KEY_HANDLE hImportKey,
                                        LPCWSTR pszBlobType,
                                        BCRYPT_KEY_HANDLE *phKey,
                                             PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                             PUCHAR pbInput,
                                        ULONG cbInput,
                                        ULONG dwFlags);




NTSTATUS
__stdcall
BCryptImportKeyPair(
                                    BCRYPT_ALG_HANDLE hAlgorithm,
                                    BCRYPT_KEY_HANDLE hImportKey,
                                    LPCWSTR pszBlobType,
                                    BCRYPT_KEY_HANDLE *phKey,
                                         PUCHAR pbInput,
                                    ULONG cbInput,
                                    ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDuplicateKey(
                                        BCRYPT_KEY_HANDLE hKey,
                                        BCRYPT_KEY_HANDLE *phNewKey,
                                             PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptFinalizeKeyPair(
            BCRYPT_KEY_HANDLE hKey,
            ULONG dwFlags);


NTSTATUS
__stdcall
BCryptDestroyKey(
            BCRYPT_KEY_HANDLE hKey);


NTSTATUS
__stdcall
BCryptDestroySecret(
            BCRYPT_SECRET_HANDLE hSecret);



NTSTATUS
__stdcall
BCryptSignHash(
                                                BCRYPT_KEY_HANDLE hKey,
                                                void *pPaddingInfo,
                                                     PUCHAR pbInput,
                                                ULONG cbInput,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptVerifySignature(
                                BCRYPT_KEY_HANDLE hKey,
                                void *pPaddingInfo,
                                     PUCHAR pbHash,
                                ULONG cbHash,
                                     PUCHAR pbSignature,
                                ULONG cbSignature,
                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptSecretAgreement(
            BCRYPT_KEY_HANDLE hPrivKey,
            BCRYPT_KEY_HANDLE hPubKey,
            BCRYPT_SECRET_HANDLE *phAgreedSecret,
            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDeriveKey(
                BCRYPT_SECRET_HANDLE hSharedSecret,
                LPCWSTR pwszKDF,
                BCryptBufferDesc *pParameterList,
                                                        PUCHAR pbDerivedKey,
                ULONG cbDerivedKey,
                ULONG *pcbResult,
                ULONG dwFlags);




NTSTATUS
__stdcall
BCryptKeyDerivation(
                BCRYPT_KEY_HANDLE hKey,
                BCryptBufferDesc *pParameterList,
                                                    PUCHAR pbDerivedKey,
                ULONG cbDerivedKey,
                ULONG *pcbResult,
                ULONG dwFlags);







NTSTATUS
__stdcall
BCryptCreateHash(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_HASH_HANDLE *phHash,
                                             PUCHAR pbHashObject,
                                        ULONG cbHashObject,
                                             PUCHAR pbSecret,
                                        ULONG cbSecret,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptHashData(
                            BCRYPT_HASH_HANDLE hHash,
                                 PUCHAR pbInput,
                            ULONG cbInput,
                            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptFinishHash(
                                BCRYPT_HASH_HANDLE hHash,
                                     PUCHAR pbOutput,
                                ULONG cbOutput,
                                ULONG dwFlags);




NTSTATUS
__stdcall
BCryptCreateMultiHash(
                                                BCRYPT_ALG_HANDLE hAlgorithm,
                                                BCRYPT_HASH_HANDLE *phHash,
                                                ULONG nHashes,
                                                PUCHAR pbHashObject,
                                                ULONG cbHashObject,
                                                PUCHAR pbSecret,
                                                ULONG cbSecret,
                                                ULONG dwFlags);


NTSTATUS
__stdcall
BCryptProcessMultiOperations(
                                    BCRYPT_HANDLE hObject,
                                    BCRYPT_MULTI_OPERATION_TYPE operationType,
                                    PVOID pOperations,
                                    ULONG cbOperations,
                                    ULONG dwFlags );




NTSTATUS
__stdcall
BCryptDuplicateHash(
                                        BCRYPT_HASH_HANDLE hHash,
                                        BCRYPT_HASH_HANDLE *phNewHash,
                                             PUCHAR pbHashObject,
                                        ULONG cbHashObject,
                                        ULONG dwFlags);


NTSTATUS
__stdcall
BCryptDestroyHash(
            BCRYPT_HASH_HANDLE hHash);



NTSTATUS
__stdcall
BCryptHash(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        PUCHAR pbSecret,
                                        ULONG cbSecret,
                                        PUCHAR pbInput,
                                        ULONG cbInput,
                                        PUCHAR pbOutput,
                                        ULONG cbOutput );
# 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
NTSTATUS
__stdcall
BCryptGenRandom(
                                    BCRYPT_ALG_HANDLE hAlgorithm,
                                    PUCHAR pbBuffer,
                                    ULONG cbBuffer,
                                    ULONG dwFlags);







NTSTATUS
__stdcall
BCryptDeriveKeyCapi(
                                    BCRYPT_HASH_HANDLE hHash,
                                    BCRYPT_ALG_HANDLE hTargetAlg,
                                          PUCHAR pbDerivedKey,
                                    ULONG cbDerivedKey,
                                    ULONG dwFlags);





NTSTATUS
__stdcall
BCryptDeriveKeyPBKDF2(
                                    BCRYPT_ALG_HANDLE hPrf,
                                         PUCHAR pbPassword,
                                    ULONG cbPassword,
                                         PUCHAR pbSalt,
                                    ULONG cbSalt,
                                    ULONGLONG cIterations,
                                          PUCHAR pbDerivedKey,
                                    ULONG cbDerivedKey,
                                    ULONG dwFlags);






typedef struct _BCRYPT_INTERFACE_VERSION
{
    USHORT MajorVersion;
    USHORT MinorVersion;

} BCRYPT_INTERFACE_VERSION, *PBCRYPT_INTERFACE_VERSION;
# 1474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
typedef struct _CRYPT_INTERFACE_REG
{
    ULONG dwInterface;
    ULONG dwFlags;

    ULONG cFunctions;
    PWSTR *rgpszFunctions;
}
CRYPT_INTERFACE_REG, *PCRYPT_INTERFACE_REG;

typedef struct _CRYPT_IMAGE_REG
{
    PWSTR pszImage;

    ULONG cInterfaces;
    PCRYPT_INTERFACE_REG *rgpInterfaces;
}
CRYPT_IMAGE_REG, *PCRYPT_IMAGE_REG;

typedef struct _CRYPT_PROVIDER_REG
{
    ULONG cAliases;
    PWSTR *rgpszAliases;

    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
}
CRYPT_PROVIDER_REG, *PCRYPT_PROVIDER_REG;

typedef struct _CRYPT_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
}
CRYPT_PROVIDERS, *PCRYPT_PROVIDERS;





typedef struct _CRYPT_CONTEXT_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}
CRYPT_CONTEXT_CONFIG, *PCRYPT_CONTEXT_CONFIG;

typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}
CRYPT_CONTEXT_FUNCTION_CONFIG, *PCRYPT_CONTEXT_FUNCTION_CONFIG;

typedef struct _CRYPT_CONTEXTS
{
    ULONG cContexts;
    PWSTR *rgpszContexts;
}
CRYPT_CONTEXTS, *PCRYPT_CONTEXTS;

typedef struct _CRYPT_CONTEXT_FUNCTIONS
{
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
}
CRYPT_CONTEXT_FUNCTIONS, *PCRYPT_CONTEXT_FUNCTIONS;

typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
}
CRYPT_CONTEXT_FUNCTION_PROVIDERS, *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;





typedef struct _CRYPT_PROPERTY_REF
{
    PWSTR pszProperty;

    ULONG cbValue;
    PUCHAR pbValue;
}
CRYPT_PROPERTY_REF, *PCRYPT_PROPERTY_REF;

typedef struct _CRYPT_IMAGE_REF
{
    PWSTR pszImage;
    ULONG dwFlags;
}
CRYPT_IMAGE_REF, *PCRYPT_IMAGE_REF;

typedef struct _CRYPT_PROVIDER_REF
{
    ULONG dwInterface;
    PWSTR pszFunction;
    PWSTR pszProvider;

    ULONG cProperties;
    PCRYPT_PROPERTY_REF *rgpProperties;

    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
}
CRYPT_PROVIDER_REF, *PCRYPT_PROVIDER_REF;

typedef struct _CRYPT_PROVIDER_REFS
{
    ULONG cProviders;
    PCRYPT_PROVIDER_REF *rgpProviders;
}
CRYPT_PROVIDER_REFS, *PCRYPT_PROVIDER_REFS;
# 1604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
NTSTATUS
__stdcall
BCryptQueryProviderRegistration(
         LPCWSTR pszProvider,
         ULONG dwMode,
         ULONG dwInterface,
            ULONG* pcbBuffer,



    PCRYPT_PROVIDER_REG *ppBuffer);


NTSTATUS
__stdcall
BCryptEnumRegisteredProviders(
            ULONG* pcbBuffer,



    PCRYPT_PROVIDERS *ppBuffer);





NTSTATUS
__stdcall
BCryptCreateContext(
         ULONG dwTable,
         LPCWSTR pszContext,
             PCRYPT_CONTEXT_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptDeleteContext(
         ULONG dwTable,
         LPCWSTR pszContext);


NTSTATUS
__stdcall
BCryptEnumContexts(
         ULONG dwTable,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXTS *ppBuffer);


NTSTATUS
__stdcall
BCryptConfigureContext(
         ULONG dwTable,
         LPCWSTR pszContext,
         PCRYPT_CONTEXT_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptQueryContextConfiguration(
         ULONG dwTable,
         LPCWSTR pszContext,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXT_CONFIG *ppBuffer);


NTSTATUS
__stdcall
BCryptAddContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         ULONG dwPosition);


NTSTATUS
__stdcall
BCryptRemoveContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction);


NTSTATUS
__stdcall
BCryptEnumContextFunctions(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);


NTSTATUS
__stdcall
BCryptConfigureContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptQueryContextFunctionConfiguration(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);



NTSTATUS
__stdcall
BCryptEnumContextFunctionProviders(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);


NTSTATUS
__stdcall
BCryptSetContextFunctionProperty(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         LPCWSTR pszProperty,
         ULONG cbValue,
                                  PUCHAR pbValue);


NTSTATUS
__stdcall
BCryptQueryContextFunctionProperty(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         LPCWSTR pszProperty,
            ULONG* pcbValue,



    PUCHAR *ppbValue);
# 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
NTSTATUS
__stdcall
BCryptRegisterConfigChangeNotify(
          HANDLE *phEvent);
# 1801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
NTSTATUS
__stdcall
BCryptUnregisterConfigChangeNotify(
         HANDLE hEvent);






NTSTATUS __stdcall
BCryptResolveProviders(
             LPCWSTR pszContext,
             ULONG dwInterface,
             LPCWSTR pszFunction,
             LPCWSTR pszProvider,
         ULONG dwMode,
         ULONG dwFlags,
            ULONG* pcbBuffer,



    PCRYPT_PROVIDER_REFS *ppBuffer);
# 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\bcrypt.h" 3
NTSTATUS
__stdcall
BCryptGetFipsAlgorithmMode(
          BOOLEAN *pfEnabled
    );







BOOLEAN
CngGetFipsAlgorithmMode(
    void
    );






}



#pragma warning(pop)
# 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 2 3








# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 1 3
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)



extern "C" {







typedef LONG SECURITY_STATUS;
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
typedef LPVOID (__stdcall *PFN_NCRYPT_ALLOC)(
         SIZE_T cbSize
    );

typedef void (__stdcall *PFN_NCRYPT_FREE)(
         LPVOID pv
    );

typedef struct NCRYPT_ALLOC_PARA {
    DWORD cbSize;
    PFN_NCRYPT_ALLOC pfnAlloc;
    PFN_NCRYPT_FREE pfnFree;
} NCRYPT_ALLOC_PARA;
# 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
typedef BCryptBuffer NCryptBuffer;
typedef BCryptBuffer* PNCryptBuffer;
typedef BCryptBufferDesc NCryptBufferDesc;
typedef BCryptBufferDesc* PNCryptBufferDesc;





typedef ULONG_PTR NCRYPT_HANDLE;
typedef ULONG_PTR NCRYPT_PROV_HANDLE;
typedef ULONG_PTR NCRYPT_KEY_HANDLE;
typedef ULONG_PTR NCRYPT_HASH_HANDLE;
typedef ULONG_PTR NCRYPT_SECRET_HANDLE;



typedef
struct _NCRYPT_CIPHER_PADDING_INFO
{

    ULONG cbSize;


    DWORD dwFlags;






    PUCHAR pbIV;
    ULONG cbIV;
# 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
    PUCHAR pbOtherInfo;
    ULONG cbOtherInfo;

} NCRYPT_CIPHER_PADDING_INFO, *PNCRYPT_CIPHER_PADDING_INFO;
# 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
typedef struct _NCRYPT_PLATFORM_ATTEST_PADDING_INFO {
    ULONG magic;
    ULONG pcrMask;
} NCRYPT_PLATFORM_ATTEST_PADDING_INFO;



typedef struct _NCRYPT_KEY_ATTEST_PADDING_INFO {
    ULONG magic;
    PUCHAR pbKeyBlob;
    ULONG cbKeyBlob;
    PUCHAR pbKeyAuth;
    ULONG cbKeyAuth;
} NCRYPT_KEY_ATTEST_PADDING_INFO;
# 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
typedef struct _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
{
   ULONG Version;
   ULONG Flags;
   ULONG cbPublicKeyBlob;

} NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES, *PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES;




typedef struct _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
{
    ULONG Magic;
    ULONG Version;
    ULONG cbSignature;
    ULONG cbReport;
    ULONG cbAttributes;



} NCRYPT_VSM_KEY_ATTESTATION_STATEMENT, *PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT;






#pragma warning(disable: 4214)
typedef struct _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
{
    ULONG Version;
    ULONGLONG TrustletId;
    ULONG MinSvn;
    ULONG FlagsMask;
    ULONG FlagsExpected;
    ULONG AllowDebugging : 1;
    ULONG Reserved : 31;
} NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS, *PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
#pragma warning(default: 4214)






#pragma warning(disable: 4214)
typedef struct _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
{
    ULONG Version;
    ULONG KeyUsage;
    ULONG PerBootKey : 1;
    ULONG Reserved : 31;
    ULONG cbAlgName;
    ULONG cbNonce;
    ULONG cbAuthTag;
    ULONG cbWrappingKey;
    ULONG cbIsolatedKey;
} NCRYPT_EXPORTED_ISOLATED_KEY_HEADER, *PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
#pragma warning(default: 4214)

typedef struct _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
{
    NCRYPT_EXPORTED_ISOLATED_KEY_HEADER Header;






} NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE, *PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE;





typedef struct __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
{
    UINT32 Magic;
    UINT32 Version;
    UINT32 HeaderSize;
    UINT32 cbCertifyInfo;
    UINT32 cbSignature;
    UINT32 cbTpmPublic;




} NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT,*PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT;
# 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
SECURITY_STATUS
__stdcall
NCryptOpenStorageProvider(
            NCRYPT_PROV_HANDLE *phProvider,
             LPCWSTR pszProviderName,
            DWORD dwFlags);
# 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
typedef struct _NCryptAlgorithmName
{
    LPWSTR pszName;
    DWORD dwClass;
    DWORD dwAlgOperations;
    DWORD dwFlags;
} NCryptAlgorithmName;



SECURITY_STATUS
__stdcall
NCryptEnumAlgorithms(
            NCRYPT_PROV_HANDLE hProvider,
            DWORD dwAlgOperations,
            DWORD * pdwAlgCount,
                                         NCryptAlgorithmName **ppAlgList,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptIsAlgSupported(
            NCRYPT_PROV_HANDLE hProvider,
            LPCWSTR pszAlgId,
            DWORD dwFlags);






typedef struct NCryptKeyName
{
    LPWSTR pszName;
    LPWSTR pszAlgid;
    DWORD dwLegacyKeySpec;
    DWORD dwFlags;
} NCryptKeyName;


SECURITY_STATUS
__stdcall
NCryptEnumKeys(
            NCRYPT_PROV_HANDLE hProvider,
             LPCWSTR pszScope,
             NCryptKeyName **ppKeyName,
            PVOID * ppEnumState,
            DWORD dwFlags);



typedef struct NCryptProviderName
{
    LPWSTR pszName;
    LPWSTR pszComment;
} NCryptProviderName;





SECURITY_STATUS
__stdcall
NCryptEnumStorageProviders(
            DWORD * pdwProviderCount,
                                              NCryptProviderName **ppProviderList,
            DWORD dwFlags);






SECURITY_STATUS
__stdcall
NCryptFreeBuffer(
                  PVOID pvInput);
# 612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
SECURITY_STATUS
__stdcall
NCryptOpenKey(
            NCRYPT_PROV_HANDLE hProvider,
            NCRYPT_KEY_HANDLE *phKey,
            LPCWSTR pszKeyName,
             DWORD dwLegacyKeySpec,
            DWORD dwFlags);
# 628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
SECURITY_STATUS
__stdcall
NCryptCreatePersistedKey(
            NCRYPT_PROV_HANDLE hProvider,
            NCRYPT_KEY_HANDLE *phKey,
            LPCWSTR pszAlgId,
             LPCWSTR pszKeyName,
            DWORD dwLegacyKeySpec,
            DWORD dwFlags);
# 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
typedef struct __NCRYPT_UI_POLICY
{
    DWORD dwVersion;
    DWORD dwFlags;
    LPCWSTR pszCreationTitle;
    LPCWSTR pszFriendlyName;
    LPCWSTR pszDescription;
} NCRYPT_UI_POLICY;




typedef struct __NCRYPT_KEY_ACCESS_POLICY_BLOB
{
 DWORD dwVersion;
 DWORD dwPolicyFlags;
 DWORD cbUserSid;
    DWORD cbApplicationSid;


}NCRYPT_KEY_ACCESS_POLICY_BLOB;



typedef struct __NCRYPT_SUPPORTED_LENGTHS
{
    DWORD dwMinLength;
    DWORD dwMaxLength;
    DWORD dwIncrement;
    DWORD dwDefaultLength;
} NCRYPT_SUPPORTED_LENGTHS;



typedef struct __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
{
    DWORD dwVersion;
    INT32 iExpiration;
    BYTE pabNonce[32];
    BYTE pabPolicyRef[32];
    BYTE pabHMAC[32];
} NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO;




typedef struct __NCRYPT_PCP_TPM_FW_VERSION_INFO
{
    UINT16 major1;
    UINT16 major2;
    UINT16 minor1;
    UINT16 minor2;
} NCRYPT_PCP_TPM_FW_VERSION_INFO;







SECURITY_STATUS
__stdcall
NCryptGetProperty(
            NCRYPT_HANDLE hObject,
            LPCWSTR pszProperty,
                                                    PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);
# 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
SECURITY_STATUS
__stdcall
NCryptSetProperty(
            NCRYPT_HANDLE hObject,
            LPCWSTR pszProperty,
                              PBYTE pbInput,
            DWORD cbInput,
            DWORD dwFlags);







SECURITY_STATUS
__stdcall
NCryptFinalizeKey(
            NCRYPT_KEY_HANDLE hKey,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptEncrypt(
            NCRYPT_KEY_HANDLE hKey,
                                  PBYTE pbInput,
            DWORD cbInput,
                void *pPaddingInfo,
                                                    PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptDecrypt(
            NCRYPT_KEY_HANDLE hKey,
                                  PBYTE pbInput,
            DWORD cbInput,
                void *pPaddingInfo,
                                                    PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);





typedef struct _NCRYPT_KEY_BLOB_HEADER
{
    ULONG cbSize;
    ULONG dwMagic;
    ULONG cbAlgName;
    ULONG cbKeyData;
} NCRYPT_KEY_BLOB_HEADER, *PNCRYPT_KEY_BLOB_HEADER;
# 1045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
typedef struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
{
    DWORD magic;
    DWORD cbHeader;
    DWORD cbPublic;
    DWORD cbPrivate;
    DWORD cbName;
} NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER, *PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER;
# 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
SECURITY_STATUS
__stdcall
NCryptImportKey(
            NCRYPT_PROV_HANDLE hProvider,
             NCRYPT_KEY_HANDLE hImportKey,
            LPCWSTR pszBlobType,
             NCryptBufferDesc *pParameterList,
            NCRYPT_KEY_HANDLE *phKey,
                             PBYTE pbData,
            DWORD cbData,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptExportKey(
            NCRYPT_KEY_HANDLE hKey,
             NCRYPT_KEY_HANDLE hExportKey,
            LPCWSTR pszBlobType,
             NCryptBufferDesc *pParameterList,
                                                    PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptSignHash(
            NCRYPT_KEY_HANDLE hKey,
                void *pPaddingInfo,
                                  PBYTE pbHashValue,
            DWORD cbHashValue,
                                                       PBYTE pbSignature,
            DWORD cbSignature,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptVerifySignature(
            NCRYPT_KEY_HANDLE hKey,
                void *pPaddingInfo,
                                  PBYTE pbHashValue,
            DWORD cbHashValue,
                                  PBYTE pbSignature,
            DWORD cbSignature,
            DWORD dwFlags);



SECURITY_STATUS
__stdcall
NCryptDeleteKey(
            NCRYPT_KEY_HANDLE hKey,
            DWORD dwFlags);



SECURITY_STATUS
__stdcall
NCryptFreeObject(
            NCRYPT_HANDLE hObject);





BOOL
__stdcall
NCryptIsKeyHandle(
            NCRYPT_KEY_HANDLE hKey);


SECURITY_STATUS
__stdcall
NCryptTranslateHandle(
              NCRYPT_PROV_HANDLE *phProvider,
            NCRYPT_KEY_HANDLE *phKey,
            HCRYPTPROV hLegacyProv,
             HCRYPTKEY hLegacyKey,
             DWORD dwLegacyKeySpec,
            DWORD dwFlags);
# 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
SECURITY_STATUS
__stdcall
NCryptNotifyChangeKey(
            NCRYPT_PROV_HANDLE hProvider,
            HANDLE *phEvent,
            DWORD dwFlags);







SECURITY_STATUS
__stdcall
NCryptSecretAgreement(
            NCRYPT_KEY_HANDLE hPrivKey,
            NCRYPT_KEY_HANDLE hPubKey,
            NCRYPT_SECRET_HANDLE *phAgreedSecret,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptDeriveKey(
                NCRYPT_SECRET_HANDLE hSharedSecret,
                LPCWSTR pwszKDF,
                NCryptBufferDesc *pParameterList,
                                                        PBYTE pbDerivedKey,
                DWORD cbDerivedKey,
                DWORD *pcbResult,
                ULONG dwFlags);






SECURITY_STATUS
__stdcall
NCryptKeyDerivation(
                NCRYPT_KEY_HANDLE hKey,
                NCryptBufferDesc *pParameterList,
                                                    PUCHAR pbDerivedKey,
                DWORD cbDerivedKey,
                DWORD *pcbResult,
                ULONG dwFlags);







SECURITY_STATUS
__stdcall
NCryptCreateClaim(
                NCRYPT_KEY_HANDLE hSubjectKey,
                NCRYPT_KEY_HANDLE hAuthorityKey,
                DWORD dwClaimType,
                NCryptBufferDesc *pParameterList,
                                                       PBYTE pbClaimBlob,
                DWORD cbClaimBlob,
                DWORD *pcbResult,
                DWORD dwFlags);







SECURITY_STATUS
__stdcall
NCryptVerifyClaim(
                NCRYPT_KEY_HANDLE hSubjectKey,
                NCRYPT_KEY_HANDLE hAuthorityKey,
                DWORD dwClaimType,
                NCryptBufferDesc *pParameterList,
                                  PBYTE pbClaimBlob,
                DWORD cbClaimBlob,
                NCryptBufferDesc *pOutput,
                DWORD dwFlags);
# 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ncrypt.h" 3
}



#pragma warning(pop)
# 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 2 3





typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;



typedef ULONG_PTR HCRYPTPROV_LEGACY;






typedef struct _CRYPT_BIT_BLOB {
    DWORD cbData;
    BYTE *pbData;
    DWORD cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;







typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;
# 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_OBJID_TABLE {
    DWORD dwAlgId;
    LPCSTR pszObjId;
} CRYPT_OBJID_TABLE, *PCRYPT_OBJID_TABLE;





typedef struct _CRYPT_HASH_INFO {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
} CRYPT_HASH_INFO, *PCRYPT_HASH_INFO;







typedef struct _CERT_EXTENSION {
    LPSTR pszObjId;
    BOOL fCritical;
    CRYPT_OBJID_BLOB Value;
} CERT_EXTENSION, *PCERT_EXTENSION;
typedef const CERT_EXTENSION* PCCERT_EXTENSION;
# 1925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;
# 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_ATTRIBUTE {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_ATTR_BLOB rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;

typedef struct _CRYPT_ATTRIBUTES {
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;
# 1955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_RDN_ATTR {
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;
# 2143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_RDN {
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
} CERT_RDN, *PCERT_RDN;





typedef struct _CERT_NAME_INFO {
    DWORD cRDN;
    PCERT_RDN rgRDN;
} CERT_NAME_INFO, *PCERT_NAME_INFO;







typedef struct _CERT_NAME_VALUE {
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;
# 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;
# 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_ECC_PRIVATE_KEY_INFO{
    DWORD dwVersion;
    CRYPT_DER_BLOB PrivateKey;
    LPSTR szCurveOid;
    CRYPT_BIT_BLOB PublicKey;
} CRYPT_ECC_PRIVATE_KEY_INFO, *PCRYPT_ECC_PRIVATE_KEY_INFO;






typedef struct _CRYPT_PRIVATE_KEY_INFO{
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
} CRYPT_PRIVATE_KEY_INFO, *PCRYPT_PRIVATE_KEY_INFO;





typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO{
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO, *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
# 2232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(
         CRYPT_ALGORITHM_IDENTIFIER Algorithm,
         CRYPT_DATA_BLOB EncryptedPrivateKey,
                                              BYTE* pbClearTextKey,
            DWORD* pcbClearTextKey,
         LPVOID pVoidDecryptFunc);
# 2255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(
          CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm,
         CRYPT_DATA_BLOB* pClearTextPrivateKey,
                                              BYTE* pbEncryptedKey,
            DWORD* pcbEncryptedKey,
         LPVOID pVoidEncryptFunc);
# 2274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(
                                                       CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,
                                                       HCRYPTPROV *phCryptProv,
                                                       LPVOID pVoidResolveFunc);
# 2288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS{
    CRYPT_DIGEST_BLOB PrivateKey;
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
    LPVOID pVoidResolveFunc;
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID pVoidDecryptFunc;
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
# 2304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS{
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    LPSTR pszPrivateKeyObjId;

    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID pVoidEncryptFunc;
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;
# 2320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_INFO {
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_INFO, *PCERT_INFO;
# 2363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRL_ENTRY {
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_ENTRY, *PCRL_ENTRY;







typedef struct _CRL_INFO {
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_INFO, *PCRL_INFO;
# 2400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_OR_CRL_BLOB {
    DWORD dwChoice;
    DWORD cbEncoded;

    BYTE *pbEncoded;
} CERT_OR_CRL_BLOB, * PCERT_OR_CRL_BLOB;

typedef struct _CERT_OR_CRL_BUNDLE {
    DWORD cItem;

    PCERT_OR_CRL_BLOB rgItem;
} CERT_OR_CRL_BUNDLE, *PCERT_OR_CRL_BUNDLE;







typedef struct _CERT_REQUEST_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;
# 2435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_KEYGEN_REQUEST_INFO {
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    LPWSTR pwszChallengeString;
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;
# 2451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_SIGNED_CONTENT_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;
# 2465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CTL_USAGE {
    DWORD cUsageIdentifier;
    LPSTR *rgpszUsageIdentifier;
} CTL_USAGE, *PCTL_USAGE,
CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
typedef const CTL_USAGE* PCCTL_USAGE;
typedef const CERT_ENHKEY_USAGE* PCCERT_ENHKEY_USAGE;





typedef struct _CTL_ENTRY {
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CTL_ENTRY, *PCTL_ENTRY;




typedef struct _CTL_INFO {
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CTL_INFO, *PCTL_INFO;
# 2513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;




typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
    LPWSTR pwszName;
    LPWSTR pwszValue;
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, * PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;




typedef struct _CRYPT_CSP_PROVIDER {
    DWORD dwKeySpec;
    LPWSTR pwszProviderName;
    CRYPT_BIT_BLOB Signature;
} CRYPT_CSP_PROVIDER, * PCRYPT_CSP_PROVIDER;
# 2580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptFormatObject(
         DWORD dwCertEncodingType,
         DWORD dwFormatType,
         DWORD dwFormatStrType,
             void *pFormatStruct,
             LPCSTR lpszStructType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                               void *pbFormat,
            DWORD *pcbFormat
    );
# 2663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)(
         size_t cbSize
    );

typedef void (__stdcall *PFN_CRYPT_FREE)(
         LPVOID pv
    );


typedef struct _CRYPT_ENCODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;


__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObjectEx(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
         DWORD dwFlags,
             PCRYPT_ENCODE_PARA pEncodePara,
              void *pvEncoded,
            DWORD *pcbEncoded
    );

__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObject(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
# 2778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_DECODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_DECODE_PARA, *PCRYPT_DECODE_PARA;

__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObjectEx(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
             PCRYPT_DECODE_PARA pDecodePara,
              void *pvStructInfo,
            DWORD *pcbStructInfo
    );


__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObject(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
                                                              void *pvStructInfo,
            DWORD *pcbStructInfo
    );
# 3709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_EXTENSIONS {
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;
# 3876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;







typedef struct _CERT_PRIVATE_KEY_VALIDITY {
    FILETIME NotBefore;
    FILETIME NotAfter;
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;

typedef struct _CERT_KEY_ATTRIBUTES_INFO {
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;
# 3920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_POLICY_ID {
    DWORD cCertPolicyElementId;
    LPSTR *rgpszCertPolicyElementId;
} CERT_POLICY_ID, *PCERT_POLICY_ID;

typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;
# 3944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_OTHER_NAME {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;

typedef struct _CERT_ALT_NAME_ENTRY {
    DWORD dwAltNameChoice;
    union {
        PCERT_OTHER_NAME pOtherName;
        LPWSTR pwszRfc822Name;
        LPWSTR pwszDNSName;

        CERT_NAME_BLOB DirectoryName;

        LPWSTR pwszURL;
        CRYPT_DATA_BLOB IPAddress;
        LPSTR pszRegisteredID;
    } ;
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;
# 3978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_ALT_NAME_INFO {
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;
# 4013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
    CRYPT_BIT_BLOB SubjectType;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;
# 4030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
    BOOL fCA;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;
# 4055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_POLICY_QUALIFIER_INFO {
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;

typedef struct _CERT_POLICY_INFO {
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;

typedef struct _CERT_POLICIES_INFO {
    DWORD cPolicyInfo;
    CERT_POLICY_INFO *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;
# 4079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
    LPWSTR pszDisplayText;
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;







typedef struct _CPS_URLS {
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
    CRYPT_DATA_BLOB *pDigest;
} CPS_URLS, *PCPS_URLS;

typedef struct _CERT_POLICY95_QUALIFIER1 {
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS *rgCPSURLs;
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;
# 4124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_POLICY_MAPPING {
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;

typedef struct _CERT_POLICY_MAPPINGS_INFO {
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;







typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
    BOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;

    BOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;
# 4232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
# 4246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_CONTENT_INFO {
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;
# 4304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_SEQUENCE_OF_ANY {
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;
# 4321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;

    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;
# 4357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_ACCESS_DESCRIPTION {
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;


typedef struct _CERT_AUTHORITY_INFO_ACCESS {
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS,
  CERT_SUBJECT_INFO_ACCESS, *PCERT_SUBJECT_INFO_ACCESS;
# 4421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRL_DIST_POINT_NAME {
    DWORD dwDistPointNameChoice;
    union {
        CERT_ALT_NAME_INFO FullName;

    } ;
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;





typedef struct _CRL_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
} CRL_DIST_POINT, *PCRL_DIST_POINT;
# 4451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRL_DIST_POINTS_INFO {
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;
# 4482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CROSS_CERT_DIST_POINTS_INFO {

    DWORD dwSyncDeltaTime;

    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;
# 4510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_PAIR {
   CERT_BLOB Forward;
   CERT_BLOB Reverse;
} CERT_PAIR, *PCERT_PAIR;
# 4543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRL_ISSUING_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    BOOL fOnlyContainsUserCerts;
    BOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    BOOL fIndirectCRL;
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
# 4574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_GENERAL_SUBTREE {
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    BOOL fMaximum;
    DWORD dwMaximum;
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;

typedef struct _CERT_NAME_CONSTRAINTS_INFO {
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
# 4675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_DSS_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;
# 4706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;
# 4719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_ECC_SIGNATURE {
    CRYPT_UINT_BLOB r;
    CRYPT_UINT_BLOB s;
} CERT_ECC_SIGNATURE, *PCERT_ECC_SIGNATURE;
# 4731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;

typedef struct _CERT_X942_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;
# 4754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_X942_OTHER_INFO {
    LPSTR pszContentEncryptionObjId;
    BYTE rgbCounter[4];
    BYTE rgbKeyLength[4];
    CRYPT_DATA_BLOB PubInfo;
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;
# 4770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_ECC_CMS_SHARED_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DATA_BLOB EntityUInfo;
    BYTE rgbSuppPubInfo[4];
} CRYPT_ECC_CMS_SHARED_INFO, *PCRYPT_ECC_CMS_SHARED_INFO;
# 4783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_RC2_CBC_PARAMETERS {
    DWORD dwVersion;
    BOOL fIV;
    BYTE rgbIV[8];
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;
# 4807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_SMIME_CAPABILITY {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;

typedef struct _CRYPT_SMIME_CAPABILITIES {
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;
# 4832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_QC_STATEMENT {
    LPSTR pszStatementId;
    CRYPT_OBJID_BLOB StatementInfo;
} CERT_QC_STATEMENT, *PCERT_QC_STATEMENT;

typedef struct _CERT_QC_STATEMENTS_EXT_INFO {
    DWORD cStatement;
    PCERT_QC_STATEMENT rgStatement;
} CERT_QC_STATEMENTS_EXT_INFO, *PCERT_QC_STATEMENTS_EXT_INFO;
# 4884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_MASK_GEN_ALGORITHM {
    LPSTR pszObjId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
} CRYPT_MASK_GEN_ALGORITHM, *PCRYPT_MASK_GEN_ALGORITHM;

typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    DWORD dwSaltLength;
    DWORD dwTrailerField;
} CRYPT_RSA_SSA_PSS_PARAMETERS, *PCRYPT_RSA_SSA_PSS_PARAMETERS;
# 4919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_PSOURCE_ALGORITHM {
    LPSTR pszObjId;
    CRYPT_DATA_BLOB EncodingParameters;
} CRYPT_PSOURCE_ALGORITHM, *PCRYPT_PSOURCE_ALGORITHM;

typedef struct _CRYPT_RSAES_OAEP_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
} CRYPT_RSAES_OAEP_PARAMETERS, *PCRYPT_RSAES_OAEP_PARAMETERS;
# 5213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMC_TAGGED_ATTRIBUTE {
    DWORD dwBodyPartID;
    CRYPT_ATTRIBUTE Attribute;
} CMC_TAGGED_ATTRIBUTE, *PCMC_TAGGED_ATTRIBUTE;

typedef struct _CMC_TAGGED_CERT_REQUEST {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB SignedCertRequest;
} CMC_TAGGED_CERT_REQUEST, *PCMC_TAGGED_CERT_REQUEST;

typedef struct _CMC_TAGGED_REQUEST {
    DWORD dwTaggedRequestChoice;
    union {

        PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
    } ;
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;



typedef struct _CMC_TAGGED_CONTENT_INFO {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB EncodedContentInfo;
} CMC_TAGGED_CONTENT_INFO, *PCMC_TAGGED_CONTENT_INFO;

typedef struct _CMC_TAGGED_OTHER_MSG {
    DWORD dwBodyPartID;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CMC_TAGGED_OTHER_MSG, *PCMC_TAGGED_OTHER_MSG;



typedef struct _CMC_DATA_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedRequest;
    PCMC_TAGGED_REQUEST rgTaggedRequest;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
} CMC_DATA_INFO, *PCMC_DATA_INFO;



typedef struct _CMC_RESPONSE_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
} CMC_RESPONSE_INFO, *PCMC_RESPONSE_INFO;
# 5276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMC_PEND_INFO {
    CRYPT_DATA_BLOB PendToken;
    FILETIME PendTime;
} CMC_PEND_INFO, *PCMC_PEND_INFO;

typedef struct _CMC_STATUS_INFO {
    DWORD dwStatus;
    DWORD cBodyList;
    DWORD *rgdwBodyList;
    LPWSTR pwszStatusString;
    DWORD dwOtherInfoChoice;
    union {



        DWORD dwFailInfo;

        PCMC_PEND_INFO pPendInfo;
    } ;
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;
# 5373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMC_ADD_EXTENSIONS_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;
# 5390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMC_ADD_ATTRIBUTES_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;
# 5406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_TEMPLATE_EXT {
    LPSTR pszObjId;
    DWORD dwMajorVersion;
    BOOL fMinorVersion;
    DWORD dwMinorVersion;
} CERT_TEMPLATE_EXT, *PCERT_TEMPLATE_EXT;
# 5422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_HASHED_URL {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
    LPWSTR pwszUrl;

} CERT_HASHED_URL, *PCERT_HASHED_URL;

typedef struct _CERT_LOGOTYPE_DETAILS {
    LPWSTR pwszMimeType;
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
} CERT_LOGOTYPE_DETAILS, *PCERT_LOGOTYPE_DETAILS;

typedef struct _CERT_LOGOTYPE_REFERENCE {
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
} CERT_LOGOTYPE_REFERENCE, *PCERT_LOGOTYPE_REFERENCE;

typedef struct _CERT_LOGOTYPE_IMAGE_INFO {


    DWORD dwLogotypeImageInfoChoice;

    DWORD dwFileSize;
    DWORD dwXSize;
    DWORD dwYSize;

    DWORD dwLogotypeImageResolutionChoice;
    union {




        DWORD dwNumBits;


        DWORD dwTableSize;
    } ;
    LPWSTR pwszLanguage;

} CERT_LOGOTYPE_IMAGE_INFO, *PCERT_LOGOTYPE_IMAGE_INFO;
# 5471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_LOGOTYPE_IMAGE {
    CERT_LOGOTYPE_DETAILS LogotypeDetails;

    PCERT_LOGOTYPE_IMAGE_INFO pLogotypeImageInfo;
} CERT_LOGOTYPE_IMAGE, *PCERT_LOGOTYPE_IMAGE;


typedef struct _CERT_LOGOTYPE_AUDIO_INFO {
    DWORD dwFileSize;
    DWORD dwPlayTime;
    DWORD dwChannels;
    DWORD dwSampleRate;

    LPWSTR pwszLanguage;

} CERT_LOGOTYPE_AUDIO_INFO, *PCERT_LOGOTYPE_AUDIO_INFO;

typedef struct _CERT_LOGOTYPE_AUDIO {
    CERT_LOGOTYPE_DETAILS LogotypeDetails;

    PCERT_LOGOTYPE_AUDIO_INFO pLogotypeAudioInfo;
} CERT_LOGOTYPE_AUDIO, *PCERT_LOGOTYPE_AUDIO;


typedef struct _CERT_LOGOTYPE_DATA {
    DWORD cLogotypeImage;
    PCERT_LOGOTYPE_IMAGE rgLogotypeImage;

    DWORD cLogotypeAudio;
    PCERT_LOGOTYPE_AUDIO rgLogotypeAudio;
} CERT_LOGOTYPE_DATA, *PCERT_LOGOTYPE_DATA;


typedef struct _CERT_LOGOTYPE_INFO {
    DWORD dwLogotypeInfoChoice;
    union {

        PCERT_LOGOTYPE_DATA pLogotypeDirectInfo;


        PCERT_LOGOTYPE_REFERENCE pLogotypeIndirectInfo;
    } ;
} CERT_LOGOTYPE_INFO, *PCERT_LOGOTYPE_INFO;




typedef struct _CERT_OTHER_LOGOTYPE_INFO {
    LPSTR pszObjId;
    CERT_LOGOTYPE_INFO LogotypeInfo;
} CERT_OTHER_LOGOTYPE_INFO, *PCERT_OTHER_LOGOTYPE_INFO;




typedef struct _CERT_LOGOTYPE_EXT_INFO {
    DWORD cCommunityLogo;
    PCERT_LOGOTYPE_INFO rgCommunityLogo;
    PCERT_LOGOTYPE_INFO pIssuerLogo;
    PCERT_LOGOTYPE_INFO pSubjectLogo;
    DWORD cOtherLogo;
    PCERT_OTHER_LOGOTYPE_INFO rgOtherLogo;
} CERT_LOGOTYPE_EXT_INFO, *PCERT_LOGOTYPE_EXT_INFO;
# 5545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_BIOMETRIC_DATA {
    DWORD dwTypeOfBiometricDataChoice;
    union {

        DWORD dwPredefined;


        LPSTR pszObjId;
    } ;

    CERT_HASHED_URL HashedUrl;
} CERT_BIOMETRIC_DATA, *PCERT_BIOMETRIC_DATA;
# 5565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_BIOMETRIC_EXT_INFO {
    DWORD cBiometricData;
    PCERT_BIOMETRIC_DATA rgBiometricData;
} CERT_BIOMETRIC_EXT_INFO, *PCERT_BIOMETRIC_EXT_INFO;
# 5585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _OCSP_SIGNATURE_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
} OCSP_SIGNATURE_INFO, *POCSP_SIGNATURE_INFO;

typedef struct _OCSP_SIGNED_REQUEST_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    POCSP_SIGNATURE_INFO pOptionalSignatureInfo;
} OCSP_SIGNED_REQUEST_INFO, *POCSP_SIGNED_REQUEST_INFO;







typedef struct _OCSP_CERT_ID {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB IssuerNameHash;
    CRYPT_HASH_BLOB IssuerKeyHash;
    CRYPT_INTEGER_BLOB SerialNumber;
} OCSP_CERT_ID, *POCSP_CERT_ID;

typedef struct _OCSP_REQUEST_ENTRY {
    OCSP_CERT_ID CertId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_REQUEST_ENTRY, *POCSP_REQUEST_ENTRY;

typedef struct _OCSP_REQUEST_INFO {
    DWORD dwVersion;
    PCERT_ALT_NAME_ENTRY pRequestorName;
    DWORD cRequestEntry;
    POCSP_REQUEST_ENTRY rgRequestEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_REQUEST_INFO, *POCSP_REQUEST_INFO;
# 5632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _OCSP_RESPONSE_INFO {
    DWORD dwStatus;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} OCSP_RESPONSE_INFO, *POCSP_RESPONSE_INFO;
# 5655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    OCSP_SIGNATURE_INFO SignatureInfo;
} OCSP_BASIC_SIGNED_RESPONSE_INFO, *POCSP_BASIC_SIGNED_RESPONSE_INFO;







typedef struct _OCSP_BASIC_REVOKED_INFO {
    FILETIME RevocationDate;


    DWORD dwCrlReasonCode;
} OCSP_BASIC_REVOKED_INFO, *POCSP_BASIC_REVOKED_INFO;

typedef struct _OCSP_BASIC_RESPONSE_ENTRY {
    OCSP_CERT_ID CertId;
    DWORD dwCertStatus;
    union {





        POCSP_BASIC_REVOKED_INFO pRevokedInfo;

    } ;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;

    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_BASIC_RESPONSE_ENTRY, *POCSP_BASIC_RESPONSE_ENTRY;






typedef struct _OCSP_BASIC_RESPONSE_INFO {
    DWORD dwVersion;
    DWORD dwResponderIdChoice;
    union {

        CERT_NAME_BLOB ByNameResponderId;

        CRYPT_HASH_BLOB ByKeyResponderId;
    } ;
    FILETIME ProducedAt;
    DWORD cResponseEntry;
    POCSP_BASIC_RESPONSE_ENTRY rgResponseEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_BASIC_RESPONSE_INFO, *POCSP_BASIC_RESPONSE_INFO;
# 5728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_SUPPORTED_ALGORITHM_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    CERT_POLICIES_INFO IntendedCertPolicies;
} CERT_SUPPORTED_ALGORITHM_INFO, *PCERT_SUPPORTED_ALGORITHM_INFO;






typedef struct _CERT_TPM_SPECIFICATION_INFO {
    LPWSTR pwszFamily;
    DWORD dwLevel;
    DWORD dwRevision;
} CERT_TPM_SPECIFICATION_INFO, *PCERT_TPM_SPECIFICATION_INFO;
# 5757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;
# 5834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_OID_FUNC_ENTRY {
    LPCSTR pszOID;
    void *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;
# 5856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptInstallOIDFunctionAddress(
             HMODULE hModule,
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         DWORD cFuncEntry,
                           const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],
         DWORD dwFlags
    );







__declspec(dllimport)
HCRYPTOIDFUNCSET
__stdcall
CryptInitOIDFunctionSet(
         LPCSTR pszFuncName,
         DWORD dwFlags
    );
# 5900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CryptGetOIDFunctionAddress(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
         LPCSTR pszOID,
         DWORD dwFlags,
             void **ppvFuncAddr,
          HCRYPTOIDFUNCADDR *phFuncAddr
    );
# 5923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CryptGetDefaultOIDDllList(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
                                                                                 WCHAR *pwszDllList,
            DWORD *pcchDllList
    );
# 5957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CryptGetDefaultOIDFunctionAddress(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
             LPCWSTR pwszDll,
         DWORD dwFlags,
             void **ppvFuncAddr,
            HCRYPTOIDFUNCADDR *phFuncAddr
    );
# 5983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptFreeOIDFunctionAddress(
         HCRYPTOIDFUNCADDR hFuncAddr,
         DWORD dwFlags
    );
# 6011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszDll,
             LPCSTR pszOverrideFuncName
    );





__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID
    );
# 6049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterDefaultOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         DWORD dwIndex,
         LPCWSTR pwszDll
    );
# 6066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterDefaultOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCWSTR pwszDll
    );
# 6083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptSetOIDFunctionValue(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszValueName,
         DWORD dwValueType,
                                      const BYTE *pbValueData,
         DWORD cbValueData
    );
# 6111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptGetOIDFunctionValue(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszValueName,
              DWORD *pdwValueType,
                                                            BYTE *pbValueData,
                DWORD *pcbValueData
    );

typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
         DWORD cValue,
                       const DWORD rgdwValueType[],
                       LPCWSTR const rgpwszValueName[],
                       const BYTE * const rgpbValueData[],
                       const DWORD rgcbValueData[],
                void *pvArg
    );
# 6149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDFunction(
         DWORD dwEncodingType,
             LPCSTR pszFuncName,
             LPCSTR pszOID,
         DWORD dwFlags,
                void *pvArg,
               PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
    );
# 6195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_OID_INFO {
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;
    union {
        DWORD dwValue;
        ALG_ID Algid;
        DWORD dwLength;
    } ;
    CRYPT_DATA_BLOB ExtraInfo;
# 6233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;
# 6329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCRYPT_OID_INFO
__stdcall
CryptFindOIDInfo(
         DWORD dwKeyType,
         void *pvKey,
         DWORD dwGroupId
    );
# 6405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDInfo(
         PCCRYPT_OID_INFO pInfo,
         DWORD dwFlags
    );







__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDInfo(
         PCCRYPT_OID_INFO pInfo
    );
# 6433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(
         PCCRYPT_OID_INFO pInfo,
                void *pvArg
    );
# 6448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDInfo(
         DWORD dwGroupId,
         DWORD dwFlags,
                void *pvArg,
               PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
    );
# 6481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
LPCWSTR
__stdcall
CryptFindLocalizedName(
         LPCWSTR pwszCryptName
    );
# 6495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_STRONG_SIGN_SERIALIZED_INFO {
    DWORD dwFlags;
    LPWSTR pwszCNGSignHashAlgids;
    LPWSTR pwszCNGPubKeyMinBitLengths;
} CERT_STRONG_SIGN_SERIALIZED_INFO, *PCERT_STRONG_SIGN_SERIALIZED_INFO;
# 6523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_STRONG_SIGN_PARA {
    DWORD cbSize;

    DWORD dwInfoChoice;
    union {
        void *pvInfo;


        PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo;


        LPSTR pszOID;

    } ;
} CERT_STRONG_SIGN_PARA, *PCERT_STRONG_SIGN_PARA;

typedef const CERT_STRONG_SIGN_PARA *PCCERT_STRONG_SIGN_PARA;
# 6612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void *HCRYPTMSG;
# 6649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_ISSUER_SERIAL_NUMBER {
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;




typedef struct _CERT_ID {
    DWORD dwIdChoice;
    union {

        CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;

        CRYPT_HASH_BLOB KeyId;

        CRYPT_HASH_BLOB HashId;
    } ;
} CERT_ID, *PCERT_ID;
# 6721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_SIGNER_ENCODE_INFO {
    DWORD cbSize;
    PCERT_INFO pCertInfo;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;



    } ;


    DWORD dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
# 6751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;

typedef struct _CMSG_SIGNED_ENCODE_INFO {
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;





} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;
# 6811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCODE_INFO;

typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;




    PCERT_INFO *rgpRecipients;
# 6839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
# 6862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
# 6911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;



    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void *pvKeyWrapAuxInfo;







    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwKeySpec;

    DWORD dwKeyChoice;
    union {



        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;




        PCERT_ID pSenderId;
    } ;
    CRYPT_DATA_BLOB UserKeyingMaterial;

    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
# 6979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;
    union {

        HCRYPTKEY hKeyEncryptionKey;

        void *pvKeyEncryptionKey;
    } ;
    CRYPT_DATA_BLOB KeyId;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
# 7005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
struct _CMSG_RECIPIENT_ENCODE_INFO {
    DWORD dwRecipientChoice;
    union {

        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;

        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;

        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
    } ;
};
# 7037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_RC2_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
} CMSG_RC2_AUX_INFO, *PCMSG_RC2_AUX_INFO;
# 7055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
    DWORD cbSize;
    DWORD dwFlags;
} CMSG_SP3_COMPATIBLE_AUX_INFO, *PCMSG_SP3_COMPATIBLE_AUX_INFO;
# 7077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_RC4_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
} CMSG_RC4_AUX_INFO, *PCMSG_RC4_AUX_INFO;
# 7091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO, *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
# 7113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_HASHED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;
# 7130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
# 7151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)(
             const void *pvArg,
                                 BYTE *pbData,
         DWORD cbData,
         BOOL fFinal
    );



typedef struct _CMSG_STREAM_INFO {
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;
# 7204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToEncode(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
         void const *pvMsgEncodeInfo,
             LPSTR pszInnerContentObjID,
             PCMSG_STREAM_INFO pStreamInfo
    );
# 7224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
DWORD
__stdcall
CryptMsgCalculateEncodedLength(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
         void const *pvMsgEncodeInfo,
             LPSTR pszInnerContentObjID,
         DWORD cbData
    );
# 7248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToDecode(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
             HCRYPTPROV_LEGACY hCryptProv,
               PCERT_INFO pRecipientInfo,
             PCMSG_STREAM_INFO pStreamInfo
    );




__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgDuplicate(
             HCRYPTMSG hCryptMsg
    );






__declspec(dllimport)
BOOL
__stdcall
CryptMsgClose(
             HCRYPTMSG hCryptMsg
    );
# 7291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptMsgUpdate(
         HCRYPTMSG hCryptMsg,
                                 const BYTE *pbData,
         DWORD cbData,
         BOOL fFinal
    );
# 7325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptMsgGetParam(
         HCRYPTMSG hCryptMsg,
         DWORD dwParamType,
         DWORD dwIndex,
                                                  void *pvData,
            DWORD *pcbData
    );
# 7460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_SIGNER_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;


    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;
# 7495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CMS_SIGNER_INFO {
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;


    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;
# 7528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
# 7769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
    DWORD dwVersion;


    CERT_ID RecipientId;

    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;

typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {

    CERT_ID RecipientId;

    CRYPT_DATA_BLOB EncryptedKey;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
    DWORD dwVersion;
    DWORD dwOriginatorChoice;
    union {

        CERT_ID OriginatorCertId;

        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } ;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;

    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;





typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;

typedef struct _CMSG_CMS_RECIPIENT_INFO {
    DWORD dwRecipientChoice;
    union {

        PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;

        PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;

        PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    } ;
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;
# 7863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptMsgControl(
         HCRYPTMSG hCryptMsg,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );
# 7942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
# 7995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CTRL_DECRYPT_PARA {
    DWORD cbSize;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    DWORD dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;
# 8035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
    DWORD cbSize;

    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
# 8079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
    DWORD cbSize;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    DWORD dwRecipientIndex;
    DWORD dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB OriginatorPublicKey;
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
# 8123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    DWORD dwRecipientIndex;
    DWORD dwKeyChoice;
    union {

        HCRYPTKEY hKeyEncryptionKey;

        void *pvKeyEncryptionKey;
    } ;
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
# 8185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
# 8201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
# 8271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
BOOL
__stdcall
CryptMsgVerifyCountersignatureEncoded(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwEncodingType,
                                   PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
                                                   PBYTE pbSignerInfoCountersignature,
         DWORD cbSignerInfoCountersignature,
         PCERT_INFO pciCountersigner
    );
# 8294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
BOOL
__stdcall
CryptMsgVerifyCountersignatureEncodedEx(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwEncodingType,
                                   PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
                                                   PBYTE pbSignerInfoCountersignature,
         DWORD cbSignerInfoCountersignature,
         DWORD dwSignerType,
         void *pvSigner,
         DWORD dwFlags,
                void *pvExtra
    );
# 8320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
BOOL
__stdcall
CryptMsgCountersign(
         HCRYPTMSG hCryptMsg,
         DWORD dwIndex,
         DWORD cCountersigners,
                                PCMSG_SIGNER_ENCODE_INFO rgCountersigners
    );







BOOL
__stdcall
CryptMsgCountersignEncoded(
         DWORD dwEncodingType,
                                   PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
         DWORD cCountersigners,
                                PCMSG_SIGNER_ENCODE_INFO rgCountersigners,
                                                                          PBYTE pbCountersignature,
            PDWORD pcbCountersignature
    );





typedef void * (__stdcall *PFN_CMSG_ALLOC) (
         size_t cb
    );

typedef void (__stdcall *PFN_CMSG_FREE)(
            void *pv
    );
# 8372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY) (
            HCRYPTPROV *phCryptProv,
         PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
             PVOID pvEncryptAuxInfo,
         PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
               PFN_CMSG_ALLOC pfnAlloc,
          HCRYPTKEY *phEncryptKey,
                                                      PBYTE *ppbEncryptParameters,
          PDWORD pcbEncryptParameters
    );


typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY) (
         HCRYPTPROV hCryptProv,
         HCRYPTKEY hEncryptKey,
         PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
                                                  PBYTE pbData,
            PDWORD pcbData
    );


typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY) (
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
         PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,
                                   PBYTE pbEncodedKey,
         DWORD cbEncodedKey,
          HCRYPTKEY *phEncryptKey
    );
# 8426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;
    union {

        HCRYPTKEY hContentEncryptKey;

        BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    } ;
    DWORD dwFlags;

    BOOL fCNG;

    BYTE *pbCNGContentEncryptKeyObject;
    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
# 8514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY) (
            PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
# 8531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;
# 8572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
            PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
# 8592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
    DWORD cbSize;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO, *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;







typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD dwOriginatorChoice;
    union {

        CERT_ID OriginatorCertId;

        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } ;
    DWORD cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD dwFlags;
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;
# 8679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
            PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
# 8698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_MAIL_LIST_ENCRYPT_INFO, *PCMSG_MAIL_LIST_ENCRYPT_INFO;
# 8740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
            PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
# 8769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );



typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );



typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );
# 8807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;




    NCRYPT_KEY_HANDLE hNCryptKey;

    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;

    BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    BYTE *pbCNGContentEncryptKeyObject;
} CMSG_CNG_CONTENT_DECRYPT_INFO, *PCMSG_CNG_CONTENT_DECRYPT_INFO;
# 8843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
         DWORD dwFlags,
               void *pvReserved
    );
# 8868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
         DWORD dwFlags,
               void *pvReserved
    );
# 8893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
# 8973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void *HCERTSTORE;
# 8985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;
# 9004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRL_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;
# 9023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CTL_CONTEXT {
    DWORD dwMsgAndCertEncodingType;
    BYTE *pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE *pbCtlContent;
    DWORD cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;
# 9189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef enum CertKeyType : DWORD
{
    KeyTypeOther = 0,
    KeyTypeVirtualSmartCard = 1,
    KeyTypePhysicalSmartCard = 2,
    KeyTypePassport = 3,
    KeyTypePassportRemote = 4,
    KeyTypePassportSmartCard = 5,
    KeyTypeHardware = 6,
    KeyTypeSoftware = 7,
    KeyTypeSelfSigned = 8,
} CertKeyType;
# 9310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_KEY_PROV_PARAM {
    DWORD dwParam;
    BYTE *pbData;
    DWORD cbData;
    DWORD dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;

typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;
# 9350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_KEY_CONTEXT {
    DWORD cbSize;
    union {
        HCRYPTPROV hCryptProv;


        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;
    DWORD dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;







typedef struct _ROOT_INFO_LUID {
    DWORD LowPart;
    LONG HighPart;
} ROOT_INFO_LUID, *PROOT_INFO_LUID;

typedef struct _CRYPT_SMART_CARD_ROOT_INFO {
    BYTE rgbCardID [16];
    ROOT_INFO_LUID luid;
} CRYPT_SMART_CARD_ROOT_INFO, *PCRYPT_SMART_CARD_ROOT_INFO;
# 9476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
    union {
        HKEY hKeyBase;
        void *pvBase;
    } ;
    union {
        void *pvSystemStore;
        LPCSTR pszSystemStore;
        LPCWSTR pwszSystemStore;
    } ;
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;
# 9893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
    HKEY hKeyBase;
    LPWSTR pwszRegPath;
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA, *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
# 9906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
    HKEY hKey;
    LPWSTR pwszStoreDirectory;
} CERT_REGISTRY_STORE_ROAMING_PARA, *PCERT_REGISTRY_STORE_ROAMING_PARA;
# 9988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_LDAP_STORE_OPENED_PARA {
    void *pvLdapSessionHandle;

    LPCWSTR pwszLdapUrl;
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;
# 10356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

HCERTSTORE
__stdcall
CertOpenStore(
         LPCSTR lpszStoreProvider,
         DWORD dwEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
             const void *pvPara
    );






typedef void *HCERTSTOREPROV;
# 10384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_STORE_PROV_INFO {
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void **rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;
# 10400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
         LPCSTR lpszStoreProvider,
         DWORD dwEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
             const void *pvPara,
         HCERTSTORE hCertStore,
            PCERT_STORE_PROV_INFO pStoreProvInfo
    );
# 10470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(
                HCERTSTOREPROV hStoreProv,
         DWORD dwFlags
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pStoreCertContext,
         DWORD dwFlags,
             PCCERT_CONTEXT *ppProvCertContext
    );
# 10496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags
    );





typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags
    );
# 10520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pStoreCrlContext,
         DWORD dwFlags,
             PCCRL_CONTEXT *ppProvCrlContext
    );
# 10547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags
    );
# 10570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pStoreCtlContext,
         DWORD dwFlags,
             PCCTL_CONTEXT *ppProvCtlContext
    );
# 10597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
                                                     );
# 10620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(
            HCERTSTOREPROV hStoreProv,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );

typedef struct _CERT_STORE_PROV_FIND_INFO {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    const void *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
*PCCERT_STORE_PROV_FIND_INFO;

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCERT_CONTEXT pPrevCertContext,
         DWORD dwFlags,
            void **ppvStoreProvFindInfo,
             PCCERT_CONTEXT *ppProvCertContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                                  void *pvData,
            DWORD *pcbData
    );


typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCRL_CONTEXT pPrevCrlContext,
         DWORD dwFlags,
            void **ppvStoreProvFindInfo,
             PCCRL_CONTEXT *ppProvCrlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                                  void *pvData,
            DWORD *pcbData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(
         HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCTL_CONTEXT pPrevCtlContext,
         DWORD dwFlags,
            void **ppvStoreProvFindInfo,
             PCCTL_CONTEXT *ppProvCtlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                                  void *pvData,
            DWORD *pcbData
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CertDuplicateStore(
         HCERTSTORE hCertStore
    );
# 10794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertSaveStore(
         HCERTSTORE hCertStore,
         DWORD dwEncodingType,
         DWORD dwSaveAs,
         DWORD dwSaveTo,
            void *pvSaveToPara,
         DWORD dwFlags
    );
# 10836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertCloseStore(
             HCERTSTORE hCertStore,
         DWORD dwFlags
    );
# 10856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetSubjectCertificateFromStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId

    );
# 10882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertEnumCertificatesInStore(
         HCERTSTORE hCertStore,
             PCCERT_CONTEXT pPrevCertContext
    );
# 10914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertFindCertificateInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCERT_CONTEXT pPrevCertContext
    );
# 11275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetIssuerCertificateFromStore(
         HCERTSTORE hCertStore,
         PCCERT_CONTEXT pSubjectContext,
             PCCERT_CONTEXT pPrevIssuerContext,
            DWORD *pdwFlags
    );
# 11295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertVerifySubjectCertificateContext(
         PCCERT_CONTEXT pSubject,
             PCCERT_CONTEXT pIssuer,
            DWORD *pdwFlags
    );




__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertDuplicateCertificateContext(
             PCCERT_CONTEXT pCertContext
    );
# 11328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateCertificateContext(
         DWORD dwCertEncodingType,
                                    const BYTE *pbCertEncoded,
         DWORD cbCertEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCertificateContext(
             PCCERT_CONTEXT pCertContext
    );
# 11491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextProperty(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
# 11568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertGetCertificateContextProperty(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
                                                  void *pvData,
            DWORD *pcbData
    );
# 11592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
DWORD
__stdcall
CertEnumCertificateContextProperties(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId
    );
# 11622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertCreateCTLEntryFromCertificateContextProperties(
         PCCERT_CONTEXT pCertContext,
         DWORD cOptAttr,
                             PCRYPT_ATTRIBUTE rgOptAttr,
         DWORD dwFlags,
               void *pvReserved,
                                                          PCTL_ENTRY pCtlEntry,
            DWORD *pcbCtlEntry
    );
# 11651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextPropertiesFromCTLEntry(
         PCCERT_CONTEXT pCertContext,
         PCTL_ENTRY pCtlEntry,
         DWORD dwFlags
    );
# 11718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertGetCRLFromStore(
         HCERTSTORE hCertStore,
             PCCERT_CONTEXT pIssuerContext,
             PCCRL_CONTEXT pPrevCrlContext,
            DWORD *pdwFlags
    );
# 11744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertEnumCRLsInStore(
         HCERTSTORE hCertStore,
             PCCRL_CONTEXT pPrevCrlContext
    );
# 11775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertFindCRLInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCRL_CONTEXT pPrevCrlContext
    );
# 11861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRL_FIND_ISSUED_FOR_PARA {
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;
# 11879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertDuplicateCRLContext(
             PCCRL_CONTEXT pCrlContext
    );
# 11900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertCreateCRLContext(
         DWORD dwCertEncodingType,
                                   const BYTE *pbCrlEncoded,
         DWORD cbCrlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCRLContext(
             PCCRL_CONTEXT pCrlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCRLContextProperty(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
# 11945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertGetCRLContextProperty(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
                                                  void *pvData,
            DWORD *pcbData
    );
# 11965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
DWORD
__stdcall
CertEnumCRLContextProperties(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId
    );
# 11986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertFindCertificateInCRL(
         PCCERT_CONTEXT pCert,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags,
               void *pvReserved,
                              PCRL_ENTRY *ppCrlEntry
    );
# 12009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertIsValidCRLForCertificate(
         PCCERT_CONTEXT pCert,
         PCCRL_CONTEXT pCrl,
         DWORD dwFlags,
               void *pvReserved
    );
# 12077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCertificateToStore(
             HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
                                    const BYTE *pbCertEncoded,
         DWORD cbCertEncoded,
         DWORD dwAddDisposition,
                 PCCERT_CONTEXT *ppCertContext
    );
# 12147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertAddCertificateContextToStore(
             HCERTSTORE hCertStore,
         PCCERT_CONTEXT pCertContext,
         DWORD dwAddDisposition,
                 PCCERT_CONTEXT *ppStoreContext
    );
# 12201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertAddSerializedElementToStore(
             HCERTSTORE hCertStore,
                                const BYTE *pbElement,
         DWORD cbElement,
         DWORD dwAddDisposition,
         DWORD dwFlags,
         DWORD dwContextTypeFlags,
              DWORD *pdwContextType,
                 const void **ppvContext
    );
# 12231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCertificateFromStore(
         PCCERT_CONTEXT pCertContext
    );
# 12254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCRLToStore(
             HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
                                   const BYTE *pbCrlEncoded,
         DWORD cbCrlEncoded,
         DWORD dwAddDisposition,
                 PCCRL_CONTEXT *ppCrlContext
    );
# 12287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertAddCRLContextToStore(
             HCERTSTORE hCertStore,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwAddDisposition,
                 PCCRL_CONTEXT *ppStoreContext
    );
# 12310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCRLFromStore(
         PCCRL_CONTEXT pCrlContext
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCertificateStoreElement(
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags,
                                                        BYTE *pbElement,
            DWORD *pcbElement
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCRLStoreElement(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags,
                                                        BYTE *pbElement,
            DWORD *pcbElement
    );
# 12354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertDuplicateCTLContext(
             PCCTL_CONTEXT pCtlContext
    );
# 12375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertCreateCTLContext(
         DWORD dwMsgAndCertEncodingType,
                                   const BYTE *pbCtlEncoded,
         DWORD cbCtlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCTLContext(
             PCCTL_CONTEXT pCtlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCTLContextProperty(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
# 12420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertGetCTLContextProperty(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
                                                  void *pvData,
            DWORD *pcbData
    );




__declspec(dllimport)
DWORD
__stdcall
CertEnumCTLContextProperties(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId
    );
# 12457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertEnumCTLsInStore(
         HCERTSTORE hCertStore,
             PCCTL_CONTEXT pPrevCtlContext
    );
# 12483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCTL_ENTRY
__stdcall
CertFindSubjectInCTL(
         DWORD dwEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
    );







typedef struct _CTL_ANY_SUBJECT_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    CRYPT_DATA_BLOB SubjectIdentifier;
} CTL_ANY_SUBJECT_INFO, *PCTL_ANY_SUBJECT_INFO;
# 12528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertFindCTLInStore(
         HCERTSTORE hCertStore,
         DWORD dwMsgAndCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCTL_CONTEXT pPrevCtlContext
    );
# 12547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CTL_FIND_USAGE_PARA {
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;







typedef struct _CTL_FIND_SUBJECT_PARA {
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;
# 12633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCTLToStore(
             HCERTSTORE hCertStore,
         DWORD dwMsgAndCertEncodingType,
                                   const BYTE *pbCtlEncoded,
         DWORD cbCtlEncoded,
         DWORD dwAddDisposition,
                 PCCTL_CONTEXT *ppCtlContext
    );
# 12666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertAddCTLContextToStore(
             HCERTSTORE hCertStore,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwAddDisposition,
                 PCCTL_CONTEXT *ppStoreContext
    );




__declspec(dllimport)
BOOL
__stdcall
CertSerializeCTLStoreElement(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags,
                                                        BYTE *pbElement,
            DWORD *pcbElement
    );
# 12702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCTLFromStore(
         PCCTL_CONTEXT pCtlContext
    );


__declspec(dllimport)

BOOL
__stdcall
CertAddCertificateLinkToStore(
         HCERTSTORE hCertStore,
         PCCERT_CONTEXT pCertContext,
         DWORD dwAddDisposition,
                 PCCERT_CONTEXT *ppStoreContext
    );

__declspec(dllimport)

BOOL
__stdcall
CertAddCRLLinkToStore(
         HCERTSTORE hCertStore,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwAddDisposition,
                 PCCRL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)

BOOL
__stdcall
CertAddCTLLinkToStore(
         HCERTSTORE hCertStore,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwAddDisposition,
                 PCCTL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
BOOL
__stdcall
CertAddStoreToCollection(
         HCERTSTORE hCollectionStore,
             HCERTSTORE hSiblingStore,
         DWORD dwUpdateFlags,
         DWORD dwPriority
    );

__declspec(dllimport)
void
__stdcall
CertRemoveStoreFromCollection(
         HCERTSTORE hCollectionStore,
         HCERTSTORE hSiblingStore
    );


__declspec(dllimport)
BOOL
__stdcall
CertControlStore(
         HCERTSTORE hCertStore,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );
# 12898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertSetStoreProperty(
         HCERTSTORE hCertStore,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
# 12921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertGetStoreProperty(
         HCERTSTORE hCertStore,
         DWORD dwPropId,
                                                  void *pvData,
            DWORD *pcbData
    );
# 12943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(
         DWORD cbTotalEncoded,
         DWORD cbRemainEncoded,
         DWORD cEntry,
                void *pvSort
    );

typedef struct _CERT_CREATE_CONTEXT_PARA {
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void *pvFree;



    PFN_CERT_CREATE_CONTEXT_SORT_FUNC pfnSort;
    void *pvSort;
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;
# 12994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
const void *
__stdcall
CertCreateContext(
         DWORD dwContextType,
         DWORD dwEncodingType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
             PCERT_CREATE_CONTEXT_PARA pCreatePara
    );
# 13054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_SYSTEM_STORE_INFO {
    DWORD cbSize;
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;
# 13100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_PHYSICAL_STORE_INFO {
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;
# 13152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertRegisterSystemStore(
         const void *pvSystemStore,
         DWORD dwFlags,
             PCERT_SYSTEM_STORE_INFO pStoreInfo,
               void *pvReserved
    );
# 13178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertRegisterPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName,
         PCERT_PHYSICAL_STORE_INFO pStoreInfo,
               void *pvReserved
    );
# 13204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertUnregisterSystemStore(
         const void *pvSystemStore,
         DWORD dwFlags
    );
# 13227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertUnregisterPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName
    );
# 13259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
         LPCWSTR pwszStoreLocation,
         DWORD dwFlags,
               void *pvReserved,
                void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(
         const void *pvSystemStore,
         DWORD dwFlags,
         PCERT_SYSTEM_STORE_INFO pStoreInfo,
               void *pvReserved,
                void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName,
         PCERT_PHYSICAL_STORE_INFO pStoreInfo,
               void *pvReserved,
                void *pvArg
    );
# 13302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStoreLocation(
         DWORD dwFlags,
                void *pvArg,
               PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
    );
# 13342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStore(
         DWORD dwFlags,
             void *pvSystemStoreLocationPara,
                void *pvArg,
               PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
    );
# 13368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertEnumPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
                void *pvArg,
               PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
    );
# 13430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertGetEnhancedKeyUsage(
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags,
                                                    PCERT_ENHKEY_USAGE pUsage,
            DWORD *pcbUsage
    );
# 13449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertSetEnhancedKeyUsage(
         PCCERT_CONTEXT pCertContext,
             PCERT_ENHKEY_USAGE pUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertAddEnhancedKeyUsageIdentifier(
         PCCERT_CONTEXT pCertContext,
         LPCSTR pszUsageIdentifier
    );






__declspec(dllimport)
BOOL
__stdcall
CertRemoveEnhancedKeyUsageIdentifier(
         PCCERT_CONTEXT pCertContext,
         LPCSTR pszUsageIdentifier
    );
# 13495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertGetValidUsages(
         DWORD cCerts,
                       PCCERT_CONTEXT *rghCerts,
          int *cNumOIDs,
                                                  LPSTR *rghOIDs,
            DWORD *pcbOIDs);
# 13535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CryptMsgGetAndVerifySigner(
         HCRYPTMSG hCryptMsg,
         DWORD cSignerStore,
                                 HCERTSTORE *rghSignerStore,
         DWORD dwFlags,
                 PCCERT_CONTEXT *ppSigner,
                DWORD *pdwSignerIndex
    );
# 13567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptMsgSignCTL(
         DWORD dwMsgEncodingType,
                                   BYTE *pbCtlContent,
         DWORD cbCtlContent,
         PCMSG_SIGNED_ENCODE_INFO pSignInfo,
         DWORD dwFlags,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
# 13596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptMsgEncodeAndSignCTL(
         DWORD dwMsgEncodingType,
         PCTL_INFO pCtlInfo,
         PCMSG_SIGNED_ENCODE_INFO pSignInfo,
         DWORD dwFlags,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
# 13623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertFindSubjectInSortedCTL(
         PCRYPT_DATA_BLOB pSubjectIdentifier,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags,
               void *pvReserved,
              PCRYPT_DER_BLOB pEncodedAttributes
    );
# 13647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertEnumSubjectInSortedCTL(
         PCCTL_CONTEXT pCtlContext,
            void **ppvNextSubject,
              PCRYPT_DER_BLOB pSubjectIdentifier,
              PCRYPT_DER_BLOB pEncodedAttributes
    );
# 13668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CTL_VERIFY_USAGE_PARA {
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE *rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE *rghSignerStore;
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;

typedef struct _CTL_VERIFY_USAGE_STATUS {
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT *ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT *ppSigner;
    DWORD dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;
# 13749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertVerifyCTLUsage(
         DWORD dwEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         PCTL_USAGE pSubjectUsage,
         DWORD dwFlags,
             PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
            PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
    );
# 13777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_REVOCATION_CRL_INFO {
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;



    PCRL_ENTRY pCrlEntry;
    BOOL fDeltaCrlEntry;
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;
# 13797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_REVOCATION_CHAIN_PARA
    CERT_REVOCATION_CHAIN_PARA,
    *PCERT_REVOCATION_CHAIN_PARA;
# 13818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_REVOCATION_PARA {
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE *rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;
# 13861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
# 13879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_REVOCATION_STATUS {
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;
# 13893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;
# 13980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertVerifyRevocation(
         DWORD dwEncodingType,
         DWORD dwRevType,
         DWORD cContext,
                         PVOID rgpvContext[],
         DWORD dwFlags,
             PCERT_REVOCATION_PARA pRevPara,
            PCERT_REVOCATION_STATUS pRevStatus
    );
# 14063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
BOOL
__stdcall
CertCompareIntegerBlob(
         PCRYPT_INTEGER_BLOB pInt1,
         PCRYPT_INTEGER_BLOB pInt2
    );
# 14078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificate(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId1,
         PCERT_INFO pCertId2
    );






__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificateName(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pCertName1,
         PCERT_NAME_BLOB pCertName2
    );
# 14125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertIsRDNAttrsInCertificateName(
         DWORD dwCertEncodingType,
         DWORD dwFlags,
         PCERT_NAME_BLOB pCertName,
         PCERT_RDN pRDN
    );
# 14143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertComparePublicKeyInfo(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPublicKey1,
         PCERT_PUBLIC_KEY_INFO pPublicKey2
    );
# 14163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
DWORD
__stdcall
CertGetPublicKeyLength(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPublicKey
    );
# 14186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CryptVerifyCertificateSignature(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
         PCERT_PUBLIC_KEY_INFO pPublicKey
    );
# 14223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CryptVerifyCertificateSignatureEx(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         DWORD dwIssuerType,
             void *pvIssuer,
         DWORD dwFlags,
                void *pvExtra
    );
# 14303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO {

    CRYPT_DATA_BLOB CertSignHashCNGAlgPropData;


    CRYPT_DATA_BLOB CertIssuerPubKeyBitLengthPropData;
} CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO,
    *PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;


typedef struct _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO {
    DWORD cCNGHashAlgid;
    PCWSTR *rgpwszCNGHashAlgid;



    DWORD dwWeakIndex;
} CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO,
    *PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;
# 14345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertIsStrongHashToSign(
         PCCERT_STRONG_SIGN_PARA pStrongSignPara,
         LPCWSTR pwszCNGHashAlgid,
             PCCERT_CONTEXT pSigningCert
    );
# 14361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptHashToBeSigned(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                  BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
# 14382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptHashCertificate(
             HCRYPTPROV_LEGACY hCryptProv,
         ALG_ID Algid,
         DWORD dwFlags,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                  BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
# 14406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CryptHashCertificate2(
         LPCWSTR pwszCNGHashAlgid,
         DWORD dwFlags,
               void *pvReserved,
                                    const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                  BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
# 14439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptSignCertificate(



             HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,

             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
                                          const BYTE *pbEncodedToBeSigned,
         DWORD cbEncodedToBeSigned,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             const void *pvHashAuxInfo,
                                                            BYTE *pbSignature,
            DWORD *pcbSignature
    );
# 14470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncodeCertificate(



             HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,

             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             const void *pvHashAuxInfo,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
# 14514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(
         DWORD dwCertEncodingType,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
                              void **ppvDecodedSignPara,
             LPWSTR *ppwszCNGHashAlgid
    );




typedef BOOL (__stdcall *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(
         NCRYPT_KEY_HANDLE hKey,
         DWORD dwCertEncodingType,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             void *pvDecodedSignPara,
         LPCWSTR pwszCNGPubKeyAlgid,
         LPCWSTR pwszCNGHashAlgid,
                                     BYTE *pbComputedHash,
         DWORD cbComputedHash,
                                                            BYTE *pbSignature,
            DWORD *pcbSignature
    );





typedef BOOL (__stdcall *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPubKeyInfo,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             void *pvDecodedSignPara,
         LPCWSTR pwszCNGPubKeyAlgid,
         LPCWSTR pwszCNGHashAlgid,
                                     BYTE *pbComputedHash,
         DWORD cbComputedHash,
                                  BYTE *pbSignature,
         DWORD cbSignature
    );
# 14563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
LONG
__stdcall
CertVerifyTimeValidity(
             LPFILETIME pTimeToVerify,
         PCERT_INFO pCertInfo
    );
# 14585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
LONG
__stdcall
CertVerifyCRLTimeValidity(
             LPFILETIME pTimeToVerify,
         PCRL_INFO pCrlInfo
    );







__declspec(dllimport)
BOOL
__stdcall
CertVerifyValidityNesting(
         PCERT_INFO pSubjectInfo,
         PCERT_INFO pIssuerInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CertVerifyCRLRevocation(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId,

         DWORD cCrlInfo,
                         PCRL_INFO rgpCrlInfo[]
    );






__declspec(dllimport)
LPCSTR
__stdcall
CertAlgIdToOID(
         DWORD dwAlgId
    );






__declspec(dllimport)
DWORD
__stdcall
CertOIDToAlgId(
         LPCSTR pszObjId
    );
# 14658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCERT_EXTENSION
__stdcall
CertFindExtension(
         LPCSTR pszObjId,
         DWORD cExtensions,
                            CERT_EXTENSION rgExtensions[]
    );






__declspec(dllimport)
PCRYPT_ATTRIBUTE
__stdcall
CertFindAttribute(
         LPCSTR pszObjId,
         DWORD cAttr,
                      CRYPT_ATTRIBUTE rgAttr[]
    );







__declspec(dllimport)
PCERT_RDN_ATTR
__stdcall
CertFindRDNAttr(
         LPCSTR pszObjId,
         PCERT_NAME_INFO pName
    );
# 14703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertGetIntendedKeyUsage(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertInfo,
                                       BYTE *pbKeyUsage,
         DWORD cbKeyUsage
    );

typedef void *HCRYPTDEFAULTCONTEXT;
# 14748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptInstallDefaultContext(
         HCRYPTPROV hCryptProv,
         DWORD dwDefaultType,
             const void *pvDefaultPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTDEFAULTCONTEXT *phDefaultContext
    );
# 14788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
    DWORD cOID;
    LPSTR *rgpszOID;
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
# 14801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptUninstallDefaultContext(
             HCRYPTDEFAULTCONTEXT hDefaultContext,
         DWORD dwFlags,
               void *pvReserved
    );
# 14817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfo(
         HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
# 14852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoEx(
         HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
             LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
# 14875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
         NCRYPT_KEY_HANDLE hNCryptKey,
         DWORD dwCertEncodingType,
         LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
# 14907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoFromBCryptKeyHandle(
         BCRYPT_KEY_HANDLE hBCryptKey,
         DWORD dwCertEncodingType,
             LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
# 14927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC) (
         BCRYPT_KEY_HANDLE hBCryptKey,
         DWORD dwCertEncodingType,
         LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
# 14946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfo(
         HCRYPTPROV hCryptProv,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
          HCRYPTKEY *phKey
    );
# 14972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx(
         HCRYPTPROV hCryptProv,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         ALG_ID aiKeyAlg,
         DWORD dwFlags,
             void *pvAuxInfo,
          HCRYPTKEY *phKey
    );
# 15008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx2(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         DWORD dwFlags,
             void *pvAuxInfo,
          BCRYPT_KEY_HANDLE *phKey
    );






typedef BOOL (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         DWORD dwFlags,
             void *pvAuxInfo,
          BCRYPT_KEY_HANDLE *phKey
    );
# 15124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptAcquireCertificatePrivateKey(
         PCCERT_CONTEXT pCert,
         DWORD dwFlags,
             void *pvParameters,
          HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey,
              DWORD *pdwKeySpec,
              BOOL *pfCallerFreeProvOrNCryptKey
    );
# 15178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptFindCertificateKeyProvInfo(
         PCCERT_CONTEXT pCert,
         DWORD dwFlags,
               void *pvReserved
    );
# 15206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC) (
         HCRYPTPROV hCryptProv,
         CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,
         DWORD dwFlags,
             void* pvAuxInfo
    );
# 15233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptImportPKCS8(
         CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams,
         DWORD dwFlags,
              HCRYPTPROV *phCryptProv,
             void* pvAuxInfo
    );




typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC) (
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         LPSTR pszPrivateKeyObjId,
         DWORD dwFlags,
             void* pvAuxInfo,
                                                CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,
            DWORD* pcbPrivateKeyInfo
    );
# 15264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8(
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         LPSTR pszPrivateKeyObjId,
         DWORD dwFlags,
             void* pvAuxInfo,
                                                BYTE* pbPrivateKeyBlob,
            DWORD *pcbPrivateKeyBlob
    );
# 15305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8Ex(
         CRYPT_PKCS8_EXPORT_PARAMS* psExportParams,
         DWORD dwFlags,
             void* pvAuxInfo,
                                                BYTE* pbPrivateKeyBlob,
            DWORD* pcbPrivateKeyBlob
    );
# 15327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptHashPublicKeyInfo(
             HCRYPTPROV_LEGACY hCryptProv,
         ALG_ID Algid,
         DWORD dwFlags,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
                                                                  BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
# 15351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrA(
         DWORD dwValueType,
         PCERT_RDN_VALUE_BLOB pValue,
                                     LPSTR psz,
         DWORD csz
    );
# 15371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrW(
         DWORD dwValueType,
         PCERT_RDN_VALUE_BLOB pValue,
                                     LPWSTR psz,
         DWORD csz
    );
# 15483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
DWORD
__stdcall
CertNameToStrA(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pName,
         DWORD dwStrType,
                                     LPSTR psz,
         DWORD csz
    );
__declspec(dllimport)
DWORD
__stdcall
CertNameToStrW(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pName,
         DWORD dwStrType,
                                     LPWSTR psz,
         DWORD csz
    );
# 15649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertStrToNameA(
         DWORD dwCertEncodingType,
         LPCSTR pszX500,
         DWORD dwStrType,
               void *pvReserved,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded,
                                  LPCSTR *ppszError
    );


__declspec(dllimport)
BOOL
__stdcall
CertStrToNameW(
         DWORD dwCertEncodingType,
         LPCWSTR pszX500,
         DWORD dwStrType,
               void *pvReserved,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded,
                                  LPCWSTR *ppszError
    );
# 15774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringA(
         PCCERT_CONTEXT pCertContext,
         DWORD dwType,
         DWORD dwFlags,
             void *pvTypePara,
                                               LPSTR pszNameString,
         DWORD cchNameString
    );


__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringW(
         PCCERT_CONTEXT pCertContext,
         DWORD dwType,
         DWORD dwFlags,
             void *pvTypePara,
                                               LPWSTR pszNameString,
         DWORD cchNameString
    );
# 15882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(
                void *pvGetArg,
         DWORD dwCertEncodingType,
         PCERT_INFO pSignerId,

         HCERTSTORE hMsgCertStore
    );
# 15941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT *rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT *rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;






} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
# 15993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void *pvGetArg;
# 16012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;
# 16053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;
# 16087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE *rghCertStore;
# 16101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;
# 16114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_HASH_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;
# 16134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;

    CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;
# 16164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
# 16182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptSignMessage(
         PCRYPT_SIGN_MESSAGE_PARA pSignPara,
         BOOL fDetachedSignature,
         DWORD cToBeSigned,
                                const BYTE *rgpbToBeSigned[],
                            DWORD rgcbToBeSigned[],
                                                              BYTE *pbSignedBlob,
            DWORD *pcbSignedBlob
    );
# 16231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignature(
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                   const BYTE *pbSignedBlob,
         DWORD cbSignedBlob,
                                                        BYTE *pbDecoded,
                DWORD *pcbDecoded,
                                  PCCERT_CONTEXT *ppSignerCert
    );





__declspec(dllimport)
LONG
__stdcall
CryptGetMessageSignerCount(
         DWORD dwMsgEncodingType,
                                   const BYTE *pbSignedBlob,
         DWORD cbSignedBlob
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CryptGetMessageCertificates(
         DWORD dwMsgAndCertEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
                                   const BYTE *pbSignedBlob,
         DWORD cbSignedBlob
    );






__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageSignature(
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                         const BYTE *pbDetachedSignBlob,
         DWORD cbDetachedSignBlob,
         DWORD cToBeSigned,
                            const BYTE *rgpbToBeSigned[],
                            DWORD rgcbToBeSigned[],
                                  PCCERT_CONTEXT *ppSignerCert
    );




__declspec(dllimport)
BOOL
__stdcall
CryptEncryptMessage(
         PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
         DWORD cRecipientCert,
                               PCCERT_CONTEXT rgpRecipientCert[],
                                          const BYTE *pbToBeEncrypted,
         DWORD cbToBeEncrypted,
                                                                    BYTE *pbEncryptedBlob,
            DWORD *pcbEncryptedBlob
    );
# 16321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptDecryptMessage(
         PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
                                      const BYTE *pbEncryptedBlob,
         DWORD cbEncryptedBlob,
                                                            BYTE *pbDecrypted,
                DWORD *pcbDecrypted,
                                  PCCERT_CONTEXT *ppXchgCert
    );
# 16340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncryptMessage(
         PCRYPT_SIGN_MESSAGE_PARA pSignPara,
         PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
         DWORD cRecipientCert,
                               PCCERT_CONTEXT rgpRecipientCert[],
                                               const BYTE *pbToBeSignedAndEncrypted,
         DWORD cbToBeSignedAndEncrypted,
                                                                                      BYTE *pbSignedAndEncryptedBlob,
            DWORD *pcbSignedAndEncryptedBlob
    );
# 16381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptDecryptAndVerifyMessageSignature(
         PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                      const BYTE *pbEncryptedBlob,
         DWORD cbEncryptedBlob,
                                                            BYTE *pbDecrypted,
                DWORD *pcbDecrypted,
                                  PCCERT_CONTEXT *ppXchgCert,
                                  PCCERT_CONTEXT *ppSignerCert
    );
# 16428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptDecodeMessage(
         DWORD dwMsgTypeFlags,
             PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
             PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                    const BYTE *pbEncodedBlob,
         DWORD cbEncodedBlob,
         DWORD dwPrevInnerContentType,
              DWORD *pdwMsgType,
              DWORD *pdwInnerContentType,
                                                        BYTE *pbDecoded,
                DWORD *pcbDecoded,
                                  PCCERT_CONTEXT *ppXchgCert,
                                  PCCERT_CONTEXT *ppSignerCert
    );
# 16457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptHashMessage(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
         BOOL fDetachedHash,
         DWORD cToBeHashed,
                            const BYTE *rgpbToBeHashed[],
                            DWORD rgcbToBeHashed[],
                                                              BYTE *pbHashedBlob,
                DWORD *pcbHashedBlob,
                                                                  BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageHash(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
                                   BYTE *pbHashedBlob,
         DWORD cbHashedBlob,
                                                              BYTE *pbToBeHashed,
                DWORD *pcbToBeHashed,
                                                                  BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );
# 16499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageHash(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
                                         BYTE *pbDetachedHashBlob,
         DWORD cbDetachedHashBlob,
         DWORD cToBeHashed,
                            const BYTE *rgpbToBeHashed[],
                            DWORD rgcbToBeHashed[],
                                                                  BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptSignMessageWithKey(
         PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,
                                   const BYTE *pbToBeSigned,
         DWORD cbToBeSigned,
                                                              BYTE *pbSignedBlob,
            DWORD *pcbSignedBlob
    );
# 16543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignatureWithKey(
         PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,
             PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
                                   const BYTE *pbSignedBlob,
         DWORD cbSignedBlob,
                                                        BYTE *pbDecoded,
                DWORD *pcbDecoded
    );
# 16582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreA(
             HCRYPTPROV_LEGACY hProv,
         LPCSTR szSubsystemProtocol
    );
__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreW(
             HCRYPTPROV_LEGACY hProv,
         LPCWSTR szSubsystemProtocol
    );






__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreA(
         LPCSTR szCertStoreName,
                                    const BYTE * pbCertEncoded,
         DWORD cbCertEncoded
    );
__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreW(
         LPCWSTR szCertStoreName,
                                    const BYTE * pbCertEncoded,
         DWORD cbCertEncoded
    );
# 16641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_CHAIN {
    DWORD cCerts;
    PCERT_BLOB certs;

    CRYPT_KEY_PROV_INFO keyLocatorInfo;
} CERT_CHAIN, *PCERT_CHAIN;



HRESULT
__stdcall
FindCertsByIssuer(
                                                              PCERT_CHAIN pCertChains,
            DWORD *pcbCertChains,
          DWORD *pcCertChains,
                                              BYTE* pbEncodedIssuerName,
         DWORD cbEncodedIssuerName,
             LPCWSTR pwszPurpose,
         DWORD dwKeySpec

    );
# 16799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptQueryObject(
         DWORD dwObjectType,
         const void *pvObject,
         DWORD dwExpectedContentTypeFlags,
         DWORD dwExpectedFormatTypeFlags,
         DWORD dwFlags,
              DWORD *pdwMsgAndCertEncodingType,
              DWORD *pdwContentType,
              DWORD *pdwFormatType,
              HCERTSTORE *phCertStore,
              HCRYPTMSG *phMsg,
                                  const void **ppvContext
    );
# 16986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
LPVOID
__stdcall
CryptMemAlloc (
         ULONG cbSize
    );

__declspec(dllimport)
LPVOID
__stdcall
CryptMemRealloc (
             LPVOID pv,
         ULONG cbSize
    );

__declspec(dllimport)
void
__stdcall
CryptMemFree (
             LPVOID pv
    );
# 17018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef HANDLE HCRYPTASYNC, *PHCRYPTASYNC;

typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) (
         LPSTR pszParamOid,
         LPVOID pvParam
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateAsyncHandle (
         DWORD dwFlags,
          PHCRYPTASYNC phAsync
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetAsyncParam (
         HCRYPTASYNC hAsync,
         LPSTR pszParamOid,
             LPVOID pvParam,
               PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetAsyncParam (
         HCRYPTASYNC hAsync,
         LPSTR pszParamOid,
                                  LPVOID* ppvParam,
                                              PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCloseAsyncHandle (
             HCRYPTASYNC hAsync
    );
# 17080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_BLOB_ARRAY {
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;

typedef struct _CRYPT_CREDENTIALS {
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;
# 17100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;

typedef CRYPT_PASSWORD_CREDENTIALSW CRYPT_PASSWORD_CREDENTIALS;
typedef PCRYPT_PASSWORD_CREDENTIALSW PCRYPT_PASSWORD_CREDENTIALS;
# 17129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC) (
             LPCSTR pszObjectOid,
            PCRYPT_BLOB_ARRAY pObject,
                LPVOID pvFreeContext
    );
# 17333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
    DWORD cbSize;
    DWORD dwObjectType;







    DWORD dwError;
    DWORD dwReserved;

    FILETIME ThisUpdateTime;
    FILETIME NextUpdateTime;
    FILETIME PublishTime;
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO, *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
# 17363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO {
    DWORD cbSize;




    DWORD dwExemptSeconds;




    FILETIME ExpireTime;
} CRYPTNET_URL_CACHE_FLUSH_INFO, *PCRYPTNET_URL_CACHE_FLUSH_INFO;
# 17384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO {
    DWORD cbSize;
    WORD wResponseType;
    WORD wResponseFlags;


    FILETIME LastModifiedTime;
    DWORD dwMaxAge;
    LPCWSTR pwszETag;
    DWORD dwProxyId;
} CRYPTNET_URL_CACHE_RESPONSE_INFO, *PCRYPTNET_URL_CACHE_RESPONSE_INFO;
# 17411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_RETRIEVE_AUX_INFO {
    DWORD cbSize;
    FILETIME *pLastSyncTime;


    DWORD dwMaxUrlRetrievalByteCount;





    PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;





    PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;





    PCRYPTNET_URL_CACHE_RESPONSE_INFO *ppResponseInfo;



    LPWSTR pwszCacheFileNamePrefix;





    LPFILETIME pftCacheResync;





    BOOL fProxyCacheRetrieval;
# 17460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
    DWORD dwHttpStatusCode;





    LPWSTR *ppwszErrorResponseHeaders;




    PCRYPT_DATA_BLOB *ppErrorContentBlob;
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;
# 17483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CryptRetrieveObjectByUrlA (
         LPCSTR pszUrl,
             LPCSTR pszObjectOid,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
             LPVOID* ppvObject,
             HCRYPTASYNC hAsyncRetrieve,
             PCRYPT_CREDENTIALS pCredentials,
             LPVOID pvVerify,
                PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );
__declspec(dllimport)

BOOL
__stdcall
CryptRetrieveObjectByUrlW (
         LPCWSTR pszUrl,
             LPCSTR pszObjectOid,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
             LPVOID* ppvObject,
             HCRYPTASYNC hAsyncRetrieve,
             PCRYPT_CREDENTIALS pCredentials,
             LPVOID pvVerify,
                PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );
# 17530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(
         DWORD dwFlags,
                void *pvArg
    );
# 17543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptInstallCancelRetrieval(
               PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,
             const void *pvArg,
         DWORD dwFlags,
               void *pvReserved
);


__declspec(dllimport)
BOOL
__stdcall
CryptUninstallCancelRetrieval(
             DWORD dwFlags,
                   void *pvReserved
        );







__declspec(dllimport)
BOOL
__stdcall
CryptCancelAsyncRetrieval (
             HCRYPTASYNC hAsyncRetrieval
    );
# 17586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC) (
                LPVOID pvCompletion,
         DWORD dwCompletionCode,
         LPCSTR pszUrl,
             LPSTR pszObjectOid,
         LPVOID pvObject
    );

typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
               PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
                LPVOID pvCompletion;
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
# 17606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC) (
             HCRYPTASYNC hAsyncRetrieve
    );
# 17624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_URL_ARRAY {
    DWORD cUrl;
    LPWSTR* rgwszUrl;
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;

typedef struct _CRYPT_URL_INFO {
    DWORD cbSize;


    DWORD dwSyncDeltaTime;




    DWORD cGroup;
    DWORD *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;

__declspec(dllimport)
BOOL
__stdcall
CryptGetObjectUrl (
         LPCSTR pszUrlOid,
         LPVOID pvPara,
         DWORD dwFlags,
                                                          PCRYPT_URL_ARRAY pUrlArray,
            DWORD* pcbUrlArray,
                                                        PCRYPT_URL_INFO pUrlInfo,
                DWORD* pcbUrlInfo,
               LPVOID pvReserved
    );
# 17778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_CRL_CONTEXT_PAIR {
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
# 17801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
    DWORD cbSize;



    int iDeltaCrlIndicator;



    LPFILETIME pftCacheResync;


    LPFILETIME pLastSyncTime;




    LPFILETIME pMaxAgeTime;



    PCERT_REVOCATION_CHAIN_PARA pChainPara;



    PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;

} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
    *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

__declspec(dllimport)

BOOL
__stdcall
CryptGetTimeValidObject (
         LPCSTR pszTimeValidOid,
         LPVOID pvPara,
         PCCERT_CONTEXT pIssuer,
             LPFILETIME pftValidFor,
         DWORD dwFlags,
         DWORD dwTimeout,
                 LPVOID* ppvObject,
             PCRYPT_CREDENTIALS pCredentials,
                PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo
    );
# 17882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptFlushTimeValidObject (
          LPCSTR pszFlushTimeValidOid,
          LPVOID pvPara,
          PCCERT_CONTEXT pIssuer,
          DWORD dwFlags,
                LPVOID pvReserved
     );
# 17975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateSelfSignCertificate(
              HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
              PCERT_NAME_BLOB pSubjectIssuerBlob,
              DWORD dwFlags,
              PCRYPT_KEY_PROV_INFO pKeyProvInfo,
              PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
              PSYSTEMTIME pStartTime,
              PSYSTEMTIME pEndTime,
              PCERT_EXTENSIONS pExtensions
    );
# 18027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyIdentifierProperty(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
                                                  void *pvData,
            DWORD *pcbData
    );
# 18068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyIdentifierProperty(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
             const void *pvData
    );
# 18095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwFlags,
               void *pvReserved,
                void *pvArg,
         DWORD cProp,
                      DWORD *rgdwPropId,
                      void **rgpvData,
                      DWORD *rgcbData
    );
# 18120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptEnumKeyIdentifierProperties(
             const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
                void *pvArg,
               PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
    );
# 18144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptCreateKeyIdentifierFromCSP(
         DWORD dwCertEncodingType,
             LPCSTR pszPubKeyOID,
                                    const PUBLICKEYSTRUC *pPubKeyStruc,
         DWORD cbPubKeyStruc,
         DWORD dwFlags,
               void *pvReserved,
                                                  BYTE *pbHash,
            DWORD *pcbHash
    );
# 19130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef HANDLE HCERTCHAINENGINE;
# 19217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_CHAIN_ENGINE_CONFIG {

    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE* rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;


    HCERTSTORE hExclusiveRoot;
    HCERTSTORE hExclusiveTrustedPeople;



    DWORD dwExclusiveFlags;


} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;
# 19251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertCreateCertificateChainEngine (
         PCERT_CHAIN_ENGINE_CONFIG pConfig,
          HCERTCHAINENGINE* phChainEngine
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainEngine (
             HCERTCHAINENGINE hChainEngine
    );






__declspec(dllimport)
BOOL
__stdcall
CertResyncCertificateChainEngine (
             HCERTCHAINENGINE hChainEngine
    );
# 19297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_TRUST_STATUS {

    DWORD dwErrorStatus;
    DWORD dwInfoStatus;

} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;
# 19406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_REVOCATION_INFO {

    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;



    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;


    PCERT_REVOCATION_CRL_INFO pCrlInfo;

} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;





typedef struct _CERT_TRUST_LIST_INFO {

    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;

} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;





typedef struct _CERT_CHAIN_ELEMENT {

    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;

    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;

    LPCWSTR pwszExtendedErrorInfo;
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
typedef const CERT_CHAIN_ELEMENT* PCCERT_CHAIN_ELEMENT;
# 19462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_SIMPLE_CHAIN {

    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT* rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;







    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;

} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;
typedef const CERT_SIMPLE_CHAIN* PCCERT_SIMPLE_CHAIN;
# 19492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

struct _CERT_CHAIN_CONTEXT {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN* rgpChain;



    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT* rgpLowerQualityChainContext;







    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;


    DWORD dwCreateFlags;


    GUID ChainId;
};
# 19533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_USAGE_MATCH {

    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;

} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;

typedef struct _CTL_USAGE_MATCH {

    DWORD dwType;
    CTL_USAGE Usage;

} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;

typedef struct _CERT_CHAIN_PARA {

    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
# 19583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;
# 19704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertGetCertificateChain (
             HCERTCHAINENGINE hChainEngine,
         PCCERT_CONTEXT pCertContext,
             LPFILETIME pTime,
             HCERTSTORE hAdditionalStore,
         PCERT_CHAIN_PARA pChainPara,
         DWORD dwFlags,
               LPVOID pvReserved,
          PCCERT_CHAIN_CONTEXT* ppChainContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChain (
         PCCERT_CHAIN_CONTEXT pChainContext
    );





__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertDuplicateCertificateChain (
         PCCERT_CHAIN_CONTEXT pChainContext
    );







struct _CERT_REVOCATION_CHAIN_PARA {
    DWORD cbSize;
    HCERTCHAINENGINE hChainEngine;
    HCERTSTORE hAdditionalStore;
    DWORD dwChainFlags;
    DWORD dwUrlRetrievalTimeout;
    LPFILETIME pftCurrentTime;
    LPFILETIME pftCacheResync;



    DWORD cbMaxUrlRetrievalByteCount;
};
# 19779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRL_REVOCATION_INFO {

    PCRL_ENTRY pCrlEntry;
    PCCRL_CONTEXT pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;

} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;
# 19814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertFindChainInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCERT_CHAIN_CONTEXT pPrevChainContext
    );
# 19878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(
         PCCERT_CONTEXT pCert,
                void *pvFindArg
    );

typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
    DWORD cbSize;


    LPCSTR pszUsageIdentifier;


    DWORD dwKeySpec;






    DWORD dwAcquirePrivateKeyFlags;



    DWORD cIssuer;
    CERT_NAME_BLOB *rgIssuer;




    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void *pvFindArg;
# 19930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA,
    CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
# 19969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwFlags;
    void *pvExtraPolicyPara;
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;






typedef struct _CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void *pvExtraPolicyStatus;
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;
# 20048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertVerifyCertificateChainPolicy(
         LPCSTR pszPolicyOID,
         PCCERT_CHAIN_CONTEXT pChainContext,
         PCERT_CHAIN_POLICY_PARA pPolicyPara,
            PCERT_CHAIN_POLICY_STATUS pPolicyStatus
    );
# 20101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    BOOL fCommercial;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
# 20126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    BOOL fCommercial;
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
# 20144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _HTTPSPolicyCallbackData
{
    union {
        DWORD cbStruct;
        DWORD cbSize;
    } ;

    DWORD dwAuthType;



    DWORD fdwChecks;

    WCHAR *pwszServerName;

} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
    SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
# 20265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRootProgramQualifierFlags;
} EV_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PEV_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwQualifiers;
    DWORD dwIssuanceUsageIndex;
} EV_EXTRA_CERT_CHAIN_POLICY_STATUS, *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;
# 20297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwErrorLevel;
    DWORD dwErrorCategory;
    DWORD dwReserved;
    WCHAR wszErrorText[256];
} SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS, *PSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS;
# 20370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwReserved;
    LPWSTR pwszServerName;


    LPSTR rgpszHpkpValue[2];
} SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA;
# 20429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwReserved;
    PCWSTR pwszServerName;
} SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA;


typedef struct _SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    LONG lError;
    WCHAR wszErrorText[512];
} SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS, *PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS;
# 20462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryA(
                          LPCSTR pszString,
         DWORD cchString,
         DWORD dwFlags,
                                                      BYTE *pbBinary,
            DWORD *pcbBinary,
              DWORD *pdwSkip,
              DWORD *pdwFlags
    );
# 20484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryW(
                          LPCWSTR pszString,
         DWORD cchString,
         DWORD dwFlags,
                                                      BYTE *pbBinary,
            DWORD *pcbBinary,
              DWORD *pdwSkip,
              DWORD *pdwFlags
    );
# 20509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringA(
                               const BYTE *pbBinary,
         DWORD cbBinary,
         DWORD dwFlags,
                                                  LPSTR pszString,
            DWORD *pcchString
    );







__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringW(
                               const BYTE *pbBinary,
         DWORD cbBinary,
         DWORD dwFlags,
                                                  LPWSTR pszString,
            DWORD *pcchString
    );
# 20625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_PKCS12_PBE_PARAMS
{
    int iIterations;
    ULONG cbSalt;
}
CRYPT_PKCS12_PBE_PARAMS;
# 20680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
HCERTSTORE
__stdcall
PFXImportCertStore(
         CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
# 20722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
PFXIsPFXBlob(
         CRYPT_DATA_BLOB* pPFX);
# 20738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
PFXVerifyPassword(
         CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
# 20804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStoreEx(
         HCERTSTORE hStore,
            CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         void* pvPara,
         DWORD dwFlags);
# 20846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStore(
         HCERTSTORE hStore,
            CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
# 20874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void *HCERT_SERVER_OCSP_RESPONSE;




typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
    CERT_SERVER_OCSP_RESPONSE_CONTEXT,
    *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT
    *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;

struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT {
    DWORD cbSize;
    BYTE *pbEncodedOcspResponse;
    DWORD cbEncodedOcspResponse;
};







typedef void (__stdcall *PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK)(
         PCCERT_CHAIN_CONTEXT pChainContext,
         PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext,
         PCCRL_CONTEXT pNewCrlContext,
             PCCRL_CONTEXT pPrevCrlContext,
                PVOID pvArg,
         DWORD dwWriteOcspFileError
    );





typedef struct _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA {
    DWORD cbSize;
    DWORD dwFlags;




    DWORD *pcbUsedSize;
# 20927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
    PWSTR pwszOcspDirectory;



    PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK pfnUpdateCallback;
    PVOID pvUpdateCallbackArg;
} CERT_SERVER_OCSP_RESPONSE_OPEN_PARA, *PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA;
# 20965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
HCERT_SERVER_OCSP_RESPONSE
__stdcall
CertOpenServerOcspResponse(
         PCCERT_CHAIN_CONTEXT pChainContext,
         DWORD dwFlags,
             PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA pOpenPara
    );
# 20983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
void
__stdcall
CertAddRefServerOcspResponse(
             HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
    );







__declspec(dllimport)
void
__stdcall
CertCloseServerOcspResponse(
             HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
         DWORD dwFlags
    );
# 21017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
__stdcall
CertGetServerOcspResponseContext(
         HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
         DWORD dwFlags,
               LPVOID pvReserved
    );






__declspec(dllimport)
void
__stdcall
CertAddRefServerOcspResponseContext(
             PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeServerOcspResponseContext(
             PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
    );
# 21099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertRetrieveLogoOrBiometricInfo(
         PCCERT_CONTEXT pCertContext,
         LPCSTR lpszLogoOrBiometricType,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
         DWORD dwFlags,
               void *pvReserved,
                                         BYTE **ppbData,
          DWORD *pcbData,
                                  LPWSTR *ppwszMimeType
    );
# 21141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CERT_SELECT_CHAIN_PARA
{
    HCERTCHAINENGINE hChainEngine;
    PFILETIME pTime;
    HCERTSTORE hAdditionalStore;
    PCERT_CHAIN_PARA pChainPara;
    DWORD dwFlags;
}
CERT_SELECT_CHAIN_PARA, *PCERT_SELECT_CHAIN_PARA;
typedef const CERT_SELECT_CHAIN_PARA* PCCERT_SELECT_CHAIN_PARA;



typedef struct _CERT_SELECT_CRITERIA
{
    DWORD dwType;
    DWORD cPara;
                        void** ppPara;
}
CERT_SELECT_CRITERIA, *PCERT_SELECT_CRITERIA;
typedef const CERT_SELECT_CRITERIA* PCCERT_SELECT_CRITERIA;
# 21203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)

BOOL
__stdcall
CertSelectCertificateChains(
             LPCGUID pSelectionContext,
         DWORD dwFlags,
             PCCERT_SELECT_CHAIN_PARA pChainParameters,
         DWORD cCriteria,
                              PCCERT_SELECT_CRITERIA rgpCriteria,
         HCERTSTORE hStore,
          PDWORD pcSelection,
                                         PCCERT_CHAIN_CONTEXT** pprgpSelection
    );






__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainList(
         PCCERT_CHAIN_CONTEXT* prgpSelection
    );
# 21244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_TIMESTAMP_REQUEST
{
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_DER_BLOB HashedMessage;
    LPSTR pszTSAPolicyId;
    CRYPT_INTEGER_BLOB Nonce;
    BOOL fCertReq;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_REQUEST, *PCRYPT_TIMESTAMP_REQUEST;





typedef struct _CRYPT_TIMESTAMP_RESPONSE
{
    DWORD dwStatus;
    DWORD cFreeText;

    LPWSTR* rgFreeText;
    CRYPT_BIT_BLOB FailureInfo;
    CRYPT_DER_BLOB ContentInfo;
} CRYPT_TIMESTAMP_RESPONSE, *PCRYPT_TIMESTAMP_RESPONSE;
# 21291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_TIMESTAMP_ACCURACY
{
    DWORD dwSeconds;
    DWORD dwMillis;
    DWORD dwMicros;
} CRYPT_TIMESTAMP_ACCURACY, *PCRYPT_TIMESTAMP_ACCURACY;





typedef struct _CRYPT_TIMESTAMP_INFO
{
    DWORD dwVersion;
    LPSTR pszTSAPolicyId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_DER_BLOB HashedMessage;
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME ftTime;
    PCRYPT_TIMESTAMP_ACCURACY pvAccuracy;
    BOOL fOrdering;
    CRYPT_DER_BLOB Nonce;
    CRYPT_DER_BLOB Tsa;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_INFO, *PCRYPT_TIMESTAMP_INFO;





typedef struct _CRYPT_TIMESTAMP_CONTEXT
{
    DWORD cbEncoded;

    BYTE *pbEncoded;
    PCRYPT_TIMESTAMP_INFO pTimeStamp;
} CRYPT_TIMESTAMP_CONTEXT, *PCRYPT_TIMESTAMP_CONTEXT;
# 21350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef struct _CRYPT_TIMESTAMP_PARA
{
    LPCSTR pszTSAPolicyId;
    BOOL fRequestCerts;
    CRYPT_INTEGER_BLOB Nonce;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_PARA, *PCRYPT_TIMESTAMP_PARA;
# 21404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
BOOL
__stdcall
CryptRetrieveTimeStamp(
                                LPCWSTR wszUrl,
                                DWORD dwRetrievalFlags,
                                DWORD dwTimeout,
                                LPCSTR pszHashId,
                                const CRYPT_TIMESTAMP_PARA *pPara,

                                const BYTE *pbData,
                                DWORD cbData,
                             PCRYPT_TIMESTAMP_CONTEXT *ppTsContext,
                                          PCCERT_CONTEXT *ppTsSigner,
                                HCERTSTORE *phStore
    );
# 21468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
BOOL
__stdcall
CryptVerifyTimeStampSignature (

                                const BYTE *pbTSContentInfo,
                                DWORD cbTSContentInfo,

                                const BYTE *pbData,
                                DWORD cbData,
                                HCERTSTORE hAdditionalStore,
                             PCRYPT_TIMESTAMP_CONTEXT *ppTsContext,
                                          PCCERT_CONTEXT *ppTsSigner,
                                HCERTSTORE *phStore
    );
# 21543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH)(
         LPVOID pContext,
                                            PCERT_NAME_BLOB *rgIdentifierOrNameList,
         DWORD dwIdentifierOrNameListCount);
# 21578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET)(
             LPVOID pPluginContext,
             PCRYPT_DATA_BLOB pIdentifier,
         DWORD dwNameType,
         PCERT_NAME_BLOB pNameBlob,
                                            PBYTE *ppbContent,
          DWORD *pcbContent,
                              PCWSTR *ppwszPassword,
                              PCRYPT_DATA_BLOB *ppIdentifier);
# 21604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void (__stdcall * PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE)(
         DWORD dwReason,
             LPVOID pPluginContext);
# 21621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD)(
             LPVOID pPluginContext,
         PCWSTR pwszPassword
);
# 21638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE)(
             LPVOID pPluginContext,
          PBYTE pbData
);
# 21659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER)(
             LPVOID pPluginContext,
         PCRYPT_DATA_BLOB pIdentifier);


typedef struct _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
{
                                                                                                            DWORD cbSize;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET pfnGet;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE pfnRelease;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD pfnFreePassword;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE pfnFree;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER pfnFreeIdentifier;
} CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE, *PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;
# 21702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE)(
         PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pfnFlush,
         LPVOID pContext,
          DWORD *pdwExpectedObjectCount,
             PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE *ppFuncTable,
                              void **ppPluginContext);
# 21730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
__declspec(dllimport)
BOOL
__stdcall
CertIsWeakHash(
         DWORD dwHashUseType,
         LPCWSTR pwszCNGHashAlgid,
         DWORD dwChainFlags,
             PCCERT_CHAIN_CONTEXT pSignerChainContext,
             LPFILETIME pTimeStamp,
             LPCWSTR pwszFileName
    );

typedef __declspec(dllimport) BOOL (__stdcall *PFN_CERT_IS_WEAK_HASH)(
         DWORD dwHashUseType,
         LPCWSTR pwszCNGHashAlgid,
         DWORD dwChainFlags,
             PCCERT_CHAIN_CONTEXT pSignerChainContext,
             LPFILETIME pTimeStamp,
             LPCWSTR pwszFileName
    );
# 21768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
}





#pragma warning(pop)
# 21792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dpapi.h" 1 3
# 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dpapi.h" 3
extern "C" {
# 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dpapi.h" 3
typedef struct _CRYPTPROTECT_PROMPTSTRUCT
{
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND hwndApp;
    LPCWSTR szPrompt;
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;
# 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dpapi.h" 3
BOOL
__stdcall
CryptProtectData(
                    DATA_BLOB* pDataIn,
                    LPCWSTR szDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,
                    DATA_BLOB* pDataOut
    );


BOOL
__stdcall
CryptUnprotectData(
                    DATA_BLOB* pDataIn,
                                  LPWSTR* ppszDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,
                    DATA_BLOB* pDataOut
    );
# 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dpapi.h" 3
BOOL
__stdcall
CryptProtectDataNoUI(
                    DATA_BLOB* pDataIn,
                    LPCWSTR szDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,

                    const BYTE *pbOptionalPassword,
                    DWORD cbOptionalPassword,
                    DATA_BLOB* pDataOut
    );

BOOL
__stdcall
CryptUnprotectDataNoUI(
                    DATA_BLOB* pDataIn,
                                  LPWSTR* ppszDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,

                    const BYTE *pbOptionalPassword,
                    DWORD cbOptionalPassword,
                    DATA_BLOB* pDataOut
    );
# 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dpapi.h" 3
BOOL
__stdcall
CryptUpdateProtectedState(
                    PSID pOldSid,
                    LPCWSTR pwszOldPassword,
                    DWORD dwFlags,
                    DWORD *pdwSuccessCount,
                    DWORD *pdwFailureCount);
# 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\dpapi.h" 3
BOOL
__stdcall
CryptProtectMemory(
                    LPVOID pDataIn,
                    DWORD cbDataIn,
                    DWORD dwFlags
    );


BOOL
__stdcall
CryptUnprotectMemory(
                    LPVOID pDataIn,
                    DWORD cbDataIn,
                    DWORD dwFlags
    );





}
# 21792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\wincrypt.h" 2 3
# 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 1 3
# 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)



extern "C" {
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
typedef struct _CERTIFICATE_BLOB {

    DWORD dwCertEncodingType;





    DWORD cbData;




    PBYTE pbData;

} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;





typedef struct _EFS_HASH_BLOB {




    DWORD cbData;




    PBYTE pbData;

} EFS_HASH_BLOB, *PEFS_HASH_BLOB;
# 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
typedef struct _EFS_RPC_BLOB {




    DWORD cbData;




    PBYTE pbData;

} EFS_RPC_BLOB, *PEFS_RPC_BLOB;






typedef struct _EFS_PIN_BLOB {




    DWORD cbPadding;




    DWORD cbData;




    PBYTE pbData;

} EFS_PIN_BLOB, *PEFS_PIN_BLOB;







typedef struct _EFS_KEY_INFO {

    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;

} EFS_KEY_INFO, *PEFS_KEY_INFO;






typedef struct _EFS_COMPATIBILITY_INFO {

    DWORD EfsVersion;

} EFS_COMPATIBILITY_INFO, *PEFS_COMPATIBILITY_INFO;
# 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
typedef struct _EFS_VERSION_INFO {
    DWORD EfsVersion;
    DWORD SubVersion;
} EFS_VERSION_INFO, *PEFS_VERSION_INFO;
# 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
typedef struct _EFS_DECRYPTION_STATUS_INFO {

    DWORD dwDecryptionError;
    DWORD dwHashOffset;
    DWORD cbHash;

} EFS_DECRYPTION_STATUS_INFO, *PEFS_DECRYPTION_STATUS_INFO;

typedef struct _EFS_ENCRYPTION_STATUS_INFO {

    BOOL bHasCurrentKey;
    DWORD dwEncryptionError;

} EFS_ENCRYPTION_STATUS_INFO, *PEFS_ENCRYPTION_STATUS_INFO;







typedef struct _ENCRYPTION_CERTIFICATE {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;




typedef struct _ENCRYPTION_CERTIFICATE_HASH {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_HASH_BLOB pHash;




    LPWSTR lpDisplayInformation;

} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;

typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {



    DWORD nCert_Hash;



     PENCRYPTION_CERTIFICATE_HASH * pUsers;
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;



typedef struct _ENCRYPTION_CERTIFICATE_LIST {



    DWORD nUsers;



     PENCRYPTION_CERTIFICATE * pUsers;
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;
# 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE {

 DWORD dwEfsAccessType;
 PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded;
    PENCRYPTION_CERTIFICATE pEncryptionCertificate;
    PEFS_RPC_BLOB pEfsStreamSignature;

} ENCRYPTED_FILE_METADATA_SIGNATURE, *PENCRYPTED_FILE_METADATA_SIGNATURE;





typedef struct _ENCRYPTION_PROTECTOR{
    DWORD cbTotalLength;
    SID * pUserSid;



    LPWSTR lpProtectorDescriptor;
} ENCRYPTION_PROTECTOR, *PENCRYPTION_PROTECTOR;

typedef struct _ENCRYPTION_PROTECTOR_LIST {
    DWORD nProtectors;



    PENCRYPTION_PROTECTOR *pProtectors;
} ENCRYPTION_PROTECTOR_LIST, *PENCRYPTION_PROTECTOR_LIST;
# 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
__declspec(dllimport)
DWORD
__stdcall
QueryUsersOnEncryptedFile(
                    LPCWSTR lpFileName,
                 PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers
    );


__declspec(dllimport)
DWORD
__stdcall
QueryRecoveryAgentsOnEncryptedFile(
                    LPCWSTR lpFileName,
                 PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents
    );


__declspec(dllimport)
DWORD
__stdcall
RemoveUsersFromEncryptedFile(
            LPCWSTR lpFileName,
            PENCRYPTION_CERTIFICATE_HASH_LIST pHashes
    );

__declspec(dllimport)
DWORD
__stdcall
AddUsersToEncryptedFile(
            LPCWSTR lpFileName,
            PENCRYPTION_CERTIFICATE_LIST pEncryptionCertificates
    );







__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKey(
                PENCRYPTION_CERTIFICATE pEncryptionCertificate
    );
# 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKeyEx(
                    PENCRYPTION_CERTIFICATE pEncryptionCertificate,
                    DWORD dwCapabilities,
                    DWORD dwFlags,
                    LPVOID pvReserved
    );



__declspec(dllimport)
void
__stdcall
FreeEncryptionCertificateHashList(
            PENCRYPTION_CERTIFICATE_HASH_LIST pUsers
    );

__declspec(dllimport)
BOOL
__stdcall
EncryptionDisable(
         LPCWSTR DirPath,
         BOOL Disable
    );







__declspec(dllimport)
DWORD
__stdcall
DuplicateEncryptionInfoFile(
                LPCWSTR SrcFileName,
                LPCWSTR DstFileName,
                DWORD dwCreationDistribution,
                DWORD dwAttributes,
                const LPSECURITY_ATTRIBUTES lpSecurityAttributes
     );
# 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
__declspec(deprecated)
__declspec(dllimport)
DWORD
__stdcall
GetEncryptedFileMetadata(
                                        LPCWSTR lpFileName,
                                        PDWORD pcbMetadata,
                                                PBYTE *ppbMetadata
    );

__declspec(deprecated)
__declspec(dllimport)
DWORD
__stdcall
SetEncryptedFileMetadata(
                LPCWSTR lpFileName,
                PBYTE pbOldMetadata,
                PBYTE pbNewMetadata,
                PENCRYPTION_CERTIFICATE_HASH pOwnerHash,
                DWORD dwOperation,
                PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded
    );

__declspec(deprecated)
__declspec(dllimport)
void
__stdcall
FreeEncryptedFileMetadata(
            PBYTE pbMetadata
    );
# 485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winefs.h" 3
}



#pragma warning(pop)
# 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 1 3
# 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 1 3
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 1 3
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)
#pragma warning(disable: 4255)
#pragma warning(disable: 4668)
#pragma warning(disable: 4820)
# 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\rpcnsip.h" 1 3
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\rpcnsip.h" 3
extern "C" {





typedef struct
{
   RPC_NS_HANDLE LookupContext;
   RPC_BINDING_HANDLE ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsGetBuffer(
       PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsSendReceive(
       PRPC_MESSAGE Message,
        RPC_BINDING_HANDLE * Handle
    );

__declspec(dllimport)

void
__stdcall
I_RpcNsRaiseException(
       PRPC_MESSAGE Message,
       RPC_STATUS Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReBindBuffer(
       PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsServerBindSearch(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsClientBindSearch(
    void
    );

__declspec(dllimport)
void
__stdcall
I_NsClientBindDone(
    void
    );





}
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcsal.h" 1 3
# 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcsal.h" 3
extern "C" {
# 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\rpcsal.h" 3
}
# 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 2 3



extern "C" {
# 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;
# 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
void * __stdcall MIDL_user_allocate( size_t size);
void __stdcall MIDL_user_free( void * );



void * __stdcall I_RpcDefaultAllocate(
         handle_t bh, size_t size, void * (* RealAlloc)(size_t) );

void __stdcall I_RpcDefaultFree(
         handle_t bh, void *, void (*RealFree)(void *) );
# 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
typedef void * NDR_CCONTEXT;

typedef struct
    {
    void * pad[2];
    void * userContext;
    } * NDR_SCONTEXT;





typedef void (__stdcall * NDR_RUNDOWN)(void * context);

typedef void (__stdcall * NDR_NOTIFY_ROUTINE)(void);

typedef void (__stdcall * NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE {
    unsigned long NumberOfObjects;
    NDR_SCONTEXT * ArrayOfObjects;
    } SCONTEXT_QUEUE, * PSCONTEXT_QUEUE;

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
         NDR_CCONTEXT CContext
    );

__declspec(dllimport)
void
__stdcall
NDRCContextMarshall (
              NDR_CCONTEXT CContext,
          void *pBuff
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall (
                NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall2 (
                NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall (
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall2 (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn,
              void * CtxGuard,
         unsigned long Flags
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall2(
          RPC_BINDING_HANDLE BindingHandle,
              void * pBuff,
          unsigned long DataRepresentation,
              void * CtxGuard,
         unsigned long Flags
    );

__declspec(dllimport)
void
__stdcall
RpcSsDestroyClientContext (
         void * * ContextHandle
    );
# 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
typedef unsigned long error_status_t;
# 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char * RPC_BUFPTR;
typedef unsigned long RPC_LENGTH;


typedef void (__stdcall * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE * );

typedef const unsigned char * PFORMAT_STRING;




typedef struct
    {
    long Dimension;


    unsigned long * BufferConformanceMark;
    unsigned long * BufferVarianceMark;


    unsigned long * MaxCountArray;
    unsigned long * OffsetArray;
    unsigned long * ActualCountArray;
    } ARRAY_INFO, *PARRAY_INFO;


typedef struct _NDR_ASYNC_MESSAGE * PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;





typedef const unsigned char * PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
    {

    PRPC_MESSAGE RpcMsg;


    unsigned char * Buffer;





    unsigned char * BufferStart;
    unsigned char * BufferEnd;
# 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
    unsigned char * BufferMark;


    unsigned long BufferLength;


    unsigned long MemorySize;


    unsigned char * Memory;


    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;


    int ReuseBuffer;


    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;






    int IgnoreEmbeddedPointers;





    unsigned char * PointerBufferMark;




    unsigned char CorrDespIncrement;

    unsigned char uFlags;
    unsigned short UniquePtrCount;





    ULONG_PTR MaxCount;





    unsigned long Offset;





    unsigned long ActualCount;


    void * ( __stdcall * pfnAllocate)( size_t );
    void ( __stdcall * pfnFree)(void *);







    unsigned char * StackTop;





    unsigned char * pPresentedType;
    unsigned char * pTransmitType;
# 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
    handle_t SavedHandle;




    const struct _MIDL_STUB_DESC * StubDesc;




    struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;
    unsigned long FullPtrRefId;

    unsigned long PointerLength;

    int fInDontFree :1;
    int fDontCallFreeInst :1;
    int fUnused1 :1;
    int fHasReturn :1;
    int fHasExtensions :1;
    int fHasNewCorrDesc :1;
    int fIsIn :1;
    int fIsOut :1;
    int fIsOicf :1;
    int fBufferValid :1;
    int fHasMemoryValidateCallback: 1;
    int fInFree :1;
    int fNeedMCCP :1;
    int fUnused2 :3;
    int fUnused3 :16;


    unsigned long dwDestContext;
    void * pvDestContext;

    NDR_SCONTEXT * SavedContextHandles;

    long ParamNumber;

    struct IRpcChannelBuffer * pRpcChannelBuffer;

    PARRAY_INFO pArrayInfo;
    unsigned long * SizePtrCountArray;
    unsigned long * SizePtrOffsetArray;
    unsigned long * SizePtrLengthArray;




    void * pArgQueue;

    unsigned long dwStubPhase;

    void * LowStackMark;




    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char * pCorrMemory;

    void * pMemoryList;
# 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
    INT_PTR pCSInfo;

    unsigned char * ConformanceMark;
    unsigned char * VarianceMark;

    INT_PTR Unused;

    struct _NDR_PROC_CONTEXT * pContext;
# 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
    void * ContextHandleHash;
    void * pUserMarshalList;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;





    } MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;


typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;




typedef void *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void *, unsigned char *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void * pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
# 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long *,
     unsigned long,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char * ,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char *,
     void * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long *,
     void * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;



typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
} USER_MARSHAL_CB;
# 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
typedef struct _MALLOC_FREE_STRUCT
    {
    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short CommOffset;
    short FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulLocalBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulNetworkBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulNetworkBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulLocalBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     void * pLocalData,
     unsigned long ulLocalDataLength,
     byte * pNetworkData,
     unsigned long * pulNetworkDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     byte * pNetworkData,
     unsigned long ulNetworkDataLength,
     unsigned long ulLocalBufferSize,
     void * pLocalData,
     unsigned long * pulLocalDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

void __stdcall
RpcCsGetTags(
     RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
    } NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
    {
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
    } NDR_CS_ROUTINES;

typedef struct _NDR_EXPR_DESC
{
    const unsigned short * pOffset;
    PFORMAT_STRING pFormatExpr;
} NDR_EXPR_DESC;




typedef struct _MIDL_STUB_DESC
    {
    void * RpcInterfaceInformation;

    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);

    union
        {
        handle_t * pAutoHandle;
        handle_t * pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN * apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR * aGenericBindingRoutinePairs;
    const EXPR_EVAL * apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE * aXmitQuintuple;

    const unsigned char * pFormatTypes;

    int fCheckBounds;


    unsigned long Version;

    MALLOC_FREE_STRUCT * pMallocFreeStruct;

    long MIDLVersion;

    const COMM_FAULT_OFFSETS * CommFaultOffsets;


    const USER_MARSHAL_ROUTINE_QUADRUPLE * aUserMarshalQuadruple;


    const NDR_NOTIFY_ROUTINE * NotifyRoutineTable;





    ULONG_PTR mFlags;


    const NDR_CS_ROUTINES * CsRoutineTables;

    void * ProxyServerInfo;
    const NDR_EXPR_DESC * pExprInfo;



    } MIDL_STUB_DESC;


typedef const MIDL_STUB_DESC * PMIDL_STUB_DESC;

typedef void * PMIDL_XMIT_TYPE;







#pragma warning(push)

#pragma warning(disable: 4200)

typedef struct _MIDL_FORMAT_STRING
    {
    short Pad;
    unsigned char Format[];
    } MIDL_FORMAT_STRING;


#pragma warning(pop)
# 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );


typedef long ( __stdcall * SERVER_ROUTINE)();







typedef struct _MIDL_METHOD_PROPERTY
{
    unsigned long Id;
    ULONG_PTR Value;
} MIDL_METHOD_PROPERTY, *PMIDL_METHOD_PROPERTY;

typedef struct _MIDL_METHOD_PROPERTY_MAP
{
    unsigned long Count;
    const MIDL_METHOD_PROPERTY *Properties;
} MIDL_METHOD_PROPERTY_MAP, *PMIDL_METHOD_PROPERTY_MAP;

typedef struct _MIDL_INTERFACE_METHOD_PROPERTIES
{
    unsigned short MethodCount;
    const MIDL_METHOD_PROPERTY_MAP* const *MethodProperties;
} MIDL_INTERFACE_METHOD_PROPERTIES;




typedef struct _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE * DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short * FmtStringOffset;
    const STUB_THUNK * ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;






typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short * FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO * PMIDL_STUBLESS_PROXY_INFO;




typedef struct _MIDL_SYNTAX_INFO
{
RPC_SYNTAX_IDENTIFIER TransferSyntax;
RPC_DISPATCH_TABLE * DispatchTable;
PFORMAT_STRING ProcString;
const unsigned short * FmtStringOffset;
PFORMAT_STRING TypeString;
const void * aUserMarshalQuadruple;
const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties;
ULONG_PTR pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;





typedef union _CLIENT_CALL_RETURN
    {
    void * Pointer;
    LONG_PTR Simple;
    } CLIENT_CALL_RETURN;


typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;

typedef struct _FULL_PTR_XLAT_TABLES
{
    void * RefIdToPointer;
    void * PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;





typedef enum _system_handle_t
{
    SYSTEM_HANDLE_FILE = 0,
    SYSTEM_HANDLE_SEMAPHORE = 1,
    SYSTEM_HANDLE_EVENT = 2,
    SYSTEM_HANDLE_MUTEX = 3,
    SYSTEM_HANDLE_PROCESS = 4,
    SYSTEM_HANDLE_TOKEN = 5,
    SYSTEM_HANDLE_SECTION = 6,
    SYSTEM_HANDLE_REG_KEY = 7,
    SYSTEM_HANDLE_THREAD = 8,
    SYSTEM_HANDLE_COMPOSITION_OBJECT = 9,
    SYSTEM_HANDLE_SOCKET = 10,
    SYSTEM_HANDLE_JOB = 11,
    SYSTEM_HANDLE_PIPE = 12,
    SYSTEM_HANDLE_MAX = 12,
    SYSTEM_HANDLE_INVALID = 0xFF,
} system_handle_t;





enum {
    MidlInterceptionInfoVersionOne = 1
};

enum {
    MidlWinrtTypeSerializationInfoVersionOne = 1
};



typedef struct _MIDL_INTERCEPTION_INFO
{
    unsigned long Version;
    PFORMAT_STRING ProcString;
    const unsigned short *ProcFormatOffsetTable;
    unsigned long ProcCount;
    PFORMAT_STRING TypeString;
} MIDL_INTERCEPTION_INFO, *PMIDL_INTERCEPTION_INFO;

typedef struct _MIDL_WINRT_TYPE_SERIALIZATION_INFO
{
    unsigned long Version;
    PFORMAT_STRING TypeFormatString;
    unsigned short FormatStringSize;
    unsigned short TypeOffset;
    PMIDL_STUB_DESC StubDesc;
} MIDL_WINRT_TYPE_SERIALIZATION_INFO, *PMIDL_WINRT_TYPE_SERIALIZATION_INFO;





RPC_STATUS __stdcall
NdrClientGetSupportedSyntaxes(
         RPC_CLIENT_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr );


RPC_STATUS __stdcall
NdrServerGetSupportedSyntaxes(
         RPC_SERVER_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr,
          unsigned long * pPreferSyntaxIndex);




#pragma warning(push)

#pragma warning(disable: 28740)

__declspec(dllimport)
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsTagMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT ContextHandle,
    int fCheck
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextNewMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsTagUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrRangeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory,
    unsigned long CacheSize,
    unsigned long flags
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationPass(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationFree(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT * pContextHandle,
    RPC_BINDING_HANDLE BindHandle
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg
    );



__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrContextHandleInitialize(
          PMIDL_STUB_MESSAGE pStubMsg,
                                   PFORMAT_STRING pFormat
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextNewUnmarshall(
          PMIDL_STUB_MESSAGE pStubMsg,
                                   PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsTagBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrContextHandleMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




__declspec(dllimport)
unsigned long
__stdcall
NdrCsArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrCsTagMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    long NumberParams
    );

__declspec(dllimport)
void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );
# 2418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long * pFlags,
    unsigned char * pBuffer,
    unsigned char FormatChar
    );





__declspec(dllimport)
void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned long RequestedBufferSize
    );

__declspec(dllimport)
void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd,
    RPC_BINDING_HANDLE * pAutoHandle
    );

__declspec(dllimport)
void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE pStubMsg,
    RPC_VERSION * pVersion );

#pragma warning(pop)







CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );



CLIENT_CALL_RETURN __cdecl
NdrClientCall4(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrMesProcEncodeDecode4(
    handle_t Handle,
    const MIDL_STUB_DESC * pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );
# 2606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );



CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );
# 2631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;



__declspec(dllimport)
void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );


__declspec(dllimport)
long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );
# 2675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
__declspec(dllimport)
long
__stdcall
NdrDcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );







__declspec(dllimport)
long
__stdcall
NdrStubCall2(
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
int
__stdcall
NdrServerUnmarshall(
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    void * pParamList
    );

__declspec(dllimport)
void
__stdcall
NdrServerMarshall(
    void * pThis,
    void * pChannel,
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long * pCommStatus,
    unsigned long * pFaultStatus,
    RPC_STATUS Status
    );







typedef void * RPC_SS_THREAD_HANDLE;

typedef void * __stdcall
RPC_CLIENT_ALLOC (
         size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
         void * Ptr
    );





__declspec(dllimport)
void *
__stdcall
RpcSsAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
RpcSsDisableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsEnableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsFree (
         void * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
void
__stdcall
RpcSsSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );





__declspec(dllimport)
void *
__stdcall
RpcSmAllocate (
          size_t Size,
          RPC_STATUS * pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmClientFree (
          void * pNodeToFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
         void * * ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmFree (
         void * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
          RPC_STATUS * pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );





__declspec(dllimport)
void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void *
__stdcall
NdrRpcSmClientAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSmClientFree (
         void * NodeToFree
    );

__declspec(dllimport)
void *
__stdcall
NdrRpcSsDefaultAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDefaultFree (
         void * NodeToFree
    );
# 2978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
__declspec(dllimport)
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long NumberOfPointers,
    XLAT_SIDE XlatSide
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES pXlatTables
    );


__declspec(dllimport)
void *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE pStubMsg,
    size_t Len
    );

__declspec(dllimport)
void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    void * ArgAddr
    );






__declspec(dllimport)
void *
__stdcall
NdrOleAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrOleFree (
         void * NodeToFree
    );
# 3077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void * Buffer;
    unsigned long BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
    void (__stdcall * pfnFree)(void *);
    struct IRpcChannelBuffer * pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;



#pragma warning(push)

#pragma warning(disable: 4201)


typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } ;
} NDR_USER_MARSHAL_INFO;



#pragma warning(pop)






RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
         unsigned long * pFlags,
         unsigned long InformationLevel,
          NDR_USER_MARSHAL_INFO * pMarshalInfo
    );




RPC_STATUS __stdcall
NdrCreateServerInterfaceFromStub(
                 struct IRpcStubBuffer* pStub,
                    RPC_SERVER_INTERFACE *pServerIf );




CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );







CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );







struct IRpcStubBuffer;

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall64(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
Ndr64AsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );
# 3206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 3
__declspec(dllimport)
long
__stdcall
Ndr64DcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );







__declspec(dllimport)
long
__stdcall
NdrStubCall3 (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallNdr64(
    PRPC_MESSAGE pRpcMsg
    );


__declspec(dllimport)
void
__stdcall
NdrServerCall3(
    PRPC_MESSAGE pRpcMsg
    );



__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory,
    PFORMAT_STRING pFormat
    );


void __stdcall
RpcUserFree( handle_t AsyncHandle, void * pBuffer );





}



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 3300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/rpcndr.h" 2 3





#pragma warning(pop)
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 2 3
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 1 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/guiddef.h" 1 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 2 3



extern "C"{
# 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)



extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec;
# 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
typedef WCHAR OLECHAR;

typedef OLECHAR *LPOLESTR;

typedef const OLECHAR *LPCOLESTR;
# 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;
# 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
typedef struct _COAUTHIDENTITY
    {
                    USHORT *User;
                  ULONG UserLength;
                    USHORT *Domain;
                  ULONG DomainLength;
                    USHORT *Password;
                  ULONG PasswordLength;
    ULONG Flags;
    } COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } COAUTHINFO;

typedef LONG SCODE;

typedef SCODE *PSCODE;
# 316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
typedef
enum tagMEMCTX
    {
        MEMCTX_TASK = 1,
        MEMCTX_SHARED = 2,
        MEMCTX_MACSYSTEM = 3,
        MEMCTX_UNKNOWN = -1,
        MEMCTX_SAME = -2
    } MEMCTX;
# 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
typedef
enum tagCLSCTX
    {
        CLSCTX_INPROC_SERVER = 0x1,
        CLSCTX_INPROC_HANDLER = 0x2,
        CLSCTX_LOCAL_SERVER = 0x4,
        CLSCTX_INPROC_SERVER16 = 0x8,
        CLSCTX_REMOTE_SERVER = 0x10,
        CLSCTX_INPROC_HANDLER16 = 0x20,
        CLSCTX_RESERVED1 = 0x40,
        CLSCTX_RESERVED2 = 0x80,
        CLSCTX_RESERVED3 = 0x100,
        CLSCTX_RESERVED4 = 0x200,
        CLSCTX_NO_CODE_DOWNLOAD = 0x400,
        CLSCTX_RESERVED5 = 0x800,
        CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
        CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
        CLSCTX_NO_FAILURE_LOG = 0x4000,
        CLSCTX_DISABLE_AAA = 0x8000,
        CLSCTX_ENABLE_AAA = 0x10000,
        CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
        CLSCTX_ACTIVATE_X86_SERVER = 0x40000,
        CLSCTX_ACTIVATE_32_BIT_SERVER = CLSCTX_ACTIVATE_X86_SERVER,
        CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
        CLSCTX_ENABLE_CLOAKING = 0x100000,
        CLSCTX_APPCONTAINER = 0x400000,
        CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
        CLSCTX_RESERVED6 = 0x1000000,
        CLSCTX_ACTIVATE_ARM32_SERVER = 0x2000000,
        CLSCTX_PS_DLL = 0x80000000
    } CLSCTX;
# 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
typedef
enum tagMSHLFLAGS
    {
        MSHLFLAGS_NORMAL = 0,
        MSHLFLAGS_TABLESTRONG = 1,
        MSHLFLAGS_TABLEWEAK = 2,
        MSHLFLAGS_NOPING = 4,
        MSHLFLAGS_RESERVED1 = 8,
        MSHLFLAGS_RESERVED2 = 16,
        MSHLFLAGS_RESERVED3 = 32,
        MSHLFLAGS_RESERVED4 = 64
    } MSHLFLAGS;

typedef
enum tagMSHCTX
    {
        MSHCTX_LOCAL = 0,
        MSHCTX_NOSHAREDMEM = 1,
        MSHCTX_DIFFERENTMACHINE = 2,
        MSHCTX_INPROC = 3,
        MSHCTX_CROSSCTX = 4
    } MSHCTX;

typedef struct _BYTE_BLOB
    {
    ULONG clSize;
                    byte abData[ 1 ];
    } BYTE_BLOB;

typedef BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    ULONG clSize;
                    unsigned short asData[ 1 ];
    } WORD_BLOB;

typedef WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    ULONG clSize;
                    ULONG alData[ 1 ];
    } DWORD_BLOB;

typedef DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    ULONG fFlags;
    ULONG clSize;
                    byte abData[ 1 ];
    } FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    ULONG fFlags;
    ULONG clSize;
                    unsigned short asData[ 1 ];
    } FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    ULONG clSize;
                    byte *pData;
    } BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    ULONG clSize;
                    unsigned short *pData;
    } WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    ULONG clSize;
                    ULONG *pData;
    } DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    ULONG clSize;
                    __int64 *pData;
    } HYPER_SIZEDARR;



extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec;





typedef boolean BOOLEAN;





typedef struct tagBLOB
    {
    ULONG cbSize;
                    BYTE *pBlobData;
    } BLOB;

typedef struct tagBLOB *LPBLOB;
# 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/wtypesbase.h" 3
#pragma warning(pop)



extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec;






}
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 2 3



extern "C"{
# 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;







typedef struct tagRemHGLOBAL
    {
    LONG fNullHGlobal;
    ULONG cbData;
                    byte data[ 1 ];
    } RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
                    byte data[ 1 ];
    } RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHPALETTE;

typedef struct tagRemBRUSH
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHBRUSH;
# 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
typedef
enum tagDVASPECT
    {
        DVASPECT_CONTENT = 1,
        DVASPECT_THUMBNAIL = 2,
        DVASPECT_ICON = 4,
        DVASPECT_DOCPRINT = 8
    } DVASPECT;

typedef
enum tagSTGC
    {
        STGC_DEFAULT = 0,
        STGC_OVERWRITE = 1,
        STGC_ONLYIFCURRENT = 2,
        STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
        STGC_CONSOLIDATE = 8
    } STGC;

typedef
enum tagSTGMOVE
    {
        STGMOVE_MOVE = 0,
        STGMOVE_COPY = 1,
        STGMOVE_SHALLOWCOPY = 2
    } STGMOVE;

typedef
enum tagSTATFLAG
    {
        STATFLAG_DEFAULT = 0,
        STATFLAG_NONAME = 1,
        STATFLAG_NOOPEN = 2
    } STATFLAG;

typedef void *HCONTEXT;



typedef DWORD LCID;




typedef USHORT LANGID;
# 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
typedef struct _userCLIPFORMAT
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0001
        {
                       DWORD dwValue;
                               wchar_t *pwszName;
        } u;
    } userCLIPFORMAT;

typedef userCLIPFORMAT *wireCLIPFORMAT;

typedef WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0002
        {
                       LONG hInproc;
                       DWORD_BLOB *hRemote;
        } u;
    } GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0003
        {
                       LONG hInproc;
                       FLAGGED_BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHGLOBAL;

typedef userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0004
        {
                       LONG hInproc;
                       BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
    } remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0005
        {
                       LONG hInproc;
                       remoteMETAFILEPICT *hRemote;
                       __int64 hInproc64;
        } u;
    } userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0006
        {
                       LONG hInproc;
                       BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
                    byte pBuffer[ 1 ];
    } userBITMAP;

typedef struct _userHBITMAP
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0007
        {
                       LONG hInproc;
                       userBITMAP *hRemote;
                       __int64 hInproc64;
        } u;
    } userHBITMAP;

typedef struct _userHPALETTE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0008
        {
                       LONG hInproc;
                       LOGPALETTE *hRemote;
                       __int64 hInproc64;
        } u;
    } userHPALETTE;

typedef struct _RemotableHandle
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0009
        {
                       LONG hInproc;
                       LONG hRemote;
        } u;
    } RemotableHandle;

typedef RemotableHandle *wireHWND;

typedef RemotableHandle *wireHMENU;

typedef RemotableHandle *wireHACCEL;

typedef RemotableHandle *wireHBRUSH;

typedef RemotableHandle *wireHFONT;

typedef RemotableHandle *wireHDC;

typedef RemotableHandle *wireHICON;

typedef RemotableHandle *wireHRGN;

typedef RemotableHandle *wireHMONITOR;
# 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
typedef userHBITMAP *wireHBITMAP;

typedef userHPALETTE *wireHPALETTE;

typedef userHENHMETAFILE *wireHENHMETAFILE;

typedef userHMETAFILE *wireHMETAFILE;

typedef userHMETAFILEPICT *wireHMETAFILEPICT;
# 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
typedef void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;







#pragma warning(push)

#pragma warning(disable: 4201)

typedef double DATE;
# 670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
typedef union tagCY {
    struct {
        ULONG Lo;
        LONG Hi;
    } ;
    LONGLONG int64;
} CY;


typedef CY *LPCY;
# 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        } ;
        USHORT signscale;
    } ;
    ULONG Hi32;
    union {
        struct {
            ULONG Lo32;
            ULONG Mid32;
        } ;
        ULONGLONG Lo64;
    } ;
} DECIMAL;




typedef DECIMAL *LPDECIMAL;



#pragma warning(pop)




typedef FLAGGED_WORD_BLOB *wireBSTR;


typedef OLECHAR *BSTR;




typedef BSTR *LPBSTR;


typedef short VARIANT_BOOL;
# 752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
                    BYTE *pData;
    } BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;




typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    LONG ulClipFmt;
                    BYTE *pClipData;
    } CLIPDATA;



typedef unsigned short VARTYPE;
# 833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\wtypes.h" 3
enum VARENUM
    {
        VT_EMPTY = 0,
        VT_NULL = 1,
        VT_I2 = 2,
        VT_I4 = 3,
        VT_R4 = 4,
        VT_R8 = 5,
        VT_CY = 6,
        VT_DATE = 7,
        VT_BSTR = 8,
        VT_DISPATCH = 9,
        VT_ERROR = 10,
        VT_BOOL = 11,
        VT_VARIANT = 12,
        VT_UNKNOWN = 13,
        VT_DECIMAL = 14,
        VT_I1 = 16,
        VT_UI1 = 17,
        VT_UI2 = 18,
        VT_UI4 = 19,
        VT_I8 = 20,
        VT_UI8 = 21,
        VT_INT = 22,
        VT_UINT = 23,
        VT_VOID = 24,
        VT_HRESULT = 25,
        VT_PTR = 26,
        VT_SAFEARRAY = 27,
        VT_CARRAY = 28,
        VT_USERDEFINED = 29,
        VT_LPSTR = 30,
        VT_LPWSTR = 31,
        VT_RECORD = 36,
        VT_INT_PTR = 37,
        VT_UINT_PTR = 38,
        VT_FILETIME = 64,
        VT_BLOB = 65,
        VT_STREAM = 66,
        VT_STORAGE = 67,
        VT_STREAMED_OBJECT = 68,
        VT_STORED_OBJECT = 69,
        VT_BLOB_OBJECT = 70,
        VT_CF = 71,
        VT_CLSID = 72,
        VT_VERSIONED_STREAM = 73,
        VT_BSTR_BLOB = 0xfff,
        VT_VECTOR = 0x1000,
        VT_ARRAY = 0x2000,
        VT_BYREF = 0x4000,
        VT_RESERVED = 0x8000,
        VT_ILLEGAL = 0xffff,
        VT_ILLEGALMASKED = 0xfff,
        VT_TYPEMASK = 0xfff
    } ;
typedef ULONG PROPID;



typedef struct _tagpropertykey
    {
    GUID fmtid;
    DWORD pid;
    } PROPERTYKEY;


typedef struct tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    } CSPLATFORM;

typedef struct tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    } QUERYCONTEXT;

typedef
enum tagTYSPEC
    {
        TYSPEC_CLSID = 0,
        TYSPEC_FILEEXT = ( TYSPEC_CLSID + 1 ) ,
        TYSPEC_MIMETYPE = ( TYSPEC_FILEEXT + 1 ) ,
        TYSPEC_FILENAME = ( TYSPEC_MIMETYPE + 1 ) ,
        TYSPEC_PROGID = ( TYSPEC_FILENAME + 1 ) ,
        TYSPEC_PACKAGENAME = ( TYSPEC_PROGID + 1 ) ,
        TYSPEC_OBJECTID = ( TYSPEC_PACKAGENAME + 1 )
    } TYSPEC;

typedef struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
    {
    DWORD tyspec;
                                          union __MIDL___MIDL_itf_wtypes_0000_0001_0005
        {
                       CLSID clsid;
                       LPOLESTR pFileExt;
                       LPOLESTR pMimeType;
                       LPOLESTR pProgId;
                       LPOLESTR pFileName;
                       struct
            {
            LPOLESTR pPackageName;
            GUID PolicyId;
            } ByName;
                       struct
            {
            GUID ObjectId;
            GUID PolicyId;
            } ByObjectId;
        } tagged_union;
    } uCLSSPEC;


#pragma warning(pop)



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;






}
# 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 1 3
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
extern "C" const GUID GUID_DEVINTERFACE_DISK;
extern "C" const GUID GUID_DEVINTERFACE_CDROM;
extern "C" const GUID GUID_DEVINTERFACE_PARTITION;
extern "C" const GUID GUID_DEVINTERFACE_TAPE;
extern "C" const GUID GUID_DEVINTERFACE_WRITEONCEDISK;
extern "C" const GUID GUID_DEVINTERFACE_VOLUME;
extern "C" const GUID GUID_DEVINTERFACE_MEDIUMCHANGER;
extern "C" const GUID GUID_DEVINTERFACE_FLOPPY;
extern "C" const GUID GUID_DEVINTERFACE_CDCHANGER;
extern "C" const GUID GUID_DEVINTERFACE_STORAGEPORT;
extern "C" const GUID GUID_DEVINTERFACE_VMLUN;
extern "C" const GUID GUID_DEVINTERFACE_SES;
# 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
extern "C" const GUID GUID_DEVINTERFACE_SERVICE_VOLUME;
extern "C" const GUID GUID_DEVINTERFACE_HIDDEN_VOLUME;





extern "C" const GUID GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB;


extern "C" const GUID GUID_DEVINTERFACE_COMPORT;

extern "C" const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;
# 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)
#pragma warning(disable: 4201)
#pragma warning(disable: 4820)
# 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)
# 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_HOTPLUG_INFO {
    DWORD Size;
    BOOLEAN MediaRemovable;
    BOOLEAN MediaHotplug;
    BOOLEAN DeviceHotplug;
    BOOLEAN WriteCacheEnableOverride;
} STORAGE_HOTPLUG_INFO, *PSTORAGE_HOTPLUG_INFO;
# 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_DEVICE_NUMBER {





    DWORD DeviceType;





    DWORD DeviceNumber;






    DWORD PartitionNumber;
} STORAGE_DEVICE_NUMBER, *PSTORAGE_DEVICE_NUMBER;

typedef struct _STORAGE_DEVICE_NUMBERS {

    DWORD NumberOfDevices;

    STORAGE_DEVICE_NUMBER Devices[1];

} STORAGE_DEVICE_NUMBERS, *PSTORAGE_DEVICE_NUMBERS;
# 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_DEVICE_NUMBER_EX {





    DWORD Version;






    DWORD Size;






    DWORD Flags;






    DWORD DeviceType;





    DWORD DeviceNumber;
# 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    GUID DeviceGuid;






    DWORD PartitionNumber;
} STORAGE_DEVICE_NUMBER_EX, *PSTORAGE_DEVICE_NUMBER_EX;






typedef struct _STORAGE_BUS_RESET_REQUEST {
    BYTE PathId;
} STORAGE_BUS_RESET_REQUEST, *PSTORAGE_BUS_RESET_REQUEST;





typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
    DWORD Length;
    BYTE _unused;
    BYTE PathId;
    BYTE TargetId;
    BYTE Lun;
} STORAGE_BREAK_RESERVATION_REQUEST, *PSTORAGE_BREAK_RESERVATION_REQUEST;
# 698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _PREVENT_MEDIA_REMOVAL {
    BOOLEAN PreventMediaRemoval;
} PREVENT_MEDIA_REMOVAL, *PPREVENT_MEDIA_REMOVAL;







typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
    DWORD MediaChangeCount;
    DWORD NewState;
} CLASS_MEDIA_CHANGE_CONTEXT, *PCLASS_MEDIA_CHANGE_CONTEXT;
# 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TAPE_STATISTICS {
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE CompressionRatioReads;
    BYTE CompressionRatioWrites;
} TAPE_STATISTICS, *PTAPE_STATISTICS;
# 738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TAPE_GET_STATISTICS {
    DWORD Operation;
} TAPE_GET_STATISTICS, *PTAPE_GET_STATISTICS;
# 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_MEDIA_TYPE {
# 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DDS_4mm = 0x20,
    MiniQic,
    Travan,
    QIC,
    MP_8mm,
    AME_8mm,
    AIT1_8mm,
    DLT,
    NCTP,
    IBM_3480,
    IBM_3490E,
    IBM_Magstar_3590,
    IBM_Magstar_MP,
    STK_DATA_D3,
    SONY_DTF,
    DV_6mm,
    DMI,
    SONY_D2,
    CLEANER_CARTRIDGE,
    CD_ROM,
    CD_R,
    CD_RW,
    DVD_ROM,
    DVD_R,
    DVD_RW,
    MO_3_RW,
    MO_5_WO,
    MO_5_RW,
    MO_5_LIMDOW,
    PC_5_WO,
    PC_5_RW,
    PD_5_RW,
    ABL_5_WO,
    PINNACLE_APEX_5_RW,
    SONY_12_WO,
    PHILIPS_12_WO,
    HITACHI_12_WO,
    CYGNET_12_WO,
    KODAK_14_WO,
    MO_NFR_525,
    NIKON_12_RW,
    IOMEGA_ZIP,
    IOMEGA_JAZ,
    SYQUEST_EZ135,
    SYQUEST_EZFLYER,
    SYQUEST_SYJET,
    AVATAR_F2,
    MP2_8mm,
    DST_S,
    DST_M,
    DST_L,
    VXATape_1,
    VXATape_2,



    STK_9840,

    LTO_Ultrium,
    LTO_Accelis,
    DVD_RAM,
    AIT_8mm,
    ADR_1,
    ADR_2,
    STK_9940,
    SAIT,
    VXATape
}STORAGE_MEDIA_TYPE, *PSTORAGE_MEDIA_TYPE;
# 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_BUS_TYPE {
    BusTypeUnknown = 0x00,
    BusTypeScsi,
    BusTypeAtapi,
    BusTypeAta,
    BusType1394,
    BusTypeSsa,
    BusTypeFibre,
    BusTypeUsb,
    BusTypeRAID,
    BusTypeiScsi,
    BusTypeSas,
    BusTypeSata,
    BusTypeSd,
    BusTypeMmc,
    BusTypeVirtual,
    BusTypeFileBackedVirtual,
    BusTypeSpaces,
    BusTypeNvme,
    BusTypeSCM,
    BusTypeUfs,
    BusTypeMax,
    BusTypeMaxReserved = 0x7F
} STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;
# 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_MEDIA_INFO {
    union {
        struct {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        } DiskInfo;

        struct {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        } RemovableDiskInfo;

        struct {
            STORAGE_MEDIA_TYPE MediaType;
            DWORD MediaCharacteristics;
            DWORD CurrentBlockSize;
            STORAGE_BUS_TYPE BusType;





            union {
                struct {
                    BYTE MediumType;
                    BYTE DensityCode;
                } ScsiInformation;
            } BusSpecificData;

        } TapeInfo;
    } DeviceSpecific;
} DEVICE_MEDIA_INFO, *PDEVICE_MEDIA_INFO;

typedef struct _GET_MEDIA_TYPES {
    DWORD DeviceType;
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO MediaInfo[1];
} GET_MEDIA_TYPES, *PGET_MEDIA_TYPES;
# 962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_PREDICT_FAILURE
{
    DWORD PredictFailure;
    BYTE VendorSpecific[512];
} STORAGE_PREDICT_FAILURE, *PSTORAGE_PREDICT_FAILURE;
# 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_FAILURE_PREDICTION_CONFIG {
    DWORD Version;
    DWORD Size;
    BOOLEAN Set;
    BOOLEAN Enabled;
    WORD Reserved;
} STORAGE_FAILURE_PREDICTION_CONFIG, *PSTORAGE_FAILURE_PREDICTION_CONFIG;
# 1015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_QUERY_TYPE {
    PropertyStandardQuery = 0,
    PropertyExistsQuery,
    PropertyMaskQuery,
    PropertyQueryMaxDefined
} STORAGE_QUERY_TYPE, *PSTORAGE_QUERY_TYPE;





typedef enum _STORAGE_PROPERTY_ID {
    StorageDeviceProperty = 0,
    StorageAdapterProperty,
    StorageDeviceIdProperty,
    StorageDeviceUniqueIdProperty,
    StorageDeviceWriteCacheProperty,
    StorageMiniportProperty,
    StorageAccessAlignmentProperty,
    StorageDeviceSeekPenaltyProperty,
    StorageDeviceTrimProperty,
    StorageDeviceWriteAggregationProperty,
    StorageDeviceDeviceTelemetryProperty,
    StorageDeviceLBProvisioningProperty,
    StorageDevicePowerProperty,
    StorageDeviceCopyOffloadProperty,
    StorageDeviceResiliencyProperty,
    StorageDeviceMediumProductType,
    StorageAdapterRpmbProperty,
    StorageAdapterCryptoProperty,
    StorageDeviceIoCapabilityProperty = 48,
    StorageAdapterProtocolSpecificProperty,
    StorageDeviceProtocolSpecificProperty,
    StorageAdapterTemperatureProperty,
    StorageDeviceTemperatureProperty,
    StorageAdapterPhysicalTopologyProperty,
    StorageDevicePhysicalTopologyProperty,
    StorageDeviceAttributesProperty,
    StorageDeviceManagementStatus,
    StorageAdapterSerialNumberProperty,
    StorageDeviceLocationProperty,
    StorageDeviceNumaProperty,
    StorageDeviceZonedDeviceProperty,
    StorageDeviceUnsafeShutdownCount
} STORAGE_PROPERTY_ID, *PSTORAGE_PROPERTY_ID;






typedef struct _STORAGE_PROPERTY_QUERY {





    STORAGE_PROPERTY_ID PropertyId;





    STORAGE_QUERY_TYPE QueryType;





    BYTE AdditionalParameters[1];

} STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;






typedef struct _STORAGE_DESCRIPTOR_HEADER {


    DWORD Version;


    DWORD Size;

} STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;
# 1111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_DEVICE_DESCRIPTOR {






    DWORD Version;







    DWORD Size;






    BYTE DeviceType;






    BYTE DeviceTypeModifier;







    BOOLEAN RemovableMedia;
# 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    BOOLEAN CommandQueueing;







    DWORD VendorIdOffset;







    DWORD ProductIdOffset;
# 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD ProductRevisionOffset;







    DWORD SerialNumberOffset;
# 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    STORAGE_BUS_TYPE BusType;







    DWORD RawPropertiesLength;






    BYTE RawDeviceProperties[1];

} STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;
# 1227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_ADAPTER_DESCRIPTOR {


    DWORD Version;


    DWORD Size;


    DWORD MaximumTransferLength;


    DWORD MaximumPhysicalPages;


    DWORD AlignmentMask;


    BOOLEAN AdapterUsesPio;


    BOOLEAN AdapterScansDown;


    BOOLEAN CommandQueueing;


    BOOLEAN AcceleratedTransfer;





    BYTE BusType;



    WORD BusMajorVersion;


    WORD BusMinorVersion;




    BYTE SrbType;


    BYTE AddressType;


} STORAGE_ADAPTER_DESCRIPTOR, *PSTORAGE_ADAPTER_DESCRIPTOR;
# 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {






    DWORD Version;







    DWORD Size;






    DWORD BytesPerCacheLine;






    DWORD BytesOffsetForCacheAlignment;






    DWORD BytesPerLogicalSector;






    DWORD BytesPerPhysicalSector;






    DWORD BytesOffsetForSectorAlignment;

} STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR, *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;

typedef struct _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR {





    DWORD Version;





    DWORD Size;





    DWORD MediumProductType;

} STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR, *PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;


typedef enum _STORAGE_PORT_CODE_SET {
    StoragePortCodeSetReserved = 0,
    StoragePortCodeSetStorport = 1,
    StoragePortCodeSetSCSIport = 2,
    StoragePortCodeSetSpaceport = 3,
    StoragePortCodeSetATAport = 4,
    StoragePortCodeSetUSBport = 5,
    StoragePortCodeSetSBP2port = 6,
    StoragePortCodeSetSDport = 7
} STORAGE_PORT_CODE_SET, *PSTORAGE_PORT_CODE_SET;





typedef struct _STORAGE_MINIPORT_DESCRIPTOR {


    DWORD Version;


    DWORD Size;


    STORAGE_PORT_CODE_SET Portdriver;


    BOOLEAN LUNResetSupported;


    BOOLEAN TargetResetSupported;



    WORD IoTimeoutValue;




    BOOLEAN ExtraIoInfoSupported;


    BYTE Reserved0[3];


    DWORD Reserved1;


} STORAGE_MINIPORT_DESCRIPTOR, *PSTORAGE_MINIPORT_DESCRIPTOR;







typedef enum _STORAGE_IDENTIFIER_CODE_SET {
    StorageIdCodeSetReserved = 0,
    StorageIdCodeSetBinary = 1,
    StorageIdCodeSetAscii = 2,
    StorageIdCodeSetUtf8 = 3
} STORAGE_IDENTIFIER_CODE_SET, *PSTORAGE_IDENTIFIER_CODE_SET;

typedef enum _STORAGE_IDENTIFIER_TYPE {
    StorageIdTypeVendorSpecific = 0,
    StorageIdTypeVendorId = 1,
    StorageIdTypeEUI64 = 2,
    StorageIdTypeFCPHName = 3,
    StorageIdTypePortRelative = 4,
    StorageIdTypeTargetPortGroup = 5,
    StorageIdTypeLogicalUnitGroup = 6,
    StorageIdTypeMD5LogicalUnitIdentifier = 7,
    StorageIdTypeScsiNameString = 8
} STORAGE_IDENTIFIER_TYPE, *PSTORAGE_IDENTIFIER_TYPE;





typedef enum _STORAGE_ID_NAA_FORMAT {
        StorageIdNAAFormatIEEEExtended = 2,
        StorageIdNAAFormatIEEERegistered = 3,
        StorageIdNAAFormatIEEEERegisteredExtended = 5
} STORAGE_ID_NAA_FORMAT, *PSTORAGE_ID_NAA_FORMAT;

typedef enum _STORAGE_ASSOCIATION_TYPE {
    StorageIdAssocDevice = 0,
    StorageIdAssocPort = 1,
    StorageIdAssocTarget = 2
} STORAGE_ASSOCIATION_TYPE, *PSTORAGE_ASSOCIATION_TYPE;

typedef struct _STORAGE_IDENTIFIER {


    STORAGE_IDENTIFIER_CODE_SET CodeSet;


    STORAGE_IDENTIFIER_TYPE Type;


    WORD IdentifierSize;


    WORD NextOffset;







    STORAGE_ASSOCIATION_TYPE Association;






    BYTE Identifier[1];

} STORAGE_IDENTIFIER, *PSTORAGE_IDENTIFIER;

typedef struct _STORAGE_DEVICE_ID_DESCRIPTOR {


    DWORD Version;


    DWORD Size;






    DWORD NumberOfIdentifiers;
# 1521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    BYTE Identifiers[1];

} STORAGE_DEVICE_ID_DESCRIPTOR, *PSTORAGE_DEVICE_ID_DESCRIPTOR;


typedef struct _DEVICE_SEEK_PENALTY_DESCRIPTOR {


    DWORD Version;


    DWORD Size;


    BOOLEAN IncursSeekPenalty;
} DEVICE_SEEK_PENALTY_DESCRIPTOR, *PDEVICE_SEEK_PENALTY_DESCRIPTOR;


typedef struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    BOOLEAN BenefitsFromWriteAggregation;
} DEVICE_WRITE_AGGREGATION_DESCRIPTOR, *PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;


typedef struct _DEVICE_TRIM_DESCRIPTOR {


    DWORD Version;


    DWORD Size;


    BOOLEAN TrimEnabled;

} DEVICE_TRIM_DESCRIPTOR, *PDEVICE_TRIM_DESCRIPTOR;

#pragma warning(push)
#pragma warning(disable: 4214)



typedef struct _DEVICE_LB_PROVISIONING_DESCRIPTOR {

    DWORD Version;


    DWORD Size;


    BYTE ThinProvisioningEnabled : 1;


    BYTE ThinProvisioningReadZeros : 1;


    BYTE AnchorSupported : 3;


    BYTE UnmapGranularityAlignmentValid : 1;


    BYTE Reserved0 : 2;


    BYTE Reserved1[7];


    DWORDLONG OptimalUnmapGranularity;


    DWORDLONG UnmapGranularityAlignment;




    DWORD MaxUnmapLbaCount;


    DWORD MaxUnmapBlockDescriptorCount;


} DEVICE_LB_PROVISIONING_DESCRIPTOR, *PDEVICE_LB_PROVISIONING_DESCRIPTOR;
# 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES {
    DWORD Size;
    DWORD Version;
    BYTE AvailableMappingResourcesValid : 1;
    BYTE UsedMappingResourcesValid : 1;
    BYTE Reserved0 : 6;
    BYTE Reserved1[3];
    BYTE AvailableMappingResourcesScope : 2;
    BYTE UsedMappingResourcesScope : 2;
    BYTE Reserved2 : 4;
    BYTE Reserved3[3];
    DWORDLONG AvailableMappingResources;
    DWORDLONG UsedMappingResources;
} STORAGE_LB_PROVISIONING_MAP_RESOURCES, *PSTORAGE_LB_PROVISIONING_MAP_RESOURCES;

#pragma warning(pop)


typedef struct _DEVICE_POWER_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    BOOLEAN DeviceAttentionSupported;
    BOOLEAN AsynchronousNotificationSupported;
    BOOLEAN IdlePowerManagementEnabled;
    BOOLEAN D3ColdEnabled;
    BOOLEAN D3ColdSupported;
    BOOLEAN NoVerifyDuringIdlePower;
    BYTE Reserved[2];
    DWORD IdleTimeoutInMS;
} DEVICE_POWER_DESCRIPTOR, *PDEVICE_POWER_DESCRIPTOR;




typedef struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    DWORD MaximumTokenLifetime;
    DWORD DefaultTokenLifetime;
    DWORDLONG MaximumTransferSize;
    DWORDLONG OptimalTransferCount;
    DWORD MaximumDataDescriptors;
    DWORD MaximumTransferLengthPerDescriptor;
    DWORD OptimalTransferLengthPerDescriptor;
    WORD OptimalTransferLengthGranularity;
    BYTE Reserved[2];
} DEVICE_COPY_OFFLOAD_DESCRIPTOR, *PDEVICE_COPY_OFFLOAD_DESCRIPTOR;





typedef struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {







    DWORD Version;







    DWORD Size;







    DWORD NameOffset;







    DWORD NumberOfLogicalCopies;







    DWORD NumberOfPhysicalCopies;







    DWORD PhysicalDiskRedundancy;







    DWORD NumberOfColumns;







    DWORD Interleave;

} STORAGE_DEVICE_RESILIENCY_DESCRIPTOR, *PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR;





typedef enum _STORAGE_RPMB_FRAME_TYPE {

    StorageRpmbFrameTypeUnknown = 0,
    StorageRpmbFrameTypeStandard,
    StorageRpmbFrameTypeMax,

} STORAGE_RPMB_FRAME_TYPE, *PSTORAGE_RPMB_FRAME_TYPE;





typedef struct _STORAGE_RPMB_DESCRIPTOR {






    DWORD Version;






    DWORD Size;







    DWORD SizeInBytes;
# 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD MaxReliableWriteSizeInBytes;







    STORAGE_RPMB_FRAME_TYPE FrameFormat;

} STORAGE_RPMB_DESCRIPTOR, *PSTORAGE_RPMB_DESCRIPTOR;





typedef enum _STORAGE_CRYPTO_ALGORITHM_ID {

    StorageCryptoAlgorithmUnknown = 0,
    StorageCryptoAlgorithmXTSAES = 1,
    StorageCryptoAlgorithmBitlockerAESCBC,
    StorageCryptoAlgorithmAESECB,
    StorageCryptoAlgorithmESSIVAESCBC,
    StorageCryptoAlgorithmMax

} STORAGE_CRYPTO_ALGORITHM_ID, *PSTORAGE_CRYPTO_ALGORITHM_ID;

typedef enum _STORAGE_CRYPTO_KEY_SIZE {

    StorageCryptoKeySizeUnknown = 0,
    StorageCryptoKeySize128Bits = 1,
    StorageCryptoKeySize192Bits,
    StorageCryptoKeySize256Bits,
    StorageCryptoKeySize512Bits

} STORAGE_CRYPTO_KEY_SIZE, *PSTORAGE_CRYPTO_KEY_SIZE;



typedef struct _STORAGE_CRYPTO_CAPABILITY {






    DWORD Version;






    DWORD Size;





    DWORD CryptoCapabilityIndex;





    STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId;





    STORAGE_CRYPTO_KEY_SIZE KeySize;







    DWORD DataUnitSizeBitmask;

} STORAGE_CRYPTO_CAPABILITY, *PSTORAGE_CRYPTO_CAPABILITY;



typedef struct _STORAGE_CRYPTO_DESCRIPTOR {






    DWORD Version;






    DWORD Size;





    DWORD NumKeysSupported;






    DWORD NumCryptoCapabilities;





                                        STORAGE_CRYPTO_CAPABILITY CryptoCapabilities[1];

} STORAGE_CRYPTO_DESCRIPTOR, *PSTORAGE_CRYPTO_DESCRIPTOR;
# 1926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_TIER_MEDIA_TYPE {

    StorageTierMediaTypeUnspecified = 0,
    StorageTierMediaTypeDisk = 1,
    StorageTierMediaTypeSsd = 2,
    StorageTierMediaTypeScm = 4,
    StorageTierMediaTypeMax

} STORAGE_TIER_MEDIA_TYPE, *PSTORAGE_TIER_MEDIA_TYPE;

typedef enum _STORAGE_TIER_CLASS {

    StorageTierClassUnspecified = 0,
    StorageTierClassCapacity,
    StorageTierClassPerformance,
    StorageTierClassMax

} STORAGE_TIER_CLASS, *PSTORAGE_TIER_CLASS;

typedef struct _STORAGE_TIER {





    GUID Id;





    WCHAR Name[(256)];





    WCHAR Description[(256)];





    DWORDLONG Flags;





    DWORDLONG ProvisionedCapacity;





    STORAGE_TIER_MEDIA_TYPE MediaType;





    STORAGE_TIER_CLASS Class;

} STORAGE_TIER, *PSTORAGE_TIER;






typedef struct _STORAGE_DEVICE_TIERING_DESCRIPTOR {






    DWORD Version;






    DWORD Size;






    DWORD Flags;





    DWORD TotalNumberOfTiers;





    DWORD NumberOfTiersReturned;





                                        STORAGE_TIER Tiers[1];

} STORAGE_DEVICE_TIERING_DESCRIPTOR, *PSTORAGE_DEVICE_TIERING_DESCRIPTOR;





typedef struct _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR {







    DWORD Version;







    DWORD Size;






    DWORD NumberOfFaultDomains;







    GUID FaultDomainIds[1];

} STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR, *PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
# 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_PROTOCOL_TYPE {
    ProtocolTypeUnknown = 0x00,
    ProtocolTypeScsi,
    ProtocolTypeAta,
    ProtocolTypeNvme,
    ProtocolTypeSd,
    ProtocolTypeUfs,
    ProtocolTypeProprietary = 0x7E,
    ProtocolTypeMaxReserved = 0x7F
} STORAGE_PROTOCOL_TYPE, *PSTORAGE_PROTOCOL_TYPE;


typedef enum _STORAGE_PROTOCOL_NVME_DATA_TYPE {
    NVMeDataTypeUnknown = 0,
    NVMeDataTypeIdentify,
    NVMeDataTypeLogPage,
    NVMeDataTypeFeature,
} STORAGE_PROTOCOL_NVME_DATA_TYPE, *PSTORAGE_PROTOCOL_NVME_DATA_TYPE;

typedef enum _STORAGE_PROTOCOL_ATA_DATA_TYPE {
    AtaDataTypeUnknown = 0,
    AtaDataTypeIdentify,
    AtaDataTypeLogPage,
} STORAGE_PROTOCOL_ATA_DATA_TYPE, *PSTORAGE_PROTOCOL_ATA_DATA_TYPE;

typedef enum _STORAGE_PROTOCOL_UFS_DATA_TYPE {
    UfsDataTypeUnknown = 0,
    UfsDataTypeQueryDescriptor,
    UfsDataTypeMax,
} STORAGE_PROTOCOL_UFS_DATA_TYPE, *PSTORAGE_PROTOCOL_UFS_DATA_TYPE;






typedef struct _STORAGE_PROTOCOL_SPECIFIC_DATA {

    STORAGE_PROTOCOL_TYPE ProtocolType;
    DWORD DataType;

    DWORD ProtocolDataRequestValue;
    DWORD ProtocolDataRequestSubValue;

    DWORD ProtocolDataOffset;
    DWORD ProtocolDataLength;

    DWORD FixedProtocolReturnData;
    DWORD Reserved[3];

} STORAGE_PROTOCOL_SPECIFIC_DATA, *PSTORAGE_PROTOCOL_SPECIFIC_DATA;
# 2148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR {

    DWORD Version;
    DWORD Size;

    STORAGE_PROTOCOL_SPECIFIC_DATA ProtocolSpecificData;

} STORAGE_PROTOCOL_DATA_DESCRIPTOR, *PSTORAGE_PROTOCOL_DATA_DESCRIPTOR;
# 2173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_TEMPERATURE_INFO {

    WORD Index;
    SHORT Temperature;
    SHORT OverThreshold;
    SHORT UnderThreshold;

    BOOLEAN OverThresholdChangable;
    BOOLEAN UnderThresholdChangable;
    BOOLEAN EventGenerated;
    BYTE Reserved0;
    DWORD Reserved1;

} STORAGE_TEMPERATURE_INFO, *PSTORAGE_TEMPERATURE_INFO;

typedef struct _STORAGE_TEMPERATURE_DATA_DESCRIPTOR {

    DWORD Version;
    DWORD Size;





    SHORT CriticalTemperature;





    SHORT WarningTemperature;

    WORD InfoCount;

    BYTE Reserved0[2];

    DWORD Reserved1[2];

    STORAGE_TEMPERATURE_INFO TemperatureInfo[1];

} STORAGE_TEMPERATURE_DATA_DESCRIPTOR, *PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR;
# 2226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_TEMPERATURE_THRESHOLD {

    DWORD Version;
    DWORD Size;

    WORD Flags;
    WORD Index;

    SHORT Threshold;
    BOOLEAN OverThreshold;
    BYTE Reserved;

} STORAGE_TEMPERATURE_THRESHOLD, *PSTORAGE_TEMPERATURE_THRESHOLD;
# 2263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_DEVICE_FORM_FACTOR {
    FormFactorUnknown = 0,

    FormFactor3_5,
    FormFactor2_5,
    FormFactor1_8,
    FormFactor1_8Less,

    FormFactorEmbedded,
    FormFactorMemoryCard,
    FormFactormSata,
    FormFactorM_2,
    FormFactorPCIeBoard,
    FormFactorDimm,

} STORAGE_DEVICE_FORM_FACTOR, *PSTORAGE_DEVICE_FORM_FACTOR;


typedef enum _STORAGE_COMPONENT_HEALTH_STATUS {
    HealthStatusUnknown = 0,
    HealthStatusNormal,
    HealthStatusThrottled,
    HealthStatusWarning,
    HealthStatusDisabled,
    HealthStatusFailed,
} STORAGE_COMPONENT_HEALTH_STATUS, *PSTORAGE_COMPONENT_HEALTH_STATUS;

#pragma warning(push)
#pragma warning(disable: 4201)

typedef union _STORAGE_SPEC_VERSION {

    struct {
        union {
            struct {
                BYTE SubMinor;
                BYTE Minor;
            } ;

            WORD AsUshort;

        } MinorVersion;

        WORD MajorVersion;
    } ;

    DWORD AsUlong;

} STORAGE_SPEC_VERSION, *PSTORAGE_SPEC_VERSION;

#pragma warning(pop)


typedef struct _STORAGE_PHYSICAL_DEVICE_DATA {

    DWORD DeviceId;
    DWORD Role;

    STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
    STORAGE_PROTOCOL_TYPE CommandProtocol;
    STORAGE_SPEC_VERSION SpecVersion;
    STORAGE_DEVICE_FORM_FACTOR FormFactor;

    BYTE Vendor[8];
    BYTE Model[40];
    BYTE FirmwareRevision[16];

    DWORDLONG Capacity;

    BYTE PhysicalLocation[32];

    DWORD Reserved[2];

} STORAGE_PHYSICAL_DEVICE_DATA, *PSTORAGE_PHYSICAL_DEVICE_DATA;


typedef struct _STORAGE_PHYSICAL_ADAPTER_DATA {

    DWORD AdapterId;
    STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
    STORAGE_PROTOCOL_TYPE CommandProtocol;
    STORAGE_SPEC_VERSION SpecVersion;

    BYTE Vendor[8];
    BYTE Model[40];
    BYTE FirmwareRevision[16];

    BYTE PhysicalLocation[32];

    BOOLEAN ExpanderConnected;
    BYTE Reserved0[3];
    DWORD Reserved1[3];

} STORAGE_PHYSICAL_ADAPTER_DATA, *PSTORAGE_PHYSICAL_ADAPTER_DATA;


typedef struct _STORAGE_PHYSICAL_NODE_DATA {

    DWORD NodeId;

    DWORD AdapterCount;
    DWORD AdapterDataLength;
    DWORD AdapterDataOffset;

    DWORD DeviceCount;
    DWORD DeviceDataLength;
    DWORD DeviceDataOffset;

    DWORD Reserved[3];

} STORAGE_PHYSICAL_NODE_DATA, *PSTORAGE_PHYSICAL_NODE_DATA;


typedef struct _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR {

    DWORD Version;
    DWORD Size;

    DWORD NodeCount;
    DWORD Reserved;

    STORAGE_PHYSICAL_NODE_DATA Node[1];

} STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR, *PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;






typedef struct _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR {






    DWORD Version;





    DWORD Size;





    DWORD LunMaxIoCount;





    DWORD AdapterMaxIoCount;

} STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR, *PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;





typedef struct _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR {






    DWORD Version;





    DWORD Size;





    DWORD64 Attributes;

} STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR, *PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
# 2464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_DISK_HEALTH_STATUS {
    DiskHealthUnknown = 0,
    DiskHealthUnhealthy,
    DiskHealthWarning,
    DiskHealthHealthy,
    DiskHealthMax
} STORAGE_DISK_HEALTH_STATUS, *PSTORAGE_DISK_HEALTH_STATUS;




typedef enum _STORAGE_DISK_OPERATIONAL_STATUS {
    DiskOpStatusNone = 0,
    DiskOpStatusUnknown,
    DiskOpStatusOk,
    DiskOpStatusPredictingFailure,
    DiskOpStatusInService,
    DiskOpStatusHardwareError,
    DiskOpStatusNotUsable,
    DiskOpStatusTransientError,
    DiskOpStatusMissing,
} STORAGE_DISK_OPERATIONAL_STATUS, *PSTORAGE_DISK_OPERATIONAL_STATUS;




typedef enum _STORAGE_OPERATIONAL_STATUS_REASON {
    DiskOpReasonUnknown = 0,
    DiskOpReasonScsiSenseCode,
    DiskOpReasonMedia,
    DiskOpReasonIo,
    DiskOpReasonThresholdExceeded,
    DiskOpReasonLostData,
    DiskOpReasonEnergySource,
    DiskOpReasonConfiguration,
    DiskOpReasonDeviceController,
    DiskOpReasonMediaController,
    DiskOpReasonComponent,
    DiskOpReasonNVDIMM_N,
    DiskOpReasonBackgroundOperation,
    DiskOpReasonInvalidFirmware,
    DiskOpReasonHealthCheck,
    DiskOpReasonLostDataPersistence,
    DiskOpReasonDisabledByPlatform,
    DiskOpReasonLostWritePersistence,
    DiskOpReasonDataPersistenceLossImminent,
    DiskOpReasonWritePersistenceLossImminent,
    DiskOpReasonMax
} STORAGE_OPERATIONAL_STATUS_REASON, *PSTORAGE_OPERATIONAL_STATUS_REASON;

typedef struct _STORAGE_OPERATIONAL_REASON {
    DWORD Version;
    DWORD Size;
    STORAGE_OPERATIONAL_STATUS_REASON Reason;

    union {




        struct {
            BYTE SenseKey;
            BYTE ASC;
            BYTE ASCQ;
            BYTE Reserved;
        } ScsiSenseKey;




        struct {
            BYTE CriticalHealth;
            BYTE ModuleHealth[2];
            BYTE ErrorThresholdStatus;
        } NVDIMM_N;

        DWORD AsUlong;
    } RawBytes;
} STORAGE_OPERATIONAL_REASON, *PSTORAGE_OPERATIONAL_REASON;







typedef struct _STORAGE_DEVICE_MANAGEMENT_STATUS {






    DWORD Version;







    DWORD Size;





    STORAGE_DISK_HEALTH_STATUS Health;





    DWORD NumberOfOperationalStatus;





    DWORD NumberOfAdditionalReasons;






    STORAGE_DISK_OPERATIONAL_STATUS OperationalStatus[16];





    STORAGE_OPERATIONAL_REASON AdditionalReasons[1];

} STORAGE_DEVICE_MANAGEMENT_STATUS, *PSTORAGE_DEVICE_MANAGEMENT_STATUS;
# 2614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_ADAPTER_SERIAL_NUMBER {


    DWORD Version;


    DWORD Size;






    WCHAR SerialNumber[(128)];

} STORAGE_ADAPTER_SERIAL_NUMBER, *PSTORAGE_ADAPTER_SERIAL_NUMBER;
# 2638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_ZONED_DEVICE_TYPES {
    ZonedDeviceTypeUnknown = 0,
    ZonedDeviceTypeHostManaged,
    ZonedDeviceTypeHostAware,
    ZonedDeviceTypeDeviceManaged,
} STORAGE_ZONED_DEVICE_TYPES, *PSTORAGE_ZONED_DEVICE_TYPES;

typedef enum _STORAGE_ZONE_TYPES {
    ZoneTypeUnknown = 0,
    ZoneTypeConventional = 1,
    ZoneTypeSequentialWriteRequired = 2,
    ZoneTypeSequentialWritePreferred = 3,
    ZoneTypeMax
} STORAGE_ZONE_TYPES, *PSTORAGE_ZONE_TYPES;

typedef struct _STORAGE_ZONE_GROUP {


        DWORD ZoneCount;


        STORAGE_ZONE_TYPES ZoneType;


        DWORDLONG ZoneSize;

} STORAGE_ZONE_GROUP, *PSTORAGE_ZONE_GROUP;

typedef struct _STORAGE_ZONED_DEVICE_DESCRIPTOR {






    DWORD Version;







    DWORD Size;






    STORAGE_ZONED_DEVICE_TYPES DeviceType;






    DWORD ZoneCount;





    union {
        struct {

            DWORD MaxOpenZoneCount;

            BOOLEAN UnrestrictedRead;

            BYTE Reserved[3];

        } SequentialRequiredZone;

        struct {

            DWORD OptimalOpenZoneCount;

            DWORD Reserved;

        } SequentialPreferredZone;

    } ZoneAttributes;







    DWORD ZoneGroupCount;


    STORAGE_ZONE_GROUP ZoneGroup[1];

} STORAGE_ZONED_DEVICE_DESCRIPTOR, *PSTORAGE_ZONED_DEVICE_DESCRIPTOR;






#pragma warning(push)
#pragma warning(disable: 4201)
typedef struct _DEVICE_LOCATION {


    DWORD Socket;


    DWORD Slot;


    DWORD Adapter;


    DWORD Port;

    union {

        struct {

            DWORD Channel;

            DWORD Device;

        } ;

        struct {

            DWORD Target;

            DWORD Lun;

        } ;

    } ;

} DEVICE_LOCATION, *PDEVICE_LOCATION;
#pragma warning(pop)

typedef struct _STORAGE_DEVICE_LOCATION_DESCRIPTOR {


    DWORD Version;


    DWORD Size;


    DEVICE_LOCATION Location;


    DWORD StringOffset;

} STORAGE_DEVICE_LOCATION_DESCRIPTOR, *PSTORAGE_DEVICE_LOCATION_DESCRIPTOR;
# 2804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_DEVICE_NUMA_PROPERTY {
    DWORD Version;
    DWORD Size;
    DWORD NumaNode;
} STORAGE_DEVICE_NUMA_PROPERTY, *PSTORAGE_DEVICE_NUMA_PROPERTY;
# 2819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT {
    DWORD Version;
    DWORD Size;
    DWORD UnsafeShutdownCount;
} STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT, *PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
# 2862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef DWORD DEVICE_DATA_MANAGEMENT_SET_ACTION;
# 2959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DATA_SET_RANGE {
    LONGLONG StartingOffset;
    DWORDLONG LengthInBytes;
} DEVICE_DATA_SET_RANGE, *PDEVICE_DATA_SET_RANGE;
# 2972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
    DWORD Size;
    DEVICE_DATA_MANAGEMENT_SET_ACTION Action;

    DWORD Flags;

    DWORD ParameterBlockOffset;
    DWORD ParameterBlockLength;

    DWORD DataSetRangesOffset;
    DWORD DataSetRangesLength;

} DEVICE_MANAGE_DATA_SET_ATTRIBUTES, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;






typedef struct _DEVICE_DSM_NOTIFICATION_PARAMETERS {

    DWORD Size;

    DWORD Flags;

    DWORD NumFileTypeIDs;

    GUID FileTypeID[1];

} DEVICE_DSM_NOTIFICATION_PARAMETERS, *PDEVICE_DSM_NOTIFICATION_PARAMETERS;
# 3013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS {
    DWORD Size;

    BYTE TargetPriority;

    BYTE Reserved[3];
} DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS, *PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
# 3040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)
#pragma warning(disable: 4201)
typedef struct _STORAGE_OFFLOAD_TOKEN {
    BYTE TokenType[4];
    BYTE Reserved[2];
    BYTE TokenIdLength[2];
    union {
        struct {
            BYTE Reserved2[0x1F8];
        } StorageOffloadZeroDataToken;
        BYTE Token[0x1F8];
    } ;
} STORAGE_OFFLOAD_TOKEN, *PSTORAGE_OFFLOAD_TOKEN;
#pragma warning(pop)
# 3073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS {
    DWORD Flags;
    DWORD TimeToLive;
    DWORD Reserved[2];
} DEVICE_DSM_OFFLOAD_READ_PARAMETERS, *PDEVICE_DSM_OFFLOAD_READ_PARAMETERS;

typedef struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS {
    DWORD Flags;
    DWORD Reserved;
    DWORDLONG TokenOffset;
    STORAGE_OFFLOAD_TOKEN Token;
} DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS, *PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
# 3096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DATA_SET_REPAIR_PARAMETERS {

    DWORD NumberOfRepairCopies;
    DWORD SourceCopy;
    DWORD RepairCopies[1];




} DEVICE_DATA_SET_REPAIR_PARAMETERS, *PDEVICE_DATA_SET_REPAIR_PARAMETERS;






typedef struct _DEVICE_DATA_SET_LBP_STATE_PARAMETERS {
    DWORD Version;
    DWORD Size;
    DWORD Flags;






    DWORD OutputVersion;
} DEVICE_DATA_SET_LBP_STATE_PARAMETERS, *PDEVICE_DATA_SET_LBP_STATE_PARAMETERS;
# 3141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {

    DWORD Size;

    DEVICE_DATA_MANAGEMENT_SET_ACTION Action;

    DWORD Flags;
    DWORD OperationStatus;
    DWORD ExtendedError;
    DWORD TargetDetailedError;
    DWORD ReservedStatus;

    DWORD OutputBlockOffset;
    DWORD OutputBlockLength;

} DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;





typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE {

    DWORD Size;
    DWORD Version;
    DWORDLONG SlabSizeInBytes;
    DWORD SlabOffsetDeltaInBytes;
    DWORD SlabAllocationBitMapBitCount;
    DWORD SlabAllocationBitMapLength;
    DWORD SlabAllocationBitMap[1];

} DEVICE_DATA_SET_LB_PROVISIONING_STATE, *PDEVICE_DATA_SET_LB_PROVISIONING_STATE;





typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 {

    DWORD Size;
    DWORD Version;
    DWORDLONG SlabSizeInBytes;
    DWORDLONG SlabOffsetDeltaInBytes;
    DWORD SlabAllocationBitMapBitCount;
    DWORD SlabAllocationBitMapLength;
    DWORD SlabAllocationBitMap[1];

} DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2, *PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;





typedef struct _STORAGE_OFFLOAD_READ_OUTPUT {

    DWORD OffloadReadFlags;
    DWORD Reserved;
    DWORDLONG LengthProtected;
    DWORD TokenLength;
    STORAGE_OFFLOAD_TOKEN Token;

} STORAGE_OFFLOAD_READ_OUTPUT, *PSTORAGE_OFFLOAD_READ_OUTPUT;







typedef struct _STORAGE_OFFLOAD_WRITE_OUTPUT {

    DWORD OffloadWriteFlags;
    DWORD Reserved;
    DWORDLONG LengthCopied;

} STORAGE_OFFLOAD_WRITE_OUTPUT, *PSTORAGE_OFFLOAD_WRITE_OUTPUT;
# 3229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT {

    DWORDLONG BytesProcessed;
    DWORDLONG BytesRepaired;
    DWORDLONG BytesFailed;

} DEVICE_DATA_SET_SCRUB_OUTPUT, *PDEVICE_DATA_SET_SCRUB_OUTPUT;
# 3244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {

    DWORDLONG BytesProcessed;
    DWORDLONG BytesRepaired;
    DWORDLONG BytesFailed;

    DEVICE_DATA_SET_RANGE ParityExtent;

} DEVICE_DATA_SET_SCRUB_EX_OUTPUT, *PDEVICE_DATA_SET_SCRUB_EX_OUTPUT;
# 3261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DATA_SET_REPAIR_OUTPUT {

    DEVICE_DATA_SET_RANGE ParityExtent;

} DEVICE_DATA_SET_REPAIR_OUTPUT, *PDEVICE_DATA_SET_REPAIR_OUTPUT;
# 3274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DSM_TIERING_QUERY_INPUT {

    DWORD Version;
    DWORD Size;

    DWORD Flags;

    DWORD NumberOfTierIds;
    GUID TierIds[1];

} DEVICE_DSM_TIERING_QUERY_INPUT, *PDEVICE_DSM_TIERING_QUERY_INPUT;





typedef struct _STORAGE_TIER_REGION {

    GUID TierId;

    DWORDLONG Offset;
    DWORDLONG Length;

} STORAGE_TIER_REGION, *PSTORAGE_TIER_REGION;






typedef struct _DEVICE_DSM_TIERING_QUERY_OUTPUT {

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    DWORD Reserved;

    DWORDLONG Alignment;

    DWORD TotalNumberOfRegions;
    DWORD NumberOfRegionsReturned;

                                          STORAGE_TIER_REGION Regions[1];

} DEVICE_DSM_TIERING_QUERY_OUTPUT, *PDEVICE_DSM_TIERING_QUERY_OUTPUT;

typedef struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT {





    DWORDLONG TopologyRangeBytes;





    BYTE TopologyId[16];

} DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT, *PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
# 3347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_STORAGE_ADDRESS_RANGE {
    LONGLONG StartAddress;
    DWORDLONG LengthInBytes;
} DEVICE_STORAGE_ADDRESS_RANGE, *PDEVICE_STORAGE_ADDRESS_RANGE;



typedef struct _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT {

    DWORD Version;

    DWORD Flags;

    DWORD TotalNumberOfRanges;





    DWORD NumberOfRangesReturned;



    DEVICE_STORAGE_ADDRESS_RANGE Ranges[1];

} DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT, *PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
# 3384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_ZONE_CONDITION {

    ZoneConditionConventional = 0x00,
    ZoneConditionEmpty = 0x01,
    ZoneConditionImplicitlyOpened = 0x02,
    ZoneConditionExplicitlyOpened = 0x03,
    ZoneConditionClosed = 0x04,

    ZoneConditionReadOnly = 0x0D,
    ZoneConditionFull = 0x0E,
    ZoneConditionOffline = 0x0F,

} STORAGE_ZONE_CONDITION, *PSTORAGE_ZONE_CONDITION;

typedef struct _DEVICE_DSM_REPORT_ZONES_PARAMETERS {
    DWORD Size;

    BYTE ReportOption;
    BYTE Partial;

    BYTE Reserved[2];
} DEVICE_DSM_REPORT_ZONES_PARAMETERS, *PDEVICE_DSM_REPORT_ZONES_PARAMETERS;







typedef enum _STORAGE_ZONES_ATTRIBUTES {

    ZonesAttributeTypeAndLengthMayDifferent = 0,
    ZonesAttributeTypeSameLengthSame = 1,
    ZonesAttributeTypeSameLastZoneLengthDifferent = 2,
    ZonesAttributeTypeMayDifferentLengthSame = 3,

} STORAGE_ZONES_ATTRIBUTES, *PSTORAGE_ZONES_ATTRIBUTES;

typedef struct _STORAGE_ZONE_DESCRIPTOR {

    DWORD Size;

    STORAGE_ZONE_TYPES ZoneType;
    STORAGE_ZONE_CONDITION ZoneCondition;

    BOOLEAN ResetWritePointerRecommend;
    BYTE Reserved0[3];

    DWORDLONG ZoneSize;
    DWORDLONG WritePointerOffset;

} STORAGE_ZONE_DESCRIPTOR, *PSTORAGE_ZONE_DESCRIPTOR;

typedef struct _DEVICE_DSM_REPORT_ZONES_DATA {

    DWORD Size;

    DWORD ZoneCount;
    STORAGE_ZONES_ATTRIBUTES Attributes;

    DWORD Reserved0;

                            STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];

} DEVICE_DSM_REPORT_ZONES_DATA, *PDEVICE_DSM_REPORT_ZONES_DATA;
# 3470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)





typedef struct _DEVICE_STORAGE_RANGE_ATTRIBUTES {
    DWORDLONG LengthInBytes;

    union {
        DWORD AllFlags;

        struct {
            DWORD IsRangeBad : 1;
        };
    };

    DWORD Reserved;

} DEVICE_STORAGE_RANGE_ATTRIBUTES, *PDEVICE_STORAGE_RANGE_ATTRIBUTES;

#pragma warning(pop)
# 3506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICE_DSM_RANGE_ERROR_INFO {

    DWORD Version;

    DWORD Flags;

    DWORD TotalNumberOfRanges;



    DWORD NumberOfRangesReturned;



    DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];







} DEVICE_DSM_RANGE_ERROR_INFO, *PDEVICE_DSM_RANGE_ERROR_INFO;
# 3546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {





    DWORD MaximumRequestsPerPeriod;





    DWORD MinimumPeriod;







    DWORDLONG MaximumRequestSize;






    DWORD EstimatedTimePerRequest;
# 3582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD NumOutStandingRequests;






    DWORDLONG RequestSize;

} STORAGE_GET_BC_PROPERTIES_OUTPUT, *PSTORAGE_GET_BC_PROPERTIES_OUTPUT;
# 3610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {




    DWORD Version;





    DWORD RequestsPerPeriod;





    DWORD Period;





    BOOLEAN RetryFailures;





    BOOLEAN Discardable;




    BOOLEAN Reserved1[2];





    DWORD AccessType;





    DWORD AccessMode;

} STORAGE_ALLOCATE_BC_STREAM_INPUT, *PSTORAGE_ALLOCATE_BC_STREAM_INPUT;

typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT {





    DWORDLONG RequestSize;






    DWORD NumOutStandingRequests;

} STORAGE_ALLOCATE_BC_STREAM_OUTPUT, *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;
# 3699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_PRIORITY_HINT_SUPPORT {
    DWORD SupportFlags;
} STORAGE_PRIORITY_HINT_SUPPORT, *PSTORAGE_PRIORITY_HINT_SUPPORT;
# 3712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_DIAGNOSTIC_LEVEL {
    StorageDiagnosticLevelDefault = 0,
    StorageDiagnosticLevelMax
} STORAGE_DIAGNOSTIC_LEVEL, *PSTORAGE_DIAGNOSTIC_LEVEL;

typedef enum _STORAGE_DIAGNOSTIC_TARGET_TYPE {

    StorageDiagnosticTargetTypeUndefined = 0,
    StorageDiagnosticTargetTypePort,
    StorageDiagnosticTargetTypeMiniport,
    StorageDiagnosticTargetTypeHbaFirmware,
    StorageDiagnosticTargetTypeMax

} STORAGE_DIAGNOSTIC_TARGET_TYPE, *PSTORAGE_DIAGNOSTIC_TARGET_TYPE;





typedef struct _STORAGE_DIAGNOSTIC_REQUEST {


    DWORD Version;



    DWORD Size;


    DWORD Reserved;


    STORAGE_DIAGNOSTIC_TARGET_TYPE TargetType;


    STORAGE_DIAGNOSTIC_LEVEL Level;

} STORAGE_DIAGNOSTIC_REQUEST, *PSTORAGE_DIAGNOSTIC_REQUEST;





typedef struct _STORAGE_DIAGNOSTIC_DATA {


    DWORD Version;


    DWORD Size;


    GUID ProviderId;





    DWORD BufferSize;


    DWORD Reserved;


                             BYTE DiagnosticDataBuffer[1];

} STORAGE_DIAGNOSTIC_DATA, *PSTORAGE_DIAGNOSTIC_DATA;
# 3789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _PHYSICAL_ELEMENT_STATUS_REQUEST {

    DWORD Version;
    DWORD Size;

    DWORD StartingElement;
    BYTE Filter;
    BYTE ReportType;
    BYTE Reserved[2];

} PHYSICAL_ELEMENT_STATUS_REQUEST, *PPHYSICAL_ELEMENT_STATUS_REQUEST;

typedef struct _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR {

    DWORD Version;
    DWORD Size;

    DWORD ElementIdentifier;
    BYTE PhysicalElementType;
    BYTE PhysicalElementHealth;
    BYTE Reserved1[2];


    DWORDLONG AssociatedCapacity;

    DWORD Reserved2[4];

} PHYSICAL_ELEMENT_STATUS_DESCRIPTOR, *PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR;

typedef struct _PHYSICAL_ELEMENT_STATUS {

    DWORD Version;
    DWORD Size;

    DWORD DescriptorCount;
    DWORD ReturnedDescriptorCount;

    DWORD ElementIdentifierBeingDepoped;
    DWORD Reserved;

    PHYSICAL_ELEMENT_STATUS_DESCRIPTOR Descriptors[1];

} PHYSICAL_ELEMENT_STATUS, *PPHYSICAL_ELEMENT_STATUS;
# 3840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST {

    DWORD Version;
    DWORD Size;


    DWORDLONG RequestCapacity;

    DWORD ElementIdentifier;
    DWORD Reserved;

} REMOVE_ELEMENT_AND_TRUNCATE_REQUEST, *PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST;


#pragma warning(push)
#pragma warning(disable: 4200)



typedef struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA {

    WORD Reserved;







    WORD SerialNumberLength;
# 3878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    BYTE SerialNumber[0];


} STORAGE_MEDIA_SERIAL_NUMBER_DATA, *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;



typedef struct _STORAGE_READ_CAPACITY {




    DWORD Version;




    DWORD Size;





    DWORD BlockLength;






    LARGE_INTEGER NumberOfBlocks;





    LARGE_INTEGER DiskLength;

} STORAGE_READ_CAPACITY, *PSTORAGE_READ_CAPACITY;

#pragma warning(pop)








typedef enum _WRITE_CACHE_TYPE {
    WriteCacheTypeUnknown,
    WriteCacheTypeNone,
    WriteCacheTypeWriteBack,
    WriteCacheTypeWriteThrough
} WRITE_CACHE_TYPE;

typedef enum _WRITE_CACHE_ENABLE {
    WriteCacheEnableUnknown,
    WriteCacheDisabled,
    WriteCacheEnabled
} WRITE_CACHE_ENABLE;

typedef enum _WRITE_CACHE_CHANGE {
    WriteCacheChangeUnknown,
    WriteCacheNotChangeable,
    WriteCacheChangeable
} WRITE_CACHE_CHANGE;

typedef enum _WRITE_THROUGH {
    WriteThroughUnknown,
    WriteThroughNotSupported,
    WriteThroughSupported
} WRITE_THROUGH;

typedef struct _STORAGE_WRITE_CACHE_PROPERTY {







    DWORD Version;







    DWORD Size;






    WRITE_CACHE_TYPE WriteCacheType;






    WRITE_CACHE_ENABLE WriteCacheEnabled;






    WRITE_CACHE_CHANGE WriteCacheChangeable;






    WRITE_THROUGH WriteThroughSupported;






    BOOLEAN FlushCacheSupported;






    BOOLEAN UserDefinedPowerProtection;






    BOOLEAN NVCacheEnabled;

} STORAGE_WRITE_CACHE_PROPERTY, *PSTORAGE_WRITE_CACHE_PROPERTY;

#pragma warning(push)
#pragma warning(disable: 4200)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)




typedef struct _PERSISTENT_RESERVE_COMMAND {

    DWORD Version;
    DWORD Size;

    union {

        struct {





            BYTE ServiceAction : 5;
            BYTE Reserved1 : 3;





            WORD AllocationLength;

        } PR_IN;

        struct {





            BYTE ServiceAction : 5;
            BYTE Reserved1 : 3;





            BYTE Type : 4;
            BYTE Scope : 4;






            BYTE ParameterList[0];


        } PR_OUT;
    } ;

} PERSISTENT_RESERVE_COMMAND, *PPERSISTENT_RESERVE_COMMAND;


#pragma warning(pop)
# 4094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)
# 4118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _DEVICEDUMP_COLLECTION_TYPE {
    TCCollectionBugCheck = 1,
    TCCollectionApplicationRequested,
    TCCollectionDeviceRequested
} DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE, *PDEVICEDUMP_COLLECTION_TYPE;
# 4136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 4136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3
# 4155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICEDUMP_SUBSECTION_POINTER {
        DWORD dwSize;
        DWORD dwFlags;
        DWORD dwOffset;
} DEVICEDUMP_SUBSECTION_POINTER,*PDEVICEDUMP_SUBSECTION_POINTER;




typedef struct _DEVICEDUMP_STRUCTURE_VERSION {



        DWORD dwSignature;




        DWORD dwVersion;




        DWORD dwSize;

} DEVICEDUMP_STRUCTURE_VERSION, *PDEVICEDUMP_STRUCTURE_VERSION;




typedef struct _DEVICEDUMP_SECTION_HEADER {



        GUID guidDeviceDataId;
# 4201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
        BYTE sOrganizationID[16];




        DWORD dwFirmwareRevision;




        BYTE sModelNumber[32];




        BYTE szDeviceManufacturingID[32];






        DWORD dwFlags;




        DWORD bRestrictedPrivateDataVersion;





        DWORD dwFirmwareIssueId;




        BYTE szIssueDescriptionString[132];

} DEVICEDUMP_SECTION_HEADER, *PDEVICEDUMP_SECTION_HEADER;
# 4268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _GP_LOG_PAGE_DESCRIPTOR {
        WORD LogAddress;
        WORD LogSectors;
} GP_LOG_PAGE_DESCRIPTOR,*PGP_LOG_PAGE_DESCRIPTOR;

typedef struct _DEVICEDUMP_PUBLIC_SUBSECTION {
        DWORD dwFlags;
        GP_LOG_PAGE_DESCRIPTOR GPLogTable[16];
        CHAR szDescription[16];
        BYTE bData[1];
} DEVICEDUMP_PUBLIC_SUBSECTION, *PDEVICEDUMP_PUBLIC_SUBSECTION;




typedef struct _DEVICEDUMP_RESTRICTED_SUBSECTION {

        BYTE bData[1];

} DEVICEDUMP_RESTRICTED_SUBSECTION, *PDEVICEDUMP_RESTRICTED_SUBSECTION;




typedef struct _DEVICEDUMP_PRIVATE_SUBSECTION {

        DWORD dwFlags;
        GP_LOG_PAGE_DESCRIPTOR GPLogId;

        BYTE bData[1];

} DEVICEDUMP_PRIVATE_SUBSECTION, *PDEVICEDUMP_PRIVATE_SUBSECTION;




typedef struct _DEVICEDUMP_STORAGEDEVICE_DATA {




        DEVICEDUMP_STRUCTURE_VERSION Descriptor;




        DEVICEDUMP_SECTION_HEADER SectionHeader;




        DWORD dwBufferSize;




        DWORD dwReasonForCollection;




        DEVICEDUMP_SUBSECTION_POINTER PublicData;
        DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
        DEVICEDUMP_SUBSECTION_POINTER PrivateData;

} DEVICEDUMP_STORAGEDEVICE_DATA, *PDEVICEDUMP_STORAGEDEVICE_DATA;
# 4353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {

        BYTE Cdb[16];


        BYTE Command[16];


        DWORDLONG StartTime;


        DWORDLONG EndTime;


        DWORD OperationStatus;


        DWORD OperationError;


        union {
         struct {
                DWORD dwReserved;
                } ExternalStack;

         struct {
                DWORD dwAtaPortSpecific;
         } AtaPort;

         struct {
                DWORD SrbTag ;
         } StorPort;

        } StackSpecific;

} DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD,*PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;


typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {




        DEVICEDUMP_STRUCTURE_VERSION Descriptor;




        DWORD dwReasonForCollection;




        BYTE cDriverName[16];





        DWORD uiNumRecords;

        DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];

} DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP,*PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 4419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3
# 4431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)
#pragma warning(disable: 4214)
# 4444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_IDLE_POWER {
    DWORD Version;
    DWORD Size;
    DWORD WakeCapableHint : 1;
    DWORD D3ColdSupported : 1;
    DWORD Reserved : 30;
    DWORD D3IdleTimeout;
} STORAGE_IDLE_POWER, *PSTORAGE_IDLE_POWER;

#pragma warning(pop)
# 4464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_POWERUP_REASON_TYPE {
  StoragePowerupUnknown = 0,
  StoragePowerupIO,
  StoragePowerupDeviceAttention
} STORAGE_POWERUP_REASON_TYPE, *PSTORAGE_POWERUP_REASON_TYPE;

typedef struct _STORAGE_IDLE_POWERUP_REASON {
    DWORD Version;
    DWORD Size;
    STORAGE_POWERUP_REASON_TYPE PowerupReason;
} STORAGE_IDLE_POWERUP_REASON, *PSTORAGE_IDLE_POWERUP_REASON;
# 4504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_DEVICE_POWER_CAP_UNITS {
    StorageDevicePowerCapUnitsPercent,
    StorageDevicePowerCapUnitsMilliwatts
} STORAGE_DEVICE_POWER_CAP_UNITS, *PSTORAGE_DEVICE_POWER_CAP_UNITS;

typedef struct _STORAGE_DEVICE_POWER_CAP {
    DWORD Version;
    DWORD Size;
    STORAGE_DEVICE_POWER_CAP_UNITS Units;
    DWORDLONG MaxPower;
} STORAGE_DEVICE_POWER_CAP, *PSTORAGE_DEVICE_POWER_CAP;
# 4533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma pack(push)
#pragma pack(1)







typedef struct _STORAGE_RPMB_DATA_FRAME {




    BYTE Stuff[196];




    BYTE KeyOrMAC[32];




    BYTE Data[256];




    BYTE Nonce[16];




    BYTE WriteCounter[4];




    BYTE Address[2];




    BYTE BlockCount[2];




    BYTE OperationResult[2];




    BYTE RequestOrResponseType[2];

} STORAGE_RPMB_DATA_FRAME, *PSTORAGE_RPMB_DATA_FRAME;





typedef enum _STORAGE_RPMB_COMMAND_TYPE {
    StorRpmbProgramAuthKey = 0x00000001,
    StorRpmbQueryWriteCounter = 0x00000002,
    StorRpmbAuthenticatedWrite = 0x00000003,
    StorRpmbAuthenticatedRead = 0x00000004,
    StorRpmbReadResultRequest = 0x00000005,
    StorRpmbAuthenticatedDeviceConfigWrite = 0x00000006,
    StorRpmbAuthenticatedDeviceConfigRead = 0x00000007,
} STORAGE_RPMB_COMMAND_TYPE, *PSTORAGE_RPMB_COMMAND_TYPE;

#pragma pack(pop)
# 4616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_EVENT_NOTIFICATION {
    DWORD Version;
    DWORD Size;
    DWORDLONG Events;
} STORAGE_EVENT_NOTIFICATION, *PSTORAGE_EVENT_NOTIFICATION;
# 4630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(pop)
# 4665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_COUNTER_TYPE {

    StorageCounterTypeUnknown = 0,

    StorageCounterTypeTemperatureCelsius,
    StorageCounterTypeTemperatureCelsiusMax,
    StorageCounterTypeReadErrorsTotal,
    StorageCounterTypeReadErrorsCorrected,
    StorageCounterTypeReadErrorsUncorrected,
    StorageCounterTypeWriteErrorsTotal,
    StorageCounterTypeWriteErrorsCorrected,
    StorageCounterTypeWriteErrorsUncorrected,
    StorageCounterTypeManufactureDate,
    StorageCounterTypeStartStopCycleCount,
    StorageCounterTypeStartStopCycleCountMax,
    StorageCounterTypeLoadUnloadCycleCount,
    StorageCounterTypeLoadUnloadCycleCountMax,
    StorageCounterTypeWearPercentage,
    StorageCounterTypeWearPercentageWarning,
    StorageCounterTypeWearPercentageMax,
    StorageCounterTypePowerOnHours,
    StorageCounterTypeReadLatency100NSMax,
    StorageCounterTypeWriteLatency100NSMax,
    StorageCounterTypeFlushLatency100NSMax,

    StorageCounterTypeMax

} STORAGE_COUNTER_TYPE, *PSTORAGE_COUNTER_TYPE;

typedef struct _STORAGE_COUNTER {

    STORAGE_COUNTER_TYPE Type;

    union {

        struct {



            DWORD Week;




            DWORD Year;
        } ManufactureDate;

        DWORDLONG AsUlonglong;
    } Value;

} STORAGE_COUNTER, *PSTORAGE_COUNTER;

typedef struct _STORAGE_COUNTERS {




    DWORD Version;




    DWORD Size;

    DWORD NumberOfCounters;

                                   STORAGE_COUNTER Counters[1];

} STORAGE_COUNTERS, *PSTORAGE_COUNTERS;
# 4767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_HW_FIRMWARE_INFO_QUERY {
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD Reserved;
} STORAGE_HW_FIRMWARE_INFO_QUERY, *PSTORAGE_HW_FIRMWARE_INFO_QUERY;
# 4786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)
#pragma warning(disable: 4214)



typedef struct _STORAGE_HW_FIRMWARE_SLOT_INFO {


    DWORD Version;


    DWORD Size;


    BYTE SlotNumber;


    BYTE ReadOnly : 1;


    BYTE Reserved0 : 7;


    BYTE Reserved1[6];


    BYTE Revision[16];

} STORAGE_HW_FIRMWARE_SLOT_INFO, *PSTORAGE_HW_FIRMWARE_SLOT_INFO;

typedef struct _STORAGE_HW_FIRMWARE_INFO {


    DWORD Version;


    DWORD Size;


    BYTE SupportUpgrade : 1;


    BYTE Reserved0 : 7;


    BYTE SlotCount;


    BYTE ActiveSlot;


    BYTE PendingActivateSlot;


    BOOLEAN FirmwareShared;


    BYTE Reserved[3];


    DWORD ImagePayloadAlignment;


    DWORD ImagePayloadMaxSize;


    STORAGE_HW_FIRMWARE_SLOT_INFO Slot[1];

} STORAGE_HW_FIRMWARE_INFO, *PSTORAGE_HW_FIRMWARE_INFO;
#pragma warning(pop)





#pragma warning(push)
#pragma warning(disable: 4200)

typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD {

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    BYTE Slot;
    BYTE Reserved[3];

    DWORDLONG Offset;
    DWORDLONG BufferSize;

    BYTE ImageBuffer[1];

} STORAGE_HW_FIRMWARE_DOWNLOAD, *PSTORAGE_HW_FIRMWARE_DOWNLOAD;

typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    BYTE Slot;
    BYTE Reserved[3];

    DWORDLONG Offset;
    DWORDLONG BufferSize;

    DWORD ImageSize;
    DWORD Reserved2;

    BYTE ImageBuffer[1];

} STORAGE_HW_FIRMWARE_DOWNLOAD_V2, *PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2;

#pragma warning(pop)




typedef struct _STORAGE_HW_FIRMWARE_ACTIVATE {

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    BYTE Slot;
    BYTE Reserved0[3];

} STORAGE_HW_FIRMWARE_ACTIVATE, *PSTORAGE_HW_FIRMWARE_ACTIVATE;







typedef struct _STORAGE_PROTOCOL_COMMAND {

    DWORD Version;
    DWORD Length;

    STORAGE_PROTOCOL_TYPE ProtocolType;
    DWORD Flags;

    DWORD ReturnStatus;
    DWORD ErrorCode;

    DWORD CommandLength;
    DWORD ErrorInfoLength;
    DWORD DataToDeviceTransferLength;
    DWORD DataFromDeviceTransferLength;

    DWORD TimeOutValue;

    DWORD ErrorInfoOffset;
    DWORD DataToDeviceBufferOffset;
    DWORD DataFromDeviceBufferOffset;

    DWORD CommandSpecific;
    DWORD Reserved0;

    DWORD FixedProtocolReturnData;
    DWORD Reserved1[3];

                                           BYTE Command[1];

} STORAGE_PROTOCOL_COMMAND, *PSTORAGE_PROTOCOL_COMMAND;
# 5021 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _STORAGE_ATTRIBUTE_MGMT_ACTION {
    StorAttributeMgmt_ClearAttribute = 0,
    StorAttributeMgmt_SetAttribute = 1,
    StorAttributeMgmt_ResetAttribute = 2
} STORAGE_ATTRIBUTE_MGMT_ACTION, *PSTORAGE_ATTRIBUTE_MGMT_ACTION;
# 5045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STORAGE_ATTRIBUTE_MGMT {





    DWORD Version;





    DWORD Size;




    STORAGE_ATTRIBUTE_MGMT_ACTION Action;





    DWORD Attribute;

} STORAGE_ATTRIBUTE_MGMT, *PSTORAGE_ATTRIBUTE_MGMT;


#pragma warning(pop)



}
# 5105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)
#pragma warning(disable: 4820)
# 5371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _MEDIA_TYPE {
    Unknown,
    F5_1Pt2_512,
    F3_1Pt44_512,
    F3_2Pt88_512,
    F3_20Pt8_512,
    F3_720_512,
    F5_360_512,
    F5_320_512,
    F5_320_1024,
    F5_180_512,
    F5_160_512,
    RemovableMedia,
    FixedMedia,
    F3_120M_512,
    F3_640_512,
    F5_640_512,
    F5_720_512,
    F3_1Pt2_512,
    F3_1Pt23_1024,
    F5_1Pt23_1024,
    F3_128Mb_512,
    F3_230Mb_512,
    F8_256_128,
    F3_200Mb_512,
    F3_240M_512,
    F3_32M_512
} MEDIA_TYPE, *PMEDIA_TYPE;






typedef struct _FORMAT_PARAMETERS {
   MEDIA_TYPE MediaType;
   DWORD StartCylinderNumber;
   DWORD EndCylinderNumber;
   DWORD StartHeadNumber;
   DWORD EndHeadNumber;
} FORMAT_PARAMETERS, *PFORMAT_PARAMETERS;
# 5420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef WORD BAD_TRACK_NUMBER;
typedef WORD *PBAD_TRACK_NUMBER;






typedef struct _FORMAT_EX_PARAMETERS {
   MEDIA_TYPE MediaType;
   DWORD StartCylinderNumber;
   DWORD EndCylinderNumber;
   DWORD StartHeadNumber;
   DWORD EndHeadNumber;
   WORD FormatGapLength;
   WORD SectorsPerTrack;
   WORD SectorNumber[1];
} FORMAT_EX_PARAMETERS, *PFORMAT_EX_PARAMETERS;







typedef struct _DISK_GEOMETRY {


    LARGE_INTEGER Cylinders;


    MEDIA_TYPE MediaType;


    DWORD TracksPerCylinder;


    DWORD SectorsPerTrack;


    DWORD BytesPerSector;

} DISK_GEOMETRY, *PDISK_GEOMETRY;
# 5479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _PARTITION_INFORMATION {
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD HiddenSectors;
    DWORD PartitionNumber;
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    BOOLEAN RewritePartition;
} PARTITION_INFORMATION, *PPARTITION_INFORMATION;







typedef struct _SET_PARTITION_INFORMATION {
    BYTE PartitionType;
} SET_PARTITION_INFORMATION, *PSET_PARTITION_INFORMATION;






typedef struct _DRIVE_LAYOUT_INFORMATION {
    DWORD PartitionCount;
    DWORD Signature;
    PARTITION_INFORMATION PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION, *PDRIVE_LAYOUT_INFORMATION;






typedef struct _VERIFY_INFORMATION {
    LARGE_INTEGER StartingOffset;
    DWORD Length;
} VERIFY_INFORMATION, *PVERIFY_INFORMATION;






typedef struct _REASSIGN_BLOCKS {
    WORD Reserved;
    WORD Count;
    DWORD BlockNumber[1];
} REASSIGN_BLOCKS, *PREASSIGN_BLOCKS;







# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 5537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3

typedef struct _REASSIGN_BLOCKS_EX {
    WORD Reserved;
    WORD Count;
    LARGE_INTEGER BlockNumber[1];
} REASSIGN_BLOCKS_EX, *PREASSIGN_BLOCKS_EX;

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 5543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3
# 5560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _PARTITION_STYLE {
    PARTITION_STYLE_MBR,
    PARTITION_STYLE_GPT,
    PARTITION_STYLE_RAW
} PARTITION_STYLE;







typedef struct _PARTITION_INFORMATION_GPT {


    GUID PartitionType;


    GUID PartitionId;


    DWORD64 Attributes;


    WCHAR Name [36];

} PARTITION_INFORMATION_GPT, *PPARTITION_INFORMATION_GPT;
# 5620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _PARTITION_INFORMATION_MBR {


    BYTE PartitionType;


    BOOLEAN BootIndicator;


    BOOLEAN RecognizedPartition;


    DWORD HiddenSectors;



    GUID PartitionId;


} PARTITION_INFORMATION_MBR, *PPARTITION_INFORMATION_MBR;
# 5650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;


typedef struct _SET_PARTITION_INFORMATION_EX {
    PARTITION_STYLE PartitionStyle;
    union {
        SET_PARTITION_INFORMATION_MBR Mbr;
        SET_PARTITION_INFORMATION_GPT Gpt;
    } ;
} SET_PARTITION_INFORMATION_EX, *PSET_PARTITION_INFORMATION_EX;







typedef struct _CREATE_DISK_GPT {
    GUID DiskId;
    DWORD MaxPartitionCount;
} CREATE_DISK_GPT, *PCREATE_DISK_GPT;






typedef struct _CREATE_DISK_MBR {
    DWORD Signature;
} CREATE_DISK_MBR, *PCREATE_DISK_MBR;


typedef struct _CREATE_DISK {
    PARTITION_STYLE PartitionStyle;
    union {
        CREATE_DISK_MBR Mbr;
        CREATE_DISK_GPT Gpt;
    } ;
} CREATE_DISK, *PCREATE_DISK;
# 5698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _GET_LENGTH_INFORMATION {
    LARGE_INTEGER Length;
} GET_LENGTH_INFORMATION, *PGET_LENGTH_INFORMATION;







typedef struct _PARTITION_INFORMATION_EX {


    PARTITION_STYLE PartitionStyle;


    LARGE_INTEGER StartingOffset;


    LARGE_INTEGER PartitionLength;


    DWORD PartitionNumber;


    BOOLEAN RewritePartition;

    union {


        PARTITION_INFORMATION_MBR Mbr;


        PARTITION_INFORMATION_GPT Gpt;

    } ;

} PARTITION_INFORMATION_EX, *PPARTITION_INFORMATION_EX;






typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {


    GUID DiskId;


    LARGE_INTEGER StartingUsableOffset;


    LARGE_INTEGER UsableLength;


    DWORD MaxPartitionCount;

} DRIVE_LAYOUT_INFORMATION_GPT, *PDRIVE_LAYOUT_INFORMATION_GPT;






typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {


    DWORD Signature;


    DWORD CheckSum;


} DRIVE_LAYOUT_INFORMATION_MBR, *PDRIVE_LAYOUT_INFORMATION_MBR;






typedef struct _DRIVE_LAYOUT_INFORMATION_EX {


    DWORD PartitionStyle;


    DWORD PartitionCount;

    union {


        DRIVE_LAYOUT_INFORMATION_MBR Mbr;


        DRIVE_LAYOUT_INFORMATION_GPT Gpt;

    } ;


    PARTITION_INFORMATION_EX PartitionEntry[1];

} DRIVE_LAYOUT_INFORMATION_EX, *PDRIVE_LAYOUT_INFORMATION_EX;
# 5813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _DETECTION_TYPE {
        DetectNone,
        DetectInt13,
        DetectExInt13
} DETECTION_TYPE;

typedef struct _DISK_INT13_INFO {
        WORD DriveSelect;
        DWORD MaxCylinders;
        WORD SectorsPerTrack;
        WORD MaxHeads;
        WORD NumberDrives;
} DISK_INT13_INFO, *PDISK_INT13_INFO;

typedef struct _DISK_EX_INT13_INFO {
        WORD ExBufferSize;
        WORD ExFlags;
        DWORD ExCylinders;
        DWORD ExHeads;
        DWORD ExSectorsPerTrack;
        DWORD64 ExSectorsPerDrive;
        WORD ExSectorSize;
        WORD ExReserved;
} DISK_EX_INT13_INFO, *PDISK_EX_INT13_INFO;


#pragma warning(push)
#pragma warning(disable: 4201)


typedef struct _DISK_DETECTION_INFO {
        DWORD SizeOfDetectInfo;
        DETECTION_TYPE DetectionType;
        union {
                struct {






                        DISK_INT13_INFO Int13;






                        DISK_EX_INT13_INFO ExInt13;
                } ;
        } ;
} DISK_DETECTION_INFO, *PDISK_DETECTION_INFO;


typedef struct _DISK_PARTITION_INFO {
        DWORD SizeOfPartitionInfo;
        PARTITION_STYLE PartitionStyle;
        union {
                struct {
                        DWORD Signature;
                        DWORD CheckSum;
                } Mbr;
                struct {
                        GUID DiskId;
                } Gpt;
        } ;
} DISK_PARTITION_INFO, *PDISK_PARTITION_INFO;


#pragma warning(pop)
# 5906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DISK_GEOMETRY_EX {
        DISK_GEOMETRY Geometry;
        LARGE_INTEGER DiskSize;
        BYTE Data[1];
} DISK_GEOMETRY_EX, *PDISK_GEOMETRY_EX;
# 5921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DISK_CONTROLLER_NUMBER {
    DWORD ControllerNumber;
    DWORD DiskNumber;
} DISK_CONTROLLER_NUMBER, *PDISK_CONTROLLER_NUMBER;
# 5951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum {
    EqualPriority,
    KeepPrefetchedData,
    KeepReadData
} DISK_CACHE_RETENTION_PRIORITY;
# 5965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DISK_CACHE_INFORMATION {







    BOOLEAN ParametersSavable;





    BOOLEAN ReadCacheEnabled;
    BOOLEAN WriteCacheEnabled;
# 5989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;






    WORD DisablePrefetchTransferLength;







    BOOLEAN PrefetchScalar;
# 6015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    union {
        struct {
            WORD Minimum;
            WORD Maximum;






            WORD MaximumBlocks;
        } ScalarPrefetch;

        struct {
            WORD Minimum;
            WORD Maximum;
        } BlockPrefetch;
    } ;

} DISK_CACHE_INFORMATION, *PDISK_CACHE_INFORMATION;
# 6043 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DISK_GROW_PARTITION {
    DWORD PartitionNumber;
    LARGE_INTEGER BytesToGrow;
} DISK_GROW_PARTITION, *PDISK_GROW_PARTITION;
# 6067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _HISTOGRAM_BUCKET {
    DWORD Reads;
    DWORD Writes;
} HISTOGRAM_BUCKET, *PHISTOGRAM_BUCKET;



typedef struct _DISK_HISTOGRAM {
    LARGE_INTEGER DiskSize;
    LARGE_INTEGER Start;
    LARGE_INTEGER End;
    LARGE_INTEGER Average;
    LARGE_INTEGER AverageRead;
    LARGE_INTEGER AverageWrite;
    DWORD Granularity;
    DWORD Size;
    DWORD ReadCount;
    DWORD WriteCount;
    PHISTOGRAM_BUCKET Histogram;
} DISK_HISTOGRAM, *PDISK_HISTOGRAM;
# 6110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DISK_PERFORMANCE {
        LARGE_INTEGER BytesRead;
        LARGE_INTEGER BytesWritten;
        LARGE_INTEGER ReadTime;
        LARGE_INTEGER WriteTime;
        LARGE_INTEGER IdleTime;
        DWORD ReadCount;
        DWORD WriteCount;
        DWORD QueueDepth;
        DWORD SplitCount;
        LARGE_INTEGER QueryTime;
        DWORD StorageDeviceNumber;
        WCHAR StorageManagerName[8];
} DISK_PERFORMANCE, *PDISK_PERFORMANCE;







typedef struct _DISK_RECORD {
   LARGE_INTEGER ByteOffset;
   LARGE_INTEGER StartTime;
   LARGE_INTEGER EndTime;
   PVOID VirtualAddress;
   DWORD NumberOfBytes;
   BYTE DeviceNumber;
   BOOLEAN ReadRequest;
} DISK_RECORD, *PDISK_RECORD;






typedef struct _DISK_LOGGING {
    BYTE Function;
    PVOID BufferAddress;
    DWORD BufferSize;
} DISK_LOGGING, *PDISK_LOGGING;
# 6188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _BIN_TYPES {
    RequestSize,
    RequestLocation
} BIN_TYPES;





typedef struct _BIN_RANGE {
    LARGE_INTEGER StartValue;
    LARGE_INTEGER Length;
} BIN_RANGE, *PBIN_RANGE;





typedef struct _PERF_BIN {
    DWORD NumberOfBins;
    DWORD TypeOfBin;
    BIN_RANGE BinsRanges[1];
} PERF_BIN, *PPERF_BIN ;





typedef struct _BIN_COUNT {
    BIN_RANGE BinRange;
    DWORD BinCount;
} BIN_COUNT, *PBIN_COUNT;





typedef struct _BIN_RESULTS {
    DWORD NumberOfBins;
    BIN_COUNT BinCounts[1];
} BIN_RESULTS, *PBIN_RESULTS;
# 6238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 6238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3

typedef struct _GETVERSIONINPARAMS {
        BYTE bVersion;
        BYTE bRevision;
        BYTE bReserved;
        BYTE bIDEDeviceMap;
        DWORD fCapabilities;
        DWORD dwReserved[4];
} GETVERSIONINPARAMS, *PGETVERSIONINPARAMS, *LPGETVERSIONINPARAMS;

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 6247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3
# 6261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 6261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3

typedef struct _IDEREGS {
        BYTE bFeaturesReg;
        BYTE bSectorCountReg;
        BYTE bSectorNumberReg;
        BYTE bCylLowReg;
        BYTE bCylHighReg;
        BYTE bDriveHeadReg;
        BYTE bCommandReg;
        BYTE bReserved;
} IDEREGS, *PIDEREGS, *LPIDEREGS;

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 6272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3
# 6297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 6297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3

typedef struct _SENDCMDINPARAMS {
        DWORD cBufferSize;
        IDEREGS irDriveRegs;
        BYTE bDriveNumber;

        BYTE bReserved[3];
        DWORD dwReserved[4];
        BYTE bBuffer[1];
} SENDCMDINPARAMS, *PSENDCMDINPARAMS, *LPSENDCMDINPARAMS;

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 6307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 6313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3

typedef struct _DRIVERSTATUS {
        BYTE bDriverError;

        BYTE bIDEError;


        BYTE bReserved[2];
        DWORD dwReserved[2];
} DRIVERSTATUS, *PDRIVERSTATUS, *LPDRIVERSTATUS;

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 6323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3
# 6352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 6352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3

typedef struct _SENDCMDOUTPARAMS {
        DWORD cBufferSize;
        DRIVERSTATUS DriverStatus;
        BYTE bBuffer[1];
} SENDCMDOUTPARAMS, *PSENDCMDOUTPARAMS, *LPSENDCMDOUTPARAMS;

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 6358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 2 3
# 6404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _GET_DISK_ATTRIBUTES {





    DWORD Version;




    DWORD Reserved1;





    DWORDLONG Attributes;

} GET_DISK_ATTRIBUTES, *PGET_DISK_ATTRIBUTES;
# 6435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _SET_DISK_ATTRIBUTES {





    DWORD Version;






    BOOLEAN Persist;




    BYTE Reserved1[3];




    DWORDLONG Attributes;





    DWORDLONG AttributesMask;




    DWORD Reserved2[4];

} SET_DISK_ATTRIBUTES, *PSET_DISK_ATTRIBUTES;






#pragma warning(pop)
# 6517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _ELEMENT_TYPE {
    AllElements,
    ChangerTransport,
    ChangerSlot,
    ChangerIEPort,
    ChangerDrive,
    ChangerDoor,
    ChangerKeypad,
    ChangerMaxElement
} ELEMENT_TYPE, *PELEMENT_TYPE;

typedef struct _CHANGER_ELEMENT {
    ELEMENT_TYPE ElementType;
    DWORD ElementAddress;
} CHANGER_ELEMENT, *PCHANGER_ELEMENT;

typedef struct _CHANGER_ELEMENT_LIST {
    CHANGER_ELEMENT Element;
    DWORD NumberOfElements;
} CHANGER_ELEMENT_LIST , *PCHANGER_ELEMENT_LIST;
# 6627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _GET_CHANGER_PARAMETERS {





    DWORD Size;





    WORD NumberTransportElements;
    WORD NumberStorageElements;
    WORD NumberCleanerSlots;
    WORD NumberIEElements;
    WORD NumberDataTransferElements;





    WORD NumberOfDoors;






    WORD FirstSlotNumber;
    WORD FirstDriveNumber;
    WORD FirstTransportNumber;
    WORD FirstIEPortNumber;
    WORD FirstCleanerSlotAddress;





    WORD MagazineSize;






    DWORD DriveCleanTimeout;





    DWORD Features0;
    DWORD Features1;






    BYTE MoveFromTransport;
    BYTE MoveFromSlot;
    BYTE MoveFromIePort;
    BYTE MoveFromDrive;






    BYTE ExchangeFromTransport;
    BYTE ExchangeFromSlot;
    BYTE ExchangeFromIePort;
    BYTE ExchangeFromDrive;






    BYTE LockUnlockCapabilities;






    BYTE PositionCapabilities;





    BYTE Reserved1[2];
    DWORD Reserved2[2];

} GET_CHANGER_PARAMETERS, * PGET_CHANGER_PARAMETERS;






typedef struct _CHANGER_PRODUCT_DATA {





    BYTE VendorId[8];





    BYTE ProductId[16];





    BYTE Revision[4];






    BYTE SerialNumber[32];





    BYTE DeviceType;

} CHANGER_PRODUCT_DATA, *PCHANGER_PRODUCT_DATA;
# 6775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _CHANGER_SET_ACCESS {





    CHANGER_ELEMENT Element;





    DWORD Control;
} CHANGER_SET_ACCESS, *PCHANGER_SET_ACCESS;
# 6799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _CHANGER_READ_ELEMENT_STATUS {





    CHANGER_ELEMENT_LIST ElementList;





    BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS, *PCHANGER_READ_ELEMENT_STATUS;





typedef struct _CHANGER_ELEMENT_STATUS {





    CHANGER_ELEMENT Element;







    CHANGER_ELEMENT SrcElementAddress;





    DWORD Flags;





    DWORD ExceptionCode;






    BYTE TargetId;






    BYTE Lun;
    WORD Reserved;






    BYTE PrimaryVolumeID[36];







    BYTE AlternateVolumeID[36];

} CHANGER_ELEMENT_STATUS, *PCHANGER_ELEMENT_STATUS;







typedef struct _CHANGER_ELEMENT_STATUS_EX {





    CHANGER_ELEMENT Element;







    CHANGER_ELEMENT SrcElementAddress;





    DWORD Flags;





    DWORD ExceptionCode;






    BYTE TargetId;






    BYTE Lun;
    WORD Reserved;






    BYTE PrimaryVolumeID[36];







    BYTE AlternateVolumeID[36];




    BYTE VendorIdentification[8];




    BYTE ProductIdentification[16];




    BYTE SerialNumber[32];

} CHANGER_ELEMENT_STATUS_EX, *PCHANGER_ELEMENT_STATUS_EX;
# 6998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {





    CHANGER_ELEMENT_LIST ElementList;






    BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS, *PCHANGER_INITIALIZE_ELEMENT_STATUS;






typedef struct _CHANGER_SET_POSITION {






    CHANGER_ELEMENT Transport;





    CHANGER_ELEMENT Destination;





    BOOLEAN Flip;
} CHANGER_SET_POSITION, *PCHANGER_SET_POSITION;






typedef struct _CHANGER_EXCHANGE_MEDIUM {





    CHANGER_ELEMENT Transport;





    CHANGER_ELEMENT Source;





    CHANGER_ELEMENT Destination1;





    CHANGER_ELEMENT Destination2;





    BOOLEAN Flip1;
    BOOLEAN Flip2;
} CHANGER_EXCHANGE_MEDIUM, *PCHANGER_EXCHANGE_MEDIUM;






typedef struct _CHANGER_MOVE_MEDIUM {





    CHANGER_ELEMENT Transport;





    CHANGER_ELEMENT Source;





    CHANGER_ELEMENT Destination;





    BOOLEAN Flip;
} CHANGER_MOVE_MEDIUM, *PCHANGER_MOVE_MEDIUM;
# 7122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {





    CHANGER_ELEMENT StartingElement;





    DWORD ActionCode;





    BYTE VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION, *PCHANGER_SEND_VOLUME_TAG_INFORMATION;






typedef struct _READ_ELEMENT_ADDRESS_INFO {





    DWORD NumberOfElements;






    CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO, *PREAD_ELEMENT_ADDRESS_INFO;
# 7189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
   DeviceProblemNone,
   DeviceProblemHardware,
   DeviceProblemCHMError,
   DeviceProblemDoorOpen,
   DeviceProblemCalibrationError,
   DeviceProblemTargetFailure,
   DeviceProblemCHMMoveError,
   DeviceProblemCHMZeroError,
   DeviceProblemCartridgeInsertError,
   DeviceProblemPositionError,
   DeviceProblemSensorError,
   DeviceProblemCartridgeEjectError,
   DeviceProblemGripperError,
   DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE, *PCHANGER_DEVICE_PROBLEM_TYPE;
# 7612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _PATHNAME_BUFFER {

    DWORD PathNameLength;
    WCHAR Name[1];

} PATHNAME_BUFFER, *PPATHNAME_BUFFER;







typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {

    BYTE First0x24BytesOfBootSector[0x24];

} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;
# 7642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    DWORD BytesPerFileRecordSegment;
    DWORD ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;

} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER;

typedef struct {

    DWORD ByteCount;

    WORD MajorVersion;
    WORD MinorVersion;

    DWORD BytesPerPhysicalSector;

    WORD LfsMajorVersion;
    WORD LfsMinorVersion;


    DWORD MaxDeviceTrimExtentCount;
    DWORD MaxDeviceTrimByteCount;

    DWORD MaxVolumeTrimExtentCount;
    DWORD MaxVolumeTrimByteCount;


} NTFS_EXTENDED_VOLUME_DATA, *PNTFS_EXTENDED_VOLUME_DATA;
# 7693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    DWORD ByteCount;
    DWORD MajorVersion;
    DWORD MinorVersion;

    DWORD BytesPerPhysicalSector;

    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    LARGE_INTEGER MaximumSizeOfResidentFile;

    LARGE_INTEGER Reserved[10];

} REFS_VOLUME_DATA_BUFFER, *PREFS_VOLUME_DATA_BUFFER;
# 7724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    LARGE_INTEGER StartingLcn;

} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER;





typedef struct {

    LARGE_INTEGER StartingLcn;
    DWORD Flags;

} STARTING_LCN_INPUT_BUFFER_EX, *PSTARTING_LCN_INPUT_BUFFER_EX;



typedef struct {

    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    BYTE Buffer[1];

} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER;
# 7759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    LARGE_INTEGER StartingVcn;

} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER;

typedef struct RETRIEVAL_POINTERS_BUFFER {

    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
    } Extents[1];

} RETRIEVAL_POINTERS_BUFFER, *PRETRIEVAL_POINTERS_BUFFER;
# 7788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {

    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
        DWORD ReferenceCount;
    } Extents[1];

} RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER, *PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
# 7808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    LARGE_INTEGER FileReferenceNumber;

} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER;

typedef struct {

    LARGE_INTEGER FileReferenceNumber;
    DWORD FileRecordLength;
    BYTE FileRecordBuffer[1];

} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
# 7830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;

} MOVE_FILE_DATA, *PMOVE_FILE_DATA;

typedef struct {

    HANDLE FileHandle;
    LARGE_INTEGER SourceFileRecord;
    LARGE_INTEGER TargetFileRecord;

} MOVE_FILE_RECORD_DATA, *PMOVE_FILE_RECORD_DATA;
# 7871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {
    DWORD Restart;
    SID Sid;
} FIND_BY_SID_DATA, *PFIND_BY_SID_DATA;

typedef struct {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FIND_BY_SID_OUTPUT, *PFIND_BY_SID_OUTPUT;
# 7896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;

} MFT_ENUM_DATA_V0, *PMFT_ENUM_DATA_V0;

typedef struct {

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} MFT_ENUM_DATA_V1, *PMFT_ENUM_DATA_V1;


typedef MFT_ENUM_DATA_V1 MFT_ENUM_DATA, *PMFT_ENUM_DATA;
# 7926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} CREATE_USN_JOURNAL_DATA, *PCREATE_USN_JOURNAL_DATA;
# 7945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} READ_FILE_USN_DATA, *PREAD_FILE_USN_DATA;
# 7959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;

} READ_USN_JOURNAL_DATA_V0, *PREAD_USN_JOURNAL_DATA_V0;

typedef struct {

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;
    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} READ_USN_JOURNAL_DATA_V1, *PREAD_USN_JOURNAL_DATA_V1;


typedef READ_USN_JOURNAL_DATA_V1 READ_USN_JOURNAL_DATA, *PREAD_USN_JOURNAL_DATA;
# 7995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {
    DWORD Flags;
    DWORD Unused;
    DWORDLONG ChunkSize;
    LONGLONG FileSizeThreshold;
} USN_TRACK_MODIFIED_RANGES, *PUSN_TRACK_MODIFIED_RANGES;

typedef struct {
    USN Usn;
} USN_RANGE_TRACK_OUTPUT, *PUSN_RANGE_TRACK_OUTPUT;
# 8028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORDLONG FileReferenceNumber;
    DWORDLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V2, *PUSN_RECORD_V2;

typedef struct {

    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V3, *PUSN_RECORD_V3;

typedef USN_RECORD_V2 USN_RECORD, *PUSN_RECORD;

typedef struct {
    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
} USN_RECORD_COMMON_HEADER, *PUSN_RECORD_COMMON_HEADER;

typedef struct {
    LONGLONG Offset;
    LONGLONG Length;
} USN_RECORD_EXTENT, *PUSN_RECORD_EXTENT;

typedef struct {
    USN_RECORD_COMMON_HEADER Header;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD RemainingExtents;
    WORD NumberOfExtents;
    WORD ExtentSize;
    USN_RECORD_EXTENT Extents[1];
} USN_RECORD_V4, *PUSN_RECORD_V4;

typedef union {
    USN_RECORD_COMMON_HEADER Header;
    USN_RECORD_V2 V2;
    USN_RECORD_V3 V3;
    USN_RECORD_V4 V4;
} USN_RECORD_UNION, *PUSN_RECORD_UNION;
# 8132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} USN_JOURNAL_DATA_V0, *PUSN_JOURNAL_DATA_V0;

typedef struct {

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD MinSupportedMajorVersion;
    WORD MaxSupportedMajorVersion;

} USN_JOURNAL_DATA_V1, *PUSN_JOURNAL_DATA_V1;

typedef struct {

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD MinSupportedMajorVersion;
    WORD MaxSupportedMajorVersion;
    DWORD Flags;
    DWORDLONG RangeTrackChunkSize;
    LONGLONG RangeTrackFileSizeThreshold;

} USN_JOURNAL_DATA_V2, *PUSN_JOURNAL_DATA_V2;



typedef USN_JOURNAL_DATA_V1 USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA;
# 8188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    DWORDLONG UsnJournalID;
    DWORD DeleteFlags;

} DELETE_USN_JOURNAL_DATA, *PDELETE_USN_JOURNAL_DATA;
# 8207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct {


    union {
        DWORD UsnSourceInfo;
        DWORD CopyNumber;
    } ;




    HANDLE VolumeHandle;
    DWORD HandleInfo;

} MARK_HANDLE_INFO, *PMARK_HANDLE_INFO;
# 8249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(pop)
# 8359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct {

    ACCESS_MASK DesiredAccess;
    DWORD SecurityIds[1];

} BULK_SECURITY_TEST_DATA, *PBULK_SECURITY_TEST_DATA;
# 8384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_PREFETCH {
    DWORD Type;
    DWORD Count;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH, *PFILE_PREFETCH;

typedef struct _FILE_PREFETCH_EX {
    DWORD Type;
    DWORD Count;
    PVOID Context;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH_EX, *PFILE_PREFETCH_EX;
# 8414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILESYSTEM_STATISTICS {

    WORD FileSystemType;
    WORD Version;

    DWORD SizeOfCompleteStructure;

    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;

    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;





} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;
# 8452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FAT_STATISTICS {
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} FAT_STATISTICS, *PFAT_STATISTICS;

typedef struct _EXFAT_STATISTICS {
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} EXFAT_STATISTICS, *PEXFAT_STATISTICS;

typedef struct _NTFS_STATISTICS {

    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;





    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;
    struct {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } MftWritesUserLevel;

    WORD MftWritesFlushForLogFileFull;
    WORD MftWritesLazyWriter;
    WORD MftWritesUserRequest;

    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;
    struct {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } Mft2WritesUserLevel;

    WORD Mft2WritesFlushForLogFileFull;
    WORD Mft2WritesLazyWriter;
    WORD Mft2WritesUserRequest;

    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;

    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;

    WORD BitmapWritesFlushForLogFileFull;
    WORD BitmapWritesLazyWriter;
    WORD BitmapWritesUserRequest;

    struct {
        WORD Write;
        WORD Create;
        WORD SetInfo;
    } BitmapWritesUserLevel;

    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;

    WORD MftBitmapWritesFlushForLogFileFull;
    WORD MftBitmapWritesLazyWriter;
    WORD MftBitmapWritesUserRequest;

    struct {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } MftBitmapWritesUserLevel;

    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;





    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;

    struct {
        DWORD Calls;
        DWORD Clusters;
        DWORD Hints;

        DWORD RunsReturned;

        DWORD HintsHonored;
        DWORD HintsClusters;
        DWORD Cache;
        DWORD CacheClusters;
        DWORD CacheMiss;
        DWORD CacheMissClusters;
    } Allocate;





    DWORD DiskResourcesExhausted;





} NTFS_STATISTICS, *PNTFS_STATISTICS;

typedef struct _FILESYSTEM_STATISTICS_EX {

    WORD FileSystemType;
    WORD Version;

    DWORD SizeOfCompleteStructure;

    DWORDLONG UserFileReads;
    DWORDLONG UserFileReadBytes;
    DWORDLONG UserDiskReads;
    DWORDLONG UserFileWrites;
    DWORDLONG UserFileWriteBytes;
    DWORDLONG UserDiskWrites;

    DWORDLONG MetaDataReads;
    DWORDLONG MetaDataReadBytes;
    DWORDLONG MetaDataDiskReads;
    DWORDLONG MetaDataWrites;
    DWORDLONG MetaDataWriteBytes;
    DWORDLONG MetaDataDiskWrites;





} FILESYSTEM_STATISTICS_EX, *PFILESYSTEM_STATISTICS_EX;

typedef struct _NTFS_STATISTICS_EX {

    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;





    DWORDLONG MftReads;
    DWORDLONG MftReadBytes;
    DWORDLONG MftWrites;
    DWORDLONG MftWriteBytes;
    struct {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } MftWritesUserLevel;

    DWORD MftWritesFlushForLogFileFull;
    DWORD MftWritesLazyWriter;
    DWORD MftWritesUserRequest;

    DWORDLONG Mft2Writes;
    DWORDLONG Mft2WriteBytes;
    struct {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } Mft2WritesUserLevel;

    DWORD Mft2WritesFlushForLogFileFull;
    DWORD Mft2WritesLazyWriter;
    DWORD Mft2WritesUserRequest;

    DWORDLONG RootIndexReads;
    DWORDLONG RootIndexReadBytes;
    DWORDLONG RootIndexWrites;
    DWORDLONG RootIndexWriteBytes;

    DWORDLONG BitmapReads;
    DWORDLONG BitmapReadBytes;
    DWORDLONG BitmapWrites;
    DWORDLONG BitmapWriteBytes;

    DWORD BitmapWritesFlushForLogFileFull;
    DWORD BitmapWritesLazyWriter;
    DWORD BitmapWritesUserRequest;

    struct {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } BitmapWritesUserLevel;

    DWORDLONG MftBitmapReads;
    DWORDLONG MftBitmapReadBytes;
    DWORDLONG MftBitmapWrites;
    DWORDLONG MftBitmapWriteBytes;

    DWORD MftBitmapWritesFlushForLogFileFull;
    DWORD MftBitmapWritesLazyWriter;
    DWORD MftBitmapWritesUserRequest;

    struct {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } MftBitmapWritesUserLevel;

    DWORDLONG UserIndexReads;
    DWORDLONG UserIndexReadBytes;
    DWORDLONG UserIndexWrites;
    DWORDLONG UserIndexWriteBytes;





    DWORDLONG LogFileReads;
    DWORDLONG LogFileReadBytes;
    DWORDLONG LogFileWrites;
    DWORDLONG LogFileWriteBytes;

    struct {
        DWORD Calls;
        DWORD RunsReturned;
        DWORD Hints;
        DWORD HintsHonored;
        DWORD Cache;
        DWORD CacheMiss;

        DWORDLONG Clusters;
        DWORDLONG HintsClusters;
        DWORDLONG CacheClusters;
        DWORDLONG CacheMissClusters;
    } Allocate;





    DWORD DiskResourcesExhausted;





    DWORDLONG VolumeTrimCount;
    DWORDLONG VolumeTrimTime;
    DWORDLONG VolumeTrimByteCount;

    DWORDLONG FileLevelTrimCount;
    DWORDLONG FileLevelTrimTime;
    DWORDLONG FileLevelTrimByteCount;

    DWORDLONG VolumeTrimSkippedCount;
    DWORDLONG VolumeTrimSkippedByteCount;





    DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount;
    DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
    DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;

} NTFS_STATISTICS_EX, *PNTFS_STATISTICS_EX;
# 8765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct _FILE_OBJECTID_BUFFER {





    BYTE ObjectId[16];






    union {
        struct {
            BYTE BirthVolumeId[16];
            BYTE BirthObjectId[16];
            BYTE DomainId[16];
        } ;
        BYTE ExtendedInfo[48];
    } ;

} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER;


#pragma warning(pop)
# 8809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_SET_SPARSE_BUFFER {
    BOOLEAN SetSparse;
} FILE_SET_SPARSE_BUFFER, *PFILE_SET_SPARSE_BUFFER;
# 8824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_ZERO_DATA_INFORMATION {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;

} FILE_ZERO_DATA_INFORMATION, *PFILE_ZERO_DATA_INFORMATION;






typedef struct _FILE_ZERO_DATA_INFORMATION_EX {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;
    DWORD Flags;

} FILE_ZERO_DATA_INFORMATION_EX, *PFILE_ZERO_DATA_INFORMATION_EX;
# 8860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_ALLOCATED_RANGE_BUFFER {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;

} FILE_ALLOCATED_RANGE_BUFFER, *PFILE_ALLOCATED_RANGE_BUFFER;
# 8883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _ENCRYPTION_BUFFER {

    DWORD EncryptionOperation;
    BYTE Private[1];

} ENCRYPTION_BUFFER, *PENCRYPTION_BUFFER;
# 8902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DECRYPTION_STATUS_BUFFER {

    BOOLEAN NoEncryptedStreams;

} DECRYPTION_STATUS_BUFFER, *PDECRYPTION_STATUS_BUFFER;
# 8916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
# 8925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    LONGLONG FileOffset;
    DWORD Length;

} REQUEST_RAW_ENCRYPTED_DATA, *PREQUEST_RAW_ENCRYPTED_DATA;
# 8954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _ENCRYPTED_DATA_INFO {
# 8963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORDLONG StartingFileOffset;
# 8973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD OutputBufferOffset;
# 8984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD BytesWithinFileSize;
# 8995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD BytesWithinValidDataLength;
# 9004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    WORD CompressionFormat;
# 9025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    BYTE DataUnitShift;
    BYTE ChunkShift;
    BYTE ClusterShift;





    BYTE EncryptionFormat;






    WORD NumberOfDataBlocks;
# 9068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD DataBlockSize[1];

} ENCRYPTED_DATA_INFO, *PENCRYPTED_DATA_INFO;
# 9083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {
# 9092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD ExtendedCode;





    DWORD Length;





    DWORD Flags;
    DWORD Reserved;

} EXTENDED_ENCRYPTED_DATA_INFO, *PEXTENDED_ENCRYPTED_DATA_INFO;
# 9120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _PLEX_READ_DATA_REQUEST {
# 9132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    LARGE_INTEGER ByteOffset;
    DWORD ByteLength;
    DWORD PlexNumber;

} PLEX_READ_DATA_REQUEST, *PPLEX_READ_DATA_REQUEST;
# 9149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _SI_COPYFILE {
    DWORD SourceFileNameLength;
    DWORD DestinationFileNameLength;
    DWORD Flags;
    WCHAR FileNameBuffer[1];
} SI_COPYFILE, *PSI_COPYFILE;
# 9168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
    BOOLEAN CloseDisc;
} FILE_MAKE_COMPATIBLE_BUFFER, *PFILE_MAKE_COMPATIBLE_BUFFER;







typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
    BOOLEAN Disable;
} FILE_SET_DEFECT_MGMT_BUFFER, *PFILE_SET_DEFECT_MGMT_BUFFER;







typedef struct _FILE_QUERY_SPARING_BUFFER {
    DWORD SparingUnitBytes;
    BOOLEAN SoftwareSparing;
    DWORD TotalSpareBlocks;
    DWORD FreeSpareBlocks;
} FILE_QUERY_SPARING_BUFFER, *PFILE_QUERY_SPARING_BUFFER;







typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
    LARGE_INTEGER DirectoryCount;
    LARGE_INTEGER FileCount;
    WORD FsFormatMajVersion;
    WORD FsFormatMinVersion;
    WCHAR FsFormatName[ 12];
    LARGE_INTEGER FormatTime;
    LARGE_INTEGER LastUpdateTime;
    WCHAR CopyrightInfo[ 34];
    WCHAR AbstractInfo[ 34];
    WCHAR FormattingImplementationInfo[ 34];
    WCHAR LastModifyingImplementationInfo[ 34];
} FILE_QUERY_ON_DISK_VOL_INFO_BUFFER, *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
# 9280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef DWORDLONG CLSN;

typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
    DWORDLONG Hint1;
    DWORDLONG Hint2;
    CLSN Clsn;
    DWORD Status;
} FILE_INITIATE_REPAIR_OUTPUT_BUFFER, *PFILE_INITIATE_REPAIR_OUTPUT_BUFFER;







typedef enum _SHRINK_VOLUME_REQUEST_TYPES
{
    ShrinkPrepare = 1,
    ShrinkCommit,
    ShrinkAbort

} SHRINK_VOLUME_REQUEST_TYPES, *PSHRINK_VOLUME_REQUEST_TYPES;

typedef struct _SHRINK_VOLUME_INFORMATION
{
    SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
    DWORDLONG Flags;
    LONGLONG NewNumberOfSectors;

} SHRINK_VOLUME_INFORMATION, *PSHRINK_VOLUME_INFORMATION;
# 9380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_MODIFY_RM {





    DWORD Flags;





    DWORD LogContainerCountMax;





    DWORD LogContainerCountMin;





    DWORD LogContainerCount;







    DWORD LogGrowthIncrement;






    DWORD LogAutoShrinkPercentage;





    DWORDLONG Reserved;






    WORD LoggingMode;

} TXFS_MODIFY_RM,
 *PTXFS_MODIFY_RM;
# 9482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_QUERY_RM_INFORMATION {






    DWORD BytesRequired;





    DWORDLONG TailLsn;





    DWORDLONG CurrentLsn;





    DWORDLONG ArchiveTailLsn;





    DWORDLONG LogContainerSize;





    LARGE_INTEGER HighestVirtualClock;





    DWORD LogContainerCount;





    DWORD LogContainerCountMax;





    DWORD LogContainerCountMin;







    DWORD LogGrowthIncrement;







    DWORD LogAutoShrinkPercentage;






    DWORD Flags;





    WORD LoggingMode;





    WORD Reserved;





    DWORD RmState;





    DWORDLONG LogCapacity;





    DWORDLONG LogFree;





    DWORDLONG TopsSize;





    DWORDLONG TopsUsed;





    DWORDLONG TransactionCount;





    DWORDLONG OnePCCount;





    DWORDLONG TwoPCCount;





    DWORDLONG NumberLogFileFull;





    DWORDLONG OldestTransactionAge;





    GUID RMName;






    DWORD TmLogPathOffset;

} TXFS_QUERY_RM_INFORMATION,
 *PTXFS_QUERY_RM_INFORMATION;
# 9663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
    LARGE_INTEGER LastVirtualClock;
    DWORDLONG LastRedoLsn;
    DWORDLONG HighestRecoveryLsn;
    DWORD Flags;
} TXFS_ROLLFORWARD_REDO_INFORMATION,
 *PTXFS_ROLLFORWARD_REDO_INFORMATION;



#pragma deprecated(TXFS_ROLLFORWARD_REDO_INFORMATION)
#pragma deprecated(PTXFS_ROLLFORWARD_REDO_INFORMATION)
# 9729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_START_RM_INFORMATION {





    DWORD Flags;





    DWORDLONG LogContainerSize;





    DWORD LogContainerCountMin;





    DWORD LogContainerCountMax;







    DWORD LogGrowthIncrement;





    DWORD LogAutoShrinkPercentage;







    DWORD TmLogPathOffset;






    WORD TmLogPathLength;







    WORD LoggingMode;






    WORD LogPathLength;





    WORD Reserved;






    WCHAR LogPath[1];

} TXFS_START_RM_INFORMATION,
 *PTXFS_START_RM_INFORMATION;



#pragma deprecated(TXFS_START_RM_INFORMATION)
#pragma deprecated(PTXFS_START_RM_INFORMATION)
# 9828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_GET_METADATA_INFO_OUT {





    struct {
        LONGLONG LowPart;
        LONGLONG HighPart;
    } TxfFileId;





    GUID LockingTransaction;





    DWORDLONG LastLsn;





    DWORD TransactionState;

} TXFS_GET_METADATA_INFO_OUT, *PTXFS_GET_METADATA_INFO_OUT;
# 9878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {






    DWORDLONG Offset;






    DWORD NameFlags;





    LONGLONG FileId;





    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;





    WCHAR FileName[1];
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY, *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;


typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {





    GUID KtmTransaction;





    DWORDLONG NumberOfFiles;






    DWORDLONG BufferSizeRequired;






    DWORDLONG Offset;
} TXFS_LIST_TRANSACTION_LOCKED_FILES, *PTXFS_LIST_TRANSACTION_LOCKED_FILES;







typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {





    GUID TransactionId;





    DWORD TransactionState;





    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;
} TXFS_LIST_TRANSACTIONS_ENTRY, *PTXFS_LIST_TRANSACTIONS_ENTRY;

typedef struct _TXFS_LIST_TRANSACTIONS {





    DWORDLONG NumberOfTransactions;







    DWORDLONG BufferSizeRequired;
} TXFS_LIST_TRANSACTIONS, *PTXFS_LIST_TRANSACTIONS;
# 9999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
    union {





        DWORD BufferLength;





        BYTE Buffer[1];
    } ;
} TXFS_READ_BACKUP_INFORMATION_OUT, *PTXFS_READ_BACKUP_INFORMATION_OUT;


#pragma warning(pop)
# 10032 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_WRITE_BACKUP_INFORMATION {






    BYTE Buffer[1];
} TXFS_WRITE_BACKUP_INFORMATION, *PTXFS_WRITE_BACKUP_INFORMATION;
# 10051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_GET_TRANSACTED_VERSION {







    DWORD ThisBaseVersion;





    DWORD LatestVersion;






    WORD ThisMiniVersion;






    WORD FirstMiniVersion;






    WORD LatestMiniVersion;

} TXFS_GET_TRANSACTED_VERSION, *PTXFS_GET_TRANSACTED_VERSION;
# 10125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_SAVEPOINT_INFORMATION {





    HANDLE KtmTransaction;





    DWORD ActionCode;
# 10149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD SavepointId;

} TXFS_SAVEPOINT_INFORMATION, *PTXFS_SAVEPOINT_INFORMATION;



#pragma deprecated(TXFS_SAVEPOINT_INFORMATION)
#pragma deprecated(PTXFS_SAVEPOINT_INFORMATION)
# 10168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_CREATE_MINIVERSION_INFO {

    WORD StructureVersion;

    WORD StructureLength;





    DWORD BaseVersion;





    WORD MiniVersion;

} TXFS_CREATE_MINIVERSION_INFO, *PTXFS_CREATE_MINIVERSION_INFO;



#pragma deprecated(TXFS_CREATE_MINIVERSION_INFO)
#pragma deprecated(PTXFS_CREATE_MINIVERSION_INFO)
# 10201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {





    BOOLEAN TransactionsActiveAtSnapshot;

} TXFS_TRANSACTION_ACTIVE_INFO, *PTXFS_TRANSACTION_ACTIVE_INFO;
# 10222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _BOOT_AREA_INFO {

    DWORD BootSectorCount;
    struct {
        LARGE_INTEGER Offset;
    } BootSectors[2];

} BOOT_AREA_INFO, *PBOOT_AREA_INFO;







typedef struct _RETRIEVAL_POINTER_BASE {

    LARGE_INTEGER FileAreaOffset;
} RETRIEVAL_POINTER_BASE, *PRETRIEVAL_POINTER_BASE;
# 10250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {

    DWORD VolumeFlags;
    DWORD FlagMask;
    DWORD Version;
    DWORD Reserved;

} FILE_FS_PERSISTENT_VOLUME_INFORMATION, *PFILE_FS_PERSISTENT_VOLUME_INFORMATION;
# 10330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {

    CHAR FileSystem[9];

} FILE_SYSTEM_RECOGNITION_INFORMATION, *PFILE_SYSTEM_RECOGNITION_INFORMATION;
# 10352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {





    WORD StructureVersion;

    WORD StructureLength;





    DWORD RequestedOplockLevel;





    DWORD Flags;

} REQUEST_OPLOCK_INPUT_BUFFER, *PREQUEST_OPLOCK_INPUT_BUFFER;




typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {





    WORD StructureVersion;

    WORD StructureLength;






    DWORD OriginalOplockLevel;







    DWORD NewOplockLevel;





    DWORD Flags;







    ACCESS_MASK AccessMode;

    WORD ShareMode;

} REQUEST_OPLOCK_OUTPUT_BUFFER, *PREQUEST_OPLOCK_OUTPUT_BUFFER;







typedef struct _VIRTUAL_STORAGE_TYPE
{
    DWORD DeviceId;
    GUID VendorId;
} VIRTUAL_STORAGE_TYPE, *PVIRTUAL_STORAGE_TYPE;






typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
    DWORD RequestLevel;
    DWORD RequestFlags;
} STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST, *PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;




typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
    DWORD EntryLength;
    DWORD DependencyTypeFlags;
    DWORD ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY, *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
    DWORD EntryLength;
    DWORD DependencyTypeFlags;
    DWORD ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
    DWORD AncestorLevel;
    DWORD HostVolumeNameOffset;
    DWORD HostVolumeNameSize;
    DWORD DependentVolumeNameOffset;
    DWORD DependentVolumeNameSize;
    DWORD RelativePathOffset;
    DWORD RelativePathSize;
    DWORD DependentDeviceNameOffset;
    DWORD DependentDeviceNameSize;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY, *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;




#pragma warning(push)
#pragma warning(disable: 4200)



typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
    DWORD ResponseLevel;
    DWORD NumberEntries;
    union {
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
    } ;
} STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE, *PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;


#pragma warning(pop)
# 10512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _SD_CHANGE_MACHINE_SID_INPUT {
# 10522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    WORD CurrentMachineSIDOffset;
    WORD CurrentMachineSIDLength;
# 10533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    WORD NewMachineSIDOffset;
    WORD NewMachineSIDLength;

} SD_CHANGE_MACHINE_SID_INPUT, *PSD_CHANGE_MACHINE_SID_INPUT;

typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {





    DWORDLONG NumSDChangedSuccess;





    DWORDLONG NumSDChangedFail;





    DWORDLONG NumSDUnused;





    DWORDLONG NumSDTotal;





    DWORDLONG NumMftSDChangedSuccess;





    DWORDLONG NumMftSDChangedFail;





    DWORDLONG NumMftSDTotal;

} SD_CHANGE_MACHINE_SID_OUTPUT, *PSD_CHANGE_MACHINE_SID_OUTPUT;





typedef struct _SD_QUERY_STATS_INPUT {

    DWORD Reserved;

} SD_QUERY_STATS_INPUT, *PSD_QUERY_STATS_INPUT;

typedef struct _SD_QUERY_STATS_OUTPUT {






    DWORDLONG SdsStreamSize;
    DWORDLONG SdsAllocationSize;






    DWORDLONG SiiStreamSize;
    DWORDLONG SiiAllocationSize;






    DWORDLONG SdhStreamSize;
    DWORDLONG SdhAllocationSize;






    DWORDLONG NumSDTotal;






    DWORDLONG NumSDUnused;

} SD_QUERY_STATS_OUTPUT, *PSD_QUERY_STATS_OUTPUT;





typedef struct _SD_ENUM_SDS_INPUT {
# 10652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORDLONG StartingOffset;







    DWORDLONG MaxSDEntriesToReturn;

} SD_ENUM_SDS_INPUT, *PSD_ENUM_SDS_INPUT;

typedef struct _SD_ENUM_SDS_ENTRY {





    DWORD Hash;





    DWORD SecurityId;






    DWORDLONG Offset;






    DWORD Length;





    BYTE Descriptor[1];

} SD_ENUM_SDS_ENTRY, *PSD_ENUM_SDS_ENTRY;

typedef struct _SD_ENUM_SDS_OUTPUT {
# 10710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORDLONG NextOffset;





    DWORDLONG NumSDEntriesReturned;





    DWORDLONG NumSDBytesReturned;
# 10732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    SD_ENUM_SDS_ENTRY SDEntry[1];

} SD_ENUM_SDS_OUTPUT, *PSD_ENUM_SDS_OUTPUT;






#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct _SD_GLOBAL_CHANGE_INPUT
{




    DWORD Flags;






    DWORD ChangeType;

    union {

        SD_CHANGE_MACHINE_SID_INPUT SdChange;
        SD_QUERY_STATS_INPUT SdQueryStats;
        SD_ENUM_SDS_INPUT SdEnumSds;
    } ;

} SD_GLOBAL_CHANGE_INPUT, *PSD_GLOBAL_CHANGE_INPUT;

typedef struct _SD_GLOBAL_CHANGE_OUTPUT
{





    DWORD Flags;





    DWORD ChangeType;

    union {

        SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
        SD_QUERY_STATS_OUTPUT SdQueryStats;
        SD_ENUM_SDS_OUTPUT SdEnumSds;
    } ;

} SD_GLOBAL_CHANGE_OUTPUT, *PSD_GLOBAL_CHANGE_OUTPUT;


#pragma warning(pop)








typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {




    DWORD Flags;






    DWORD NumberOfClusters;




    LARGE_INTEGER Cluster[1];
} LOOKUP_STREAM_FROM_CLUSTER_INPUT, *PLOOKUP_STREAM_FROM_CLUSTER_INPUT;

typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {




    DWORD Offset;






    DWORD NumberOfMatches;





    DWORD BufferSizeRequired;
} LOOKUP_STREAM_FROM_CLUSTER_OUTPUT, *PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
# 10854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {




    DWORD OffsetToNext;




    DWORD Flags;




    LARGE_INTEGER Reserved;





    LARGE_INTEGER Cluster;







    WCHAR FileName[1];
} LOOKUP_STREAM_FROM_CLUSTER_ENTRY, *PLOOKUP_STREAM_FROM_CLUSTER_ENTRY;
# 10894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_TYPE_NOTIFICATION_INPUT {






    DWORD Flags;





    DWORD NumFileTypeIDs;





    GUID FileTypeID[1];

} FILE_TYPE_NOTIFICATION_INPUT, *PFILE_TYPE_NOTIFICATION_INPUT;
# 10928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
extern "C" const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE;
extern "C" const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE;
extern "C" const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE;





typedef struct _CSV_MGMT_LOCK {
    DWORD Flags;
}CSV_MGMT_LOCK, *PCSV_MGMT_LOCK;







typedef struct _CSV_NAMESPACE_INFO {

    DWORD Version;
    DWORD DeviceNumber;
    LARGE_INTEGER StartingOffset;
    DWORD SectorSize;

} CSV_NAMESPACE_INFO, *PCSV_NAMESPACE_INFO;
# 10962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _CSV_CONTROL_OP {
    CsvControlStartRedirectFile = 0x02,
    CsvControlStopRedirectFile = 0x03,
    CsvControlQueryRedirectState = 0x04,
    CsvControlQueryFileRevision = 0x06,
    CsvControlQueryMdsPath = 0x08,
    CsvControlQueryFileRevisionFileId128 = 0x09,
    CsvControlQueryVolumeRedirectState = 0x0a,
    CsvControlEnableUSNRangeModificationTracking = 0x0d,
    CsvControlMarkHandleLocalVolumeMount = 0x0e,
    CsvControlUnmarkHandleLocalVolumeMount = 0x0f,
    CsvControlGetCsvFsMdsPathV2 = 0x12,
} CSV_CONTROL_OP, *PCSV_CONTROL_OP;

typedef struct _CSV_CONTROL_PARAM {
    CSV_CONTROL_OP Operation;
    LONGLONG Unused;
} CSV_CONTROL_PARAM, *PCSV_CONTROL_PARAM;




typedef struct _CSV_QUERY_REDIRECT_STATE {
    DWORD MdsNodeId;
    DWORD DsNodeId;
    BOOLEAN FileRedirected;
} CSV_QUERY_REDIRECT_STATE, *PCSV_QUERY_REDIRECT_STATE;







typedef struct _CSV_QUERY_FILE_REVISION {



    LONGLONG FileId;
# 11019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    LONGLONG FileRevision[3];

} CSV_QUERY_FILE_REVISION, *PCSV_QUERY_FILE_REVISION;







typedef struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {



    FILE_ID_128 FileId;
# 11052 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    LONGLONG FileRevision[3];

} CSV_QUERY_FILE_REVISION_FILE_ID_128, *PCSV_QUERY_FILE_REVISION_FILE_ID_128;







typedef struct _CSV_QUERY_MDS_PATH {
    DWORD MdsNodeId;
    DWORD DsNodeId;
    DWORD PathLength;
    WCHAR Path[1];
} CSV_QUERY_MDS_PATH, *PCSV_QUERY_MDS_PATH;

typedef enum _CSVFS_DISK_CONNECTIVITY
{
    CsvFsDiskConnectivityNone = 0,
    CsvFsDiskConnectivityMdsNodeOnly = 1,
    CsvFsDiskConnectivitySubsetOfNodes = 2,
    CsvFsDiskConnectivityAllNodes = 3
} CSVFS_DISK_CONNECTIVITY, *PCSVFS_DISK_CONNECTIVITY;




typedef struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
    DWORD MdsNodeId;
    DWORD DsNodeId;
    BOOLEAN IsDiskConnected;
    BOOLEAN ClusterEnableDirectIo;
    CSVFS_DISK_CONNECTIVITY DiskConnectivity;
} CSV_QUERY_VOLUME_REDIRECT_STATE, *PCSV_QUERY_VOLUME_REDIRECT_STATE;
# 11100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _CSV_QUERY_MDS_PATH_V2 {




    LONGLONG Version;




    DWORD RequiredSize;





    DWORD MdsNodeId;
    DWORD DsNodeId;



    DWORD Flags;



    CSVFS_DISK_CONNECTIVITY DiskConnectivity;



    GUID VolumeId;





    DWORD IpAddressOffset;
    DWORD IpAddressLength;





    DWORD PathOffset;
    DWORD PathLength;

} CSV_QUERY_MDS_PATH_V2, *PCSV_QUERY_MDS_PATH_V2;
# 11158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
    DWORDLONG VetoedFromAltitudeIntegral;
    DWORDLONG VetoedFromAltitudeDecimal;
    WCHAR Reason[256];
} CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT, *PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
# 11173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _CSV_IS_OWNED_BY_CSVFS {
    BOOLEAN OwnedByCSVFS;
}CSV_IS_OWNED_BY_CSVFS, *PCSV_IS_OWNED_BY_CSVFS;







typedef struct _FILE_LEVEL_TRIM_RANGE {





    DWORDLONG Offset;





    DWORDLONG Length;
} FILE_LEVEL_TRIM_RANGE, *PFILE_LEVEL_TRIM_RANGE;





typedef struct _FILE_LEVEL_TRIM {






    DWORD Key;





    DWORD NumRanges;





    FILE_LEVEL_TRIM_RANGE Ranges[1];

} FILE_LEVEL_TRIM, *PFILE_LEVEL_TRIM;





typedef struct _FILE_LEVEL_TRIM_OUTPUT {






    DWORD NumRangesProcessed;

} FILE_LEVEL_TRIM_OUTPUT, *PFILE_LEVEL_TRIM_OUTPUT;
# 11327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _QUERY_FILE_LAYOUT_FILTER_TYPE {
    QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0,
    QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1,
    QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2,
    QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 3,
} QUERY_FILE_LAYOUT_FILTER_TYPE;

typedef struct _CLUSTER_RANGE {





    LARGE_INTEGER StartingCluster;




    LARGE_INTEGER ClusterCount;

} CLUSTER_RANGE, *PCLUSTER_RANGE;

typedef struct _FILE_REFERENCE_RANGE {





    DWORDLONG StartingFileReferenceNumber;





    DWORDLONG EndingFileReferenceNumber;

} FILE_REFERENCE_RANGE, *PFILE_REFERENCE_RANGE;

typedef struct _QUERY_FILE_LAYOUT_INPUT {






    DWORD NumberOfPairs;




    DWORD Flags;





    QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;





    DWORD Reserved;






    union {
# 11405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
        CLUSTER_RANGE ClusterRanges[1];
# 11414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
        FILE_REFERENCE_RANGE FileReferenceRanges[1];

    } Filter;
} QUERY_FILE_LAYOUT_INPUT, *PQUERY_FILE_LAYOUT_INPUT;







typedef struct _QUERY_FILE_LAYOUT_OUTPUT {






    DWORD FileEntryCount;





    DWORD FirstFileOffset;





    DWORD Flags;




    DWORD Reserved;

} QUERY_FILE_LAYOUT_OUTPUT, *PQUERY_FILE_LAYOUT_OUTPUT;

typedef struct _FILE_LAYOUT_ENTRY {





    DWORD Version;





    DWORD NextFileOffset;





    DWORD Flags;




    DWORD FileAttributes;




    DWORDLONG FileReferenceNumber;






    DWORD FirstNameOffset;






    DWORD FirstStreamOffset;







    DWORD ExtraInfoOffset;




    DWORD Reserved;
# 11517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
} FILE_LAYOUT_ENTRY, *PFILE_LAYOUT_ENTRY;
# 11526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_LAYOUT_NAME_ENTRY {





    DWORD NextNameOffset;




    DWORD Flags;




    DWORDLONG ParentFileReferenceNumber;




    DWORD FileNameLength;




    DWORD Reserved;






    WCHAR FileName[1];

} FILE_LAYOUT_NAME_ENTRY, *PFILE_LAYOUT_NAME_ENTRY;

typedef struct _FILE_LAYOUT_INFO_ENTRY {




    struct {
        LARGE_INTEGER CreationTime;
        LARGE_INTEGER LastAccessTime;
        LARGE_INTEGER LastWriteTime;
        LARGE_INTEGER ChangeTime;
        DWORD FileAttributes;
    } BasicInformation;




    DWORD OwnerId;




    DWORD SecurityId;




    USN Usn;

} FILE_LAYOUT_INFO_ENTRY, *PFILE_LAYOUT_INFO_ENTRY;
# 11619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STREAM_LAYOUT_ENTRY {




    DWORD Version;




    DWORD NextStreamOffset;




    DWORD Flags;







    DWORD ExtentInformationOffset;





    LARGE_INTEGER AllocationSize;




    LARGE_INTEGER EndOfFile;





    DWORD StreamInformationOffset;




    DWORD AttributeTypeCode;




    DWORD AttributeFlags;




    DWORD StreamIdentifierLength;






    WCHAR StreamIdentifier[1];

} STREAM_LAYOUT_ENTRY, *PSTREAM_LAYOUT_ENTRY;
# 11699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STREAM_EXTENT_ENTRY {




    DWORD Flags;

    union {






        RETRIEVAL_POINTERS_BUFFER RetrievalPointers;

    } ExtentInformation;

} STREAM_EXTENT_ENTRY, *PSTREAM_EXTENT_ENTRY;
# 11733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
    WORD ChecksumAlgorithm;
    WORD Reserved;
    DWORD Flags;
    DWORD ChecksumChunkSizeInBytes;
    DWORD ClusterSizeInBytes;
} FSCTL_GET_INTEGRITY_INFORMATION_BUFFER, *PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER;

typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
    WORD ChecksumAlgorithm;
    WORD Reserved;
    DWORD Flags;
} FSCTL_SET_INTEGRITY_INFORMATION_BUFFER, *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER;






typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
    BYTE EnableIntegrity;
    BYTE KeepIntegrityStateUnchanged;
    WORD Reserved;
    DWORD Flags;
    BYTE Version;
    BYTE Reserved2[7];
} FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX, *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
# 11769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FSCTL_OFFLOAD_READ_INPUT {
    DWORD Size;
    DWORD Flags;
    DWORD TokenTimeToLive;
    DWORD Reserved;
    DWORDLONG FileOffset;
    DWORDLONG CopyLength;
} FSCTL_OFFLOAD_READ_INPUT, *PFSCTL_OFFLOAD_READ_INPUT;

typedef struct _FSCTL_OFFLOAD_READ_OUTPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG TransferLength;
    BYTE Token[512];
} FSCTL_OFFLOAD_READ_OUTPUT, *PFSCTL_OFFLOAD_READ_OUTPUT;
# 11794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FSCTL_OFFLOAD_WRITE_INPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG FileOffset;
    DWORDLONG CopyLength;
    DWORDLONG TransferOffset;
    BYTE Token[512];
} FSCTL_OFFLOAD_WRITE_INPUT, *PFSCTL_OFFLOAD_WRITE_INPUT;

typedef struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG LengthWritten;
} FSCTL_OFFLOAD_WRITE_OUTPUT, *PFSCTL_OFFLOAD_WRITE_OUTPUT;
# 11816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _SET_PURGE_FAILURE_MODE_INPUT {
    DWORD Flags;
} SET_PURGE_FAILURE_MODE_INPUT, *PSET_PURGE_FAILURE_MODE_INPUT;
# 11828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _REPAIR_COPIES_INPUT {

    DWORD Size;

    DWORD Flags;

    LARGE_INTEGER FileOffset;

    DWORD Length;

    DWORD SourceCopy;

    DWORD NumberOfRepairCopies;

    DWORD RepairCopies[1];

} REPAIR_COPIES_INPUT, *PREPAIR_COPIES_INPUT;

typedef struct _REPAIR_COPIES_OUTPUT {

    DWORD Size;

    DWORD Status;

    LARGE_INTEGER ResumeFileOffset;

} REPAIR_COPIES_OUTPUT, *PREPAIR_COPIES_OUTPUT;
# 11872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_REGION_INFO {
    LONGLONG FileOffset;
    LONGLONG Length;
    DWORD Usage;
    DWORD Reserved;
} FILE_REGION_INFO, *PFILE_REGION_INFO;

typedef struct _FILE_REGION_OUTPUT {
    DWORD Flags;
    DWORD TotalRegionEntryCount;
    DWORD RegionEntryCount;
    DWORD Reserved;
    FILE_REGION_INFO Region[1];
} FILE_REGION_OUTPUT, *PFILE_REGION_OUTPUT;






typedef struct _FILE_REGION_INPUT {

    LONGLONG FileOffset;
    LONGLONG Length;
    DWORD DesiredUsage;

} FILE_REGION_INPUT, *PFILE_REGION_INPUT;
# 11917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _WRITE_USN_REASON_INPUT {

    DWORD Flags;
    DWORD UsnReasonToWrite;

} WRITE_USN_REASON_INPUT, *PWRITE_USN_REASON_INPUT;
# 11960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _FILE_STORAGE_TIER_MEDIA_TYPE {

    FileStorageTierMediaTypeUnspecified = 0,
    FileStorageTierMediaTypeDisk = 1,
    FileStorageTierMediaTypeSsd = 2,
    FileStorageTierMediaTypeScm = 4,
    FileStorageTierMediaTypeMax

} FILE_STORAGE_TIER_MEDIA_TYPE, *PFILE_STORAGE_TIER_MEDIA_TYPE;

typedef enum _FILE_STORAGE_TIER_CLASS {

    FileStorageTierClassUnspecified = 0,
    FileStorageTierClassCapacity,
    FileStorageTierClassPerformance,
    FileStorageTierClassMax

} FILE_STORAGE_TIER_CLASS, *PFILE_STORAGE_TIER_CLASS;

typedef struct _FILE_STORAGE_TIER {





    GUID Id;





    WCHAR Name[(256)];





    WCHAR Description[(256)];





    DWORDLONG Flags;





    DWORDLONG ProvisionedCapacity;





    FILE_STORAGE_TIER_MEDIA_TYPE MediaType;





    FILE_STORAGE_TIER_CLASS Class;

} FILE_STORAGE_TIER, *PFILE_STORAGE_TIER;
# 12040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {







    DWORD Version;






    DWORD Size;





    DWORD Flags;





    DWORD TotalNumberOfTiers;





    DWORD NumberOfTiersReturned;





    FILE_STORAGE_TIER Tiers[1];

} FSCTL_QUERY_STORAGE_CLASSES_OUTPUT, *PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT;






typedef struct _STREAM_INFORMATION_ENTRY {




    DWORD Version;




    DWORD Flags;





    union _StreamInformation {





        struct _DesiredStorageClass {





            FILE_STORAGE_TIER_CLASS Class;





            DWORD Flags;

        } DesiredStorageClass;

    } StreamInformation;

} STREAM_INFORMATION_ENTRY, *PSTREAM_INFORMATION_ENTRY;
# 12139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FSCTL_QUERY_REGION_INFO_INPUT {

    DWORD Version;
    DWORD Size;

    DWORD Flags;

    DWORD NumberOfTierIds;
    GUID TierIds[1];

} FSCTL_QUERY_REGION_INFO_INPUT, *PFSCTL_QUERY_REGION_INFO_INPUT;







typedef struct _FILE_STORAGE_TIER_REGION {

    GUID TierId;

    DWORDLONG Offset;
    DWORDLONG Length;

} FILE_STORAGE_TIER_REGION, *PFILE_STORAGE_TIER_REGION;
# 12173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FSCTL_QUERY_REGION_INFO_OUTPUT {

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    DWORD Reserved;

    DWORDLONG Alignment;

    DWORD TotalNumberOfRegions;
    DWORD NumberOfRegionsReturned;

    FILE_STORAGE_TIER_REGION Regions[1];

} FSCTL_QUERY_REGION_INFO_OUTPUT, *PFSCTL_QUERY_REGION_INFO_OUTPUT;







typedef struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {





    FILE_STORAGE_TIER_CLASS Class;





    DWORD Flags;

} FILE_DESIRED_STORAGE_CLASS_INFORMATION, *PFILE_DESIRED_STORAGE_CLASS_INFORMATION;
# 12225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DUPLICATE_EXTENTS_DATA {
    HANDLE FileHandle;
    LARGE_INTEGER SourceFileOffset;
    LARGE_INTEGER TargetFileOffset;
    LARGE_INTEGER ByteCount;
} DUPLICATE_EXTENTS_DATA, *PDUPLICATE_EXTENTS_DATA;
# 12257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DUPLICATE_EXTENTS_DATA_EX {
    SIZE_T Size;
    HANDLE FileHandle;
    LARGE_INTEGER SourceFileOffset;
    LARGE_INTEGER TargetFileOffset;
    LARGE_INTEGER ByteCount;
    DWORD Flags;
} DUPLICATE_EXTENTS_DATA_EX, *PDUPLICATE_EXTENTS_DATA_EX;
# 12293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef enum _REFS_SMR_VOLUME_GC_STATE {

    SmrGcStateInactive = 0,
    SmrGcStatePaused = 1,
    SmrGcStateActive = 2,
    SmrGcStateActiveFullSpeed = 3,

} REFS_SMR_VOLUME_GC_STATE, *PREFS_SMR_VOLUME_GC_STATE;

typedef struct _REFS_SMR_VOLUME_INFO_OUTPUT {

    DWORD Version;
    DWORD Flags;

    LARGE_INTEGER SizeOfRandomlyWritableTier;
    LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
    LARGE_INTEGER SizeofSMRTier;
    LARGE_INTEGER FreeSpaceInSMRTier;
    LARGE_INTEGER UsableFreeSpaceInSMRTier;

    REFS_SMR_VOLUME_GC_STATE VolumeGcState;
    DWORD VolumeGcLastStatus;

    DWORDLONG Unused[7];

} REFS_SMR_VOLUME_INFO_OUTPUT, *PREFS_SMR_VOLUME_INFO_OUTPUT;







typedef enum _REFS_SMR_VOLUME_GC_ACTION {

    SmrGcActionStart = 1,
    SmrGcActionStartFullSpeed = 2,
    SmrGcActionPause = 3,
    SmrGcActionStop = 4,

} REFS_SMR_VOLUME_GC_ACTION, *PREFS_SMR_VOLUME_GC_ACTION;

typedef enum _REFS_SMR_VOLUME_GC_METHOD {

    SmrGcMethodCompaction = 1,
    SmrGcMethodCompression = 2,
    SmrGcMethodRotation = 3,

} REFS_SMR_VOLUME_GC_METHOD, *PREFS_SMR_VOLUME_GC_METHOD;

typedef struct _REFS_SMR_VOLUME_GC_PARAMETERS {

    DWORD Version;
    DWORD Flags;

    REFS_SMR_VOLUME_GC_ACTION Action;
    REFS_SMR_VOLUME_GC_METHOD Method;

    DWORD IoGranularity;
    DWORD CompressionFormat;

    DWORDLONG Unused[8];

} REFS_SMR_VOLUME_GC_PARAMETERS, *PREFS_SMR_VOLUME_GC_PARAMETERS;
# 12369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {

    DWORD OptimalWriteSize;
    DWORD StreamGranularitySize;
    DWORD StreamIdMin;
    DWORD StreamIdMax;

} STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER, *PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
# 12385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {

    DWORD Flags;
    DWORD StreamId;

} STREAMS_ASSOCIATE_ID_INPUT_BUFFER, *PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER;





typedef struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {

    DWORD StreamId;

} STREAMS_QUERY_ID_OUTPUT_BUFFER, *PSTREAMS_QUERY_ID_OUTPUT_BUFFER;
# 12410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _QUERY_BAD_RANGES_INPUT_RANGE {





    DWORDLONG StartOffset;





    DWORDLONG LengthInBytes;

} QUERY_BAD_RANGES_INPUT_RANGE, *PQUERY_BAD_RANGES_INPUT_RANGE;







typedef struct _QUERY_BAD_RANGES_INPUT {

    DWORD Flags;





    DWORD NumRanges;
# 12450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];

} QUERY_BAD_RANGES_INPUT, *PQUERY_BAD_RANGES_INPUT;

typedef struct _QUERY_BAD_RANGES_OUTPUT_RANGE {





    DWORD Flags;

    DWORD Reserved;





    DWORDLONG StartOffset;





    DWORDLONG LengthInBytes;

} QUERY_BAD_RANGES_OUTPUT_RANGE, *PQUERY_BAD_RANGES_OUTPUT_RANGE;





typedef struct _QUERY_BAD_RANGES_OUTPUT {

    DWORD Flags;






    DWORD NumBadRanges;
# 12501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORDLONG NextOffsetToLookUp;






    QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];

} QUERY_BAD_RANGES_OUTPUT, *PQUERY_BAD_RANGES_OUTPUT;
# 12529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {

    DWORD Flags;
# 12542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORD AlignmentShift;
# 12552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
    DWORDLONG FileOffsetToAlign;

} SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT, *PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
# 12570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _WOF_EXTERNAL_INFO {
    DWORD Version;
    DWORD Provider;
} WOF_EXTERNAL_INFO, *PWOF_EXTERNAL_INFO;

typedef struct _WOF_EXTERNAL_FILE_ID {
    FILE_ID_128 FileId;
} WOF_EXTERNAL_FILE_ID, *PWOF_EXTERNAL_FILE_ID;

typedef struct _WOF_VERSION_INFO {
    DWORD WofVersion;
} WOF_VERSION_INFO, *PWOF_VERSION_INFO;
# 12596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _WIM_PROVIDER_EXTERNAL_INFO {
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER DataSourceId;
    BYTE ResourceHash[20];
} WIM_PROVIDER_EXTERNAL_INFO, *PWIM_PROVIDER_EXTERNAL_INFO;
# 12616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
    DWORD WimType;
    DWORD WimIndex;
    DWORD WimFileNameOffset;
    DWORD WimFileNameLength;
} WIM_PROVIDER_ADD_OVERLAY_INPUT, *PWIM_PROVIDER_ADD_OVERLAY_INPUT;

typedef struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
    LARGE_INTEGER DataSourceId;
    DWORD WimFileNameOffset;
    DWORD WimFileNameLength;
} WIM_PROVIDER_UPDATE_OVERLAY_INPUT, *PWIM_PROVIDER_UPDATE_OVERLAY_INPUT;

typedef struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
    LARGE_INTEGER DataSourceId;
} WIM_PROVIDER_REMOVE_OVERLAY_INPUT, *PWIM_PROVIDER_REMOVE_OVERLAY_INPUT;

typedef struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
    LARGE_INTEGER DataSourceId;
} WIM_PROVIDER_SUSPEND_OVERLAY_INPUT, *PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT;

typedef struct _WIM_PROVIDER_OVERLAY_ENTRY {
    DWORD NextEntryOffset;
    LARGE_INTEGER DataSourceId;
    GUID WimGuid;
    DWORD WimFileNameOffset;
    DWORD WimType;
    DWORD WimIndex;
    DWORD Flags;
} WIM_PROVIDER_OVERLAY_ENTRY, *PWIM_PROVIDER_OVERLAY_ENTRY;
# 12668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
    DWORD Version;
    DWORD Algorithm;
} FILE_PROVIDER_EXTERNAL_INFO_V0, *PFILE_PROVIDER_EXTERNAL_INFO_V0;

typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
    DWORD Version;
    DWORD Algorithm;
    DWORD Flags;
} FILE_PROVIDER_EXTERNAL_INFO_V1, *PFILE_PROVIDER_EXTERNAL_INFO_V1;

typedef FILE_PROVIDER_EXTERNAL_INFO_V1 FILE_PROVIDER_EXTERNAL_INFO;
typedef PFILE_PROVIDER_EXTERNAL_INFO_V1 PFILE_PROVIDER_EXTERNAL_INFO;






typedef struct _CONTAINER_VOLUME_STATE {
    DWORD Flags;
} CONTAINER_VOLUME_STATE, *PCONTAINER_VOLUME_STATE;




typedef struct _CONTAINER_ROOT_INFO_INPUT {
    DWORD Flags;
} CONTAINER_ROOT_INFO_INPUT, *PCONTAINER_ROOT_INFO_INPUT;

typedef struct _CONTAINER_ROOT_INFO_OUTPUT {
    WORD ContainerRootIdLength;
    BYTE ContainerRootId[1];
} CONTAINER_ROOT_INFO_OUTPUT, *PCONTAINER_ROOT_INFO_OUTPUT;
# 12711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
    DWORD NumberOfWorkerThreads;
    DWORD Flags;
} VIRTUALIZATION_INSTANCE_INFO_INPUT, *PVIRTUALIZATION_INSTANCE_INFO_INPUT;

typedef struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
    GUID VirtualizationInstanceID;
} VIRTUALIZATION_INSTANCE_INFO_OUTPUT, *PVIRTUALIZATION_INSTANCE_INFO_OUTPUT;





typedef struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
    WORD AltitudeLength;
    WCHAR Altitude[1];
} GET_FILTER_FILE_IDENTIFIER_INPUT, *PGET_FILTER_FILE_IDENTIFIER_INPUT;

typedef struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
    WORD FilterFileIdentifierLength;
    BYTE FilterFileIdentifier[1];
} GET_FILTER_FILE_IDENTIFIER_OUTPUT, *PGET_FILTER_FILE_IDENTIFIER_OUTPUT;
# 12819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _DISK_EXTENT {





    DWORD DiskNumber;






    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER ExtentLength;

} DISK_EXTENT, *PDISK_EXTENT;

typedef struct _VOLUME_DISK_EXTENTS {





    DWORD NumberOfDiskExtents;
    DISK_EXTENT Extents[1];

} VOLUME_DISK_EXTENTS, *PVOLUME_DISK_EXTENTS;
# 12907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {





    DWORDLONG GptAttributes;

} VOLUME_GET_GPT_ATTRIBUTES_INFORMATION, *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
# 12930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;

typedef void
(*PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK)(
         struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *SourceContext,
            struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *TargetContext,
         LONGLONG RelativeOffset
    );
# 12948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {

    WORD Validation;



    WORD Flags;

    PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;

} IO_IRP_EXT_TRACK_OFFSET_HEADER, *PIO_IRP_EXT_TRACK_OFFSET_HEADER;
# 12974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winioctl.h" 3
#pragma warning(pop)
# 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winsmcrd.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winsmcrd.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)



typedef DWORD ULONG;
typedef WORD UWORD;
typedef BYTE UCHAR;
# 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winsmcrd.h" 3
extern "C" const GUID GUID_DEVINTERFACE_SMARTCARD_READER;
# 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winsmcrd.h" 3
typedef struct _SCARD_IO_REQUEST{
    DWORD dwProtocol;
    DWORD cbPciLength;
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;






typedef struct _SCARD_T0_COMMAND {
    BYTE
        bCla,
        bIns,
        bP1,
        bP2,
        bP3;
} SCARD_T0_COMMAND, *LPSCARD_T0_COMMAND;

typedef struct _SCARD_T0_REQUEST {
    SCARD_IO_REQUEST ioRequest;
    BYTE
        bSw1,
        bSw2;
#pragma warning(push)
#pragma warning(disable: 4201)
 union
    {
        SCARD_T0_COMMAND CmdBytes;
        BYTE rgbHeader[5];
    } ;
#pragma warning(pop)
} SCARD_T0_REQUEST;

typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST, *LPSCARD_T0_REQUEST;






typedef struct _SCARD_T1_REQUEST {
    SCARD_IO_REQUEST ioRequest;
} SCARD_T1_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST, *LPSCARD_T1_REQUEST;
# 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\winsmcrd.h" 3
#pragma warning(pop)



}
# 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 2 3







extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)







typedef const BYTE *LPCBYTE;



typedef const void *LPCVOID;
# 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
__declspec(dllimport) extern const SCARD_IO_REQUEST
    g_rgSCardT0Pci,
    g_rgSCardT1Pci,
    g_rgSCardRawPci;
# 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
typedef ULONG_PTR SCARDCONTEXT;
typedef SCARDCONTEXT *PSCARDCONTEXT, *LPSCARDCONTEXT;

typedef ULONG_PTR SCARDHANDLE;
typedef SCARDHANDLE *PSCARDHANDLE, *LPSCARDHANDLE;
# 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardEstablishContext(
          DWORD dwScope,
                LPCVOID pvReserved1,
                LPCVOID pvReserved2,
          LPSCARDCONTEXT phContext);

extern LONG __stdcall
SCardReleaseContext(
              SCARDCONTEXT hContext);

extern LONG __stdcall
SCardIsValidContext(
              SCARDCONTEXT hContext);
# 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardListReaderGroupsA(
            SCARDCONTEXT hContext,
                                                                LPSTR mszGroups,
            LPDWORD pcchGroups);
extern LONG __stdcall
SCardListReaderGroupsW(
            SCARDCONTEXT hContext,
                                                                LPWSTR mszGroups,
            LPDWORD pcchGroups);







extern LONG __stdcall
SCardListReadersA(
             SCARDCONTEXT hContext,
             LPCSTR mszGroups,


             LPSTR mszReaders,
             LPDWORD pcchReaders);

extern LONG __stdcall
SCardListReadersW(
             SCARDCONTEXT hContext,
             LPCWSTR mszGroups,


             LPWSTR mszReaders,
             LPDWORD pcchReaders);







extern LONG __stdcall
SCardListCardsA(
              SCARDCONTEXT hContext,
              LPCBYTE pbAtr,
                                         LPCGUID rgquidInterfaces,
              DWORD cguidInterfaceCount,


              CHAR *mszCards,
              LPDWORD pcchCards);

extern LONG __stdcall
SCardListCardsW(
              SCARDCONTEXT hContext,
              LPCBYTE pbAtr,
                                         LPCGUID rgquidInterfaces,
              DWORD cguidInterfaceCount,


              WCHAR *mszCards,
              LPDWORD pcchCards);
# 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardListInterfacesA(
             SCARDCONTEXT hContext,
             LPCSTR szCard,
             LPGUID pguidInterfaces,
             LPDWORD pcguidInterfaces);
extern LONG __stdcall
SCardListInterfacesW(
             SCARDCONTEXT hContext,
             LPCWSTR szCard,
             LPGUID pguidInterfaces,
             LPDWORD pcguidInterfaces);






extern LONG __stdcall
SCardGetProviderIdA(
             SCARDCONTEXT hContext,
             LPCSTR szCard,
             LPGUID pguidProviderId);
extern LONG __stdcall
SCardGetProviderIdW(
             SCARDCONTEXT hContext,
             LPCWSTR szCard,
             LPGUID pguidProviderId);
# 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardGetCardTypeProviderNameA(
              SCARDCONTEXT hContext,
              LPCSTR szCardName,
              DWORD dwProviderId,


              CHAR *szProvider,
              LPDWORD pcchProvider);

extern LONG __stdcall
SCardGetCardTypeProviderNameW(
              SCARDCONTEXT hContext,
              LPCWSTR szCardName,
              DWORD dwProviderId,


              WCHAR *szProvider,
              LPDWORD pcchProvider);
# 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardIntroduceReaderGroupA(
         SCARDCONTEXT hContext,
         LPCSTR szGroupName);
extern LONG __stdcall
SCardIntroduceReaderGroupW(
         SCARDCONTEXT hContext,
         LPCWSTR szGroupName);






extern LONG __stdcall
SCardForgetReaderGroupA(
         SCARDCONTEXT hContext,
         LPCSTR szGroupName);
extern LONG __stdcall
SCardForgetReaderGroupW(
         SCARDCONTEXT hContext,
         LPCWSTR szGroupName);






extern LONG __stdcall
SCardIntroduceReaderA(
         SCARDCONTEXT hContext,
         LPCSTR szReaderName,
         LPCSTR szDeviceName);
extern LONG __stdcall
SCardIntroduceReaderW(
         SCARDCONTEXT hContext,
         LPCWSTR szReaderName,
         LPCWSTR szDeviceName);






extern LONG __stdcall
SCardForgetReaderA(
         SCARDCONTEXT hContext,
         LPCSTR szReaderName);
extern LONG __stdcall
SCardForgetReaderW(
         SCARDCONTEXT hContext,
         LPCWSTR szReaderName);






extern LONG __stdcall
SCardAddReaderToGroupA(
         SCARDCONTEXT hContext,
         LPCSTR szReaderName,
         LPCSTR szGroupName);
extern LONG __stdcall
SCardAddReaderToGroupW(
         SCARDCONTEXT hContext,
         LPCWSTR szReaderName,
         LPCWSTR szGroupName);






extern LONG __stdcall
SCardRemoveReaderFromGroupA(
         SCARDCONTEXT hContext,
         LPCSTR szReaderName,
         LPCSTR szGroupName);
extern LONG __stdcall
SCardRemoveReaderFromGroupW(
         SCARDCONTEXT hContext,
         LPCWSTR szReaderName,
         LPCWSTR szGroupName);






extern LONG __stdcall
SCardIntroduceCardTypeA(
             SCARDCONTEXT hContext,
             LPCSTR szCardName,
             LPCGUID pguidPrimaryProvider,
             LPCGUID rgguidInterfaces,
             DWORD dwInterfaceCount,
             LPCBYTE pbAtr,
             LPCBYTE pbAtrMask,
             DWORD cbAtrLen);
extern LONG __stdcall
SCardIntroduceCardTypeW(
             SCARDCONTEXT hContext,
             LPCWSTR szCardName,
             LPCGUID pguidPrimaryProvider,
             LPCGUID rgguidInterfaces,
             DWORD dwInterfaceCount,
             LPCBYTE pbAtr,
             LPCBYTE pbAtrMask,
             DWORD cbAtrLen);
# 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardSetCardTypeProviderNameA(
         SCARDCONTEXT hContext,
         LPCSTR szCardName,
         DWORD dwProviderId,
         LPCSTR szProvider);
extern LONG __stdcall
SCardSetCardTypeProviderNameW(
         SCARDCONTEXT hContext,
         LPCWSTR szCardName,
         DWORD dwProviderId,
         LPCWSTR szProvider);
# 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardForgetCardTypeA(
         SCARDCONTEXT hContext,
         LPCSTR szCardName);
extern LONG __stdcall
SCardForgetCardTypeW(
         SCARDCONTEXT hContext,
         LPCWSTR szCardName);
# 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardFreeMemory(
         SCARDCONTEXT hContext,
         LPCVOID pvMem);


extern HANDLE __stdcall
SCardAccessStartedEvent(void);

extern void __stdcall
SCardReleaseStartedEvent(void);
# 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
typedef struct {
    LPCSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
} SCARD_READERSTATEA, *PSCARD_READERSTATEA, *LPSCARD_READERSTATEA;
typedef struct {
    LPCWSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
} SCARD_READERSTATEW, *PSCARD_READERSTATEW, *LPSCARD_READERSTATEW;

typedef SCARD_READERSTATEW SCARD_READERSTATE;
typedef PSCARD_READERSTATEW PSCARD_READERSTATE;
typedef LPSCARD_READERSTATEW LPSCARD_READERSTATE;
# 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardLocateCardsA(
            SCARDCONTEXT hContext,
            LPCSTR mszCards,
            LPSCARD_READERSTATEA rgReaderStates,
            DWORD cReaders);
extern LONG __stdcall
SCardLocateCardsW(
            SCARDCONTEXT hContext,
            LPCWSTR mszCards,
            LPSCARD_READERSTATEW rgReaderStates,
            DWORD cReaders);







typedef struct _SCARD_ATRMASK {
    DWORD cbAtr;
    BYTE rgbAtr[36];
    BYTE rgbMask[36];
} SCARD_ATRMASK, *PSCARD_ATRMASK, *LPSCARD_ATRMASK;


extern LONG __stdcall
SCardLocateCardsByATRA(
            SCARDCONTEXT hContext,
            LPSCARD_ATRMASK rgAtrMasks,
            DWORD cAtrs,
            LPSCARD_READERSTATEA rgReaderStates,
            DWORD cReaders);
extern LONG __stdcall
SCardLocateCardsByATRW(
            SCARDCONTEXT hContext,
            LPSCARD_ATRMASK rgAtrMasks,
            DWORD cAtrs,
            LPSCARD_READERSTATEW rgReaderStates,
            DWORD cReaders);







extern LONG __stdcall
SCardGetStatusChangeA(
            SCARDCONTEXT hContext,
            DWORD dwTimeout,
            LPSCARD_READERSTATEA rgReaderStates,
            DWORD cReaders);
extern LONG __stdcall
SCardGetStatusChangeW(
            SCARDCONTEXT hContext,
            DWORD dwTimeout,
            LPSCARD_READERSTATEW rgReaderStates,
            DWORD cReaders);






extern LONG __stdcall
SCardCancel(
            SCARDCONTEXT hContext);
# 691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardConnectA(
            SCARDCONTEXT hContext,
            LPCSTR szReader,
            DWORD dwShareMode,
            DWORD dwPreferredProtocols,
            LPSCARDHANDLE phCard,
            LPDWORD pdwActiveProtocol);
extern LONG __stdcall
SCardConnectW(
            SCARDCONTEXT hContext,
            LPCWSTR szReader,
            DWORD dwShareMode,
            DWORD dwPreferredProtocols,
            LPSCARDHANDLE phCard,
            LPDWORD pdwActiveProtocol);






extern LONG __stdcall
SCardReconnect(
              SCARDHANDLE hCard,
              DWORD dwShareMode,
              DWORD dwPreferredProtocols,
              DWORD dwInitialization,
              LPDWORD pdwActiveProtocol);

extern LONG __stdcall
SCardDisconnect(
            SCARDHANDLE hCard,
            DWORD dwDisposition);

extern LONG __stdcall
SCardBeginTransaction(
            SCARDHANDLE hCard);

extern LONG __stdcall
SCardEndTransaction(
            SCARDHANDLE hCard,
            DWORD dwDisposition);

extern LONG __stdcall
SCardCancelTransaction(
            SCARDHANDLE hCard);






extern LONG __stdcall
SCardState(
            SCARDHANDLE hCard,
            LPDWORD pdwState,
            LPDWORD pdwProtocol,
                                     LPBYTE pbAtr,
            LPDWORD pcbAtrLen);





extern LONG __stdcall
SCardStatusA(
                SCARDHANDLE hCard,


                LPSTR mszReaderNames,
                LPDWORD pcchReaderLen,
                LPDWORD pdwState,
                LPDWORD pdwProtocol,


                LPBYTE pbAtr,
                LPDWORD pcbAtrLen);
extern LONG __stdcall
SCardStatusW(
                SCARDHANDLE hCard,


                LPWSTR mszReaderNames,
                LPDWORD pcchReaderLen,
                LPDWORD pdwState,
                LPDWORD pdwProtocol,


                LPBYTE pbAtr,
                LPDWORD pcbAtrLen);






extern LONG __stdcall
SCardTransmit(
                SCARDHANDLE hCard,
                LPCSCARD_IO_REQUEST pioSendPci,
                                   LPCBYTE pbSendBuffer,
                DWORD cbSendLength,
                LPSCARD_IO_REQUEST pioRecvPci,
                                       LPBYTE pbRecvBuffer,
                LPDWORD pcbRecvLength);


extern LONG __stdcall
SCardGetTransmitCount(
         SCARDHANDLE hCard,
          LPDWORD pcTransmitCount);
# 815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardControl(
            SCARDHANDLE hCard,
            DWORD dwControlCode,
                                     LPCVOID lpInBuffer,
            DWORD cbInBufferSize,
                                        LPVOID lpOutBuffer,
            DWORD cbOutBufferSize,
            LPDWORD lpBytesReturned);

extern LONG __stdcall
SCardGetAttrib(
            SCARDHANDLE hCard,
            DWORD dwAttrId,
                                        LPBYTE pbAttr,
            LPDWORD pcbAttrLen);
# 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardSetAttrib(
         SCARDHANDLE hCard,
         DWORD dwAttrId,
                                LPCBYTE pbAttr,
         DWORD cbAttrLen);
# 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCA) ( SCARDCONTEXT, LPSTR, LPSTR, PVOID);
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCW) ( SCARDCONTEXT, LPWSTR, LPWSTR, PVOID);





typedef BOOL (__stdcall *LPOCNCHKPROC) ( SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef void (__stdcall *LPOCNDSCPROC) ( SCARDCONTEXT, SCARDHANDLE, PVOID);
# 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
typedef struct {
    DWORD dwStructSize;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;

    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
} OPENCARD_SEARCH_CRITERIAA, *POPENCARD_SEARCH_CRITERIAA, *LPOPENCARD_SEARCH_CRITERIAA;
typedef struct {
    DWORD dwStructSize;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;

    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
} OPENCARD_SEARCH_CRITERIAW, *POPENCARD_SEARCH_CRITERIAW, *LPOPENCARD_SEARCH_CRITERIAW;

typedef OPENCARD_SEARCH_CRITERIAW OPENCARD_SEARCH_CRITERIA;
typedef POPENCARD_SEARCH_CRITERIAW POPENCARD_SEARCH_CRITERIA;
typedef LPOPENCARD_SEARCH_CRITERIAW LPOPENCARD_SEARCH_CRITERIA;
# 951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
typedef struct {
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCSTR lpstrTitle;
    LPCSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
    LPOCNCONNPROCA lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;

    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
} OPENCARDNAME_EXA, *POPENCARDNAME_EXA, *LPOPENCARDNAME_EXA;
typedef struct {
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
    LPOCNCONNPROCW lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;

    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
} OPENCARDNAME_EXW, *POPENCARDNAME_EXW, *LPOPENCARDNAME_EXW;

typedef OPENCARDNAME_EXW OPENCARDNAME_EX;
typedef POPENCARDNAME_EXW POPENCARDNAME_EX;
typedef LPOPENCARDNAME_EXW LPOPENCARDNAME_EX;
# 1084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
typedef enum {
    RSR_MATCH_TYPE_READER_AND_CONTAINER = 1,
    RSR_MATCH_TYPE_SERIAL_NUMBER,
    RSR_MATCH_TYPE_ALL_CARDS
} READER_SEL_REQUEST_MATCH_TYPE;

typedef struct {
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    READER_SEL_REQUEST_MATCH_TYPE MatchType;
#pragma warning(push)
#pragma warning(disable: 4201)
 union {
        struct {
            DWORD cbReaderNameOffset;
            DWORD cchReaderNameLength;
            DWORD cbContainerNameOffset;
            DWORD cchContainerNameLength;
            DWORD dwDesiredCardModuleVersion;
            DWORD dwCspFlags;
        } ReaderAndContainerParameter;
        struct {
            DWORD cbSerialNumberOffset;
            DWORD cbSerialNumberLength;
            DWORD dwDesiredCardModuleVersion;
        } SerialNumberParameter;
    } ;
#pragma warning(pop)
} READER_SEL_REQUEST, *PREADER_SEL_REQUEST;
# 1133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
typedef struct {
    DWORD cbReaderNameOffset;
    DWORD cchReaderNameLength;
    DWORD cbCardNameOffset;
    DWORD cchCardNameLength;
} READER_SEL_RESPONSE, *PREADER_SEL_RESPONSE;






extern LONG __stdcall
SCardUIDlgSelectCardA(
    LPOPENCARDNAME_EXA);
extern LONG __stdcall
SCardUIDlgSelectCardW(
    LPOPENCARDNAME_EXW);
# 1163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
typedef struct {
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    LPCSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
} OPENCARDNAMEA, *POPENCARDNAMEA, *LPOPENCARDNAMEA;
typedef struct {
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    LPCWSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
} OPENCARDNAMEW, *POPENCARDNAMEW, *LPOPENCARDNAMEW;

typedef OPENCARDNAMEW OPENCARDNAME;
typedef POPENCARDNAMEW POPENCARDNAME;
typedef LPOPENCARDNAMEW LPOPENCARDNAME;
# 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
GetOpenCardNameA(
    LPOPENCARDNAMEA);
extern LONG __stdcall
GetOpenCardNameW(
    LPOPENCARDNAMEW);






extern LONG __stdcall
SCardDlgExtendedError (void);







extern LONG __stdcall
SCardReadCacheA(
          SCARDCONTEXT hContext,
          UUID *CardIdentifier,
          DWORD FreshnessCounter,
          LPSTR LookupName,
                                 PBYTE Data,
          DWORD *DataLen);
extern LONG __stdcall
SCardReadCacheW(
          SCARDCONTEXT hContext,
          UUID *CardIdentifier,
          DWORD FreshnessCounter,
          LPWSTR LookupName,
                                 PBYTE Data,
          DWORD *DataLen);






extern LONG __stdcall
SCardWriteCacheA(
         SCARDCONTEXT hContext,
         UUID *CardIdentifier,
         DWORD FreshnessCounter,
         LPSTR LookupName,
                              PBYTE Data,
         DWORD DataLen);
extern LONG __stdcall
SCardWriteCacheW(
         SCARDCONTEXT hContext,
         UUID *CardIdentifier,
         DWORD FreshnessCounter,
         LPWSTR LookupName,
                              PBYTE Data,
         DWORD DataLen);
# 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardGetReaderIconA(
           SCARDCONTEXT hContext,
           LPCSTR szReaderName,


           LPBYTE pbIcon,
           LPDWORD pcbIcon);

extern LONG __stdcall
SCardGetReaderIconW(
           SCARDCONTEXT hContext,
           LPCWSTR szReaderName,


           LPBYTE pbIcon,
           LPDWORD pcbIcon);







extern LONG __stdcall
SCardGetDeviceTypeIdA(
           SCARDCONTEXT hContext,
           LPCSTR szReaderName,
           LPDWORD pdwDeviceTypeId);

extern LONG __stdcall
SCardGetDeviceTypeIdW(
           SCARDCONTEXT hContext,
           LPCWSTR szReaderName,
           LPDWORD pdwDeviceTypeId);







extern LONG __stdcall
SCardGetReaderDeviceInstanceIdA(
          SCARDCONTEXT hContext,
          LPCSTR szReaderName,


          LPSTR szDeviceInstanceId,
          LPDWORD pcchDeviceInstanceId);

extern LONG __stdcall
SCardGetReaderDeviceInstanceIdW(
          SCARDCONTEXT hContext,
          LPCWSTR szReaderName,


          LPWSTR szDeviceInstanceId,
          LPDWORD pcchDeviceInstanceId);







extern LONG __stdcall
SCardListReadersWithDeviceInstanceIdA(
          SCARDCONTEXT hContext,
          LPCSTR szDeviceInstanceId,


          LPSTR mszReaders,
          LPDWORD pcchReaders);

extern LONG __stdcall
SCardListReadersWithDeviceInstanceIdW(
          SCARDCONTEXT hContext,
          LPCWSTR szDeviceInstanceId,


          LPWSTR mszReaders,
          LPDWORD pcchReaders);
# 1403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winscard.h" 3
extern LONG __stdcall
SCardAudit(
       SCARDCONTEXT hContext,
       DWORD dwEvent);







#pragma warning(pop)



}
# 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 1 3
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4820)
# 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack4.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 2 3




extern "C" {
# 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
struct _PSP;
typedef struct _PSP * HPROPSHEETPAGE;


struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;


typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
# 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
# 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

typedef struct _PROPSHEETPAGEA_V2
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

typedef struct _PROPSHEETPAGEA_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;

    HANDLE hActCtx;
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;


typedef struct _PROPSHEETPAGEA
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;

    HANDLE hActCtx;

    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    } ;

} PROPSHEETPAGEA_V4, *LPPROPSHEETPAGEA_V4;
typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4;


typedef struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

typedef struct _PROPSHEETPAGEW_V2
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

typedef struct _PROPSHEETPAGEW_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;

    HANDLE hActCtx;
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;


typedef struct _PROPSHEETPAGEW
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;

    HANDLE hActCtx;

    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    } ;

} PROPSHEETPAGEW_V4, *LPPROPSHEETPAGEW_V4;
typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4;
# 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA_LATEST;
typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW_LATEST;
typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA_LATEST;
typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW_LATEST;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST;
# 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA;
typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW;
typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA;
typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW;
# 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
# 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef struct _PROPSHEETHEADERA_V1
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERA_V1, *LPPROPSHEETHEADERA_V1;
typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1;

typedef struct _PROPSHEETHEADERA_V2
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    } ;
} PROPSHEETHEADERA_V2, *LPPROPSHEETHEADERA_V2;
typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2;
# 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef struct _PROPSHEETHEADERW_V1
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERW_V1, *LPPROPSHEETHEADERW_V1;
typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1;

typedef struct _PROPSHEETHEADERW_V2
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCWSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    } ;
} PROPSHEETHEADERW_V2, *LPPROPSHEETHEADERW_V2;
typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2;
# 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef PROPSHEETHEADERA_V2 PROPSHEETHEADERA;
typedef PROPSHEETHEADERW_V2 PROPSHEETHEADERW;
typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA;
typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW;
typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA;
typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW;
# 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
__declspec(dllimport) BOOL __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);

__declspec(dllimport) INT_PTR __stdcall PropertySheetA(LPCPROPSHEETHEADERA);

__declspec(dllimport) INT_PTR __stdcall PropertySheetW(LPCPROPSHEETHEADERW);
# 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);


typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY, *LPPSHNOTIFY;
# 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
}



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 2 3







#pragma warning(pop)
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 2 3




extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)






typedef struct _PRINTER_INFO_1A {
    DWORD Flags;
    LPSTR pDescription;
    LPSTR pName;
    LPSTR pComment;
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W {
    DWORD Flags;
    LPWSTR pDescription;
    LPWSTR pName;
    LPWSTR pComment;
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;

typedef PRINTER_INFO_1W PRINTER_INFO_1;
typedef PPRINTER_INFO_1W PPRINTER_INFO_1;
typedef LPPRINTER_INFO_1W LPPRINTER_INFO_1;






typedef struct _PRINTER_INFO_2A {
    LPSTR pServerName;
    LPSTR pPrinterName;
    LPSTR pShareName;
    LPSTR pPortName;
    LPSTR pDriverName;
    LPSTR pComment;
    LPSTR pLocation;
    LPDEVMODEA pDevMode;
    LPSTR pSepFile;
    LPSTR pPrintProcessor;
    LPSTR pDatatype;
    LPSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W {
    LPWSTR pServerName;
    LPWSTR pPrinterName;
    LPWSTR pShareName;
    LPWSTR pPortName;
    LPWSTR pDriverName;
    LPWSTR pComment;
    LPWSTR pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR pSepFile;
    LPWSTR pPrintProcessor;
    LPWSTR pDatatype;
    LPWSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;

typedef PRINTER_INFO_2W PRINTER_INFO_2;
typedef PPRINTER_INFO_2W PPRINTER_INFO_2;
typedef LPPRINTER_INFO_2W LPPRINTER_INFO_2;






typedef struct _PRINTER_INFO_3 {
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;

typedef struct _PRINTER_INFO_4A {
    LPSTR pPrinterName;
    LPSTR pServerName;
    DWORD Attributes;
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W {
    LPWSTR pPrinterName;
    LPWSTR pServerName;
    DWORD Attributes;
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;

typedef PRINTER_INFO_4W PRINTER_INFO_4;
typedef PPRINTER_INFO_4W PPRINTER_INFO_4;
typedef LPPRINTER_INFO_4W LPPRINTER_INFO_4;






typedef struct _PRINTER_INFO_5A {
    LPSTR pPrinterName;
    LPSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W {
    LPWSTR pPrinterName;
    LPWSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;

typedef PRINTER_INFO_5W PRINTER_INFO_5;
typedef PPRINTER_INFO_5W PPRINTER_INFO_5;
typedef LPPRINTER_INFO_5W LPPRINTER_INFO_5;






typedef struct _PRINTER_INFO_6 {
    DWORD dwStatus;
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;


typedef struct _PRINTER_INFO_7A {
  LPSTR pszObjectGUID;
  DWORD dwAction;
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W {
  LPWSTR pszObjectGUID;
  DWORD dwAction;
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;

typedef PRINTER_INFO_7W PRINTER_INFO_7;
typedef PPRINTER_INFO_7W PPRINTER_INFO_7;
typedef LPPRINTER_INFO_7W LPPRINTER_INFO_7;
# 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _PRINTER_INFO_8A {
    LPDEVMODEA pDevMode;
} PRINTER_INFO_8A, *PPRINTER_INFO_8A, *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W {
    LPDEVMODEW pDevMode;
} PRINTER_INFO_8W, *PPRINTER_INFO_8W, *LPPRINTER_INFO_8W;

typedef PRINTER_INFO_8W PRINTER_INFO_8;
typedef PPRINTER_INFO_8W PPRINTER_INFO_8;
typedef LPPRINTER_INFO_8W LPPRINTER_INFO_8;






typedef struct _PRINTER_INFO_9A {
    LPDEVMODEA pDevMode;
} PRINTER_INFO_9A, *PPRINTER_INFO_9A, *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W {
    LPDEVMODEW pDevMode;
} PRINTER_INFO_9W, *PPRINTER_INFO_9W, *LPPRINTER_INFO_9W;

typedef PRINTER_INFO_9W PRINTER_INFO_9;
typedef PPRINTER_INFO_9W PPRINTER_INFO_9;
typedef LPPRINTER_INFO_9W LPPRINTER_INFO_9;
# 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _JOB_INFO_1A {
   DWORD JobId;
   LPSTR pPrinterName;
   LPSTR pMachineName;
   LPSTR pUserName;
   LPSTR pDocument;
   LPSTR pDatatype;
   LPSTR pStatus;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD TotalPages;
   DWORD PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W {
   DWORD JobId;
   LPWSTR pPrinterName;
   LPWSTR pMachineName;
   LPWSTR pUserName;
   LPWSTR pDocument;
   LPWSTR pDatatype;
   LPWSTR pStatus;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD TotalPages;
   DWORD PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;

typedef JOB_INFO_1W JOB_INFO_1;
typedef PJOB_INFO_1W PJOB_INFO_1;
typedef LPJOB_INFO_1W LPJOB_INFO_1;






typedef struct _JOB_INFO_2A {
   DWORD JobId;
   LPSTR pPrinterName;
   LPSTR pMachineName;
   LPSTR pUserName;
   LPSTR pDocument;
   LPSTR pNotifyName;
   LPSTR pDatatype;
   LPSTR pPrintProcessor;
   LPSTR pParameters;
   LPSTR pDriverName;
   LPDEVMODEA pDevMode;
   LPSTR pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD StartTime;
   DWORD UntilTime;
   DWORD TotalPages;
   DWORD Size;
   SYSTEMTIME Submitted;
   DWORD Time;
   DWORD PagesPrinted;
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W {
   DWORD JobId;
   LPWSTR pPrinterName;
   LPWSTR pMachineName;
   LPWSTR pUserName;
   LPWSTR pDocument;
   LPWSTR pNotifyName;
   LPWSTR pDatatype;
   LPWSTR pPrintProcessor;
   LPWSTR pParameters;
   LPWSTR pDriverName;
   LPDEVMODEW pDevMode;
   LPWSTR pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD StartTime;
   DWORD UntilTime;
   DWORD TotalPages;
   DWORD Size;
   SYSTEMTIME Submitted;
   DWORD Time;
   DWORD PagesPrinted;
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;

typedef JOB_INFO_2W JOB_INFO_2;
typedef PJOB_INFO_2W PJOB_INFO_2;
typedef LPJOB_INFO_2W LPJOB_INFO_2;






typedef struct _JOB_INFO_3 {
    DWORD JobId;
    DWORD NextJobId;
    DWORD Reserved;
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;

typedef struct _JOB_INFO_4A {
   DWORD JobId;
   LPSTR pPrinterName;
   LPSTR pMachineName;
   LPSTR pUserName;
   LPSTR pDocument;
   LPSTR pNotifyName;
   LPSTR pDatatype;
   LPSTR pPrintProcessor;
   LPSTR pParameters;
   LPSTR pDriverName;
   LPDEVMODEA pDevMode;
   LPSTR pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD StartTime;
   DWORD UntilTime;
   DWORD TotalPages;
   DWORD Size;
   SYSTEMTIME Submitted;
   DWORD Time;
   DWORD PagesPrinted;
   LONG SizeHigh;
} JOB_INFO_4A, *PJOB_INFO_4A, *LPJOB_INFO_4A;
typedef struct _JOB_INFO_4W {
   DWORD JobId;
   LPWSTR pPrinterName;
   LPWSTR pMachineName;
   LPWSTR pUserName;
   LPWSTR pDocument;
   LPWSTR pNotifyName;
   LPWSTR pDatatype;
   LPWSTR pPrintProcessor;
   LPWSTR pParameters;
   LPWSTR pDriverName;
   LPDEVMODEW pDevMode;
   LPWSTR pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD StartTime;
   DWORD UntilTime;
   DWORD TotalPages;
   DWORD Size;
   SYSTEMTIME Submitted;
   DWORD Time;
   DWORD PagesPrinted;
   LONG SizeHigh;
} JOB_INFO_4W, *PJOB_INFO_4W, *LPJOB_INFO_4W;

typedef JOB_INFO_4W JOB_INFO_4;
typedef PJOB_INFO_4W PJOB_INFO_4;
typedef LPJOB_INFO_4W LPJOB_INFO_4;
# 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _ADDJOB_INFO_1A {
    LPSTR Path;
    DWORD JobId;
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W {
    LPWSTR Path;
    DWORD JobId;
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;

typedef ADDJOB_INFO_1W ADDJOB_INFO_1;
typedef PADDJOB_INFO_1W PADDJOB_INFO_1;
typedef LPADDJOB_INFO_1W LPADDJOB_INFO_1;







typedef struct _DRIVER_INFO_1A {
    LPSTR pName;
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W {
    LPWSTR pName;
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;

typedef DRIVER_INFO_1W DRIVER_INFO_1;
typedef PDRIVER_INFO_1W PDRIVER_INFO_1;
typedef LPDRIVER_INFO_1W LPDRIVER_INFO_1;






typedef struct _DRIVER_INFO_2A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;

typedef DRIVER_INFO_2W DRIVER_INFO_2;
typedef PDRIVER_INFO_2W PDRIVER_INFO_2;
typedef LPDRIVER_INFO_2W LPDRIVER_INFO_2;






typedef struct _DRIVER_INFO_3A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;

typedef DRIVER_INFO_3W DRIVER_INFO_3;
typedef PDRIVER_INFO_3W PDRIVER_INFO_3;
typedef LPDRIVER_INFO_3W LPDRIVER_INFO_3;






typedef struct _DRIVER_INFO_4A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
} DRIVER_INFO_4A, *PDRIVER_INFO_4A, *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
} DRIVER_INFO_4W, *PDRIVER_INFO_4W, *LPDRIVER_INFO_4W;

typedef DRIVER_INFO_4W DRIVER_INFO_4;
typedef PDRIVER_INFO_4W PDRIVER_INFO_4;
typedef LPDRIVER_INFO_4W LPDRIVER_INFO_4;






typedef struct _DRIVER_INFO_5A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
} DRIVER_INFO_5A, *PDRIVER_INFO_5A, *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
} DRIVER_INFO_5W, *PDRIVER_INFO_5W, *LPDRIVER_INFO_5W;

typedef DRIVER_INFO_5W DRIVER_INFO_5;
typedef PDRIVER_INFO_5W PDRIVER_INFO_5;
typedef LPDRIVER_INFO_5W LPDRIVER_INFO_5;






typedef struct _DRIVER_INFO_6A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
} DRIVER_INFO_6A, *PDRIVER_INFO_6A, *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
} DRIVER_INFO_6W, *PDRIVER_INFO_6W, *LPDRIVER_INFO_6W;

typedef DRIVER_INFO_6W DRIVER_INFO_6;
typedef PDRIVER_INFO_6W PDRIVER_INFO_6;
typedef LPDRIVER_INFO_6W LPDRIVER_INFO_6;
# 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _DRIVER_INFO_8A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
    LPSTR pszPrintProcessor;
    LPSTR pszVendorSetup;
    LPSTR pszzColorProfiles;
    LPSTR pszInfPath;
    DWORD dwPrinterDriverAttributes;
    LPSTR pszzCoreDriverDependencies;
    FILETIME ftMinInboxDriverVerDate;
    DWORDLONG dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8A, *PDRIVER_INFO_8A, *LPDRIVER_INFO_8A;
typedef struct _DRIVER_INFO_8W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
    LPWSTR pszPrintProcessor;
    LPWSTR pszVendorSetup;
    LPWSTR pszzColorProfiles;
    LPWSTR pszInfPath;
    DWORD dwPrinterDriverAttributes;
    LPWSTR pszzCoreDriverDependencies;
    FILETIME ftMinInboxDriverVerDate;
    DWORDLONG dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8W, *PDRIVER_INFO_8W, *LPDRIVER_INFO_8W;

typedef DRIVER_INFO_8W DRIVER_INFO_8;
typedef PDRIVER_INFO_8W PDRIVER_INFO_8;
typedef LPDRIVER_INFO_8W LPDRIVER_INFO_8;
# 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _DOC_INFO_1A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;

typedef DOC_INFO_1W DOC_INFO_1;
typedef PDOC_INFO_1W PDOC_INFO_1;
typedef LPDOC_INFO_1W LPDOC_INFO_1;






typedef struct _FORM_INFO_1A {
    DWORD Flags;
    LPSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W {
    DWORD Flags;
    LPWSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;

typedef FORM_INFO_1W FORM_INFO_1;
typedef PFORM_INFO_1W PFORM_INFO_1;
typedef LPFORM_INFO_1W LPFORM_INFO_1;
# 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
    typedef struct _FORM_INFO_2A {
        DWORD Flags;
        LPCSTR pName;
        SIZEL Size;
        RECTL ImageableArea;
        LPCSTR pKeyword;
        DWORD StringType;
        LPCSTR pMuiDll;
        DWORD dwResourceId;
        LPCSTR pDisplayName;
        LANGID wLangId;
    } FORM_INFO_2A, *PFORM_INFO_2A, *LPFORM_INFO_2A;
    typedef struct _FORM_INFO_2W {
        DWORD Flags;
        LPCWSTR pName;
        SIZEL Size;
        RECTL ImageableArea;
        LPCSTR pKeyword;
        DWORD StringType;
        LPCWSTR pMuiDll;
        DWORD dwResourceId;
        LPCWSTR pDisplayName;
        LANGID wLangId;
    } FORM_INFO_2W, *PFORM_INFO_2W, *LPFORM_INFO_2W;

typedef FORM_INFO_2W FORM_INFO_2;
typedef PFORM_INFO_2W PFORM_INFO_2;
typedef LPFORM_INFO_2W LPFORM_INFO_2;







typedef struct _DOC_INFO_2A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;

typedef DOC_INFO_2W DOC_INFO_2;
typedef PDOC_INFO_2W PDOC_INFO_2;
typedef LPDOC_INFO_2W LPDOC_INFO_2;
# 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _DOC_INFO_3A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwFlags;
} DOC_INFO_3A, *PDOC_INFO_3A, *LPDOC_INFO_3A;
typedef struct _DOC_INFO_3W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwFlags;
} DOC_INFO_3W, *PDOC_INFO_3W, *LPDOC_INFO_3W;

typedef DOC_INFO_3W DOC_INFO_3;
typedef PDOC_INFO_3W PDOC_INFO_3;
typedef LPDOC_INFO_3W LPDOC_INFO_3;
# 991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _PRINTPROCESSOR_INFO_1A {
    LPSTR pName;
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A, *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W {
    LPWSTR pName;
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W, *LPPRINTPROCESSOR_INFO_1W;

typedef PRINTPROCESSOR_INFO_1W PRINTPROCESSOR_INFO_1;
typedef PPRINTPROCESSOR_INFO_1W PPRINTPROCESSOR_INFO_1;
typedef LPPRINTPROCESSOR_INFO_1W LPPRINTPROCESSOR_INFO_1;







    typedef struct _PRINTPROCESSOR_CAPS_1 {
        DWORD dwLevel;
        DWORD dwNupOptions;
        DWORD dwPageOrderFlags;
        DWORD dwNumberOfCopies;
    } PRINTPROCESSOR_CAPS_1, *PPRINTPROCESSOR_CAPS_1;






    typedef struct _PRINTPROCESSOR_CAPS_2 {
        DWORD dwLevel;
        DWORD dwNupOptions;
        DWORD dwPageOrderFlags;
        DWORD dwNumberOfCopies;


        DWORD dwDuplexHandlingCaps;
        DWORD dwNupDirectionCaps;
        DWORD dwNupBorderCaps;
        DWORD dwBookletHandlingCaps;
        DWORD dwScalingCaps;

    } PRINTPROCESSOR_CAPS_2, *PPRINTPROCESSOR_CAPS_2;
# 1060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _PORT_INFO_1A {
    LPSTR pName;
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W {
    LPWSTR pName;
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;

typedef PORT_INFO_1W PORT_INFO_1;
typedef PPORT_INFO_1W PPORT_INFO_1;
typedef LPPORT_INFO_1W LPPORT_INFO_1;






typedef struct _PORT_INFO_2A {
    LPSTR pPortName;
    LPSTR pMonitorName;
    LPSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W {
    LPWSTR pPortName;
    LPWSTR pMonitorName;
    LPWSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;

typedef PORT_INFO_2W PORT_INFO_2;
typedef PPORT_INFO_2W PPORT_INFO_2;
typedef LPPORT_INFO_2W LPPORT_INFO_2;
# 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _PORT_INFO_3A {
    DWORD dwStatus;
    LPSTR pszStatus;
    DWORD dwSeverity;
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W {
    DWORD dwStatus;
    LPWSTR pszStatus;
    DWORD dwSeverity;
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;

typedef PORT_INFO_3W PORT_INFO_3;
typedef PPORT_INFO_3W PPORT_INFO_3;
typedef LPPORT_INFO_3W LPPORT_INFO_3;
# 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _MONITOR_INFO_1A{
    LPSTR pName;
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W{
    LPWSTR pName;
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;

typedef MONITOR_INFO_1W MONITOR_INFO_1;
typedef PMONITOR_INFO_1W PMONITOR_INFO_1;
typedef LPMONITOR_INFO_1W LPMONITOR_INFO_1;






typedef struct _MONITOR_INFO_2A{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;

typedef MONITOR_INFO_2W MONITOR_INFO_2;
typedef PMONITOR_INFO_2W PMONITOR_INFO_2;
typedef LPMONITOR_INFO_2W LPMONITOR_INFO_2;






typedef struct _DATATYPES_INFO_1A{
    LPSTR pName;
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W{
    LPWSTR pName;
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;

typedef DATATYPES_INFO_1W DATATYPES_INFO_1;
typedef PDATATYPES_INFO_1W PDATATYPES_INFO_1;
typedef LPDATATYPES_INFO_1W LPDATATYPES_INFO_1;






typedef struct _PRINTER_DEFAULTSA{
    LPSTR pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSA, *PPRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW{
    LPWSTR pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSW, *PPRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;

typedef PRINTER_DEFAULTSW PRINTER_DEFAULTS;
typedef PPRINTER_DEFAULTSW PPRINTER_DEFAULTS;
typedef LPPRINTER_DEFAULTSW LPPRINTER_DEFAULTS;






typedef struct _PRINTER_ENUM_VALUESA {
    LPSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA, *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW {
    LPWSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW, *LPPRINTER_ENUM_VALUESW;

typedef PRINTER_ENUM_VALUESW PRINTER_ENUM_VALUES;
typedef PPRINTER_ENUM_VALUESW PPRINTER_ENUM_VALUES;
typedef LPPRINTER_ENUM_VALUESW LPPRINTER_ENUM_VALUES;







BOOL
__stdcall
EnumPrintersA(
              DWORD Flags,
              LPSTR Name,
              DWORD Level,

              LPBYTE pPrinterEnum,
              DWORD cbBuf,
              LPDWORD pcbNeeded,
              LPDWORD pcReturned
);

BOOL
__stdcall
EnumPrintersW(
              DWORD Flags,
              LPWSTR Name,
              DWORD Level,

              LPBYTE pPrinterEnum,
              DWORD cbBuf,
              LPDWORD pcbNeeded,
              LPDWORD pcReturned
);
# 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
HANDLE
__stdcall
GetSpoolFileHandle(
        HANDLE hPrinter
);

HANDLE
__stdcall
CommitSpoolData(
        HANDLE hPrinter,
        HANDLE hSpoolFile,
        DWORD cbCommit
);

BOOL
__stdcall
CloseSpoolFileHandle(
        HANDLE hPrinter,
        HANDLE hSpoolFile
);

BOOL
__stdcall
OpenPrinterA(
            LPSTR pPrinterName,
            LPHANDLE phPrinter,
            LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
OpenPrinterW(
            LPWSTR pPrinterName,
            LPHANDLE phPrinter,
            LPPRINTER_DEFAULTSW pDefault
);






BOOL
__stdcall
ResetPrinterA(
            HANDLE hPrinter,
            LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
ResetPrinterW(
            HANDLE hPrinter,
            LPPRINTER_DEFAULTSW pDefault
);






BOOL
__stdcall
SetJobA(
                 HANDLE hPrinter,
                 DWORD JobId,
                 DWORD Level,





                 LPBYTE pJob,
                 DWORD Command
);
BOOL
__stdcall
SetJobW(
                 HANDLE hPrinter,
                 DWORD JobId,
                 DWORD Level,





                 LPBYTE pJob,
                 DWORD Command
);






BOOL
__stdcall
GetJobA(
      HANDLE hPrinter,
      DWORD JobId,
      DWORD Level,

      LPBYTE pJob,
      DWORD cbBuf,
      LPDWORD pcbNeeded
);
BOOL
__stdcall
GetJobW(
      HANDLE hPrinter,
      DWORD JobId,
      DWORD Level,

      LPBYTE pJob,
      DWORD cbBuf,
      LPDWORD pcbNeeded
);






BOOL
__stdcall
EnumJobsA(
      HANDLE hPrinter,
      DWORD FirstJob,
      DWORD NoJobs,
      DWORD Level,

      LPBYTE pJob,
      DWORD cbBuf,
      LPDWORD pcbNeeded,
      LPDWORD pcReturned
);
BOOL
__stdcall
EnumJobsW(
      HANDLE hPrinter,
      DWORD FirstJob,
      DWORD NoJobs,
      DWORD Level,

      LPBYTE pJob,
      DWORD cbBuf,
      LPDWORD pcbNeeded,
      LPDWORD pcReturned
);






HANDLE
__stdcall
AddPrinterA(
            LPSTR pName,

            DWORD Level,


            LPBYTE pPrinter
);
HANDLE
__stdcall
AddPrinterW(
            LPWSTR pName,

            DWORD Level,


            LPBYTE pPrinter
);






BOOL
__stdcall
DeletePrinter(
        HANDLE hPrinter
);

BOOL
__stdcall
SetPrinterA(
                     HANDLE hPrinter,
                     DWORD Level,
# 1504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
                     LPBYTE pPrinter,
                     DWORD Command
    );
BOOL
__stdcall
SetPrinterW(
                     HANDLE hPrinter,
                     DWORD Level,
# 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
                     LPBYTE pPrinter,
                     DWORD Command
    );






BOOL
__stdcall
GetPrinterA(
      HANDLE hPrinter,
      DWORD Level,

      LPBYTE pPrinter,
      DWORD cbBuf,
      LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterW(
      HANDLE hPrinter,
      DWORD Level,

      LPBYTE pPrinter,
      DWORD cbBuf,
      LPDWORD pcbNeeded
);






BOOL
__stdcall
AddPrinterDriverA(
            LPSTR pName,
            DWORD Level,
            LPBYTE pDriverInfo
);
BOOL
__stdcall
AddPrinterDriverW(
            LPWSTR pName,
            DWORD Level,
            LPBYTE pDriverInfo
);






BOOL
__stdcall
AddPrinterDriverExA(
                 LPSTR pName,
                 DWORD Level,





                 PBYTE lpbDriverInfo,
                 DWORD dwFileCopyFlags
);
BOOL
__stdcall
AddPrinterDriverExW(
                 LPWSTR pName,
                 DWORD Level,





                 PBYTE lpbDriverInfo,
                 DWORD dwFileCopyFlags
);






BOOL
__stdcall
EnumPrinterDriversA(
            LPSTR pName,
            LPSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverInfo,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrinterDriversW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverInfo,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);






BOOL
__stdcall
GetPrinterDriverA(
            HANDLE hPrinter,
            LPSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverInfo,
            DWORD cbBuf,
            LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverW(
            HANDLE hPrinter,
            LPWSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverInfo,
            DWORD cbBuf,
            LPDWORD pcbNeeded
);






BOOL
__stdcall
GetPrinterDriverDirectoryA(
            LPSTR pName,
            LPSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverDirectory,
            DWORD cbBuf,
            LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverDirectoryW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverDirectory,
            DWORD cbBuf,
            LPDWORD pcbNeeded
);






BOOL
__stdcall
DeletePrinterDriverA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pDriverName
);
BOOL
__stdcall
DeletePrinterDriverW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pDriverName
);






BOOL
__stdcall
DeletePrinterDriverExA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pDriverName,
            DWORD dwDeleteFlag,
            DWORD dwVersionFlag
);
BOOL
__stdcall
DeletePrinterDriverExW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pDriverName,
            DWORD dwDeleteFlag,
            DWORD dwVersionFlag
);
# 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
AddPrintProcessorA(
           LPSTR pName,
           LPSTR pEnvironment,
           LPSTR pPathName,
           LPSTR pPrintProcessorName
);
BOOL
__stdcall
AddPrintProcessorW(
           LPWSTR pName,
           LPWSTR pEnvironment,
           LPWSTR pPathName,
           LPWSTR pPrintProcessorName
);






BOOL
__stdcall
EnumPrintProcessorsA(
           LPSTR pName,
           LPSTR pEnvironment,
           DWORD Level,

           LPBYTE pPrintProcessorInfo,
           DWORD cbBuf,
           LPDWORD pcbNeeded,
           LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrintProcessorsW(
           LPWSTR pName,
           LPWSTR pEnvironment,
           DWORD Level,

           LPBYTE pPrintProcessorInfo,
           DWORD cbBuf,
           LPDWORD pcbNeeded,
           LPDWORD pcReturned
);
# 1796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
GetPrintProcessorDirectoryA(
           LPSTR pName,
           LPSTR pEnvironment,
           DWORD Level,

           LPBYTE pPrintProcessorInfo,
           DWORD cbBuf,
           LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrintProcessorDirectoryW(
           LPWSTR pName,
           LPWSTR pEnvironment,
           DWORD Level,

           LPBYTE pPrintProcessorInfo,
           DWORD cbBuf,
           LPDWORD pcbNeeded
);







BOOL
__stdcall
EnumPrintProcessorDatatypesA(
            LPSTR pName,
            LPSTR pPrintProcessorName,
            DWORD Level,

            LPBYTE pDatatypes,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);

BOOL
__stdcall
EnumPrintProcessorDatatypesW(
            LPWSTR pName,
            LPWSTR pPrintProcessorName,
            DWORD Level,

            LPBYTE pDatatypes,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);






BOOL
__stdcall
DeletePrintProcessorA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pPrintProcessorName
);
BOOL
__stdcall
DeletePrintProcessorW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pPrintProcessorName
);






DWORD
__stdcall
StartDocPrinterA(
                 HANDLE hPrinter,
                 DWORD Level,


                 LPBYTE pDocInfo
);
DWORD
__stdcall
StartDocPrinterW(
                 HANDLE hPrinter,
                 DWORD Level,


                 LPBYTE pDocInfo
);






BOOL
__stdcall
StartPagePrinter(
        HANDLE hPrinter
);

BOOL
__stdcall
WritePrinter(
        HANDLE hPrinter,

        LPVOID pBuf,
        DWORD cbBuf,
        LPDWORD pcWritten
);


BOOL
__stdcall
FlushPrinter(
        HANDLE hPrinter,

        LPVOID pBuf,
        DWORD cbBuf,
        LPDWORD pcWritten,
        DWORD cSleep
);

BOOL
__stdcall
EndPagePrinter(
        HANDLE hPrinter
);

BOOL
__stdcall
AbortPrinter(
        HANDLE hPrinter
);

BOOL
__stdcall
ReadPrinter(
        HANDLE hPrinter,

        LPVOID pBuf,
        DWORD cbBuf,
        LPDWORD pNoBytesRead
);

BOOL
__stdcall
EndDocPrinter(
          HANDLE hPrinter
    );

BOOL
__stdcall
AddJobA(
        HANDLE hPrinter,
        DWORD Level,

        LPBYTE pData,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);
BOOL
__stdcall
AddJobW(
        HANDLE hPrinter,
        DWORD Level,

        LPBYTE pData,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);






BOOL
__stdcall
ScheduleJob(
        HANDLE hPrinter,
        DWORD JobId
);

BOOL
__stdcall
PrinterProperties(
        HWND hWnd,
        HANDLE hPrinter
);


LONG
__stdcall
DocumentPropertiesA(
                HWND hWnd,
                HANDLE hPrinter,
                LPSTR pDeviceName,
                PDEVMODEA pDevModeOutput,
                PDEVMODEA pDevModeInput,
                DWORD fMode
);

LONG
__stdcall
DocumentPropertiesW(
                HWND hWnd,
                HANDLE hPrinter,
                LPWSTR pDeviceName,
                PDEVMODEW pDevModeOutput,
                PDEVMODEW pDevModeInput,
                DWORD fMode
);






LONG
__stdcall
AdvancedDocumentPropertiesA(
                HWND hWnd,
                HANDLE hPrinter,
                LPSTR pDeviceName,
                PDEVMODEA pDevModeOutput,
                PDEVMODEA pDevModeInput
);
LONG
__stdcall
AdvancedDocumentPropertiesW(
                HWND hWnd,
                HANDLE hPrinter,
                LPWSTR pDeviceName,
                PDEVMODEW pDevModeOutput,
                PDEVMODEW pDevModeInput
);







    LONG
    ExtDeviceMode(
                    HWND hWnd,
                    HANDLE hInst,
                    LPDEVMODEA pDevModeOutput,
                    LPSTR pDeviceName,
                    LPSTR pPort,
                    LPDEVMODEA pDevModeInput,
                    LPSTR pProfile,
                    DWORD fMode
    );



DWORD
__stdcall
GetPrinterDataA(
             HANDLE hPrinter,
             LPSTR pValueName,
             LPDWORD pType,

             LPBYTE pData,
             DWORD nSize,
             LPDWORD pcbNeeded
);
DWORD
__stdcall
GetPrinterDataW(
             HANDLE hPrinter,
             LPWSTR pValueName,
             LPDWORD pType,

             LPBYTE pData,
             DWORD nSize,
             LPDWORD pcbNeeded
);






DWORD
__stdcall
GetPrinterDataExA(
             HANDLE hPrinter,
             LPCSTR pKeyName,
             LPCSTR pValueName,
             LPDWORD pType,

             LPBYTE pData,
             DWORD nSize,
             LPDWORD pcbNeeded
);
DWORD
__stdcall
GetPrinterDataExW(
             HANDLE hPrinter,
             LPCWSTR pKeyName,
             LPCWSTR pValueName,
             LPDWORD pType,

             LPBYTE pData,
             DWORD nSize,
             LPDWORD pcbNeeded
);






DWORD
__stdcall
EnumPrinterDataA(
            HANDLE hPrinter,
            DWORD dwIndex,

            LPSTR pValueName,
            DWORD cbValueName,
            LPDWORD pcbValueName,
            LPDWORD pType,

            LPBYTE pData,
            DWORD cbData,

            LPDWORD pcbData
);
DWORD
__stdcall
EnumPrinterDataW(
            HANDLE hPrinter,
            DWORD dwIndex,

            LPWSTR pValueName,
            DWORD cbValueName,
            LPDWORD pcbValueName,
            LPDWORD pType,

            LPBYTE pData,
            DWORD cbData,

            LPDWORD pcbData
);






DWORD
__stdcall
EnumPrinterDataExA(
        HANDLE hPrinter,
        LPCSTR pKeyName,

        LPBYTE pEnumValues,
        DWORD cbEnumValues,
        LPDWORD pcbEnumValues,
        LPDWORD pnEnumValues
);
DWORD
__stdcall
EnumPrinterDataExW(
        HANDLE hPrinter,
        LPCWSTR pKeyName,

        LPBYTE pEnumValues,
        DWORD cbEnumValues,
        LPDWORD pcbEnumValues,
        LPDWORD pnEnumValues
);






DWORD
__stdcall
EnumPrinterKeyA(
        HANDLE hPrinter,
        LPCSTR pKeyName,

        LPSTR pSubkey,
        DWORD cbSubkey,
        LPDWORD pcbSubkey
);
DWORD
__stdcall
EnumPrinterKeyW(
        HANDLE hPrinter,
        LPCWSTR pKeyName,

        LPWSTR pSubkey,
        DWORD cbSubkey,
        LPDWORD pcbSubkey
);







DWORD
__stdcall
SetPrinterDataA(
        HANDLE hPrinter,
        LPSTR pValueName,
        DWORD Type,

        LPBYTE pData,
        DWORD cbData
);
DWORD
__stdcall
SetPrinterDataW(
        HANDLE hPrinter,
        LPWSTR pValueName,
        DWORD Type,

        LPBYTE pData,
        DWORD cbData
);







DWORD
__stdcall
SetPrinterDataExA(
        HANDLE hPrinter,
        LPCSTR pKeyName,
        LPCSTR pValueName,
        DWORD Type,

        LPBYTE pData,
        DWORD cbData
);
DWORD
__stdcall
SetPrinterDataExW(
        HANDLE hPrinter,
        LPCWSTR pKeyName,
        LPCWSTR pValueName,
        DWORD Type,

        LPBYTE pData,
        DWORD cbData
);
# 2271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
DWORD
__stdcall
DeletePrinterDataA(
        HANDLE hPrinter,
        LPSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataW(
        HANDLE hPrinter,
        LPWSTR pValueName
);







DWORD
__stdcall
DeletePrinterDataExA(
        HANDLE hPrinter,
        LPCSTR pKeyName,
        LPCSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataExW(
        HANDLE hPrinter,
        LPCWSTR pKeyName,
        LPCWSTR pValueName
);







DWORD
__stdcall
DeletePrinterKeyA(
        HANDLE hPrinter,
        LPCSTR pKeyName
);
DWORD
__stdcall
DeletePrinterKeyW(
        HANDLE hPrinter,
        LPCWSTR pKeyName
);
# 2405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE, *LPPRINTER_NOTIFY_OPTIONS_TYPE;




typedef struct _PRINTER_NOTIFY_OPTIONS {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;





typedef struct _PRINTER_NOTIFY_INFO_DATA {
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    union {
        DWORD adwData[2];
        struct {
            DWORD cbBuf;
            LPVOID pBuf;
        } Data;
    } NotifyData;
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA, *LPPRINTER_NOTIFY_INFO_DATA;

typedef struct _PRINTER_NOTIFY_INFO {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA aData[1];
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;


    typedef struct _BINARY_CONTAINER{
        DWORD cbBuf;
        LPBYTE pData;
    } BINARY_CONTAINER, *PBINARY_CONTAINER;


    typedef struct _BIDI_DATA{
        DWORD dwBidiType;
        union {
            BOOL bData;
            LONG iData;
            LPWSTR sData;
            FLOAT fData;
            BINARY_CONTAINER biData;
            }u;
    } BIDI_DATA, *PBIDI_DATA, *LPBIDI_DATA;


    typedef struct _BIDI_REQUEST_DATA{
        DWORD dwReqNumber;
        LPWSTR pSchema;
        BIDI_DATA data;
    } BIDI_REQUEST_DATA , *PBIDI_REQUEST_DATA , *LPBIDI_REQUEST_DATA;


    typedef struct _BIDI_REQUEST_CONTAINER{
        DWORD Version;
        DWORD Flags;
        DWORD Count;
        BIDI_REQUEST_DATA aData[ 1 ];
    }BIDI_REQUEST_CONTAINER, *PBIDI_REQUEST_CONTAINER, *LPBIDI_REQUEST_CONTAINER;

    typedef struct _BIDI_RESPONSE_DATA{
        DWORD dwResult;
        DWORD dwReqNumber;
        LPWSTR pSchema;
        BIDI_DATA data;
    } BIDI_RESPONSE_DATA, *PBIDI_RESPONSE_DATA, *LPBIDI_RESPONSE_DATA;

    typedef struct _BIDI_RESPONSE_CONTAINER{
        DWORD Version;
        DWORD Flags;
        DWORD Count;
        BIDI_RESPONSE_DATA aData[ 1 ];
    } BIDI_RESPONSE_CONTAINER, *PBIDI_RESPONSE_CONTAINER, *LPBIDI_RESPONSE_CONTAINER;







    typedef enum {
        BIDI_NULL = 0,
        BIDI_INT = 1,
        BIDI_FLOAT = 2,
        BIDI_BOOL = 3,
        BIDI_STRING = 4,
        BIDI_TEXT = 5,
        BIDI_ENUM = 6,
        BIDI_BLOB = 7
    } BIDI_TYPE;
# 2545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
DWORD
__stdcall
WaitForPrinterChange(
     HANDLE hPrinter,
     DWORD Flags
);

HANDLE
__stdcall
FindFirstPrinterChangeNotification(
         HANDLE hPrinter,
         DWORD fdwFilter,
         DWORD fdwOptions,
         PVOID pPrinterNotifyOptions
    );


BOOL
__stdcall
FindNextPrinterChangeNotification(
            HANDLE hChange,
            PDWORD pdwChange,
            LPVOID pvReserved,
            LPVOID *ppPrinterNotifyInfo
    );

BOOL
__stdcall
FreePrinterNotifyInfo(
       PPRINTER_NOTIFY_INFO pPrinterNotifyInfo
    );

BOOL
__stdcall
FindClosePrinterChangeNotification(
       HANDLE hChange
    );
# 2619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
DWORD
__stdcall
PrinterMessageBoxA(
       HANDLE hPrinter,
       DWORD Error,
       HWND hWnd,
       LPSTR pText,
       LPSTR pCaption,
       DWORD dwType
);
DWORD
__stdcall
PrinterMessageBoxW(
       HANDLE hPrinter,
       DWORD Error,
       HWND hWnd,
       LPWSTR pText,
       LPWSTR pCaption,
       DWORD dwType
);
# 2655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
ClosePrinter(
     HANDLE hPrinter
);

BOOL
__stdcall
AddFormA(
                 HANDLE hPrinter,
                 DWORD Level,


                 LPBYTE pForm
);
BOOL
__stdcall
AddFormW(
                 HANDLE hPrinter,
                 DWORD Level,


                 LPBYTE pForm
);






BOOL
__stdcall
DeleteFormA(
        HANDLE hPrinter,
        LPSTR pFormName
);
BOOL
__stdcall
DeleteFormW(
        HANDLE hPrinter,
        LPWSTR pFormName
);
# 2705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
GetFormA(
        HANDLE hPrinter,
        LPSTR pFormName,
        DWORD Level,

        LPBYTE pForm,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);
BOOL
__stdcall
GetFormW(
        HANDLE hPrinter,
        LPWSTR pFormName,
        DWORD Level,

        LPBYTE pForm,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);
# 2735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
SetFormA(
                 HANDLE hPrinter,
                 LPSTR pFormName,
                 DWORD Level,


                 LPBYTE pForm
);
BOOL
__stdcall
SetFormW(
                 HANDLE hPrinter,
                 LPWSTR pFormName,
                 DWORD Level,


                 LPBYTE pForm
);






BOOL
__stdcall
EnumFormsA(
        HANDLE hPrinter,
        DWORD Level,

        LPBYTE pForm,
        DWORD cbBuf,
        LPDWORD pcbNeeded,
        LPDWORD pcReturned
);
BOOL
__stdcall
EnumFormsW(
        HANDLE hPrinter,
        DWORD Level,

        LPBYTE pForm,
        DWORD cbBuf,
        LPDWORD pcbNeeded,
        LPDWORD pcReturned
);







BOOL
__stdcall
EnumMonitorsA(
            LPSTR pName,
            DWORD Level,

            LPBYTE pMonitor,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);
BOOL
__stdcall
EnumMonitorsW(
            LPWSTR pName,
            DWORD Level,

            LPBYTE pMonitor,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);
# 2820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
AddMonitorA(
            LPSTR pName,
            DWORD Level,

            LPBYTE pMonitors
);
BOOL
__stdcall
AddMonitorW(
            LPWSTR pName,
            DWORD Level,

            LPBYTE pMonitors
);
# 2844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
DeleteMonitorA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pMonitorName
);
BOOL
__stdcall
DeleteMonitorW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pMonitorName
);
# 2866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
EnumPortsA(
            LPSTR pName,
            DWORD Level,

            LPBYTE pPort,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);
BOOL
__stdcall
EnumPortsW(
            LPWSTR pName,
            DWORD Level,

            LPBYTE pPort,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);







BOOL
__stdcall
AddPortA(
            LPSTR pName,
            HWND hWnd,
            LPSTR pMonitorName
);
BOOL
__stdcall
AddPortW(
            LPWSTR pName,
            HWND hWnd,
            LPWSTR pMonitorName
);
# 2917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
ConfigurePortA(
            LPSTR pName,
            HWND hWnd,
            LPSTR pPortName
);
BOOL
__stdcall
ConfigurePortW(
            LPWSTR pName,
            HWND hWnd,
            LPWSTR pPortName
);






BOOL
__stdcall
DeletePortA(
            LPSTR pName,
            HWND hWnd,
            LPSTR pPortName
);
BOOL
__stdcall
DeletePortW(
            LPWSTR pName,
            HWND hWnd,
            LPWSTR pPortName
);






BOOL
__stdcall
XcvDataW(
            HANDLE hXcv,
            PCWSTR pszDataName,

            PBYTE pInputData,
            DWORD cbInputData,

            PBYTE pOutputData,
            DWORD cbOutputData,
            PDWORD pcbOutputNeeded,
            PDWORD pdwStatus
);


BOOL
__stdcall
GetDefaultPrinterA(
                                    LPSTR pszBuffer,
                                    LPDWORD pcchBuffer
    );
BOOL
__stdcall
GetDefaultPrinterW(
                                    LPWSTR pszBuffer,
                                    LPDWORD pcchBuffer
    );






BOOL
__stdcall
SetDefaultPrinterA(
            LPCSTR pszPrinter
    );
BOOL
__stdcall
SetDefaultPrinterW(
            LPCWSTR pszPrinter
    );







BOOL
__stdcall
SetPortA(
            LPSTR pName,
            LPSTR pPortName,
            DWORD dwLevel,

            LPBYTE pPortInfo
);
BOOL
__stdcall
SetPortW(
            LPWSTR pName,
            LPWSTR pPortName,
            DWORD dwLevel,

            LPBYTE pPortInfo
);
# 3034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
AddPrinterConnectionA(
     LPSTR pName
);
BOOL
__stdcall
AddPrinterConnectionW(
     LPWSTR pName
);
# 3052 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
BOOL
__stdcall
DeletePrinterConnectionA(
     LPSTR pName
);
BOOL
__stdcall
DeletePrinterConnectionW(
     LPWSTR pName
);
# 3070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
HANDLE
__stdcall
ConnectToPrinterDlg(
        HWND hwnd,
       DWORD Flags
);

typedef struct _PROVIDOR_INFO_1A{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;

typedef PROVIDOR_INFO_1W PROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_1W PPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_1W LPPROVIDOR_INFO_1;






typedef struct _PROVIDOR_INFO_2A{
    LPSTR pOrder;
} PROVIDOR_INFO_2A, *PPROVIDOR_INFO_2A, *LPPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W{
    LPWSTR pOrder;
} PROVIDOR_INFO_2W, *PPROVIDOR_INFO_2W, *LPPROVIDOR_INFO_2W;

typedef PROVIDOR_INFO_2W PROVIDOR_INFO_2;
typedef PPROVIDOR_INFO_2W PPROVIDOR_INFO_2;
typedef LPPROVIDOR_INFO_2W LPPROVIDOR_INFO_2;






BOOL
__stdcall
AddPrintProvidorA(
                 LPSTR pName,
                 DWORD Level,


                 LPBYTE pProvidorInfo
);
BOOL
__stdcall
AddPrintProvidorW(
                 LPWSTR pName,
                 DWORD Level,


                 LPBYTE pProvidorInfo
);






BOOL
__stdcall
DeletePrintProvidorA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pPrintProvidorName
);
BOOL
__stdcall
DeletePrintProvidorW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pPrintProvidorName
);







    BOOL
    __stdcall
    IsValidDevmodeA(
                    PDEVMODEA pDevmode,
                    size_t DevmodeSize
        );
    BOOL
    __stdcall
    IsValidDevmodeW(
                    PDEVMODEW pDevmode,
                    size_t DevmodeSize
        );
# 3395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
    typedef enum _PRINTER_OPTION_FLAGS
    {
        PRINTER_OPTION_NO_CACHE = 1 << 0,
        PRINTER_OPTION_CACHE = 1 << 1,
        PRINTER_OPTION_CLIENT_CHANGE = 1 << 2,
        PRINTER_OPTION_NO_CLIENT_DATA = 1 << 3,
    } PRINTER_OPTION_FLAGS;


    typedef struct _PRINTER_OPTIONSA
    {
        UINT cbSize;
        DWORD dwFlags;
    } PRINTER_OPTIONSA, *PPRINTER_OPTIONSA, *LPPRINTER_OPTIONSA;
    typedef struct _PRINTER_OPTIONSW
    {
        UINT cbSize;
        DWORD dwFlags;
    } PRINTER_OPTIONSW, *PPRINTER_OPTIONSW, *LPPRINTER_OPTIONSW;

typedef PRINTER_OPTIONSW PRINTER_OPTIONS;
typedef PPRINTER_OPTIONSW PPRINTER_OPTIONS;
typedef LPPRINTER_OPTIONSW LPPRINTER_OPTIONS;






    BOOL
    __stdcall
    OpenPrinter2A(
                  LPCSTR pPrinterName,
                  LPHANDLE phPrinter,
                  PPRINTER_DEFAULTSA pDefault,
                  PPRINTER_OPTIONSA pOptions
    );
    BOOL
    __stdcall
    OpenPrinter2W(
                  LPCWSTR pPrinterName,
                  LPHANDLE phPrinter,
                  PPRINTER_DEFAULTSW pDefault,
                  PPRINTER_OPTIONSW pOptions
    );
# 3449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
    typedef struct _PRINTER_CONNECTION_INFO_1A
    {
        DWORD dwFlags;
        LPSTR pszDriverName;
    } PRINTER_CONNECTION_INFO_1A, *PPRINTER_CONNECTION_INFO_1A;
    typedef struct _PRINTER_CONNECTION_INFO_1W
    {
        DWORD dwFlags;
        LPWSTR pszDriverName;
    } PRINTER_CONNECTION_INFO_1W, *PPRINTER_CONNECTION_INFO_1W;

typedef PRINTER_CONNECTION_INFO_1W PRINTER_CONNECTION_INFO_1;
typedef PPRINTER_CONNECTION_INFO_1W PPRINTER_CONNECTION_INFO_1;





    BOOL
    __stdcall
    AddPrinterConnection2A(
                HWND hWnd,
                LPCSTR pszName,
                DWORD dwLevel,
                PVOID pConnectionInfo
        );
    BOOL
    __stdcall
    AddPrinterConnection2W(
                HWND hWnd,
                LPCWSTR pszName,
                DWORD dwLevel,
                PVOID pConnectionInfo
        );
# 3496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
    HRESULT
    __stdcall
    InstallPrinterDriverFromPackageA(
               LPCSTR pszServer,
               LPCSTR pszInfPath,
               LPCSTR pszDriverName,
               LPCSTR pszEnvironment,
               DWORD dwFlags
    );
    HRESULT
    __stdcall
    InstallPrinterDriverFromPackageW(
               LPCWSTR pszServer,
               LPCWSTR pszInfPath,
               LPCWSTR pszDriverName,
               LPCWSTR pszEnvironment,
               DWORD dwFlags
    );
# 3525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
    HRESULT
    __stdcall
    UploadPrinterDriverPackageA(
               LPCSTR pszServer,
               LPCSTR pszInfPath,
               LPCSTR pszEnvironment,
               DWORD dwFlags,
               HWND hwnd,

               LPSTR pszDestInfPath,
               PULONG pcchDestInfPath
    );
    HRESULT
    __stdcall
    UploadPrinterDriverPackageW(
               LPCWSTR pszServer,
               LPCWSTR pszInfPath,
               LPCWSTR pszEnvironment,
               DWORD dwFlags,
               HWND hwnd,

               LPWSTR pszDestInfPath,
               PULONG pcchDestInfPath
    );






    typedef struct _CORE_PRINTER_DRIVERA
    {
        GUID CoreDriverGUID;
        FILETIME ftDriverDate;
        DWORDLONG dwlDriverVersion;
        CHAR szPackageID[260];
    } CORE_PRINTER_DRIVERA, *PCORE_PRINTER_DRIVERA;
    typedef struct _CORE_PRINTER_DRIVERW
    {
        GUID CoreDriverGUID;
        FILETIME ftDriverDate;
        DWORDLONG dwlDriverVersion;
        WCHAR szPackageID[260];
    } CORE_PRINTER_DRIVERW, *PCORE_PRINTER_DRIVERW;

typedef CORE_PRINTER_DRIVERW CORE_PRINTER_DRIVER;
typedef PCORE_PRINTER_DRIVERW PCORE_PRINTER_DRIVER;





    HRESULT
    __stdcall
    GetCorePrinterDriversA(
                                      LPCSTR pszServer,
                                      LPCSTR pszEnvironment,
                                      LPCSTR pszzCoreDriverDependencies,
                                      DWORD cCorePrinterDrivers,
                                      PCORE_PRINTER_DRIVERA pCorePrinterDrivers
    );
    HRESULT
    __stdcall
    GetCorePrinterDriversW(
                                      LPCWSTR pszServer,
                                      LPCWSTR pszEnvironment,
                                      LPCWSTR pszzCoreDriverDependencies,
                                      DWORD cCorePrinterDrivers,
                                      PCORE_PRINTER_DRIVERW pCorePrinterDrivers
    );






    HRESULT
    __stdcall
    CorePrinterDriverInstalledA(
                        LPCSTR pszServer,
                        LPCSTR pszEnvironment,
                        GUID CoreDriverGUID,
                        FILETIME ftDriverDate,
                        DWORDLONG dwlDriverVersion,
                        BOOL *pbDriverInstalled
    );
    HRESULT
    __stdcall
    CorePrinterDriverInstalledW(
                        LPCWSTR pszServer,
                        LPCWSTR pszEnvironment,
                        GUID CoreDriverGUID,
                        FILETIME ftDriverDate,
                        DWORDLONG dwlDriverVersion,
                        BOOL *pbDriverInstalled
    );






    HRESULT
    __stdcall
    GetPrinterDriverPackagePathA(
                                               LPCSTR pszServer,
                                               LPCSTR pszEnvironment,
                                               LPCSTR pszLanguage,
                                               LPCSTR pszPackageID,
                                                LPSTR pszDriverPackageCab,
                                               DWORD cchDriverPackageCab,
                                               LPDWORD pcchRequiredSize
    );
    HRESULT
    __stdcall
    GetPrinterDriverPackagePathW(
                                               LPCWSTR pszServer,
                                               LPCWSTR pszEnvironment,
                                               LPCWSTR pszLanguage,
                                               LPCWSTR pszPackageID,
                                                LPWSTR pszDriverPackageCab,
                                               DWORD cchDriverPackageCab,
                                               LPDWORD pcchRequiredSize
    );






    HRESULT
    __stdcall
    DeletePrinterDriverPackageA(
               LPCSTR pszServer,
               LPCSTR pszInfPath,
               LPCSTR pszEnvironment
    );
    HRESULT
    __stdcall
    DeletePrinterDriverPackageW(
               LPCWSTR pszServer,
               LPCWSTR pszInfPath,
               LPCWSTR pszEnvironment
    );






    typedef enum
    {
        kPropertyTypeString = 1,
        kPropertyTypeInt32,
        kPropertyTypeInt64,
        kPropertyTypeByte,
        kPropertyTypeTime,
        kPropertyTypeDevMode,
        kPropertyTypeSD,
        kPropertyTypeNotificationReply,
        kPropertyTypeNotificationOptions,
        kPropertyTypeBuffer

    } EPrintPropertyType;

    typedef enum
    {
        kAddingDocumentSequence = 0,
        kDocumentSequenceAdded = 1,
        kAddingFixedDocument = 2,
        kFixedDocumentAdded = 3,
        kAddingFixedPage = 4,
        kFixedPageAdded = 5,
        kResourceAdded = 6,
        kFontAdded = 7,
        kImageAdded = 8,
        kXpsDocumentCommitted = 9

    } EPrintXPSJobProgress;

    typedef enum
    {
        kJobProduction = 1,
        kJobConsumption

    } EPrintXPSJobOperation;

    typedef struct
    {
        EPrintPropertyType ePropertyType;
        union
        {
            BYTE propertyByte;
            PWSTR propertyString;
            LONG propertyInt32;
            LONGLONG propertyInt64;
            struct {
                DWORD cbBuf;
                LPVOID pBuf;
            } propertyBlob;
        } value;

    }PrintPropertyValue;

    typedef struct
    {
        WCHAR* propertyName;
        PrintPropertyValue propertyValue;

    }PrintNamedProperty;

    typedef struct
    {
        ULONG numberOfProperties;
        PrintNamedProperty* propertiesCollection;

    }PrintPropertiesCollection;

    HRESULT
    __stdcall
    ReportJobProcessingProgress(
                HANDLE printerHandle,
                ULONG jobId,
                EPrintXPSJobOperation jobOperation,
                EPrintXPSJobProgress jobProgress
        );

    BOOL
    __stdcall
    GetPrinterDriver2A(
                    HWND hWnd,
                    HANDLE hPrinter,
                    LPSTR pEnvironment,
                    DWORD Level,

                    LPBYTE pDriverInfo,
                    DWORD cbBuf,
                    LPDWORD pcbNeeded
    );
    BOOL
    __stdcall
    GetPrinterDriver2W(
                    HWND hWnd,
                    HANDLE hPrinter,
                    LPWSTR pEnvironment,
                    DWORD Level,

                    LPBYTE pDriverInfo,
                    DWORD cbBuf,
                    LPDWORD pcbNeeded
    );
# 3786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
typedef enum
{
    PRINT_EXECUTION_CONTEXT_APPLICATION = 0,
    PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1,
    PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2,
    PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3,
    PRINT_EXECUTION_CONTEXT_WOW64 = 4
}
PRINT_EXECUTION_CONTEXT;

typedef struct
{
    PRINT_EXECUTION_CONTEXT context;
    DWORD clientAppPID;
}
PRINT_EXECUTION_DATA;

BOOL
__stdcall
GetPrintExecutionData(
          PRINT_EXECUTION_DATA *pData
    );






DWORD
__stdcall
GetJobNamedPropertyValue(
          HANDLE hPrinter,
          DWORD JobId,
          PCWSTR pszName,
          PrintPropertyValue *pValue
    );

void
__stdcall
FreePrintPropertyValue(
            PrintPropertyValue *pValue
    );

void
__stdcall
FreePrintNamedPropertyArray(
                                      DWORD cProperties,


                                      PrintNamedProperty **ppProperties
    );

DWORD
__stdcall
SetJobNamedProperty(
          HANDLE hPrinter,
          DWORD JobId,
          const PrintNamedProperty *pProperty
    );

DWORD
__stdcall
DeleteJobNamedProperty(
          HANDLE hPrinter,
          DWORD JobId,
          PCWSTR pszName
    );

DWORD
__stdcall
EnumJobNamedProperties(
          HANDLE hPrinter,
          DWORD JobId,
          DWORD *pcProperties,

          PrintNamedProperty **ppProperties
    );

HRESULT
__stdcall
GetPrintOutputInfo(
                HWND hWnd,
                PCWSTR pszPrinter,
             HANDLE *phFile,
             PWSTR *ppszOutputFile
    );
# 3883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winspool.h" 3
#pragma warning(pop)



}
# 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\windows.h" 2 3




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ole2.h" 1 3




#pragma warning(push)
#pragma warning(disable: 4001)
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ole2.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ole2.h" 2 3
# 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ole2.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 1 3
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 1 3
# 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 2 3
# 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C++"
{
    template<typename T> void** IID_PPV_ARGS_Helper(T** pp);
}
# 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,

    REGCLS_MULTI_SEPARATE = 2,

    REGCLS_SUSPENDED = 4,

    REGCLS_SURROGATE = 8,




    REGCLS_AGILE = 0x10,
# 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
} REGCLS;



typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;


typedef enum tagCOINITBASE
{



  COINITBASE_MULTITHREADED = 0x0,

} COINITBASE;



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 3
typedef struct IUnknown IUnknown;






typedef struct AsyncIUnknown AsyncIUnknown;






typedef struct IClassFactory IClassFactory;
# 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 3
extern "C"{
# 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec;







typedef IUnknown *LPUNKNOWN;







    extern "C" const IID IID_IUnknown;
    extern "C++"
    {
        struct __declspec(uuid("00000000-0000-0000-C000-000000000046")) __declspec(novtable)
        IUnknown
        {
        public:

            virtual HRESULT __stdcall QueryInterface(
                           const IID & riid,
                                                 void * *ppvObject) = 0;

            virtual ULONG __stdcall AddRef( void) = 0;

            virtual ULONG __stdcall Release( void) = 0;

            template<class Q>
            HRESULT



            __stdcall

            QueryInterface( Q** pp)
            {
                return QueryInterface(__uuidof(Q), (void **)pp);
            }


        };
    }
    HRESULT __stdcall IUnknown_QueryInterface_Proxy(
        IUnknown * This,
                   const IID & riid,
                                             void * *ppvObject);

    void __stdcall IUnknown_QueryInterface_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

    ULONG __stdcall IUnknown_AddRef_Proxy(
        IUnknown * This);

    void __stdcall IUnknown_AddRef_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

    ULONG __stdcall IUnknown_Release_Proxy(
        IUnknown * This);

    void __stdcall IUnknown_Release_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
# 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec;
# 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 3
extern "C" const IID IID_AsyncIUnknown;



    struct __declspec(uuid("000e0000-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryInterface(
                       const IID & riid) = 0;

        virtual HRESULT __stdcall Finish_QueryInterface(

                              void **ppvObject) = 0;

        virtual HRESULT __stdcall Begin_AddRef( void) = 0;

        virtual ULONG __stdcall Finish_AddRef( void) = 0;

        virtual HRESULT __stdcall Begin_Release( void) = 0;

        virtual ULONG __stdcall Finish_Release( void) = 0;

    };
# 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec;







typedef IClassFactory *LPCLASSFACTORY;


extern "C" const IID IID_IClassFactory;



    struct __declspec(uuid("00000001-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateInstance(

                      IUnknown *pUnkOuter,

                  const IID & riid,

                          void **ppvObject) = 0;

        virtual HRESULT __stdcall LockServer(
                       BOOL fLock) = 0;

    };
# 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 3
                HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy(
              IClassFactory * This,
               BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\unknwnbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec;



              HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,

              IUnknown *pUnkOuter,

          const IID & riid,

                  void **ppvObject);


                HRESULT __stdcall IClassFactory_CreateInstance_Stub(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);

              HRESULT __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
              IClassFactory * This,
               BOOL fLock);






}
# 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 2 3
# 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C++"
{
    template<typename T> void** IID_PPV_ARGS_Helper(T** pp)
    {
#pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
 static_cast<IUnknown*>(*pp);
        return reinterpret_cast<void**>(pp);
    }
}




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef struct IMarshal IMarshal;






typedef struct INoMarshal INoMarshal;






typedef struct IAgileObject IAgileObject;






typedef struct IActivationFilter IActivationFilter;






typedef struct IMarshal2 IMarshal2;






typedef struct IMalloc IMalloc;






typedef struct IStdMarshalInfo IStdMarshalInfo;






typedef struct IExternalConnection IExternalConnection;






typedef struct IMultiQI IMultiQI;






typedef struct AsyncIMultiQI AsyncIMultiQI;






typedef struct IInternalUnknown IInternalUnknown;






typedef struct IEnumUnknown IEnumUnknown;






typedef struct IEnumString IEnumString;






typedef struct ISequentialStream ISequentialStream;






typedef struct IStream IStream;






typedef struct IRpcChannelBuffer IRpcChannelBuffer;






typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;






typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;






typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;






typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;






typedef struct IRpcProxyBuffer IRpcProxyBuffer;






typedef struct IRpcStubBuffer IRpcStubBuffer;






typedef struct IPSFactoryBuffer IPSFactoryBuffer;






typedef struct IChannelHook IChannelHook;






typedef struct IClientSecurity IClientSecurity;






typedef struct IServerSecurity IServerSecurity;






typedef struct IRpcOptions IRpcOptions;






typedef struct IGlobalOptions IGlobalOptions;






typedef struct ISurrogate ISurrogate;






typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;






typedef struct ISynchronize ISynchronize;






typedef struct ISynchronizeHandle ISynchronizeHandle;






typedef struct ISynchronizeEvent ISynchronizeEvent;






typedef struct ISynchronizeContainer ISynchronizeContainer;






typedef struct ISynchronizeMutex ISynchronizeMutex;






typedef struct ICancelMethodCalls ICancelMethodCalls;






typedef struct IAsyncManager IAsyncManager;






typedef struct ICallFactory ICallFactory;






typedef struct IRpcHelper IRpcHelper;






typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;






typedef struct IWaitMultiple IWaitMultiple;






typedef struct IAddrTrackingControl IAddrTrackingControl;






typedef struct IAddrExclusionControl IAddrExclusionControl;






typedef struct IPipeByte IPipeByte;






typedef struct AsyncIPipeByte AsyncIPipeByte;






typedef struct IPipeLong IPipeLong;






typedef struct AsyncIPipeLong AsyncIPipeLong;






typedef struct IPipeDouble IPipeDouble;






typedef struct AsyncIPipeDouble AsyncIPipeDouble;






typedef struct IEnumContextProps IEnumContextProps;






typedef struct IContext IContext;






typedef struct IObjContext IObjContext;






typedef struct IComThreadingInfo IComThreadingInfo;






typedef struct IProcessInitControl IProcessInitControl;






typedef struct IFastRundown IFastRundown;






typedef struct IMarshalingStream IMarshalingStream;






typedef struct IAgileReference IAgileReference;
# 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C"{
# 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
#pragma warning(push)



#pragma warning(disable: 4820)

#pragma warning(disable: 4201)
# 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef struct _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } COSERVERINFO;




extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec;







typedef IMarshal *LPMARSHAL;


extern "C" const IID IID_IMarshal;



    struct __declspec(uuid("00000003-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetUnmarshalClass(

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   CLSID *pCid) = 0;

        virtual HRESULT __stdcall GetMarshalSizeMax(

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   DWORD *pSize) = 0;

        virtual HRESULT __stdcall MarshalInterface(

                  IStream *pStm,

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags) = 0;

        virtual HRESULT __stdcall UnmarshalInterface(

                  IStream *pStm,

                  const IID & riid,

                      void **ppv) = 0;

        virtual HRESULT __stdcall ReleaseMarshalData(

                  IStream *pStm) = 0;

        virtual HRESULT __stdcall DisconnectObject(

                  DWORD dwReserved) = 0;

    };
# 739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_INoMarshal;



    struct __declspec(uuid("ecc8691b-c1db-4dc0-855e-65f6c551af49")) __declspec(novtable)
    INoMarshal : public IUnknown
    {
    public:
    };
# 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IAgileObject;



    struct __declspec(uuid("94ea2b94-e9cc-49e0-c0ff-ee64ca8f5b90")) __declspec(novtable)
    IAgileObject : public IUnknown
    {
    public:
    };
# 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec;







typedef
enum tagACTIVATIONTYPE
    {
        ACTIVATIONTYPE_UNCATEGORIZED = 0,
        ACTIVATIONTYPE_FROM_MONIKER = 0x1,
        ACTIVATIONTYPE_FROM_DATA = 0x2,
        ACTIVATIONTYPE_FROM_STORAGE = 0x4,
        ACTIVATIONTYPE_FROM_STREAM = 0x8,
        ACTIVATIONTYPE_FROM_FILE = 0x10
    } ACTIVATIONTYPE;


extern "C" const IID IID_IActivationFilter;



    struct __declspec(uuid("00000017-0000-0000-C000-000000000046")) __declspec(novtable)
    IActivationFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall HandleActivation(
                       DWORD dwActivationType,
                       const IID & rclsid,
                        CLSID *pReplacementClsId) = 0;

    };
# 985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IMarshal2 *LPMARSHAL2;


extern "C" const IID IID_IMarshal2;



    struct __declspec(uuid("000001cf-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal2 : public IMarshal
    {
    public:
    };
# 1140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IMalloc *LPMALLOC;


extern "C" const IID IID_IMalloc;



    struct __declspec(uuid("00000002-0000-0000-C000-000000000046")) __declspec(novtable)
    IMalloc : public IUnknown
    {
    public:
        virtual void *__stdcall Alloc(

                  SIZE_T cb) = 0;

        virtual void *__stdcall Realloc(

                      void *pv,

                  SIZE_T cb) = 0;

        virtual void __stdcall Free(

                      void *pv) = 0;

        virtual SIZE_T __stdcall GetSize(

                                                        void *pv) = 0;

        virtual int __stdcall DidAlloc(

                      void *pv) = 0;

        virtual void __stdcall HeapMinimize( void) = 0;

    };
# 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IStdMarshalInfo *LPSTDMARSHALINFO;


extern "C" const IID IID_IStdMarshalInfo;



    struct __declspec(uuid("00000018-0000-0000-C000-000000000046")) __declspec(novtable)
    IStdMarshalInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassForHandler(

                  DWORD dwDestContext,

                        void *pvDestContext,

                   CLSID *pClsid) = 0;

    };
# 1376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IExternalConnection *LPEXTERNALCONNECTION;

typedef
enum tagEXTCONN
    {
        EXTCONN_STRONG = 0x1,
        EXTCONN_WEAK = 0x2,
        EXTCONN_CALLABLE = 0x4
    } EXTCONN;


extern "C" const IID IID_IExternalConnection;



    struct __declspec(uuid("00000019-0000-0000-C000-000000000046")) __declspec(novtable)
    IExternalConnection : public IUnknown
    {
    public:
        virtual DWORD __stdcall AddConnection(

                  DWORD extconn,

                  DWORD reserved) = 0;

        virtual DWORD __stdcall ReleaseConnection(

                  DWORD extconn,

                  DWORD reserved,

                  BOOL fLastReleaseCloses) = 0;

    };
# 1489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IMultiQI *LPMULTIQI;





typedef struct tagMULTI_QI
    {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } MULTI_QI;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec;
# 1514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IMultiQI;



    struct __declspec(uuid("00000020-0000-0000-C000-000000000046")) __declspec(novtable)
    IMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryMultipleInterfaces(

                  ULONG cMQIs,

                                    MULTI_QI *pMQIs) = 0;

    };
# 1600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_AsyncIMultiQI;



    struct __declspec(uuid("000e0020-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryMultipleInterfaces(

                  ULONG cMQIs,

                                    MULTI_QI *pMQIs) = 0;

        virtual HRESULT __stdcall Finish_QueryMultipleInterfaces(

                                    MULTI_QI *pMQIs) = 0;

    };
# 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec;
# 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IInternalUnknown;



    struct __declspec(uuid("00000021-0000-0000-C000-000000000046")) __declspec(novtable)
    IInternalUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryInternalInterface(

                  const IID & riid,

                      void **ppv) = 0;

    };
# 1798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec;







typedef IEnumUnknown *LPENUMUNKNOWN;


extern "C" const IID IID_IEnumUnknown;



    struct __declspec(uuid("00000100-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(

                  ULONG celt,

                                                 IUnknown **rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumUnknown **ppenum) = 0;

    };
# 1917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
                HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IEnumString *LPENUMSTRING;


extern "C" const IID IID_IEnumString;



    struct __declspec(uuid("00000101-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumString : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 LPOLESTR *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumString **ppenum) = 0;

    };
# 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
                HRESULT __stdcall IEnumString_RemoteNext_Proxy(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_ISequentialStream;



    struct __declspec(uuid("0c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ISequentialStream : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read(

                                                 void *pv,

                  ULONG cb,

                       ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Write(

                                  const void *pv,

                  ULONG cb,

                       ULONG *pcbWritten) = 0;

    };
# 2173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
                HRESULT __stdcall ISequentialStream_RemoteRead_Proxy(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IStream *LPSTREAM;

typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    } STATSTG;

typedef
enum tagSTGTY
    {
        STGTY_STORAGE = 1,
        STGTY_STREAM = 2,
        STGTY_LOCKBYTES = 3,
        STGTY_PROPERTY = 4
    } STGTY;

typedef
enum tagSTREAM_SEEK
    {
        STREAM_SEEK_SET = 0,
        STREAM_SEEK_CUR = 1,
        STREAM_SEEK_END = 2
    } STREAM_SEEK;

typedef
enum tagLOCKTYPE
    {
        LOCK_WRITE = 1,
        LOCK_EXCLUSIVE = 2,
        LOCK_ONLYONCE = 4
    } LOCKTYPE;


extern "C" const IID IID_IStream;



    struct __declspec(uuid("0000000c-0000-0000-C000-000000000046")) __declspec(novtable)
    IStream : public ISequentialStream
    {
    public:
        virtual HRESULT __stdcall Seek(
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,

                       ULARGE_INTEGER *plibNewPosition) = 0;

        virtual HRESULT __stdcall SetSize(
                       ULARGE_INTEGER libNewSize) = 0;

        virtual HRESULT __stdcall CopyTo(

                  IStream *pstm,
                       ULARGE_INTEGER cb,

                       ULARGE_INTEGER *pcbRead,

                       ULARGE_INTEGER *pcbWritten) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall LockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall UnlockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

        virtual HRESULT __stdcall Clone(
                                             IStream **ppstm) = 0;

    };
# 2454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
                HRESULT __stdcall IStream_RemoteSeek_Proxy(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStream_RemoteCopyTo_Proxy(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef ULONG RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;


extern "C" const IID IID_IRpcChannelBuffer;



    struct __declspec(uuid("D5F56B60-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcChannelBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBuffer(

                     RPCOLEMESSAGE *pMessage,

                  const IID & riid) = 0;

        virtual HRESULT __stdcall SendReceive(

                     RPCOLEMESSAGE *pMessage,

                       ULONG *pStatus) = 0;

        virtual HRESULT __stdcall FreeBuffer(

                     RPCOLEMESSAGE *pMessage) = 0;

        virtual HRESULT __stdcall GetDestCtx(

                   DWORD *pdwDestContext,

                                       void **ppvDestContext) = 0;

        virtual HRESULT __stdcall IsConnected( void) = 0;

    };
# 2649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec;
# 2659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IRpcChannelBuffer2;



    struct __declspec(uuid("594f31d0-7f19-11d0-b194-00a0c90dc8bf")) __declspec(novtable)
    IRpcChannelBuffer2 : public IRpcChannelBuffer
    {
    public:
        virtual HRESULT __stdcall GetProtocolVersion(

                   DWORD *pdwVersion) = 0;

    };
# 2786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IAsyncRpcChannelBuffer;



    struct __declspec(uuid("a5029fb6-3c34-11d1-9c99-00c04fb998aa")) __declspec(novtable)
    IAsyncRpcChannelBuffer : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send(

                     RPCOLEMESSAGE *pMsg,

                  ISynchronize *pSync,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Receive(

                     RPCOLEMESSAGE *pMsg,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall GetDestCtxEx(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pdwDestContext,

                                           void **ppvDestContext) = 0;

    };
# 2966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IRpcChannelBuffer3;



    struct __declspec(uuid("25B15600-0115-11d0-BF0D-00AA00B8DFD2")) __declspec(novtable)
    IRpcChannelBuffer3 : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send(

                     RPCOLEMESSAGE *pMsg,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Receive(

                     RPCOLEMESSAGE *pMsg,

                  ULONG ulSize,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Cancel(

                     RPCOLEMESSAGE *pMsg) = 0;

        virtual HRESULT __stdcall GetCallContext(

                  RPCOLEMESSAGE *pMsg,

                  const IID & riid,

                      void **pInterface) = 0;

        virtual HRESULT __stdcall GetDestCtxEx(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pdwDestContext,

                                           void **ppvDestContext) = 0;

        virtual HRESULT __stdcall GetState(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pState) = 0;

        virtual HRESULT __stdcall RegisterAsync(

                     RPCOLEMESSAGE *pMsg,

                  IAsyncManager *pAsyncMgr) = 0;

    };
# 3210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IRpcSyntaxNegotiate;



    struct __declspec(uuid("58a08519-24c8-4935-b482-3fd823333a4f")) __declspec(novtable)
    IRpcSyntaxNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall NegotiateSyntax(

                     RPCOLEMESSAGE *pMsg) = 0;

    };
# 3292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IRpcProxyBuffer;



    struct __declspec(uuid("D5F56A34-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcProxyBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect(

                  IRpcChannelBuffer *pRpcChannelBuffer) = 0;

        virtual void __stdcall Disconnect( void) = 0;

    };
# 3384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec;
# 3394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IRpcStubBuffer;



    struct __declspec(uuid("D5F56AFC-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcStubBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect(

                  IUnknown *pUnkServer) = 0;

        virtual void __stdcall Disconnect( void) = 0;

        virtual HRESULT __stdcall Invoke(

                     RPCOLEMESSAGE *_prpcmsg,

                  IRpcChannelBuffer *_pRpcChannelBuffer) = 0;

        virtual IRpcStubBuffer *__stdcall IsIIDSupported(

                  const IID & riid) = 0;

        virtual ULONG __stdcall CountRefs( void) = 0;

        virtual HRESULT __stdcall DebugServerQueryInterface(

                      void **ppv) = 0;

        virtual void __stdcall DebugServerRelease(

                  void *pv) = 0;

    };
# 3544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IPSFactoryBuffer;



    struct __declspec(uuid("D5F569D0-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IPSFactoryBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateProxy(

                  IUnknown *pUnkOuter,

                  const IID & riid,

                      IRpcProxyBuffer **ppProxy,

                      void **ppv) = 0;

        virtual HRESULT __stdcall CreateStub(

                  const IID & riid,

                      IUnknown *pUnkServer,

                      IRpcStubBuffer **ppStub) = 0;

    };
# 3660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef struct SChannelHookCallInfo
    {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
    } SChannelHookCallInfo;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec;
# 3682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IChannelHook;



    struct __declspec(uuid("1008c4a0-7613-11cf-9af1-0020af6e72f4")) __declspec(novtable)
    IChannelHook : public IUnknown
    {
    public:
        virtual void __stdcall ClientGetSize(

                  const GUID & uExtent,

                  const IID & riid,

                   ULONG *pDataSize) = 0;

        virtual void __stdcall ClientFillBuffer(

                  const GUID & uExtent,

                  const IID & riid,

                     ULONG *pDataSize,

                  void *pDataBuffer) = 0;

        virtual void __stdcall ClientNotify(

                  const GUID & uExtent,

                  const IID & riid,

                  ULONG cbDataSize,

                  void *pDataBuffer,

                  DWORD lDataRep,

                  HRESULT hrFault) = 0;

        virtual void __stdcall ServerNotify(

                  const GUID & uExtent,

                  const IID & riid,

                  ULONG cbDataSize,

                  void *pDataBuffer,

                  DWORD lDataRep) = 0;

        virtual void __stdcall ServerGetSize(

                  const GUID & uExtent,

                  const IID & riid,

                  HRESULT hrFault,

                   ULONG *pDataSize) = 0;

        virtual void __stdcall ServerFillBuffer(

                  const GUID & uExtent,

                  const IID & riid,

                     ULONG *pDataSize,

                  void *pDataBuffer,

                  HRESULT hrFault) = 0;

    };
# 3913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec;







typedef struct tagSOLE_AUTHENTICATION_SERVICE
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
    } SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef
enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {
        EOAC_NONE = 0,
        EOAC_MUTUAL_AUTH = 0x1,
        EOAC_STATIC_CLOAKING = 0x20,
        EOAC_DYNAMIC_CLOAKING = 0x40,
        EOAC_ANY_AUTHORITY = 0x80,
        EOAC_MAKE_FULLSIC = 0x100,
        EOAC_DEFAULT = 0x800,
        EOAC_SECURE_REFS = 0x2,
        EOAC_ACCESS_CONTROL = 0x4,
        EOAC_APPID = 0x8,
        EOAC_DYNAMIC = 0x10,
        EOAC_REQUIRE_FULLSIC = 0x200,
        EOAC_AUTO_IMPERSONATE = 0x400,
        EOAC_DISABLE_AAA = 0x1000,
        EOAC_NO_CUSTOM_MARSHAL = 0x2000,
        EOAC_RESERVED1 = 0x4000
    } EOLE_AUTHENTICATION_CAPABILITIES;





typedef struct tagSOLE_AUTHENTICATION_INFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
    } SOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST
    {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
    } SOLE_AUTHENTICATION_LIST;

typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;


extern "C" const IID IID_IClientSecurity;



    struct __declspec(uuid("0000013D-0000-0000-C000-000000000046")) __declspec(novtable)
    IClientSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket(

                  IUnknown *pProxy,

                   DWORD *pAuthnSvc,

                       DWORD *pAuthzSvc,

                                  OLECHAR **pServerPrincName,

                       DWORD *pAuthnLevel,

                       DWORD *pImpLevel,

                                       void **pAuthInfo,

                       DWORD *pCapabilites) = 0;

        virtual HRESULT __stdcall SetBlanket(

                  IUnknown *pProxy,

                  DWORD dwAuthnSvc,

                  DWORD dwAuthzSvc,

                           OLECHAR *pServerPrincName,

                  DWORD dwAuthnLevel,

                  DWORD dwImpLevel,

                      void *pAuthInfo,

                  DWORD dwCapabilities) = 0;

        virtual HRESULT __stdcall CopyProxy(

                  IUnknown *pProxy,

                      IUnknown **ppCopy) = 0;

    };
# 4143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec;
# 4153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IServerSecurity;



    struct __declspec(uuid("0000013E-0000-0000-C000-000000000046")) __declspec(novtable)
    IServerSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket(

                       DWORD *pAuthnSvc,

                       DWORD *pAuthzSvc,

                                  OLECHAR **pServerPrincName,

                       DWORD *pAuthnLevel,

                       DWORD *pImpLevel,

                                       void **pPrivs,

                         DWORD *pCapabilities) = 0;

        virtual HRESULT __stdcall ImpersonateClient( void) = 0;

        virtual HRESULT __stdcall RevertToSelf( void) = 0;

        virtual BOOL __stdcall IsImpersonating( void) = 0;

    };
# 4279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef
enum tagRPCOPT_PROPERTIES
    {
        COMBND_RPCTIMEOUT = 0x1,
        COMBND_SERVER_LOCALITY = 0x2,
        COMBND_RESERVED1 = 0x4,
        COMBND_RESERVED2 = 0x5,
        COMBND_RESERVED3 = 0x8,
        COMBND_RESERVED4 = 0x10
    } RPCOPT_PROPERTIES;

typedef
enum tagRPCOPT_SERVER_LOCALITY_VALUES
    {
        SERVER_LOCALITY_PROCESS_LOCAL = 0,
        SERVER_LOCALITY_MACHINE_LOCAL = 1,
        SERVER_LOCALITY_REMOTE = 2
    } RPCOPT_SERVER_LOCALITY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec;
# 4310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IRpcOptions;



    struct __declspec(uuid("00000144-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set(

                  IUnknown *pPrx,

                  RPCOPT_PROPERTIES dwProperty,

                  ULONG_PTR dwValue) = 0;

        virtual HRESULT __stdcall Query(

                  IUnknown *pPrx,

                  RPCOPT_PROPERTIES dwProperty,

                   ULONG_PTR *pdwValue) = 0;

    };
# 4420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef
enum tagGLOBALOPT_PROPERTIES
    {
        COMGLB_EXCEPTION_HANDLING = 1,
        COMGLB_APPID = 2,
        COMGLB_RPC_THREADPOOL_SETTING = 3,
        COMGLB_RO_SETTINGS = 4,
        COMGLB_UNMARSHALING_POLICY = 5,
        COMGLB_PROPERTIES_RESERVED1 = 6
    } GLOBALOPT_PROPERTIES;

typedef
enum tagGLOBALOPT_EH_VALUES
    {
        COMGLB_EXCEPTION_HANDLE = 0,
        COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
        COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
        COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
    } GLOBALOPT_EH_VALUES;

typedef
enum tagGLOBALOPT_RPCTP_VALUES
    {
        COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
        COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
    } GLOBALOPT_RPCTP_VALUES;

typedef
enum tagGLOBALOPT_RO_FLAGS
    {
        COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
        COMGLB_FAST_RUNDOWN = 0x8,
        COMGLB_RESERVED1 = 0x10,
        COMGLB_RESERVED2 = 0x20,
        COMGLB_RESERVED3 = 0x40,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
        COMGLB_RESERVED4 = 0x100,
        COMGLB_RESERVED5 = 0x200,
        COMGLB_RESERVED6 = 0x400
    } GLOBALOPT_RO_FLAGS;

typedef
enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
    {
        COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
        COMGLB_UNMARSHALING_POLICY_STRONG = 1,
        COMGLB_UNMARSHALING_POLICY_HYBRID = 2
    } GLOBALOPT_UNMARSHALING_POLICY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec;
# 4483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IGlobalOptions;



    struct __declspec(uuid("0000015B-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set(

                  GLOBALOPT_PROPERTIES dwProperty,

                  ULONG_PTR dwValue) = 0;

        virtual HRESULT __stdcall Query(

                  GLOBALOPT_PROPERTIES dwProperty,

                   ULONG_PTR *pdwValue) = 0;

    };
# 4588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec;







typedef ISurrogate *LPSURROGATE;


extern "C" const IID IID_ISurrogate;



    struct __declspec(uuid("00000022-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LoadDllServer(
                                 const IID & Clsid) = 0;

        virtual HRESULT __stdcall FreeSurrogate( void) = 0;

    };
# 4687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;


extern "C" const IID IID_IGlobalInterfaceTable;



    struct __declspec(uuid("00000146-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalInterfaceTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterInterfaceInGlobal(

                  IUnknown *pUnk,

                  const IID & riid,

                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall RevokeInterfaceFromGlobal(

                  DWORD dwCookie) = 0;

        virtual HRESULT __stdcall GetInterfaceFromGlobal(

                  DWORD dwCookie,

                  const IID & riid,

                      void **ppv) = 0;

    };
# 4814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec;
# 4824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_ISynchronize;



    struct __declspec(uuid("00000030-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronize : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Wait(
                       DWORD dwFlags,
                       DWORD dwMilliseconds) = 0;

        virtual HRESULT __stdcall Signal( void) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

    };
# 4922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_ISynchronizeHandle;



    struct __declspec(uuid("00000031-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetHandle(

                   HANDLE *ph) = 0;

    };
# 5004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_ISynchronizeEvent;



    struct __declspec(uuid("00000032-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeEvent : public ISynchronizeHandle
    {
    public:
        virtual HRESULT __stdcall SetEventHandle(

                  HANDLE *ph) = 0;

    };
# 5095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_ISynchronizeContainer;



    struct __declspec(uuid("00000033-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddSynchronize(

                  ISynchronize *pSync) = 0;

        virtual HRESULT __stdcall WaitMultiple(

                  DWORD dwFlags,

                  DWORD dwTimeOut,

                      ISynchronize **ppSync) = 0;

    };
# 5197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_ISynchronizeMutex;



    struct __declspec(uuid("00000025-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeMutex : public ISynchronize
    {
    public:
        virtual HRESULT __stdcall ReleaseMutex( void) = 0;

    };
# 5295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;


extern "C" const IID IID_ICancelMethodCalls;



    struct __declspec(uuid("00000029-0000-0000-C000-000000000046")) __declspec(novtable)
    ICancelMethodCalls : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cancel(

                  ULONG ulSeconds) = 0;

        virtual HRESULT __stdcall TestCancel( void) = 0;

    };
# 5387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef
enum tagDCOM_CALL_STATE
    {
        DCOM_NONE = 0,
        DCOM_CALL_COMPLETE = 0x1,
        DCOM_CALL_CANCELED = 0x2
    } DCOM_CALL_STATE;


extern "C" const IID IID_IAsyncManager;



    struct __declspec(uuid("0000002A-0000-0000-C000-000000000046")) __declspec(novtable)
    IAsyncManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CompleteCall(

                  HRESULT Result) = 0;

        virtual HRESULT __stdcall GetCallContext(

                  const IID & riid,

                      void **pInterface) = 0;

        virtual HRESULT __stdcall GetState(

                   ULONG *pulStateFlags) = 0;

    };
# 5506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_ICallFactory;



    struct __declspec(uuid("1c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ICallFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateCall(

                  const IID & riid,

                      IUnknown *pCtrlUnk,

                  const IID & riid2,

                      IUnknown **ppv) = 0;

    };
# 5600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IRpcHelper;



    struct __declspec(uuid("00000149-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcHelper : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDCOMProtocolVersion(

                   DWORD *pComVersion) = 0;

        virtual HRESULT __stdcall GetIIDFromOBJREF(

                  void *pObjRef,

                      IID **piid) = 0;

    };
# 5698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IReleaseMarshalBuffers;



    struct __declspec(uuid("eb0cb9e8-7996-11d2-872e-0000f8080859")) __declspec(novtable)
    IReleaseMarshalBuffers : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReleaseMarshalBuffer(

                     RPCOLEMESSAGE *pMsg,

                  DWORD dwFlags,

                      IUnknown *pChnl) = 0;

    };
# 5788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IWaitMultiple;



    struct __declspec(uuid("0000002B-0000-0000-C000-000000000046")) __declspec(novtable)
    IWaitMultiple : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitMultiple(

                  DWORD timeout,

                      ISynchronize **pSync) = 0;

        virtual HRESULT __stdcall AddSynchronize(

                  ISynchronize *pSync) = 0;

    };
# 5885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;


extern "C" const IID IID_IAddrTrackingControl;



    struct __declspec(uuid("00000147-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrTrackingControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnableCOMDynamicAddrTracking( void) = 0;

        virtual HRESULT __stdcall DisableCOMDynamicAddrTracking( void) = 0;

    };
# 5973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;


extern "C" const IID IID_IAddrExclusionControl;



    struct __declspec(uuid("00000148-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrExclusionControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentAddrExclusionList(

                  const IID & riid,

                      void **ppEnumerator) = 0;

        virtual HRESULT __stdcall UpdateAddrExclusionList(

                  IUnknown *pEnumerator) = 0;

    };
# 6074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IPipeByte;



    struct __declspec(uuid("DB2F3ACA-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          BYTE *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             BYTE *buf,
                       ULONG cSent) = 0;

    };
# 6170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_AsyncIPipeByte;



    struct __declspec(uuid("DB2F3ACB-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          BYTE *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             BYTE *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
# 6282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IPipeLong;



    struct __declspec(uuid("DB2F3ACC-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          LONG *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             LONG *buf,
                       ULONG cSent) = 0;

    };
# 6378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_AsyncIPipeLong;



    struct __declspec(uuid("DB2F3ACD-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          LONG *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             LONG *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
# 6490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IPipeDouble;



    struct __declspec(uuid("DB2F3ACE-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          DOUBLE *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             DOUBLE *buf,
                       ULONG cSent) = 0;

    };
# 6586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_AsyncIPipeDouble;



    struct __declspec(uuid("DB2F3ACF-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          DOUBLE *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             DOUBLE *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
# 7164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef
enum _APTTYPEQUALIFIER
    {
        APTTYPEQUALIFIER_NONE = 0,
        APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
        APTTYPEQUALIFIER_NA_ON_MTA = 2,
        APTTYPEQUALIFIER_NA_ON_STA = 3,
        APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
        APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
        APTTYPEQUALIFIER_APPLICATION_STA = 6
    } APTTYPEQUALIFIER;

typedef
enum _APTTYPE
    {
        APTTYPE_CURRENT = -1,
        APTTYPE_STA = 0,
        APTTYPE_MTA = 1,
        APTTYPE_NA = 2,
        APTTYPE_MAINSTA = 3
    } APTTYPE;





typedef
enum _THDTYPE
    {
        THDTYPE_BLOCKMESSAGES = 0,
        THDTYPE_PROCESSMESSAGES = 1
    } THDTYPE;

typedef DWORD APARTMENTID;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec;
# 7211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IComThreadingInfo;



    struct __declspec(uuid("000001ce-0000-0000-C000-000000000046")) __declspec(novtable)
    IComThreadingInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentApartmentType(

                   APTTYPE *pAptType) = 0;

        virtual HRESULT __stdcall GetCurrentThreadType(

                   THDTYPE *pThreadType) = 0;

        virtual HRESULT __stdcall GetCurrentLogicalThreadId(

                   GUID *pguidLogicalThreadId) = 0;

        virtual HRESULT __stdcall SetCurrentLogicalThreadId(

                  const GUID & rguid) = 0;

    };
# 7329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IProcessInitControl;



    struct __declspec(uuid("72380d55-8d2b-43a3-8513-2b6ef31434e9")) __declspec(novtable)
    IProcessInitControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ResetInitializerTimeout(
                       DWORD dwSecondsRemaining) = 0;

    };
# 7409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IFastRundown;



    struct __declspec(uuid("00000040-0000-0000-C000-000000000046")) __declspec(novtable)
    IFastRundown : public IUnknown
    {
    public:
    };
# 7475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
typedef
enum CO_MARSHALING_CONTEXT_ATTRIBUTES
    {
        CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = 0x80000000,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = 0x80000001,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = 0x80000002,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = 0x80000003,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = 0x80000004,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = 0x80000005,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = 0x80000006,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = 0x80000007,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = 0x80000008
    } CO_MARSHALING_CONTEXT_ATTRIBUTES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec;
# 7502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const IID IID_IMarshalingStream;



    struct __declspec(uuid("D8F2F5E6-6102-4863-9F26-389A4676EFDE")) __declspec(novtable)
    IMarshalingStream : public IStream
    {
    public:
        virtual HRESULT __stdcall GetMarshalingContextAttribute(
                       CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
                        ULONG_PTR *pAttributeValue) = 0;

    };
# 7688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec;
# 7698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
    extern "C" const IID IID_IAgileReference;
    extern "C++"
    {
        struct __declspec(uuid("C03F6A43-65A4-9818-987E-E0B810D2A6F2")) __declspec(novtable)
        IAgileReference : public IUnknown
        {
        public:
            virtual HRESULT __stdcall Resolve(
                           const IID & riid,
                                            void **ppvObjectReference) = 0;

            template<class Q>
            HRESULT



            __stdcall

            Resolve( Q** pp)
            {
                return Resolve(__uuidof(Q), (void **)pp);
            }

        };
    }
# 7808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidlbase.h" 3
extern "C" const GUID IID_ICallbackWithNoReentrancyToApplicationSTA;






#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec;



              HRESULT __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,

          ULONG celt,

                                         IUnknown **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumUnknown_Next_Stub(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,

                                         LPOLESTR *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumString_Next_Stub(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,

                                         void *pv,

          ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ISequentialStream_Read_Stub(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,

                          const void *pv,

          ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ISequentialStream_Write_Stub(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,

               ULARGE_INTEGER *plibNewPosition);


                HRESULT __stdcall IStream_Seek_Stub(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);

              HRESULT __stdcall IStream_CopyTo_Proxy(
    IStream * This,

          IStream *pstm,
               ULARGE_INTEGER cb,

               ULARGE_INTEGER *pcbRead,

               ULARGE_INTEGER *pcbWritten);


                HRESULT __stdcall IStream_CopyTo_Stub(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);






}
# 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared/guiddef.h" 1 3
# 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 2 3




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\cguid.h" 1 3
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\cguid.h" 3
#pragma warning(push)

#pragma warning(disable: 4001)



extern "C" {





extern const IID GUID_NULL;
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\cguid.h" 3
extern const IID CATID_MARSHALER;


extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;







extern const CLSID CLSID_GlobalOptions;
extern const CLSID CLSID_StdGlobalInterfaceTable;







extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;


extern const CLSID CLSID_AddrControl;



extern const CLSID CLSID_ContextSwitcher;
# 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\cguid.h" 3
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;







extern const CLSID CLSID_InProcFreeMarshaler;







extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;





}




#pragma warning(pop)
# 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 2 3
# 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetMalloc(
         DWORD dwMemContext,
             LPMALLOC * ppMalloc
    );
# 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CreateStreamOnHGlobal(
    HGLOBAL hGlobal,
         BOOL fDeleteOnRelease,
             LPSTREAM * ppstm
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
GetHGlobalFromStream(
         LPSTREAM pstm,
          HGLOBAL * phglobal
    );




extern "C" __declspec(dllimport) void __stdcall
CoUninitialize(
    void
    );
# 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C" __declspec(dllimport) DWORD __stdcall
CoGetCurrentProcess(
    void
    );
# 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInitializeEx(
             LPVOID pvReserved,
         DWORD dwCoInit
    );
# 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCallerTID(
          LPDWORD lpdwTID
    );
# 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCurrentLogicalThreadId(
          GUID * pguid
    );
# 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetContextToken(
          ULONG_PTR * pToken
    );
# 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetDefaultContext(
         APTTYPE aptType,
         const IID & riid,
             void ** ppv
    );
# 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetApartmentType(
          APTTYPE * pAptType,
          APTTYPEQUALIFIER * pAptQualifier
    );
# 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
typedef struct tagServerInformation
{
    DWORD dwServerPid;
    DWORD dwServerTid;
    UINT64 ui64ServerAddress;
} ServerInformation, *PServerInformation;
# 606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDecodeProxy(
         DWORD dwClientPid,
         UINT64 ui64ProxyAddress,
          PServerInformation pServerInformation
    );
# 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
struct CO_MTA_USAGE_COOKIE__{int unused;}; typedef struct CO_MTA_USAGE_COOKIE__ *CO_MTA_USAGE_COOKIE;
# 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoIncrementMTAUsage(
          CO_MTA_USAGE_COOKIE * pCookie
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDecrementMTAUsage(
         CO_MTA_USAGE_COOKIE Cookie
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
CoAllowUnmarshalerCLSID(
         const IID & clsid
    );
# 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetObjectContext(
         const IID & riid,
             LPVOID * ppv
    );
# 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetClassObject(
         const IID & rclsid,
         DWORD dwClsContext,
             LPVOID pvReserved,
         const IID & riid,
             LPVOID * ppv
    );
# 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterClassObject(
         const IID & rclsid,
         LPUNKNOWN pUnk,
         DWORD dwClsContext,
         DWORD flags,
          LPDWORD lpdwRegister
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
CoRevokeClassObject(
         DWORD dwRegister
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoResumeClassObjects(
    void
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSuspendClassObjects(
    void
    );
# 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C" __declspec(dllimport) ULONG __stdcall
CoAddRefServerProcess(
    void
    );


extern "C" __declspec(dllimport) ULONG __stdcall
CoReleaseServerProcess(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetPSClsid(
         const IID & riid,
          CLSID * pClsid
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterPSClsid(
         const IID & riid,
         const IID & rclsid
    );



               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterSurrogate(
         LPSURROGATE pSurrogate
    );
# 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetMarshalSizeMax(
          ULONG * pulSize,
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalInterface(
         LPSTREAM pStm,
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoUnmarshalInterface(
         LPSTREAM pStm,
         const IID & riid,
                 LPVOID * ppv
    );
# 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalHresult(
         LPSTREAM pstm,
         HRESULT hresult
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
CoUnmarshalHresult(
         LPSTREAM pstm,
          HRESULT * phresult
    );
# 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoReleaseMarshalData(
         LPSTREAM pStm
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisconnectObject(
         LPUNKNOWN pUnk,
         DWORD dwReserved
    );
# 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoLockObjectExternal(
         LPUNKNOWN pUnk,
         BOOL fLock,
         BOOL fLastUnlockReleases
    );
# 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetStandardMarshal(
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags,
             LPMARSHAL * ppMarshal
    );
# 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetStdMarshalEx(
         LPUNKNOWN pUnkOuter,
         DWORD smexflags,
             LPUNKNOWN * ppUnkInner
    );
# 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER = 0x01,
    SMEXF_HANDLER = 0x02
} STDMSHLFLAGS;
# 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C" __declspec(dllimport) BOOL __stdcall
CoIsHandlerConnected(
         LPUNKNOWN pUnk
    );
# 914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalInterThreadInterfaceInStream(
         const IID & riid,
         LPUNKNOWN pUnk,
             LPSTREAM * ppStm
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetInterfaceAndReleaseStream(
         LPSTREAM pStm,
         const IID & iid,
                 LPVOID * ppv
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateFreeThreadedMarshaler(
             LPUNKNOWN punkOuter,
             LPUNKNOWN * ppunkMarshal
    );


extern "C" __declspec(dllimport) void __stdcall
CoFreeUnusedLibraries(
    void
    );



extern "C" __declspec(dllimport) void __stdcall
CoFreeUnusedLibrariesEx(
         DWORD dwUnloadDelay,
         DWORD dwReserved
    );
# 962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisconnectContext(
    DWORD dwTimeout
    );
# 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInitializeSecurity(
             PSECURITY_DESCRIPTOR pSecDesc,
         LONG cAuthSvc,
                             SOLE_AUTHENTICATION_SERVICE * asAuthSvc,
             void * pReserved1,
         DWORD dwAuthnLevel,
         DWORD dwImpLevel,
             void * pAuthList,
         DWORD dwCapabilities,
             void * pReserved3
    );
# 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCallContext(
         const IID & riid,
             void ** ppInterface
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryProxyBlanket(
         IUnknown * pProxy,
              DWORD * pwAuthnSvc,
              DWORD * pAuthzSvc,
                 LPOLESTR * pServerPrincName,
              DWORD * pAuthnLevel,
              DWORD * pImpLevel,
              RPC_AUTH_IDENTITY_HANDLE * pAuthInfo,
              DWORD * pCapabilites
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSetProxyBlanket(
         IUnknown * pProxy,
         DWORD dwAuthnSvc,
         DWORD dwAuthzSvc,
             OLECHAR * pServerPrincName,
         DWORD dwAuthnLevel,
         DWORD dwImpLevel,
             RPC_AUTH_IDENTITY_HANDLE pAuthInfo,
         DWORD dwCapabilities
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCopyProxy(
         IUnknown * pProxy,
             IUnknown ** ppCopy
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryClientBlanket(
              DWORD * pAuthnSvc,
              DWORD * pAuthzSvc,
                 LPOLESTR * pServerPrincName,
              DWORD * pAuthnLevel,
              DWORD * pImpLevel,
                                                                        RPC_AUTHZ_HANDLE * pPrivs,
                DWORD * pCapabilities
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoImpersonateClient(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRevertToSelf(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryAuthenticationServices(
          DWORD * pcAuthSvc,
                                       SOLE_AUTHENTICATION_SERVICE ** asAuthSvc
    );
# 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSwitchCallContext(
             IUnknown * pNewObject,
             IUnknown ** ppOldObject
    );
# 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstance(
         const IID & rclsid,
             LPUNKNOWN pUnkOuter,
         DWORD dwClsContext,
         const IID & riid,
                                                                           LPVOID * ppv
    );






               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstanceEx(
         const IID & Clsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
             COSERVERINFO * pServerInfo,
         DWORD dwCount,
                             MULTI_QI * pResults
    );







extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterActivationFilter(
         IActivationFilter * pActivationFilter
    );
# 1154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstanceFromApp(
         const IID & Clsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
             PVOID reserved,
         DWORD dwCount,
                             MULTI_QI * pResults
    );
# 1228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCancelObject(
         DWORD dwThreadId,
         const IID & iid,
             void ** ppUnk
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSetCancelObject(
             IUnknown * pUnk
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCancelCall(
         DWORD dwThreadId,
         ULONG ulTimeout
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoTestCancel(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoEnableCallCancellation(
             LPVOID pReserved
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisableCallCancellation(
             LPVOID pReserved
    );
# 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
StringFromCLSID(
         const IID & rclsid,
             LPOLESTR * lplpsz
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromString(
         LPCOLESTR lpsz,
          LPCLSID pclsid
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
StringFromIID(
         const IID & rclsid,
             LPOLESTR * lplpsz
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
IIDFromString(
         LPCOLESTR lpsz,
          LPIID lpiid
    );
# 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
ProgIDFromCLSID(
         const IID & clsid,
             LPOLESTR * lplpszProgID
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromProgID(
         LPCOLESTR lpszProgID,
          LPCLSID lpclsid
    );
# 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) int __stdcall
StringFromGUID2(
         const GUID & rguid,
                                    LPOLESTR lpsz,
         int cchMax
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateGuid(
          GUID * pguid
    );




typedef struct tagPROPVARIANT PROPVARIANT;


extern "C" __declspec(dllimport) HRESULT __stdcall
PropVariantCopy(
          PROPVARIANT * pvarDest,
         const PROPVARIANT * pvarSrc
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
PropVariantClear(
            PROPVARIANT * pvar
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
FreePropVariantArray(
         ULONG cVariants,
                               PROPVARIANT * rgvars
    );
# 1392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoWaitForMultipleHandles(
         DWORD dwFlags,
         DWORD dwTimeout,
         ULONG cHandles,
                         LPHANDLE pHandles,
          LPDWORD lpdwindex
    );




typedef enum tagCOWAIT_FLAGS
{
  COWAIT_DEFAULT = 0,
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4,
  COWAIT_DISPATCH_CALLS = 8,
  COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10,
}COWAIT_FLAGS;




typedef enum CWMO_FLAGS
{
  CWMO_DEFAULT = 0,
  CWMO_DISPATCH_CALLS = 1,
  CWMO_DISPATCH_WINDOW_MESSAGES = 2,
} CWMO_FLAGS;

extern "C" __declspec(dllimport) HRESULT __stdcall
CoWaitForMultipleObjects(
         DWORD dwFlags,
         DWORD dwTimeout,
         ULONG cHandles,
                         const HANDLE * pHandles,
          LPDWORD lpdwindex
    );
# 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetTreatAsClass(
         const IID & clsidOld,
          LPCLSID pClsidNew
    );
# 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInvalidateRemoteMachineBindings(
         LPOLESTR pszMachineName
    );
# 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
enum AgileReferenceOptions
{
    AGILEREFERENCE_DEFAULT = 0,
    AGILEREFERENCE_DELAYEDMARSHAL = 1,
};




               extern "C" __declspec(dllimport) HRESULT __stdcall
RoGetAgileReference(
         enum AgileReferenceOptions options,
         const IID & riid,
         IUnknown * pUnk,
                 IAgileReference ** ppAgileReference
    );
# 1518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const IID &, const IID &, LPVOID *);
typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


extern "C" HRESULT __stdcall DllGetClassObject( const IID & rclsid, const IID & riid, LPVOID * ppv);


extern "C" HRESULT __stdcall DllCanUnloadNow(void);



extern "C" __declspec(dllimport) LPVOID __stdcall
CoTaskMemAlloc(
         SIZE_T cb
    );

extern "C" __declspec(dllimport) LPVOID __stdcall
CoTaskMemRealloc(
                                                       LPVOID pv,
         SIZE_T cb
    );

extern "C" __declspec(dllimport) void __stdcall
CoTaskMemFree(
                    LPVOID pv
    );
# 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall
CoFileTimeNow(
          FILETIME * lpFileTime
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromProgIDEx(
         LPCOLESTR lpszProgID,
          LPCLSID lpclsid
    );
# 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\combaseapi.h" 2 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\coml2api.h" 1 3
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\coml2api.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 1 3
# 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef struct IMallocSpy IMallocSpy;






typedef struct IBindCtx IBindCtx;






typedef struct IEnumMoniker IEnumMoniker;






typedef struct IRunnableObject IRunnableObject;






typedef struct IRunningObjectTable IRunningObjectTable;






typedef struct IPersist IPersist;






typedef struct IPersistStream IPersistStream;






typedef struct IMoniker IMoniker;






typedef struct IROTData IROTData;






typedef struct IEnumSTATSTG IEnumSTATSTG;






typedef struct IStorage IStorage;






typedef struct IPersistFile IPersistFile;






typedef struct IPersistStorage IPersistStorage;






typedef struct ILockBytes ILockBytes;






typedef struct IEnumFORMATETC IEnumFORMATETC;






typedef struct IEnumSTATDATA IEnumSTATDATA;






typedef struct IRootStorage IRootStorage;






typedef struct IAdviseSink IAdviseSink;






typedef struct AsyncIAdviseSink AsyncIAdviseSink;






typedef struct IAdviseSink2 IAdviseSink2;






typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;






typedef struct IDataObject IDataObject;






typedef struct IDataAdviseHolder IDataAdviseHolder;






typedef struct IMessageFilter IMessageFilter;






typedef struct IClassActivator IClassActivator;






typedef struct IFillLockBytes IFillLockBytes;






typedef struct IProgressNotify IProgressNotify;






typedef struct ILayoutStorage ILayoutStorage;






typedef struct IBlockingLock IBlockingLock;






typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;






typedef struct IOplockStorage IOplockStorage;






typedef struct IDirectWriterLock IDirectWriterLock;






typedef struct IUrlMon IUrlMon;






typedef struct IForegroundTransfer IForegroundTransfer;






typedef struct IThumbnailExtractor IThumbnailExtractor;






typedef struct IDummyHICONIncluder IDummyHICONIncluder;






typedef struct IProcessLock IProcessLock;






typedef struct ISurrogateService ISurrogateService;






typedef struct IInitializeSpy IInitializeSpy;






typedef struct IApartmentShutdown IApartmentShutdown;






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/unknwn.h" 1 3
# 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/unknwn.h" 3
extern "C"{
# 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/unknwn.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec;
# 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/unknwn.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec;
# 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/unknwn.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec;
# 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/unknwn.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec;



              HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,

              IUnknown *pUnkOuter,

          const IID & riid,

                  void **ppvObject);


                HRESULT __stdcall IClassFactory_CreateInstance_Stub(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);

              HRESULT __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
              IClassFactory * This,
               BOOL fLock);






}
# 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 2 3



extern "C"{
# 757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)

#pragma warning(disable: 4201)
# 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
#pragma warning(push)



#pragma warning(disable: 4820)

#pragma warning(disable: 4201)
# 8128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
#pragma warning(pop)
# 8146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec;







typedef IMallocSpy *LPMALLOCSPY;


extern "C" const IID IID_IMallocSpy;



    struct __declspec(uuid("0000001d-0000-0000-C000-000000000046")) __declspec(novtable)
    IMallocSpy : public IUnknown
    {
    public:
        virtual SIZE_T __stdcall PreAlloc(

                  SIZE_T cbRequest) = 0;

        virtual void *__stdcall PostAlloc(

                  void *pActual) = 0;

        virtual void *__stdcall PreFree(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual void __stdcall PostFree(

                  BOOL fSpyed) = 0;

        virtual SIZE_T __stdcall PreRealloc(

                  void *pRequest,

                  SIZE_T cbRequest,

                      void **ppNewRequest,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PostRealloc(

                  void *pActual,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PreGetSize(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual SIZE_T __stdcall PostGetSize(

                  SIZE_T cbActual,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PreDidAlloc(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual int __stdcall PostDidAlloc(

                  void *pRequest,

                  BOOL fSpyed,

                  int fActual) = 0;

        virtual void __stdcall PreHeapMinimize( void) = 0;

        virtual void __stdcall PostHeapMinimize( void) = 0;

    };
# 8406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec;







typedef IBindCtx *LPBC;

typedef IBindCtx *LPBINDCTX;


    typedef struct tagBIND_OPTS {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    } BIND_OPTS, * LPBIND_OPTS;
# 8439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
    typedef struct tagBIND_OPTS2 : tagBIND_OPTS {
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO * pServerInfo;
    } BIND_OPTS2, * LPBIND_OPTS2;
# 8463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
    typedef struct tagBIND_OPTS3 : tagBIND_OPTS2 {
   HWND hwnd;
    } BIND_OPTS3, * LPBIND_OPTS3;
# 8483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef
enum tagBIND_FLAGS
    {
        BIND_MAYBOTHERUSER = 1,
        BIND_JUSTTESTEXISTENCE = 2
    } BIND_FLAGS;


extern "C" const IID IID_IBindCtx;



    struct __declspec(uuid("0000000e-0000-0000-C000-000000000046")) __declspec(novtable)
    IBindCtx : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterObjectBound(
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall RevokeObjectBound(
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall ReleaseBoundObjects( void) = 0;

        virtual HRESULT __stdcall SetBindOptions(

                  BIND_OPTS *pbindopts) = 0;

        virtual HRESULT __stdcall GetBindOptions(

                     BIND_OPTS *pbindopts) = 0;

        virtual HRESULT __stdcall GetRunningObjectTable(
                                             IRunningObjectTable **pprot) = 0;

        virtual HRESULT __stdcall RegisterObjectParam(
                                 LPOLESTR pszKey,
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall GetObjectParam(
                                 LPOLESTR pszKey,
                                             IUnknown **ppunk) = 0;

        virtual HRESULT __stdcall EnumObjectParam(
                                             IEnumString **ppenum) = 0;

        virtual HRESULT __stdcall RevokeObjectParam(
                                 LPOLESTR pszKey) = 0;

    };
# 8656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy(
              IBindCtx * This,
                         BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy(
              IBindCtx * This,
                                 BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 8690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IEnumMoniker *LPENUMMONIKER;


extern "C" const IID IID_IEnumMoniker;



    struct __declspec(uuid("00000102-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 IMoniker **rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumMoniker **ppenum) = 0;

    };
# 8798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy(
              IEnumMoniker * This,
               ULONG celt,
                                                                                IMoniker **rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 8825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec;







typedef IRunnableObject *LPRUNNABLEOBJECT;


extern "C" const IID IID_IRunnableObject;



    struct __declspec(uuid("00000126-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunnableObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRunningClass(
                                   LPCLSID lpClsid) = 0;

        virtual HRESULT __stdcall Run(
                                     LPBINDCTX pbc) = 0;

        virtual BOOL __stdcall IsRunning( void) = 0;

        virtual HRESULT __stdcall LockRunning(
                       BOOL fLock,
                       BOOL fLastUnlockCloses) = 0;

        virtual HRESULT __stdcall SetContainedObject(
                       BOOL fContained) = 0;

    };
# 8946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy(
              IRunnableObject * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 8967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;


extern "C" const IID IID_IRunningObjectTable;



    struct __declspec(uuid("00000010-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunningObjectTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Register(
                       DWORD grfFlags,
                                             IUnknown *punkObject,
                                             IMoniker *pmkObjectName,
                                   DWORD *pdwRegister) = 0;

        virtual HRESULT __stdcall Revoke(
                       DWORD dwRegister) = 0;

        virtual HRESULT __stdcall IsRunning(
                                             IMoniker *pmkObjectName) = 0;

        virtual HRESULT __stdcall GetObjectW(
                                             IMoniker *pmkObjectName,
                                             IUnknown **ppunkObject) = 0;

        virtual HRESULT __stdcall NoteChangeTime(
                       DWORD dwRegister,
                                 FILETIME *pfiletime) = 0;

        virtual HRESULT __stdcall GetTimeOfLastChange(
                                             IMoniker *pmkObjectName,
                                   FILETIME *pfiletime) = 0;

        virtual HRESULT __stdcall EnumRunning(
                                             IEnumMoniker **ppenumMoniker) = 0;

    };
# 9124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec;







typedef IPersist *LPPERSIST;


extern "C" const IID IID_IPersist;



    struct __declspec(uuid("0000010c-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersist : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID(
                                   CLSID *pClassID) = 0;

    };
# 9215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IPersistStream *LPPERSISTSTREAM;


extern "C" const IID IID_IPersistStream;



    struct __declspec(uuid("00000109-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStream : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                             IStream *pStm) = 0;

        virtual HRESULT __stdcall Save(
                                             IStream *pStm,
                       BOOL fClearDirty) = 0;

        virtual HRESULT __stdcall GetSizeMax(
                                   ULARGE_INTEGER *pcbSize) = 0;

    };
# 9335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IMoniker *LPMONIKER;

typedef
enum tagMKSYS
    {
        MKSYS_NONE = 0,
        MKSYS_GENERICCOMPOSITE = 1,
        MKSYS_FILEMONIKER = 2,
        MKSYS_ANTIMONIKER = 3,
        MKSYS_ITEMMONIKER = 4,
        MKSYS_POINTERMONIKER = 5,
        MKSYS_CLASSMONIKER = 7,
        MKSYS_OBJREFMONIKER = 8,
        MKSYS_SESSIONMONIKER = 9,
        MKSYS_LUAMONIKER = 10
    } MKSYS;

typedef
enum tagMKREDUCE
    {
        MKRREDUCE_ONE = ( 3 << 16 ) ,
        MKRREDUCE_TOUSER = ( 2 << 16 ) ,
        MKRREDUCE_THROUGHUSER = ( 1 << 16 ) ,
        MKRREDUCE_ALL = 0
    } MKRREDUCE;


extern "C" const IID IID_IMoniker;



    struct __declspec(uuid("0000000f-0000-0000-C000-000000000046")) __declspec(novtable)
    IMoniker : public IPersistStream
    {
    public:
        virtual HRESULT __stdcall BindToObject(

                  IBindCtx *pbc,

                      IMoniker *pmkToLeft,

                  const IID & riidResult,

                      void **ppvResult) = 0;

        virtual HRESULT __stdcall BindToStorage(

                  IBindCtx *pbc,

                      IMoniker *pmkToLeft,

                  const IID & riid,

                      void **ppvObj) = 0;

        virtual HRESULT __stdcall Reduce(
                                             IBindCtx *pbc,
                       DWORD dwReduceHowFar,
                                                               IMoniker **ppmkToLeft,
                                             IMoniker **ppmkReduced) = 0;

        virtual HRESULT __stdcall ComposeWith(
                                             IMoniker *pmkRight,
                       BOOL fOnlyIfNotGeneric,
                                             IMoniker **ppmkComposite) = 0;

        virtual HRESULT __stdcall Enum(
                       BOOL fForward,
                                             IEnumMoniker **ppenumMoniker) = 0;

        virtual HRESULT __stdcall IsEqual(
                                             IMoniker *pmkOtherMoniker) = 0;

        virtual HRESULT __stdcall Hash(
                                   DWORD *pdwHash) = 0;

        virtual HRESULT __stdcall IsRunning(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                             IMoniker *pmkNewlyRunning) = 0;

        virtual HRESULT __stdcall GetTimeOfLastChange(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                   FILETIME *pFileTime) = 0;

        virtual HRESULT __stdcall Inverse(
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall CommonPrefixWith(
                                             IMoniker *pmkOther,
                                             IMoniker **ppmkPrefix) = 0;

        virtual HRESULT __stdcall RelativePathTo(
                                             IMoniker *pmkOther,
                                             IMoniker **ppmkRelPath) = 0;

        virtual HRESULT __stdcall GetDisplayName(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                             LPOLESTR *ppszDisplayName) = 0;

        virtual HRESULT __stdcall ParseDisplayName(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut) = 0;

        virtual HRESULT __stdcall IsSystemMoniker(
                                   DWORD *pdwMksys) = 0;

    };
# 9672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riidResult,
                                             IUnknown **ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 9715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec;
# 9725 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IROTData;



    struct __declspec(uuid("f29f6bc0-5021-11ce-aa15-00006901293f")) __declspec(novtable)
    IROTData : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetComparisonData(
                                                               byte *pbData,
                       ULONG cbMax,
                                   ULONG *pcbData) = 0;

    };
# 9811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec;







typedef IEnumSTATSTG *LPENUMSTATSTG;


extern "C" const IID IID_IEnumSTATSTG;



    struct __declspec(uuid("0000000d-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 STATSTG *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATSTG **ppenum) = 0;

    };
# 9928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy(
              IEnumSTATSTG * This,
               ULONG celt,
                                                                                STATSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 9952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IStorage *LPSTORAGE;

typedef struct tagRemSNB
    {
    ULONG ulCntStr;
    ULONG ulCntChar;
                    OLECHAR rgString[ 1 ];
    } RemSNB;

typedef RemSNB *wireSNB;


typedef LPOLESTR *SNB;



extern "C" const IID IID_IStorage;



    struct __declspec(uuid("0000000b-0000-0000-C000-000000000046")) __declspec(novtable)
    IStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStream(
                                                const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                                             IStream **ppstm) = 0;

        virtual HRESULT __stdcall OpenStream(

                    const OLECHAR *pwcsName,

                        void *reserved1,
                       DWORD grfMode,
                       DWORD reserved2,

                      IStream **ppstm) = 0;

        virtual HRESULT __stdcall CreateStorage(
                                                const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                                             IStorage **ppstg) = 0;

        virtual HRESULT __stdcall OpenStorage(
                                                            const OLECHAR *pwcsName,
                                             IStorage *pstgPriority,
                       DWORD grfMode,
                                                       SNB snbExclude,
                       DWORD reserved,
                                             IStorage **ppstg) = 0;

        virtual HRESULT __stdcall CopyTo(
                       DWORD ciidExclude,

                                         const IID *rgiidExclude,

                      SNB snbExclude,

                  IStorage *pstgDest) = 0;

        virtual HRESULT __stdcall MoveElementTo(
                                                const OLECHAR *pwcsName,
                                             IStorage *pstgDest,
                                                const OLECHAR *pwcsNewName,
                       DWORD grfFlags) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall EnumElements(

                        DWORD reserved1,

                        void *reserved2,

                        DWORD reserved3,

                      IEnumSTATSTG **ppenum) = 0;

        virtual HRESULT __stdcall DestroyElement(
                                                const OLECHAR *pwcsName) = 0;

        virtual HRESULT __stdcall RenameElement(
                                                const OLECHAR *pwcsOldName,
                                                const OLECHAR *pwcsNewName) = 0;

        virtual HRESULT __stdcall SetElementTimes(
                                                            const OLECHAR *pwcsName,
                                             const FILETIME *pctime,
                                             const FILETIME *patime,
                                             const FILETIME *pmtime) = 0;

        virtual HRESULT __stdcall SetClass(
                                 const IID & clsid) = 0;

        virtual HRESULT __stdcall SetStateBits(
                       DWORD grfStateBits,
                       DWORD grfMask) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

    };
# 10259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IStorage_RemoteOpenStream_Proxy(
              IStorage * This,
                                        const OLECHAR *pwcsName,
               ULONG cbReserved1,
                                                                       byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                                     IStream **ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStorage_RemoteCopyTo_Proxy(
              IStorage * This,
               DWORD ciidExclude,
                                                                       const IID *rgiidExclude,
                                               SNB snbExclude,
                                     IStorage *pstgDest);


void __stdcall IStorage_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStorage_RemoteEnumElements_Proxy(
              IStorage * This,
               DWORD reserved1,
               ULONG cbReserved2,
                                                                       byte *reserved2,
               DWORD reserved3,
                                     IEnumSTATSTG **ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec;







typedef IPersistFile *LPPERSISTFILE;


extern "C" const IID IID_IPersistFile;



    struct __declspec(uuid("0000010b-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistFile : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                 LPCOLESTR pszFileName,
                       DWORD dwMode) = 0;

        virtual HRESULT __stdcall Save(
                                             LPCOLESTR pszFileName,
                       BOOL fRemember) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                             LPCOLESTR pszFileName) = 0;

        virtual HRESULT __stdcall GetCurFile(
                                             LPOLESTR *ppszFileName) = 0;

    };
# 10461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IPersistStorage *LPPERSISTSTORAGE;


extern "C" const IID IID_IPersistStorage;



    struct __declspec(uuid("0000010a-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStorage : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall InitNew(
                                             IStorage *pStg) = 0;

        virtual HRESULT __stdcall Load(
                                             IStorage *pStg) = 0;

        virtual HRESULT __stdcall Save(
                                             IStorage *pStgSave,
                       BOOL fSameAsLoad) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                             IStorage *pStgNew) = 0;

        virtual HRESULT __stdcall HandsOffStorage( void) = 0;

    };
# 10602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec;







typedef ILockBytes *LPLOCKBYTES;


extern "C" const IID IID_ILockBytes;



    struct __declspec(uuid("0000000a-0000-0000-C000-000000000046")) __declspec(novtable)
    ILockBytes : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadAt(
                       ULARGE_INTEGER ulOffset,

                                                 void *pv,
                       ULONG cb,

                       ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall WriteAt(
                       ULARGE_INTEGER ulOffset,

                                  const void *pv,
                       ULONG cb,

                       ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall Flush( void) = 0;

        virtual HRESULT __stdcall SetSize(
                       ULARGE_INTEGER cb) = 0;

        virtual HRESULT __stdcall LockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall UnlockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

    };
# 10771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IEnumFORMATETC *LPENUMFORMATETC;


typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
                    BYTE tdData[ 1 ];
    } DVTARGETDEVICE;


typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
                   DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;


extern "C" const IID IID_IEnumFORMATETC;



    struct __declspec(uuid("00000103-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumFORMATETC : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 FORMATETC *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumFORMATETC **ppenum) = 0;

    };
# 10944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy(
              IEnumFORMATETC * This,
               ULONG celt,
                                                                                FORMATETC *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IEnumSTATDATA *LPENUMSTATDATA;

typedef
enum tagADVF
    {
        ADVF_NODATA = 1,
        ADVF_PRIMEFIRST = 2,
        ADVF_ONLYONCE = 4,
        ADVF_DATAONSTOP = 64,
        ADVFCACHE_NOHANDLER = 8,
        ADVFCACHE_FORCEBUILTIN = 16,
        ADVFCACHE_ONSAVE = 32
    } ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
                   IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } STATDATA;

typedef STATDATA *LPSTATDATA;


extern "C" const IID IID_IEnumSTATDATA;



    struct __declspec(uuid("00000105-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATDATA : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 STATDATA *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATDATA **ppenum) = 0;

    };
# 11098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy(
              IEnumSTATDATA * This,
               ULONG celt,
                                                                                STATDATA *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 11122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IRootStorage *LPROOTSTORAGE;


extern "C" const IID IID_IRootStorage;



    struct __declspec(uuid("00000012-0000-0000-C000-000000000046")) __declspec(novtable)
    IRootStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchToFile(
                                 LPOLESTR pszFile) = 0;

    };
# 11204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IAdviseSink *LPADVISESINK;

typedef
enum tagTYMED
    {
        TYMED_HGLOBAL = 1,
        TYMED_FILE = 2,
        TYMED_ISTREAM = 4,
        TYMED_ISTORAGE = 8,
        TYMED_GDI = 16,
        TYMED_MFPICT = 32,
        TYMED_ENHMF = 64,
        TYMED_NULL = 0
    } TYMED;



#pragma warning(push)

#pragma warning(disable: 4200)

typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
                    byte data[ 1 ];
    } RemSTGMEDIUM;



#pragma warning(pop)
# 11257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef struct tagSTGMEDIUM
    {
    DWORD tymed;
                                   union
        {
                       HBITMAP hBitmap;
                       HMETAFILEPICT hMetaFilePict;
                       HENHMETAFILE hEnhMetaFile;
                       HGLOBAL hGlobal;
                       LPOLESTR lpszFileName;
                       IStream *pstm;
                       IStorage *pstg;

        } ;
                   IUnknown *pUnkForRelease;
    } uSTGMEDIUM;


typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
                                          union __MIDL_IAdviseSink_0002
        {
                       wireHBITMAP hBitmap;
                       wireHPALETTE hPalette;
                        wireHGLOBAL hGeneric;
        } u;
    } GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
                                              union __MIDL_IAdviseSink_0003
            {

                           wireHMETAFILEPICT hMetaFilePict;
                           wireHENHMETAFILE hHEnhMetaFile;
                           GDI_OBJECT *hGdiHandle;
                           wireHGLOBAL hGlobal;
                           LPOLESTR lpszFileName;
                           BYTE_BLOB *pstm;
                           BYTE_BLOB *pstg;
            } u;
        } ;
    IUnknown *pUnkForRelease;
    } userSTGMEDIUM;

typedef userSTGMEDIUM *wireSTGMEDIUM;

typedef uSTGMEDIUM STGMEDIUM;

typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
    } userFLAG_STGMEDIUM;

typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef struct _FLAG_STGMEDIUM
    {
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
    } FLAG_STGMEDIUM;


extern "C" const IID IID_IAdviseSink;



    struct __declspec(uuid("0000010f-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink : public IUnknown
    {
    public:
        virtual void __stdcall OnDataChange(

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed) = 0;

        virtual void __stdcall OnViewChange(
                       DWORD dwAspect,
                       LONG lindex) = 0;

        virtual void __stdcall OnRename(

                  IMoniker *pmk) = 0;

        virtual void __stdcall OnSave( void) = 0;

        virtual void __stdcall OnClose( void) = 0;

    };
# 11448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy(
              IAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy(
              IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy(
              IAdviseSink * This,
                             IMoniker *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy(
              IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy(
              IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 11519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_AsyncIAdviseSink;



    struct __declspec(uuid("00000150-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink : public IUnknown
    {
    public:
        virtual void __stdcall Begin_OnDataChange(

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed) = 0;

        virtual void __stdcall Finish_OnDataChange( void) = 0;

        virtual void __stdcall Begin_OnViewChange(
                       DWORD dwAspect,
                       LONG lindex) = 0;

        virtual void __stdcall Finish_OnViewChange( void) = 0;

        virtual void __stdcall Begin_OnRename(

                  IMoniker *pmk) = 0;

        virtual void __stdcall Finish_OnRename( void) = 0;

        virtual void __stdcall Begin_OnSave( void) = 0;

        virtual void __stdcall Finish_OnSave( void) = 0;

        virtual void __stdcall Begin_OnClose( void) = 0;

        virtual void __stdcall Finish_OnClose( void) = 0;

    };
# 11674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
              AsyncIAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
              AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
              AsyncIAdviseSink * This,
                             IMoniker *pmk);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 11802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec;







typedef IAdviseSink2 *LPADVISESINK2;


extern "C" const IID IID_IAdviseSink2;



    struct __declspec(uuid("00000125-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink2 : public IAdviseSink
    {
    public:
        virtual void __stdcall OnLinkSrcChange(

                  IMoniker *pmk) = 0;

    };
# 11924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
              IAdviseSink2 * This,
                                     IMoniker *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 11947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_AsyncIAdviseSink2;



    struct __declspec(uuid("00000151-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink2 : public AsyncIAdviseSink
    {
    public:
        virtual void __stdcall Begin_OnLinkSrcChange(

                  IMoniker *pmk) = 0;

        virtual void __stdcall Finish_OnLinkSrcChange( void) = 0;

    };
# 12095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
              AsyncIAdviseSink2 * This,
                                     IMoniker *pmk);


void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
              AsyncIAdviseSink2 * This);


void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 12131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec;







typedef IDataObject *LPDATAOBJECT;

typedef
enum tagDATADIR
    {
        DATADIR_GET = 1,
        DATADIR_SET = 2
    } DATADIR;


extern "C" const IID IID_IDataObject;



    struct __declspec(uuid("0000010e-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetData(

                  FORMATETC *pformatetcIn,

                   STGMEDIUM *pmedium) = 0;

        virtual HRESULT __stdcall GetDataHere(

                  FORMATETC *pformatetc,

                     STGMEDIUM *pmedium) = 0;

        virtual HRESULT __stdcall QueryGetData(
                                             FORMATETC *pformatetc) = 0;

        virtual HRESULT __stdcall GetCanonicalFormatEtc(
                                             FORMATETC *pformatectIn,
                                   FORMATETC *pformatetcOut) = 0;

        virtual HRESULT __stdcall SetData(

                  FORMATETC *pformatetc,

                  STGMEDIUM *pmedium,
                       BOOL fRelease) = 0;

        virtual HRESULT __stdcall EnumFormatEtc(
                       DWORD dwDirection,
                                             IEnumFORMATETC **ppenumFormatEtc) = 0;

        virtual HRESULT __stdcall DAdvise(
                                 FORMATETC *pformatetc,
                       DWORD advf,
                                             IAdviseSink *pAdvSink,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall DUnadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumDAdvise(
                                             IEnumSTATDATA **ppenumAdvise) = 0;

    };
# 12329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IDataObject_RemoteGetData_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetcIn,
                           STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                 STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IDataObject_RemoteSetData_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                     FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 12382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec;







typedef IDataAdviseHolder *LPDATAADVISEHOLDER;


extern "C" const IID IID_IDataAdviseHolder;



    struct __declspec(uuid("00000110-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise(

                      IDataObject *pDataObject,

                  FORMATETC *pFetc,

                  DWORD advf,

                  IAdviseSink *pAdvise,

                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(

                  DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(

                      IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall SendOnDataChange(

                  IDataObject *pDataObject,

                        DWORD dwReserved,

                  DWORD advf) = 0;

    };
# 12535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef IMessageFilter *LPMESSAGEFILTER;

typedef
enum tagCALLTYPE
    {
        CALLTYPE_TOPLEVEL = 1,
        CALLTYPE_NESTED = 2,
        CALLTYPE_ASYNC = 3,
        CALLTYPE_TOPLEVEL_CALLPENDING = 4,
        CALLTYPE_ASYNC_CALLPENDING = 5
    } CALLTYPE;

typedef
enum tagSERVERCALL
    {
        SERVERCALL_ISHANDLED = 0,
        SERVERCALL_REJECTED = 1,
        SERVERCALL_RETRYLATER = 2
    } SERVERCALL;

typedef
enum tagPENDINGTYPE
    {
        PENDINGTYPE_TOPLEVEL = 1,
        PENDINGTYPE_NESTED = 2
    } PENDINGTYPE;

typedef
enum tagPENDINGMSG
    {
        PENDINGMSG_CANCELCALL = 0,
        PENDINGMSG_WAITNOPROCESS = 1,
        PENDINGMSG_WAITDEFPROCESS = 2
    } PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;


extern "C" const IID IID_IMessageFilter;



    struct __declspec(uuid("00000016-0000-0000-C000-000000000046")) __declspec(novtable)
    IMessageFilter : public IUnknown
    {
    public:
        virtual DWORD __stdcall HandleInComingCall(

                  DWORD dwCallType,

                  HTASK htaskCaller,

                  DWORD dwTickCount,

                      LPINTERFACEINFO lpInterfaceInfo) = 0;

        virtual DWORD __stdcall RetryRejectedCall(

                  HTASK htaskCallee,

                  DWORD dwTickCount,

                  DWORD dwRejectType) = 0;

        virtual DWORD __stdcall MessagePending(

                  HTASK htaskCallee,

                  DWORD dwTickCount,

                  DWORD dwPendingType) = 0;

    };
# 12712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec;
# 12740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IClassActivator;



    struct __declspec(uuid("00000140-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassActivator : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassObject(
                                 const IID & rclsid,
                       DWORD dwClassContext,
                       LCID locale,
                                 const IID & riid,
                                                     void **ppv) = 0;

    };
# 12830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec;
# 12840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IFillLockBytes;



    struct __declspec(uuid("99caf010-415e-11cf-8814-00aa00b569f5")) __declspec(novtable)
    IFillLockBytes : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FillAppend(

                                  const void *pv,

                  ULONG cb,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall FillAt(

                  ULARGE_INTEGER ulOffset,

                                  const void *pv,

                  ULONG cb,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall SetFillSize(
                       ULARGE_INTEGER ulSize) = 0;

        virtual HRESULT __stdcall Terminate(
                       BOOL bCanceled) = 0;

    };
# 12963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
                HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy(
              IFillLockBytes * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy(
              IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 13005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec;
# 13015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IProgressNotify;



    struct __declspec(uuid("a9d758a0-4617-11cf-95fc-00aa00680db4")) __declspec(novtable)
    IProgressNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnProgress(
                       DWORD dwProgressCurrent,
                       DWORD dwProgressMaximum,
                       BOOL fAccurate,
                       BOOL fOwner) = 0;

    };
# 13103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec;







typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } StorageLayout;


extern "C" const IID IID_ILayoutStorage;



    struct __declspec(uuid("0e6d4d90-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    ILayoutStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LayoutScript(

                                  StorageLayout *pStorageLayout,

                  DWORD nEntries,

                        DWORD glfInterleavedFlag) = 0;

        virtual HRESULT __stdcall BeginMonitor( void) = 0;

        virtual HRESULT __stdcall EndMonitor( void) = 0;

        virtual HRESULT __stdcall ReLayoutDocfile(

                       OLECHAR *pwcsNewDfName) = 0;

        virtual HRESULT __stdcall ReLayoutDocfileOnILockBytes(

                  ILockBytes *pILockBytes) = 0;

    };
# 13253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec;
# 13263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IBlockingLock;



    struct __declspec(uuid("30f3d47a-6447-11d1-8e3c-00c04fb9386d")) __declspec(novtable)
    IBlockingLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Lock(
                       DWORD dwTimeout) = 0;

        virtual HRESULT __stdcall Unlock( void) = 0;

    };
# 13351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_ITimeAndNoticeControl;



    struct __declspec(uuid("bc0bf6ae-8878-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    ITimeAndNoticeControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SuppressChanges(
                       DWORD res1,
                       DWORD res2) = 0;

    };
# 13433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IOplockStorage;



    struct __declspec(uuid("8d19c834-8879-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    IOplockStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStorageEx(
                                 LPCWSTR pwcsName,
                       DWORD grfMode,
                       DWORD stgfmt,
                       DWORD grfAttrs,
                                 const IID & riid,
                                                     void **ppstgOpen) = 0;

        virtual HRESULT __stdcall OpenStorageEx(
                                 LPCWSTR pwcsName,
                       DWORD grfMode,
                       DWORD stgfmt,
                       DWORD grfAttrs,
                                 const IID & riid,
                                                     void **ppstgOpen) = 0;

    };
# 13545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec;
# 13555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IDirectWriterLock;



    struct __declspec(uuid("0e6d4d92-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    IDirectWriterLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitForWriteAccess(
                       DWORD dwTimeout) = 0;

        virtual HRESULT __stdcall ReleaseWriteAccess( void) = 0;

        virtual HRESULT __stdcall HaveWriteAccess( void) = 0;

    };
# 13653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec;
# 13663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IUrlMon;



    struct __declspec(uuid("00000026-0000-0000-C000-000000000046")) __declspec(novtable)
    IUrlMon : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AsyncGetClassBits(
                                 const IID & rclsid,
                                             LPCWSTR pszTYPE,
                                             LPCWSTR pszExt,
                       DWORD dwFileVersionMS,
                       DWORD dwFileVersionLS,
                                             LPCWSTR pszCodeBase,
                                     IBindCtx *pbc,
                       DWORD dwClassContext,
                                 const IID & riid,
                       DWORD flags) = 0;

    };
# 13761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IForegroundTransfer;



    struct __declspec(uuid("00000145-0000-0000-C000-000000000046")) __declspec(novtable)
    IForegroundTransfer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AllowForegroundTransfer(

                        void *lpvReserved) = 0;

    };
# 13843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IThumbnailExtractor;



    struct __declspec(uuid("969dc708-5c76-11d1-8d86-0000f804b057")) __declspec(novtable)
    IThumbnailExtractor : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ExtractThumbnail(
                                     IStorage *pStg,
                       ULONG ulLength,
                       ULONG ulHeight,
                                   ULONG *pulOutputLength,
                                   ULONG *pulOutputHeight,
                                             HBITMAP *phOutputBitmap) = 0;

        virtual HRESULT __stdcall OnFileUpdated(
                                     IStorage *pStg) = 0;

    };
# 13943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IDummyHICONIncluder;



    struct __declspec(uuid("947990de-cc28-11d2-a0f7-00805f858fb1")) __declspec(novtable)
    IDummyHICONIncluder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Dummy(
                                 HICON h1,
                                 HDC h2) = 0;

    };
# 14021 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
typedef
enum tagApplicationType
    {
        ServerApplication = 0,
        LibraryApplication = ( ServerApplication + 1 )
    } ApplicationType;

typedef
enum tagShutdownType
    {
        IdleShutdown = 0,
        ForcedShutdown = ( IdleShutdown + 1 )
    } ShutdownType;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec;
# 14047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IProcessLock;



    struct __declspec(uuid("000001d5-0000-0000-C000-000000000046")) __declspec(novtable)
    IProcessLock : public IUnknown
    {
    public:
        virtual ULONG __stdcall AddRefOnProcess( void) = 0;

        virtual ULONG __stdcall ReleaseRefOnProcess( void) = 0;

    };
# 14133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_ISurrogateService;



    struct __declspec(uuid("000001d4-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogateService : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Init(

                  const GUID & rguidProcessID,

                  IProcessLock *pProcessLock,

                   BOOL *pfApplicationAware) = 0;

        virtual HRESULT __stdcall ApplicationLaunch(

                  const GUID & rguidApplID,

                  ApplicationType appType) = 0;

        virtual HRESULT __stdcall ApplicationFree(

                  const GUID & rguidApplID) = 0;

        virtual HRESULT __stdcall CatalogRefresh(

                        ULONG ulReserved) = 0;

        virtual HRESULT __stdcall ProcessShutdown(

                  ShutdownType shutdownType) = 0;

    };
# 14274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec;







typedef IInitializeSpy *LPINITIALIZESPY;


extern "C" const IID IID_IInitializeSpy;



    struct __declspec(uuid("00000034-0000-0000-C000-000000000046")) __declspec(novtable)
    IInitializeSpy : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PreInitialize(

                  DWORD dwCoInit,

                  DWORD dwCurThreadAptRefs) = 0;

        virtual HRESULT __stdcall PostInitialize(

                  HRESULT hrCoInit,

                  DWORD dwCoInit,

                  DWORD dwNewThreadAptRefs) = 0;

        virtual HRESULT __stdcall PreUninitialize(

                  DWORD dwCurThreadAptRefs) = 0;

        virtual HRESULT __stdcall PostUninitialize(

                  DWORD dwNewThreadAptRefs) = 0;

    };
# 14419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec;
# 14429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
extern "C" const IID IID_IApartmentShutdown;



    struct __declspec(uuid("A2F05A09-27A2-42B5-BC0E-AC163EF49D9B")) __declspec(novtable)
    IApartmentShutdown : public IUnknown
    {
    public:
        virtual void __stdcall OnUninitialize(

                  UINT64 ui64ApartmentIdentifier) = 0;

    };
# 14511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objidl.h" 3
#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec;



unsigned long __stdcall ASYNC_STGMEDIUM_UserSize( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall FLAG_STGMEDIUM_UserSize( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree( unsigned long *, FLAG_STGMEDIUM * );

unsigned long __stdcall HBITMAP_UserSize( unsigned long *, unsigned long , HBITMAP * );
unsigned char * __stdcall HBITMAP_UserMarshal( unsigned long *, unsigned char *, HBITMAP * );
unsigned char * __stdcall HBITMAP_UserUnmarshal( unsigned long *, unsigned char *, HBITMAP * );
void __stdcall HBITMAP_UserFree( unsigned long *, HBITMAP * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HICON_UserSize( unsigned long *, unsigned long , HICON * );
unsigned char * __stdcall HICON_UserMarshal( unsigned long *, unsigned char *, HICON * );
unsigned char * __stdcall HICON_UserUnmarshal( unsigned long *, unsigned char *, HICON * );
void __stdcall HICON_UserFree( unsigned long *, HICON * );

unsigned long __stdcall SNB_UserSize( unsigned long *, unsigned long , SNB * );
unsigned char * __stdcall SNB_UserMarshal( unsigned long *, unsigned char *, SNB * );
unsigned char * __stdcall SNB_UserUnmarshal( unsigned long *, unsigned char *, SNB * );
void __stdcall SNB_UserFree( unsigned long *, SNB * );

unsigned long __stdcall STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

unsigned long __stdcall ASYNC_STGMEDIUM_UserSize64( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree64( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall FLAG_STGMEDIUM_UserSize64( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree64( unsigned long *, FLAG_STGMEDIUM * );

unsigned long __stdcall HBITMAP_UserSize64( unsigned long *, unsigned long , HBITMAP * );
unsigned char * __stdcall HBITMAP_UserMarshal64( unsigned long *, unsigned char *, HBITMAP * );
unsigned char * __stdcall HBITMAP_UserUnmarshal64( unsigned long *, unsigned char *, HBITMAP * );
void __stdcall HBITMAP_UserFree64( unsigned long *, HBITMAP * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HICON_UserSize64( unsigned long *, unsigned long , HICON * );
unsigned char * __stdcall HICON_UserMarshal64( unsigned long *, unsigned char *, HICON * );
unsigned char * __stdcall HICON_UserUnmarshal64( unsigned long *, unsigned char *, HICON * );
void __stdcall HICON_UserFree64( unsigned long *, HICON * );

unsigned long __stdcall SNB_UserSize64( unsigned long *, unsigned long , SNB * );
unsigned char * __stdcall SNB_UserMarshal64( unsigned long *, unsigned char *, SNB * );
unsigned char * __stdcall SNB_UserUnmarshal64( unsigned long *, unsigned char *, SNB * );
void __stdcall SNB_UserFree64( unsigned long *, SNB * );

unsigned long __stdcall STGMEDIUM_UserSize64( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( unsigned long *, STGMEDIUM * );

              HRESULT __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,

          ULONG celt,

                                         IUnknown **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumUnknown_Next_Stub(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,

                                         LPOLESTR *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumString_Next_Stub(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,

                                         void *pv,

          ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ISequentialStream_Read_Stub(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,

                          const void *pv,

          ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ISequentialStream_Write_Stub(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,

               ULARGE_INTEGER *plibNewPosition);


                HRESULT __stdcall IStream_Seek_Stub(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);

              HRESULT __stdcall IStream_CopyTo_Proxy(
    IStream * This,

          IStream *pstm,
               ULARGE_INTEGER cb,

               ULARGE_INTEGER *pcbRead,

               ULARGE_INTEGER *pcbWritten);


                HRESULT __stdcall IStream_CopyTo_Stub(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);

              HRESULT __stdcall IBindCtx_SetBindOptions_Proxy(
    IBindCtx * This,

          BIND_OPTS *pbindopts);


                HRESULT __stdcall IBindCtx_SetBindOptions_Stub(
              IBindCtx * This,
                         BIND_OPTS2 *pbindopts);

              HRESULT __stdcall IBindCtx_GetBindOptions_Proxy(
    IBindCtx * This,

             BIND_OPTS *pbindopts);


                HRESULT __stdcall IBindCtx_GetBindOptions_Stub(
              IBindCtx * This,
                                 BIND_OPTS2 *pbindopts);

              HRESULT __stdcall IEnumMoniker_Next_Proxy(
    IEnumMoniker * This,
               ULONG celt,

                                         IMoniker **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumMoniker_Next_Stub(
              IEnumMoniker * This,
               ULONG celt,
                                                                                IMoniker **rgelt,
                           ULONG *pceltFetched);

              BOOL __stdcall IRunnableObject_IsRunning_Proxy(
    IRunnableObject * This);


                HRESULT __stdcall IRunnableObject_IsRunning_Stub(
              IRunnableObject * This);

              HRESULT __stdcall IMoniker_BindToObject_Proxy(
    IMoniker * This,

          IBindCtx *pbc,

              IMoniker *pmkToLeft,

          const IID & riidResult,

              void **ppvResult);


                HRESULT __stdcall IMoniker_BindToObject_Stub(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riidResult,
                                             IUnknown **ppvResult);

              HRESULT __stdcall IMoniker_BindToStorage_Proxy(
    IMoniker * This,

          IBindCtx *pbc,

              IMoniker *pmkToLeft,

          const IID & riid,

              void **ppvObj);


                HRESULT __stdcall IMoniker_BindToStorage_Stub(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG * This,
               ULONG celt,

                                         STATSTG *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATSTG_Next_Stub(
              IEnumSTATSTG * This,
               ULONG celt,
                                                                                STATSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IStorage_OpenStream_Proxy(
    IStorage * This,

            const OLECHAR *pwcsName,

                void *reserved1,
               DWORD grfMode,
               DWORD reserved2,

              IStream **ppstm);


                HRESULT __stdcall IStorage_OpenStream_Stub(
              IStorage * This,
                                        const OLECHAR *pwcsName,
               ULONG cbReserved1,
                                                                       byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                                     IStream **ppstm);

              HRESULT __stdcall IStorage_CopyTo_Proxy(
    IStorage * This,
               DWORD ciidExclude,

                                 const IID *rgiidExclude,

              SNB snbExclude,

          IStorage *pstgDest);


                HRESULT __stdcall IStorage_CopyTo_Stub(
              IStorage * This,
               DWORD ciidExclude,
                                                                       const IID *rgiidExclude,
                                               SNB snbExclude,
                                     IStorage *pstgDest);

              HRESULT __stdcall IStorage_EnumElements_Proxy(
    IStorage * This,

                DWORD reserved1,

                void *reserved2,

                DWORD reserved3,

              IEnumSTATSTG **ppenum);


                HRESULT __stdcall IStorage_EnumElements_Stub(
              IStorage * This,
               DWORD reserved1,
               ULONG cbReserved2,
                                                                       byte *reserved2,
               DWORD reserved3,
                                     IEnumSTATSTG **ppenum);

              HRESULT __stdcall ILockBytes_ReadAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,

                                         void *pv,
               ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ILockBytes_ReadAt_Stub(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ILockBytes_WriteAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,

                          const void *pv,
               ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ILockBytes_WriteAt_Stub(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC * This,
               ULONG celt,

                                         FORMATETC *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumFORMATETC_Next_Stub(
              IEnumFORMATETC * This,
               ULONG celt,
                                                                                FORMATETC *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA * This,
               ULONG celt,

                                         STATDATA *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATDATA_Next_Stub(
              IEnumSTATDATA * This,
               ULONG celt,
                                                                                STATDATA *rgelt,
                           ULONG *pceltFetched);

              void __stdcall IAdviseSink_OnDataChange_Proxy(
    IAdviseSink * This,

          FORMATETC *pFormatetc,

          STGMEDIUM *pStgmed);


                HRESULT __stdcall IAdviseSink_OnDataChange_Stub(
              IAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);

              void __stdcall IAdviseSink_OnViewChange_Proxy(
    IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                HRESULT __stdcall IAdviseSink_OnViewChange_Stub(
              IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __stdcall IAdviseSink_OnRename_Proxy(
    IAdviseSink * This,

          IMoniker *pmk);


                HRESULT __stdcall IAdviseSink_OnRename_Stub(
              IAdviseSink * This,
                             IMoniker *pmk);

              void __stdcall IAdviseSink_OnSave_Proxy(
    IAdviseSink * This);


                HRESULT __stdcall IAdviseSink_OnSave_Stub(
              IAdviseSink * This);

              void __stdcall IAdviseSink_OnClose_Proxy(
    IAdviseSink * This);


                HRESULT __stdcall IAdviseSink_OnClose_Stub(
              IAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy(
    AsyncIAdviseSink * This,

          FORMATETC *pFormatetc,

          STGMEDIUM *pStgmed);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub(
              AsyncIAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);

              void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy(
    AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub(
              AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy(
    AsyncIAdviseSink * This,

          IMoniker *pmk);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub(
              AsyncIAdviseSink * This,
                             IMoniker *pmk);

              void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub(
              AsyncIAdviseSink * This);

              void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2 * This,

          IMoniker *pmk);


                HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub(
              IAdviseSink2 * This,
                                     IMoniker *pmk);

              void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
    AsyncIAdviseSink2 * This,

          IMoniker *pmk);


                HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
              AsyncIAdviseSink2 * This,
                                     IMoniker *pmk);

              void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
    AsyncIAdviseSink2 * This);


                HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
              AsyncIAdviseSink2 * This);

              HRESULT __stdcall IDataObject_GetData_Proxy(
    IDataObject * This,

          FORMATETC *pformatetcIn,

           STGMEDIUM *pmedium);


                HRESULT __stdcall IDataObject_GetData_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetcIn,
                           STGMEDIUM *pRemoteMedium);

              HRESULT __stdcall IDataObject_GetDataHere_Proxy(
    IDataObject * This,

          FORMATETC *pformatetc,

             STGMEDIUM *pmedium);


                HRESULT __stdcall IDataObject_GetDataHere_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                 STGMEDIUM *pRemoteMedium);

              HRESULT __stdcall IDataObject_SetData_Proxy(
    IDataObject * This,

          FORMATETC *pformatetc,

          STGMEDIUM *pmedium,
               BOOL fRelease);


                HRESULT __stdcall IDataObject_SetData_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                     FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);

              HRESULT __stdcall IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes * This,

                          const void *pv,

          ULONG cb,

           ULONG *pcbWritten);


                HRESULT __stdcall IFillLockBytes_FillAppend_Stub(
              IFillLockBytes * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IFillLockBytes_FillAt_Proxy(
    IFillLockBytes * This,

          ULARGE_INTEGER ulOffset,

                          const void *pv,

          ULONG cb,

           ULONG *pcbWritten);


                HRESULT __stdcall IFillLockBytes_FillAt_Stub(
              IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);






}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\coml2api.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef struct IPropertyStorage IPropertyStorage;






typedef struct IPropertySetStorage IPropertySetStorage;






typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;






typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;







# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef struct ICreateTypeInfo ICreateTypeInfo;






typedef struct ICreateTypeInfo2 ICreateTypeInfo2;






typedef struct ICreateTypeLib ICreateTypeLib;






typedef struct ICreateTypeLib2 ICreateTypeLib2;






typedef struct IDispatch IDispatch;






typedef struct IEnumVARIANT IEnumVARIANT;






typedef struct ITypeComp ITypeComp;






typedef struct ITypeInfo ITypeInfo;






typedef struct ITypeInfo2 ITypeInfo2;






typedef struct ITypeLib ITypeLib;






typedef struct ITypeLib2 ITypeLib2;






typedef struct ITypeChangeEvents ITypeChangeEvents;






typedef struct IErrorInfo IErrorInfo;






typedef struct ICreateErrorInfo ICreateErrorInfo;






typedef struct ISupportErrorInfo ISupportErrorInfo;






typedef struct ITypeFactory ITypeFactory;






typedef struct ITypeMarshal ITypeMarshal;






typedef struct IRecordInfo IRecordInfo;






typedef struct IErrorLog IErrorLog;






typedef struct IPropertyBag IPropertyBag;






typedef struct ITypeLibRegistrationReader ITypeLibRegistrationReader;






typedef struct ITypeLibRegistration ITypeLibRegistration;
# 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern "C"{
# 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)

#pragma warning(disable: 4201)
# 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec;







typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    } SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;


typedef struct _wireVARIANT *wireVARIANT;

typedef struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
    {
    ULONG Size;
                         wireBSTR *aBstr;
    } SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
                         IUnknown **apUnknown;
    } SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
    {
    ULONG Size;
                         IDispatch **apDispatch;
    } SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
    {
    ULONG Size;
                         wireVARIANT *aVariant;
    } SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
    {
    ULONG Size;
                         wireBRECORD *aRecord;
    } SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
    {
    ULONG Size;
                         IUnknown **apUnknown;
    IID iid;
    } SAFEARR_HAVEIID;

typedef
enum tagSF_TYPE
    {
        SF_ERROR = VT_ERROR,
        SF_I1 = VT_I1,
        SF_I2 = VT_I2,
        SF_I4 = VT_I4,
        SF_I8 = VT_I8,
        SF_BSTR = VT_BSTR,
        SF_UNKNOWN = VT_UNKNOWN,
        SF_DISPATCH = VT_DISPATCH,
        SF_VARIANT = VT_VARIANT,
        SF_RECORD = VT_RECORD,
        SF_HAVEIID = ( VT_UNKNOWN | VT_RESERVED )
    } SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
    {
    ULONG sfType;
                                          union __MIDL_IOleAutomationTypes_0001
        {
                       SAFEARR_BSTR BstrStr;
                       SAFEARR_UNKNOWN UnknownStr;
                       SAFEARR_DISPATCH DispatchStr;
                       SAFEARR_VARIANT VariantStr;
                       SAFEARR_BRECORD RecordStr;
                       SAFEARR_HAVEIID HaveIidStr;
                       BYTE_SIZEDARR ByteStr;
                       WORD_SIZEDARR WordStr;
                       DWORD_SIZEDARR LongStr;
                       HYPER_SIZEDARR HyperStr;
        } u;
    } SAFEARRAYUNION;

typedef struct _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
                    SAFEARRAYBOUND rgsabound[ 1 ];
    } *wireSAFEARRAY;

typedef wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    } SAFEARRAY;

typedef SAFEARRAY *LPSAFEARRAY;
# 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef struct tagVARIANT VARIANT;

struct tagVARIANT
    {
    union
        {
        struct
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union
                {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;

                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;

                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct
                    {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                    } ;
                } ;
            } ;
        DECIMAL decVal;
        } ;
    } ;
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;
# 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
struct _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
                    byte *pRecord;
    } ;
struct _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
                                   union
        {
                       LONGLONG llVal;
                       LONG lVal;
                       BYTE bVal;
                       SHORT iVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;
                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       wireBSTR bstrVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       wirePSAFEARRAY parray;
                       wireBRECORD brecVal;
                       BYTE *pbVal;
                       SHORT *piVal;
                       LONG *plVal;
                       LONGLONG *pllVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       wireBSTR *pbstrVal;
                       IUnknown **ppunkVal;
                       IDispatch **ppdispVal;
                       wirePSAFEARRAY *pparray;
                       wireVARIANT *pvarVal;
                       CHAR cVal;
                       USHORT uiVal;
                       ULONG ulVal;
                       ULONGLONG ullVal;
                       INT intVal;
                       UINT uintVal;
                       DECIMAL decVal;
                       DECIMAL *pdecVal;
                       CHAR *pcVal;
                       USHORT *puiVal;
                       ULONG *pulVal;
                       ULONGLONG *pullVal;
                       INT *pintVal;
                       UINT *puintVal;


        } ;
    } ;
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef
enum tagTYPEKIND
    {
        TKIND_ENUM = 0,
        TKIND_RECORD = ( TKIND_ENUM + 1 ) ,
        TKIND_MODULE = ( TKIND_RECORD + 1 ) ,
        TKIND_INTERFACE = ( TKIND_MODULE + 1 ) ,
        TKIND_DISPATCH = ( TKIND_INTERFACE + 1 ) ,
        TKIND_COCLASS = ( TKIND_DISPATCH + 1 ) ,
        TKIND_ALIAS = ( TKIND_COCLASS + 1 ) ,
        TKIND_UNION = ( TKIND_ALIAS + 1 ) ,
        TKIND_MAX = ( TKIND_UNION + 1 )
    } TYPEKIND;

typedef struct tagTYPEDESC
    {
                                   union
        {
                       struct tagTYPEDESC *lptdesc;
                       struct tagARRAYDESC *lpadesc;
                       HREFTYPE hreftype;

        } ;
    VARTYPE vt;
    } TYPEDESC;

typedef struct tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
                    SAFEARRAYBOUND rgbounds[ 1 ];
    } ARRAYDESC;

typedef struct tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    } PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    } PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;
# 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef struct tagIDLDESC
    {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
    } IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;
# 723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef struct tagELEMDESC {
    TYPEDESC tdesc;
    union {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    } ;
} ELEMDESC, * LPELEMDESC;



typedef struct tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    } TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
    {
                    VARIANTARG *rgvarg;
                    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } DISPPARAMS;
# 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef struct tagEXCEPINFO {
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;



typedef
enum tagCALLCONV
    {
        CC_FASTCALL = 0,
        CC_CDECL = 1,
        CC_MSCPASCAL = ( CC_CDECL + 1 ) ,
        CC_PASCAL = CC_MSCPASCAL,
        CC_MACPASCAL = ( CC_PASCAL + 1 ) ,
        CC_STDCALL = ( CC_MACPASCAL + 1 ) ,
        CC_FPFASTCALL = ( CC_STDCALL + 1 ) ,
        CC_SYSCALL = ( CC_FPFASTCALL + 1 ) ,
        CC_MPWCDECL = ( CC_SYSCALL + 1 ) ,
        CC_MPWPASCAL = ( CC_MPWCDECL + 1 ) ,
        CC_MAX = ( CC_MPWPASCAL + 1 )
    } CALLCONV;

typedef
enum tagFUNCKIND
    {
        FUNC_VIRTUAL = 0,
        FUNC_PUREVIRTUAL = ( FUNC_VIRTUAL + 1 ) ,
        FUNC_NONVIRTUAL = ( FUNC_PUREVIRTUAL + 1 ) ,
        FUNC_STATIC = ( FUNC_NONVIRTUAL + 1 ) ,
        FUNC_DISPATCH = ( FUNC_STATIC + 1 )
    } FUNCKIND;

typedef
enum tagINVOKEKIND
    {
        INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8
    } INVOKEKIND;

typedef struct tagFUNCDESC
    {
    MEMBERID memid;
                    SCODE *lprgscode;
                    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef
enum tagVARKIND
    {
        VAR_PERINSTANCE = 0,
        VAR_STATIC = ( VAR_PERINSTANCE + 1 ) ,
        VAR_CONST = ( VAR_STATIC + 1 ) ,
        VAR_DISPATCH = ( VAR_CONST + 1 )
    } VARKIND;
# 868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef struct tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
                                   union
        {
                       ULONG oInst;
                       VARIANT *lpvarValue;
        } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef
enum tagTYPEFLAGS
    {
        TYPEFLAG_FAPPOBJECT = 0x1,
        TYPEFLAG_FCANCREATE = 0x2,
        TYPEFLAG_FLICENSED = 0x4,
        TYPEFLAG_FPREDECLID = 0x8,
        TYPEFLAG_FHIDDEN = 0x10,
        TYPEFLAG_FCONTROL = 0x20,
        TYPEFLAG_FDUAL = 0x40,
        TYPEFLAG_FNONEXTENSIBLE = 0x80,
        TYPEFLAG_FOLEAUTOMATION = 0x100,
        TYPEFLAG_FRESTRICTED = 0x200,
        TYPEFLAG_FAGGREGATABLE = 0x400,
        TYPEFLAG_FREPLACEABLE = 0x800,
        TYPEFLAG_FDISPATCHABLE = 0x1000,
        TYPEFLAG_FREVERSEBIND = 0x2000,
        TYPEFLAG_FPROXY = 0x4000
    } TYPEFLAGS;

typedef
enum tagFUNCFLAGS
    {
        FUNCFLAG_FRESTRICTED = 0x1,
        FUNCFLAG_FSOURCE = 0x2,
        FUNCFLAG_FBINDABLE = 0x4,
        FUNCFLAG_FREQUESTEDIT = 0x8,
        FUNCFLAG_FDISPLAYBIND = 0x10,
        FUNCFLAG_FDEFAULTBIND = 0x20,
        FUNCFLAG_FHIDDEN = 0x40,
        FUNCFLAG_FUSESGETLASTERROR = 0x80,
        FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
        FUNCFLAG_FUIDEFAULT = 0x200,
        FUNCFLAG_FNONBROWSABLE = 0x400,
        FUNCFLAG_FREPLACEABLE = 0x800,
        FUNCFLAG_FIMMEDIATEBIND = 0x1000
    } FUNCFLAGS;

typedef
enum tagVARFLAGS
    {
        VARFLAG_FREADONLY = 0x1,
        VARFLAG_FSOURCE = 0x2,
        VARFLAG_FBINDABLE = 0x4,
        VARFLAG_FREQUESTEDIT = 0x8,
        VARFLAG_FDISPLAYBIND = 0x10,
        VARFLAG_FDEFAULTBIND = 0x20,
        VARFLAG_FHIDDEN = 0x40,
        VARFLAG_FRESTRICTED = 0x80,
        VARFLAG_FDEFAULTCOLLELEM = 0x100,
        VARFLAG_FUIDEFAULT = 0x200,
        VARFLAG_FNONBROWSABLE = 0x400,
        VARFLAG_FREPLACEABLE = 0x800,
        VARFLAG_FIMMEDIATEBIND = 0x1000
    } VARFLAGS;

typedef struct tagCLEANLOCALSTORAGE
    {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    } CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
    {
    DWORD cCustData;
                    LPCUSTDATAITEM prgCustData;
    } CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
# 978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec;







typedef ICreateTypeInfo *LPCREATETYPEINFO;


extern "C" const IID IID_ICreateTypeInfo;



    struct __declspec(uuid("00020405-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGuid(
                       const GUID & guid) = 0;

        virtual HRESULT __stdcall SetTypeFlags(
                       UINT uTypeFlags) = 0;

        virtual HRESULT __stdcall SetDocString(

                       LPOLESTR pStrDoc) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetVersion(
                       WORD wMajorVerNum,
                       WORD wMinorVerNum) = 0;

        virtual HRESULT __stdcall AddRefTypeInfo(
                       ITypeInfo *pTInfo,
                       HREFTYPE *phRefType) = 0;

        virtual HRESULT __stdcall AddFuncDesc(
                       UINT index,
                       FUNCDESC *pFuncDesc) = 0;

        virtual HRESULT __stdcall AddImplType(
                       UINT index,
                       HREFTYPE hRefType) = 0;

        virtual HRESULT __stdcall SetImplTypeFlags(
                       UINT index,
                       INT implTypeFlags) = 0;

        virtual HRESULT __stdcall SetAlignment(
                       WORD cbAlignment) = 0;

        virtual HRESULT __stdcall SetSchema(

                       LPOLESTR pStrSchema) = 0;

        virtual HRESULT __stdcall AddVarDesc(
                       UINT index,
                       VARDESC *pVarDesc) = 0;

        virtual HRESULT __stdcall SetFuncAndParamNames(
                       UINT index,

                                      LPOLESTR *rgszNames,
                       UINT cNames) = 0;

        virtual HRESULT __stdcall SetVarName(
                       UINT index,

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetTypeDescAlias(
                       TYPEDESC *pTDescAlias) = 0;

        virtual HRESULT __stdcall DefineFuncAsDllEntry(
                       UINT index,

                       LPOLESTR szDllName,

                       LPOLESTR szProcName) = 0;

        virtual HRESULT __stdcall SetFuncDocString(
                       UINT index,

                       LPOLESTR szDocString) = 0;

        virtual HRESULT __stdcall SetVarDocString(
                       UINT index,

                       LPOLESTR szDocString) = 0;

        virtual HRESULT __stdcall SetFuncHelpContext(
                       UINT index,
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetVarHelpContext(
                       UINT index,
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetMops(
                       UINT index,

                  BSTR bstrMops) = 0;

        virtual HRESULT __stdcall SetTypeIdldesc(
                       IDLDESC *pIdlDesc) = 0;

        virtual HRESULT __stdcall LayOut( void) = 0;

    };
# 1337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;


extern "C" const IID IID_ICreateTypeInfo2;



    struct __declspec(uuid("0002040E-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo2 : public ICreateTypeInfo
    {
    public:
        virtual HRESULT __stdcall DeleteFuncDesc(
                       UINT index) = 0;

        virtual HRESULT __stdcall DeleteFuncDescByMemId(
                       MEMBERID memid,
                       INVOKEKIND invKind) = 0;

        virtual HRESULT __stdcall DeleteVarDesc(
                       UINT index) = 0;

        virtual HRESULT __stdcall DeleteVarDescByMemId(
                       MEMBERID memid) = 0;

        virtual HRESULT __stdcall DeleteImplType(
                       UINT index) = 0;

        virtual HRESULT __stdcall SetCustData(
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetFuncCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetVarCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetImplTypeCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetHelpStringContext(
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetFuncHelpStringContext(
                       UINT index,
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetVarHelpStringContext(
                       UINT index,
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall Invalidate( void) = 0;

        virtual HRESULT __stdcall SetName(

                       LPOLESTR szName) = 0;

    };
# 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef ICreateTypeLib *LPCREATETYPELIB;


extern "C" const IID IID_ICreateTypeLib;



    struct __declspec(uuid("00020406-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateTypeInfo(

                       LPOLESTR szName,
                       TYPEKIND tkind,
                        ICreateTypeInfo **ppCTInfo) = 0;

        virtual HRESULT __stdcall SetName(

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetVersion(
                       WORD wMajorVerNum,
                       WORD wMinorVerNum) = 0;

        virtual HRESULT __stdcall SetGuid(
                       const GUID & guid) = 0;

        virtual HRESULT __stdcall SetDocString(

                       LPOLESTR szDoc) = 0;

        virtual HRESULT __stdcall SetHelpFileName(

                       LPOLESTR szHelpFileName) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetLcid(
                       LCID lcid) = 0;

        virtual HRESULT __stdcall SetLibFlags(
                       UINT uLibFlags) = 0;

        virtual HRESULT __stdcall SaveAllChanges( void) = 0;

    };
# 1955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef ICreateTypeLib2 *LPCREATETYPELIB2;


extern "C" const IID IID_ICreateTypeLib2;



    struct __declspec(uuid("0002040F-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib2 : public ICreateTypeLib
    {
    public:
        virtual HRESULT __stdcall DeleteTypeInfo(

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetCustData(
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetHelpStringContext(
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetHelpStringDll(

                       LPOLESTR szFileName) = 0;

    };
# 2153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec;







typedef IDispatch *LPDISPATCH;
# 2196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern "C" const IID IID_IDispatch;



    struct __declspec(uuid("00020400-0000-0000-C000-000000000046")) __declspec(novtable)
    IDispatch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeInfoCount(
                                   UINT *pctinfo) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                       UINT iTInfo,
                       LCID lcid,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall GetIDsOfNames(
                                 const IID & riid,
                                                              LPOLESTR *rgszNames,
                                                       UINT cNames,
                       LCID lcid,
                                                                DISPID *rgDispId) = 0;

        virtual HRESULT __stdcall Invoke(

                  DISPID dispIdMember,

                  const IID & riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr) = 0;

    };
# 2337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
                HRESULT __stdcall IDispatch_RemoteInvoke_Proxy(
              IDispatch * This,
               DISPID dispIdMember,
                         const IID & riid,
               LCID lcid,
               DWORD dwFlags,
                         DISPPARAMS *pDispParams,
                           VARIANT *pVarResult,
                           EXCEPINFO *pExcepInfo,
                           UINT *pArgErr,
               UINT cVarRef,
                                                       UINT *rgVarRefIdx,
                                                               VARIANTARG *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef IEnumVARIANT *LPENUMVARIANT;


extern "C" const IID IID_IEnumVARIANT;



    struct __declspec(uuid("00020404-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumVARIANT : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,
                                            VARIANT *rgVar,
                        ULONG *pCeltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumVARIANT **ppEnum) = 0;

    };
# 2473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
                HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy(
              IEnumVARIANT * This,
               ULONG celt,
                                                                                VARIANT *rgVar,
                           ULONG *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef ITypeComp *LPTYPECOMP;

typedef
enum tagDESCKIND
    {
        DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = ( DESCKIND_NONE + 1 ) ,
        DESCKIND_VARDESC = ( DESCKIND_FUNCDESC + 1 ) ,
        DESCKIND_TYPECOMP = ( DESCKIND_VARDESC + 1 ) ,
        DESCKIND_IMPLICITAPPOBJ = ( DESCKIND_TYPECOMP + 1 ) ,
        DESCKIND_MAX = ( DESCKIND_IMPLICITAPPOBJ + 1 )
    } DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;


extern "C" const IID IID_ITypeComp;



    struct __declspec(uuid("00020403-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeComp : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Bind(

                       LPOLESTR szName,
                       ULONG lHashVal,
                       WORD wFlags,
                        ITypeInfo **ppTInfo,
                        DESCKIND *pDescKind,
                        BINDPTR *pBindPtr) = 0;

        virtual HRESULT __stdcall BindType(

                       LPOLESTR szName,
                       ULONG lHashVal,
                        ITypeInfo **ppTInfo,
                        ITypeComp **ppTComp) = 0;

    };
# 2619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
                HRESULT __stdcall ITypeComp_RemoteBind_Proxy(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                                     ITypeInfo **ppTInfo,
                           DESCKIND *pDescKind,
                                     LPFUNCDESC *ppFuncDesc,
                                     LPVARDESC *ppVarDesc,
                                     ITypeComp **ppTypeComp,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeComp_RemoteBindType_Proxy(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
                                     ITypeInfo **ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec;







typedef ITypeInfo *LPTYPEINFO;


extern "C" const IID IID_ITypeInfo;



    struct __declspec(uuid("00020401-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeAttr(
                        TYPEATTR **ppTypeAttr) = 0;

        virtual HRESULT __stdcall GetTypeComp(
                                             ITypeComp **ppTComp) = 0;

        virtual HRESULT __stdcall GetFuncDesc(
                       UINT index,
                        FUNCDESC **ppFuncDesc) = 0;

        virtual HRESULT __stdcall GetVarDesc(
                       UINT index,
                        VARDESC **ppVarDesc) = 0;

        virtual HRESULT __stdcall GetNames(
                       MEMBERID memid,

                                                         BSTR *rgBstrNames,
                       UINT cMaxNames,

                        UINT *pcNames) = 0;

        virtual HRESULT __stdcall GetRefTypeOfImplType(
                       UINT index,
                                   HREFTYPE *pRefType) = 0;

        virtual HRESULT __stdcall GetImplTypeFlags(
                       UINT index,
                                   INT *pImplTypeFlags) = 0;

        virtual HRESULT __stdcall GetIDsOfNames(

                                      LPOLESTR *rgszNames,
                       UINT cNames,
                                 MEMBERID *pMemId) = 0;

        virtual HRESULT __stdcall Invoke(
                       PVOID pvInstance,
                       MEMBERID memid,
                       WORD wFlags,
                            DISPPARAMS *pDispParams,
                        VARIANT *pVarResult,
                        EXCEPINFO *pExcepInfo,
                        UINT *puArgErr) = 0;

        virtual HRESULT __stdcall GetDocumentation(
                       MEMBERID memid,

                          BSTR *pBstrName,

                          BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,

                          BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall GetDllEntry(
                       MEMBERID memid,
                       INVOKEKIND invKind,

                          BSTR *pBstrDllName,

                          BSTR *pBstrName,
                        WORD *pwOrdinal) = 0;

        virtual HRESULT __stdcall GetRefTypeInfo(
                       HREFTYPE hRefType,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall AddressOfMember(
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        PVOID *ppv) = 0;

        virtual HRESULT __stdcall CreateInstance(
                       IUnknown *pUnkOuter,
                       const IID & riid,
                                PVOID *ppvObj) = 0;

        virtual HRESULT __stdcall GetMops(
                       MEMBERID memid,
                                             BSTR *pBstrMops) = 0;

        virtual HRESULT __stdcall GetContainingTypeLib(
                        ITypeLib **ppTLib,
                        UINT *pIndex) = 0;

        virtual void __stdcall ReleaseTypeAttr(
                       TYPEATTR *pTypeAttr) = 0;

        virtual void __stdcall ReleaseFuncDesc(
                       FUNCDESC *pFuncDesc) = 0;

        virtual void __stdcall ReleaseVarDesc(
                       VARDESC *pVarDesc) = 0;

    };
# 3003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
                HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy(
              ITypeInfo * This,
                                     LPTYPEATTR *ppTypeAttr,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy(
              ITypeInfo * This,
               UINT index,
                                     LPFUNCDESC *ppFuncDesc,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy(
              ITypeInfo * This,
               UINT index,
                                     LPVARDESC *ppVarDesc,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
                                                                                BSTR *rgBstrNames,
               UINT cMaxNames,
                           UINT *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                                     BSTR *pBstrDllName,
                                     BSTR *pBstrName,
                           WORD *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy(
              ITypeInfo * This,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy(
              ITypeInfo * This,
                                     ITypeLib **ppTLib,
                           UINT *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef ITypeInfo2 *LPTYPEINFO2;


extern "C" const IID IID_ITypeInfo2;



    struct __declspec(uuid("00020412-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo2 : public ITypeInfo
    {
    public:
        virtual HRESULT __stdcall GetTypeKind(
                                   TYPEKIND *pTypeKind) = 0;

        virtual HRESULT __stdcall GetTypeFlags(
                                   ULONG *pTypeFlags) = 0;

        virtual HRESULT __stdcall GetFuncIndexOfMemId(
                       MEMBERID memid,
                       INVOKEKIND invKind,
                                   UINT *pFuncIndex) = 0;

        virtual HRESULT __stdcall GetVarIndexOfMemId(
                       MEMBERID memid,
                                   UINT *pVarIndex) = 0;

        virtual HRESULT __stdcall GetCustData(
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetFuncCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetVarCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetImplTypeCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetDocumentation2(
                       MEMBERID memid,
                       LCID lcid,

                          BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,

                          BSTR *pbstrHelpStringDll) = 0;

        virtual HRESULT __stdcall GetAllCustData(
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllFuncCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllVarCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllImplTypeCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

    };
# 3627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
                HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy(
              ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec;







typedef
enum tagSYSKIND
    {
        SYS_WIN16 = 0,
        SYS_WIN32 = ( SYS_WIN16 + 1 ) ,
        SYS_MAC = ( SYS_WIN32 + 1 ) ,
        SYS_WIN64 = ( SYS_MAC + 1 )
    } SYSKIND;

typedef
enum tagLIBFLAGS
    {
        LIBFLAG_FRESTRICTED = 0x1,
        LIBFLAG_FCONTROL = 0x2,
        LIBFLAG_FHIDDEN = 0x4,
        LIBFLAG_FHASDISKIMAGE = 0x8
    } LIBFLAGS;

typedef ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    } TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;


extern "C" const IID IID_ITypeLib;



    struct __declspec(uuid("00020402-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib : public IUnknown
    {
    public:
        virtual UINT __stdcall GetTypeInfoCount( void) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                       UINT index,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall GetTypeInfoType(
                       UINT index,
                                   TYPEKIND *pTKind) = 0;

        virtual HRESULT __stdcall GetTypeInfoOfGuid(
                                 const GUID & guid,
                                             ITypeInfo **ppTinfo) = 0;

        virtual HRESULT __stdcall GetLibAttr(
                        TLIBATTR **ppTLibAttr) = 0;

        virtual HRESULT __stdcall GetTypeComp(
                                             ITypeComp **ppTComp) = 0;

        virtual HRESULT __stdcall GetDocumentation(
                       INT index,

                          BSTR *pBstrName,

                          BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,

                          BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall IsName(

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                        BOOL *pfName) = 0;

        virtual HRESULT __stdcall FindName(

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                                            ITypeInfo **ppTInfo,
                                            MEMBERID *rgMemId,
                            USHORT *pcFound) = 0;

        virtual void __stdcall ReleaseTLibAttr(
                       TLIBATTR *pTLibAttr) = 0;

    };
# 3892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
                HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy(
              ITypeLib * This,
                           UINT *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy(
              ITypeLib * This,
                                     LPTLIBATTR *ppTLibAttr,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy(
              ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteIsName_Proxy(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                           BOOL *pfName,
                                     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteFindName_Proxy(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                                                                               ITypeInfo **ppTInfo,
                                                                               MEMBERID *rgMemId,
                                 USHORT *pcFound,
                                     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy(
              ITypeLib * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec;







typedef ITypeLib2 *LPTYPELIB2;


extern "C" const IID IID_ITypeLib2;



    struct __declspec(uuid("00020411-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib2 : public ITypeLib
    {
    public:
        virtual HRESULT __stdcall GetCustData(
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetLibStatistics(
                        ULONG *pcUniqueNames,
                        ULONG *pcchUniqueNames) = 0;

        virtual HRESULT __stdcall GetDocumentation2(
                       INT index,
                       LCID lcid,

                          BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,

                          BSTR *pbstrHelpStringDll) = 0;

        virtual HRESULT __stdcall GetAllCustData(
                                   CUSTDATA *pCustData) = 0;

    };
# 4205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
                HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy(
              ITypeLib2 * This,
                           ULONG *pcUniqueNames,
                           ULONG *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy(
              ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef
enum tagCHANGEKIND
    {
        CHANGEKIND_ADDMEMBER = 0,
        CHANGEKIND_DELETEMEMBER = ( CHANGEKIND_ADDMEMBER + 1 ) ,
        CHANGEKIND_SETNAMES = ( CHANGEKIND_DELETEMEMBER + 1 ) ,
        CHANGEKIND_SETDOCUMENTATION = ( CHANGEKIND_SETNAMES + 1 ) ,
        CHANGEKIND_GENERAL = ( CHANGEKIND_SETDOCUMENTATION + 1 ) ,
        CHANGEKIND_INVALIDATE = ( CHANGEKIND_GENERAL + 1 ) ,
        CHANGEKIND_CHANGEFAILED = ( CHANGEKIND_INVALIDATE + 1 ) ,
        CHANGEKIND_MAX = ( CHANGEKIND_CHANGEFAILED + 1 )
    } CHANGEKIND;


extern "C" const IID IID_ITypeChangeEvents;



    struct __declspec(uuid("00020410-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeChangeEvents : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RequestTypeChange(
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoBefore,

                       LPOLESTR pStrName,
                        INT *pfCancel) = 0;

        virtual HRESULT __stdcall AfterTypeChange(
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoAfter,

                       LPOLESTR pStrName) = 0;

    };
# 4364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef IErrorInfo *LPERRORINFO;


extern "C" const IID IID_IErrorInfo;



    struct __declspec(uuid("1CF2B120-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    IErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetGUID(
                                   GUID *pGUID) = 0;

        virtual HRESULT __stdcall GetSource(
                                             BSTR *pBstrSource) = 0;

        virtual HRESULT __stdcall GetDescription(
                                             BSTR *pBstrDescription) = 0;

        virtual HRESULT __stdcall GetHelpFile(
                                             BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall GetHelpContext(
                                   DWORD *pdwHelpContext) = 0;

    };
# 4486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef ICreateErrorInfo *LPCREATEERRORINFO;


extern "C" const IID IID_ICreateErrorInfo;



    struct __declspec(uuid("22F03340-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    ICreateErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGUID(
                                 const GUID & rguid) = 0;

        virtual HRESULT __stdcall SetSource(
                                 LPOLESTR szSource) = 0;

        virtual HRESULT __stdcall SetDescription(
                                 LPOLESTR szDescription) = 0;

        virtual HRESULT __stdcall SetHelpFile(
                                 LPOLESTR szHelpFile) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

    };
# 4608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;


extern "C" const IID IID_ISupportErrorInfo;



    struct __declspec(uuid("DF0B3D60-548F-101B-8E65-08002B2BD119")) __declspec(novtable)
    ISupportErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall InterfaceSupportsErrorInfo(
                                 const IID & riid) = 0;

    };
# 4691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern "C" const IID IID_ITypeFactory;



    struct __declspec(uuid("0000002E-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateFromTypeInfo(
                                     ITypeInfo *pTypeInfo,
                                 const IID & riid,
                                                     IUnknown **ppv) = 0;

    };
# 4775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern "C" const IID IID_ITypeMarshal;



    struct __declspec(uuid("0000002D-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Size(
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                        ULONG *pSize) = 0;

        virtual HRESULT __stdcall Marshal(
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                       ULONG cbBufferLength,

                                                                BYTE *pBuffer,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall Unmarshal(
                        PVOID pvType,
                       DWORD dwFlags,
                       ULONG cbBufferLength,

                                        BYTE *pBuffer,

                   ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Free(
                       PVOID pvType) = 0;

    };
# 4916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef IRecordInfo *LPRECORDINFO;


extern "C" const IID IID_IRecordInfo;



    struct __declspec(uuid("0000002F-0000-0000-C000-000000000046")) __declspec(novtable)
    IRecordInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RecordInit(
                        PVOID pvNew) = 0;

        virtual HRESULT __stdcall RecordClear(
                       PVOID pvExisting) = 0;

        virtual HRESULT __stdcall RecordCopy(
                       PVOID pvExisting,
                        PVOID pvNew) = 0;

        virtual HRESULT __stdcall GetGuid(
                        GUID *pguid) = 0;

        virtual HRESULT __stdcall GetName(

                                  BSTR *pbstrName) = 0;

        virtual HRESULT __stdcall GetSize(
                        ULONG *pcbSize) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                        ITypeInfo **ppTypeInfo) = 0;

        virtual HRESULT __stdcall GetField(
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall GetFieldNoCopy(
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField,
                        PVOID *ppvDataCArray) = 0;

        virtual HRESULT __stdcall PutField(
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall PutFieldNoCopy(
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall GetFieldNames(
                            ULONG *pcNames,

                                                        BSTR *rgBstrNames) = 0;

        virtual BOOL __stdcall IsMatchingType(
                       IRecordInfo *pRecordInfo) = 0;

        virtual PVOID __stdcall RecordCreate( void) = 0;

        virtual HRESULT __stdcall RecordCreateCopy(
                       PVOID pvSource,
                        PVOID *ppvDest) = 0;

        virtual HRESULT __stdcall RecordDestroy(
                       PVOID pvRecord) = 0;

    };
# 5178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef IErrorLog *LPERRORLOG;


extern "C" const IID IID_IErrorLog;



    struct __declspec(uuid("3127CA40-446E-11CE-8135-00AA004BB851")) __declspec(novtable)
    IErrorLog : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddError(
                                 LPCOLESTR pszPropName,
                                 EXCEPINFO *pExcepInfo) = 0;

    };
# 5262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
typedef IPropertyBag *LPPROPERTYBAG;


extern "C" const IID IID_IPropertyBag;



    struct __declspec(uuid("55272A00-42CB-11CE-8135-00AA004BB851")) __declspec(novtable)
    IPropertyBag : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read(
                       LPCOLESTR pszPropName,
                            VARIANT *pVar,
                               IErrorLog *pErrorLog) = 0;

        virtual HRESULT __stdcall Write(
                                 LPCOLESTR pszPropName,
                                 VARIANT *pVar) = 0;

    };
# 5350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
                HRESULT __stdcall IPropertyBag_RemoteRead_Proxy(
              IPropertyBag * This,
                         LPCOLESTR pszPropName,
                           VARIANT *pVar,
                                     IErrorLog *pErrorLog,
               DWORD varType,
                             IUnknown *pUnkObj);


void __stdcall IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern "C" const IID IID_ITypeLibRegistrationReader;



    struct __declspec(uuid("ED6A8A2A-B160-4E77-8F73-AA7435CD5C27")) __declspec(novtable)
    ITypeLibRegistrationReader : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnumTypeLibRegistrations(
                        IEnumUnknown **ppEnumUnknown) = 0;

    };
# 5457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern "C" const IID IID_ITypeLibRegistration;



    struct __declspec(uuid("76A3E735-02DF-4A12-98EB-043AD3600AF3")) __declspec(novtable)
    ITypeLibRegistration : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetGuid(
                        GUID *pGuid) = 0;

        virtual HRESULT __stdcall GetVersion(
                        BSTR *pVersion) = 0;

        virtual HRESULT __stdcall GetLcid(
                        LCID *pLcid) = 0;

        virtual HRESULT __stdcall GetWin32Path(
                        BSTR *pWin32Path) = 0;

        virtual HRESULT __stdcall GetWin64Path(
                        BSTR *pWin64Path) = 0;

        virtual HRESULT __stdcall GetDisplayName(
                        BSTR *pDisplayName) = 0;

        virtual HRESULT __stdcall GetFlags(
                        DWORD *pFlags) = 0;

        virtual HRESULT __stdcall GetHelpDir(
                        BSTR *pHelpDir) = 0;

    };
# 5603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oaidl.h" 3
extern "C" const CLSID CLSID_TypeLibRegistrationReader;




#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall CLEANLOCALSTORAGE_UserSize( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserMarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserUnmarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long __stdcall VARIANT_UserSize( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree( unsigned long *, VARIANT * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall CLEANLOCALSTORAGE_UserSize64( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserMarshal64( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserUnmarshal64( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree64( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long __stdcall VARIANT_UserSize64( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal64( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal64( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree64( unsigned long *, VARIANT * );

              HRESULT __stdcall IDispatch_Invoke_Proxy(
    IDispatch * This,

          DISPID dispIdMember,

          const IID & riid,

          LCID lcid,

          WORD wFlags,

          DISPPARAMS *pDispParams,

               VARIANT *pVarResult,

               EXCEPINFO *pExcepInfo,

               UINT *puArgErr);


                HRESULT __stdcall IDispatch_Invoke_Stub(
              IDispatch * This,
               DISPID dispIdMember,
                         const IID & riid,
               LCID lcid,
               DWORD dwFlags,
                         DISPPARAMS *pDispParams,
                           VARIANT *pVarResult,
                           EXCEPINFO *pExcepInfo,
                           UINT *pArgErr,
               UINT cVarRef,
                                                       UINT *rgVarRefIdx,
                                                               VARIANTARG *rgVarRef);

              HRESULT __stdcall IEnumVARIANT_Next_Proxy(
    IEnumVARIANT * This,
               ULONG celt,
                                    VARIANT *rgVar,
                ULONG *pCeltFetched);


                HRESULT __stdcall IEnumVARIANT_Next_Stub(
              IEnumVARIANT * This,
               ULONG celt,
                                                                                VARIANT *rgVar,
                           ULONG *pCeltFetched);

              HRESULT __stdcall ITypeComp_Bind_Proxy(
    ITypeComp * This,

               LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                ITypeInfo **ppTInfo,
                DESCKIND *pDescKind,
                BINDPTR *pBindPtr);


                HRESULT __stdcall ITypeComp_Bind_Stub(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                                     ITypeInfo **ppTInfo,
                           DESCKIND *pDescKind,
                                     LPFUNCDESC *ppFuncDesc,
                                     LPVARDESC *ppVarDesc,
                                     ITypeComp **ppTypeComp,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeComp_BindType_Proxy(
    ITypeComp * This,

               LPOLESTR szName,
               ULONG lHashVal,
                ITypeInfo **ppTInfo,
                ITypeComp **ppTComp);


                HRESULT __stdcall ITypeComp_BindType_Stub(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
                                     ITypeInfo **ppTInfo);

              HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo * This,
                TYPEATTR **ppTypeAttr);


                HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub(
              ITypeInfo * This,
                                     LPTYPEATTR *ppTypeAttr,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                FUNCDESC **ppFuncDesc);


                HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub(
              ITypeInfo * This,
               UINT index,
                                     LPFUNCDESC *ppFuncDesc,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                VARDESC **ppVarDesc);


                HRESULT __stdcall ITypeInfo_GetVarDesc_Stub(
              ITypeInfo * This,
               UINT index,
                                     LPVARDESC *ppVarDesc,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetNames_Proxy(
    ITypeInfo * This,
               MEMBERID memid,

                                                 BSTR *rgBstrNames,
               UINT cMaxNames,

                UINT *pcNames);


                HRESULT __stdcall ITypeInfo_GetNames_Stub(
              ITypeInfo * This,
               MEMBERID memid,
                                                                                BSTR *rgBstrNames,
               UINT cMaxNames,
                           UINT *pcNames);

              HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo * This,

                              LPOLESTR *rgszNames,
               UINT cNames,
                         MEMBERID *pMemId);


                        HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_Invoke_Proxy(
    ITypeInfo * This,
               PVOID pvInstance,
               MEMBERID memid,
               WORD wFlags,
                    DISPPARAMS *pDispParams,
                VARIANT *pVarResult,
                EXCEPINFO *pExcepInfo,
                UINT *puArgErr);


                        HRESULT __stdcall ITypeInfo_Invoke_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo * This,
               MEMBERID memid,

                  BSTR *pBstrName,

                  BSTR *pBstrDocString,
                DWORD *pdwHelpContext,

                  BSTR *pBstrHelpFile);


                HRESULT __stdcall ITypeInfo_GetDocumentation_Stub(
              ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);

              HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,

                  BSTR *pBstrDllName,

                  BSTR *pBstrName,
                WORD *pwOrdinal);


                HRESULT __stdcall ITypeInfo_GetDllEntry_Stub(
              ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                                     BSTR *pBstrDllName,
                                     BSTR *pBstrName,
                           WORD *pwOrdinal);

              HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                PVOID *ppv);


                        HRESULT __stdcall ITypeInfo_AddressOfMember_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_CreateInstance_Proxy(
    ITypeInfo * This,
               IUnknown *pUnkOuter,
               const IID & riid,
                        PVOID *ppvObj);


                HRESULT __stdcall ITypeInfo_CreateInstance_Stub(
              ITypeInfo * This,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo * This,
                ITypeLib **ppTLib,
                UINT *pIndex);


                HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub(
              ITypeInfo * This,
                                     ITypeLib **ppTLib,
                           UINT *pIndex);

              void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo * This,
               TYPEATTR *pTypeAttr);


                        HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub(
              ITypeInfo * This);

              void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo * This,
               FUNCDESC *pFuncDesc);


                        HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub(
              ITypeInfo * This);

              void __stdcall ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo * This,
               VARDESC *pVarDesc);


                        HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,

                  BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,

                  BSTR *pbstrHelpStringDll);


                HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub(
              ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);

              UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib * This);


                HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub(
              ITypeLib * This,
                           UINT *pcTInfo);

              HRESULT __stdcall ITypeLib_GetLibAttr_Proxy(
    ITypeLib * This,
                TLIBATTR **ppTLibAttr);


                HRESULT __stdcall ITypeLib_GetLibAttr_Stub(
              ITypeLib * This,
                                     LPTLIBATTR *ppTLibAttr,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeLib_GetDocumentation_Proxy(
    ITypeLib * This,
               INT index,

                  BSTR *pBstrName,

                  BSTR *pBstrDocString,
                DWORD *pdwHelpContext,

                  BSTR *pBstrHelpFile);


                HRESULT __stdcall ITypeLib_GetDocumentation_Stub(
              ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);

              HRESULT __stdcall ITypeLib_IsName_Proxy(
    ITypeLib * This,

                  LPOLESTR szNameBuf,
               ULONG lHashVal,
                BOOL *pfName);


                HRESULT __stdcall ITypeLib_IsName_Stub(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                           BOOL *pfName,
                                     BSTR *pBstrLibName);

              HRESULT __stdcall ITypeLib_FindName_Proxy(
    ITypeLib * This,

                  LPOLESTR szNameBuf,
               ULONG lHashVal,
                                    ITypeInfo **ppTInfo,
                                    MEMBERID *rgMemId,
                    USHORT *pcFound);


                HRESULT __stdcall ITypeLib_FindName_Stub(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                                                                               ITypeInfo **ppTInfo,
                                                                               MEMBERID *rgMemId,
                                 USHORT *pcFound,
                                     BSTR *pBstrLibName);

              void __stdcall ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib * This,
               TLIBATTR *pTLibAttr);


                        HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub(
              ITypeLib * This);

              HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2 * This,
                ULONG *pcUniqueNames,
                ULONG *pcchUniqueNames);


                HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub(
              ITypeLib2 * This,
                           ULONG *pcUniqueNames,
                           ULONG *pcchUniqueNames);

              HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2 * This,
               INT index,
               LCID lcid,

                  BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,

                  BSTR *pbstrHelpStringDll);


                HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub(
              ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);

              HRESULT __stdcall IPropertyBag_Read_Proxy(
    IPropertyBag * This,
               LPCOLESTR pszPropName,
                    VARIANT *pVar,
                       IErrorLog *pErrorLog);


                HRESULT __stdcall IPropertyBag_Read_Stub(
              IPropertyBag * This,
                         LPCOLESTR pszPropName,
                           VARIANT *pVar,
                                     IErrorLog *pErrorLog,
               DWORD varType,
                             IUnknown *pUnkObj);






}
# 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 2 3



extern "C"{
# 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)

#pragma warning(disable: 4201)
#pragma warning(disable: 4237)
# 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef struct tagVersionedStream
    {
    GUID guidVersion;
    IStream *pStream;
    } VERSIONEDSTREAM;

typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
# 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef struct tagPROPVARIANT PROPVARIANT;

typedef struct tagCAC
    {
    ULONG cElems;
                    CHAR *pElems;
    } CAC;

typedef struct tagCAUB
    {
    ULONG cElems;
                    UCHAR *pElems;
    } CAUB;

typedef struct tagCAI
    {
    ULONG cElems;
                    SHORT *pElems;
    } CAI;

typedef struct tagCAUI
    {
    ULONG cElems;
                    USHORT *pElems;
    } CAUI;

typedef struct tagCAL
    {
    ULONG cElems;
                    LONG *pElems;
    } CAL;

typedef struct tagCAUL
    {
    ULONG cElems;
                    ULONG *pElems;
    } CAUL;

typedef struct tagCAFLT
    {
    ULONG cElems;
                    FLOAT *pElems;
    } CAFLT;

typedef struct tagCADBL
    {
    ULONG cElems;
                    DOUBLE *pElems;
    } CADBL;

typedef struct tagCACY
    {
    ULONG cElems;
                    CY *pElems;
    } CACY;

typedef struct tagCADATE
    {
    ULONG cElems;
                    DATE *pElems;
    } CADATE;

typedef struct tagCABSTR
    {
    ULONG cElems;
                    BSTR *pElems;
    } CABSTR;

typedef struct tagCABSTRBLOB
    {
    ULONG cElems;
                    BSTRBLOB *pElems;
    } CABSTRBLOB;

typedef struct tagCABOOL
    {
    ULONG cElems;
                    VARIANT_BOOL *pElems;
    } CABOOL;

typedef struct tagCASCODE
    {
    ULONG cElems;
                    SCODE *pElems;
    } CASCODE;

typedef struct tagCAPROPVARIANT
    {
    ULONG cElems;
                    PROPVARIANT *pElems;
    } CAPROPVARIANT;

typedef struct tagCAH
    {
    ULONG cElems;
                    LARGE_INTEGER *pElems;
    } CAH;

typedef struct tagCAUH
    {
    ULONG cElems;
                    ULARGE_INTEGER *pElems;
    } CAUH;

typedef struct tagCALPSTR
    {
    ULONG cElems;
                    LPSTR *pElems;
    } CALPSTR;

typedef struct tagCALPWSTR
    {
    ULONG cElems;
                    LPWSTR *pElems;
    } CALPWSTR;

typedef struct tagCAFILETIME
    {
    ULONG cElems;
                    FILETIME *pElems;
    } CAFILETIME;

typedef struct tagCACLIPDATA
    {
    ULONG cElems;
                    CLIPDATA *pElems;
    } CACLIPDATA;

typedef struct tagCACLSID
    {
    ULONG cElems;
                    CLSID *pElems;
    } CACLSID;
# 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;
# 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
struct tagPROPVARIANT {
  union {

struct
    {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
                                          union
        {

                       CHAR cVal;
                       UCHAR bVal;
                       SHORT iVal;
                       USHORT uiVal;
                       LONG lVal;
                       ULONG ulVal;
                       INT intVal;
                       UINT uintVal;
                       LARGE_INTEGER hVal;
                       ULARGE_INTEGER uhVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;

                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       FILETIME filetime;
                       CLSID *puuid;
                       CLIPDATA *pclipdata;
                       BSTR bstrVal;
                       BSTRBLOB bstrblobVal;
                       BLOB blob;
                       LPSTR pszVal;
                       LPWSTR pwszVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       IStream *pStream;
                       IStorage *pStorage;
                       LPVERSIONEDSTREAM pVersionedStream;
                       LPSAFEARRAY parray;
                       CAC cac;
                       CAUB caub;
                       CAI cai;
                       CAUI caui;
                       CAL cal;
                       CAUL caul;
                       CAH cah;
                       CAUH cauh;
                       CAFLT caflt;
                       CADBL cadbl;
                       CABOOL cabool;
                       CASCODE cascode;
                       CACY cacy;
                       CADATE cadate;
                       CAFILETIME cafiletime;
                       CACLSID cauuid;
                       CACLIPDATA caclipdata;
                       CABSTR cabstr;
                       CABSTRBLOB cabstrblob;
                       CALPSTR calpstr;
                       CALPWSTR calpwstr;
                       CAPROPVARIANT capropvar;
                       CHAR *pcVal;
                       UCHAR *pbVal;
                       SHORT *piVal;
                       USHORT *puiVal;
                       LONG *plVal;
                       ULONG *pulVal;
                       INT *pintVal;
                       UINT *puintVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       DECIMAL *pdecVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       BSTR *pbstrVal;
                       IUnknown **ppunkVal;
                       IDispatch **ppdispVal;
                       LPSAFEARRAY *pparray;
                       PROPVARIANT *pvarVal;
        } ;
    } ;

    DECIMAL decVal;
  };
};
# 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef struct tagPROPVARIANT * LPPROPVARIANT;
# 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef struct tagPROPSPEC
    {
    ULONG ulKind;
                                          union
        {
                       PROPID propid;
                       LPOLESTR lpwstr;

        } ;
    } PROPSPEC;

typedef struct tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    } STATPROPSTG;






typedef struct tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    } STATPROPSETSTG;



extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec;
# 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
extern "C" const IID IID_IPropertyStorage;



    struct __declspec(uuid("00000138-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertyStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ],
                                                                PROPVARIANT rgpropvar[ ]) = 0;

        virtual HRESULT __stdcall WriteMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ],
                                                              const PROPVARIANT rgpropvar[ ],
                       PROPID propidNameFirst) = 0;

        virtual HRESULT __stdcall DeleteMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ]) = 0;

        virtual HRESULT __stdcall ReadPropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ],
                                                                 LPOLESTR rglpwstrName[ ]) = 0;

        virtual HRESULT __stdcall WritePropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ],
                                                               const LPOLESTR rglpwstrName[ ]) = 0;

        virtual HRESULT __stdcall DeletePropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ]) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall Enum(
                                             IEnumSTATPROPSTG **ppenum) = 0;

        virtual HRESULT __stdcall SetTimes(
                                 const FILETIME *pctime,
                                 const FILETIME *patime,
                                 const FILETIME *pmtime) = 0;

        virtual HRESULT __stdcall SetClass(
                                 const IID & clsid) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATPROPSETSTG *pstatpsstg) = 0;

    };
# 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;


extern "C" const IID IID_IPropertySetStorage;



    struct __declspec(uuid("0000013A-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertySetStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Create(
                                 const IID & rfmtid,
                                             const CLSID *pclsid,
                       DWORD grfFlags,
                       DWORD grfMode,
                                             IPropertyStorage **ppprstg) = 0;

        virtual HRESULT __stdcall Open(
                                 const IID & rfmtid,
                       DWORD grfMode,
                                             IPropertyStorage **ppprstg) = 0;

        virtual HRESULT __stdcall Delete(
                                 const IID & rfmtid) = 0;

        virtual HRESULT __stdcall Enum(
                                             IEnumSTATPROPSETSTG **ppenum) = 0;

    };
# 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;


extern "C" const IID IID_IEnumSTATPROPSTG;



    struct __declspec(uuid("00000139-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                  STATPROPSTG *rgelt,

                                                  ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATPROPSTG **ppenum) = 0;

    };
# 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
                HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;


extern "C" const IID IID_IEnumSTATPROPSETSTG;



    struct __declspec(uuid("0000013B-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSETSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                  STATPROPSETSTG *rgelt,

                                                  ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATPROPSETSTG **ppenum) = 0;

    };
# 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
                HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidlbase.h" 3
typedef IPropertyStorage *LPPROPERTYSTORAGE;







#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree( unsigned long *, LPSAFEARRAY * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize64( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree64( unsigned long *, LPSAFEARRAY * );

              HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt,

                                          STATPROPSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,

                                          STATPROPSETSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);






}
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\coml2api.h" 2 3
# 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\coml2api.h" 3
typedef DWORD STGFMT;
# 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\coml2api.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall
StgCreateDocfile(
                               const WCHAR * pwcsName,
         DWORD grfMode,
               DWORD reserved,
             IStorage ** ppstgOpen
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgCreateDocfileOnILockBytes(
         ILockBytes * plkbyt,
         DWORD grfMode,
         DWORD reserved,
             IStorage ** ppstgOpen
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgOpenStorage(
                               const WCHAR * pwcsName,
             IStorage * pstgPriority,
         DWORD grfMode,
               SNB snbExclude,
         DWORD reserved,
             IStorage ** ppstgOpen
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgOpenStorageOnILockBytes(
         ILockBytes * plkbyt,
             IStorage * pstgPriority,
         DWORD grfMode,
               SNB snbExclude,
               DWORD reserved,
             IStorage ** ppstgOpen
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgIsStorageFile(
                           const WCHAR * pwcsName
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgIsStorageILockBytes(
         ILockBytes * plkbyt
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgSetTimes(
                           const WCHAR * lpszName,
             const FILETIME * pctime,
             const FILETIME * patime,
             const FILETIME * pmtime
    );
# 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\coml2api.h" 3
typedef struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;


    const WCHAR *pwcsTemplateFile;

} STGOPTIONS;


extern "C" __declspec(dllimport) HRESULT __stdcall
StgCreateStorageEx(
                               const WCHAR * pwcsName,
         DWORD grfMode,
         DWORD stgfmt,
         DWORD grfAttrs,
                STGOPTIONS * pStgOptions,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
         const IID & riid,
             void ** ppObjectOpen
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgOpenStorageEx(
                           const WCHAR * pwcsName,
         DWORD grfMode,
         DWORD stgfmt,
         DWORD grfAttrs,
                STGOPTIONS * pStgOptions,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
         const IID & riid,
             void ** ppObjectOpen
    );





extern "C" __declspec(dllimport) HRESULT __stdcall
StgCreatePropStg(
         IUnknown * pUnk,
         const IID & fmtid,
         const CLSID * pclsid,
         DWORD grfFlags,
               DWORD dwReserved,
             IPropertyStorage ** ppPropStg
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgOpenPropStg(
         IUnknown * pUnk,
         const IID & fmtid,
         DWORD grfFlags,
               DWORD dwReserved,
             IPropertyStorage ** ppPropStg
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
StgCreatePropSetStg(
         IStorage * pStorage,
               DWORD dwReserved,
             IPropertySetStorage ** ppPropSetStg
    );





extern "C" __declspec(dllimport) HRESULT __stdcall
FmtIdToPropStgName(
         const FMTID * pfmtid,
                                         LPOLESTR oszName
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
PropStgNameToFmtId(
         const LPOLESTR oszName,
          FMTID * pfmtid
    );





extern "C" __declspec(dllimport) HRESULT __stdcall
ReadClassStg(
         LPSTORAGE pStg,
          CLSID * pclsid
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
WriteClassStg(
         LPSTORAGE pStg,
         const IID & rclsid
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
ReadClassStm(
         LPSTREAM pStm,
          CLSID * pclsid
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
WriteClassStm(
         LPSTREAM pStm,
         const IID & rclsid
    );




extern "C" __declspec(dllimport) HRESULT __stdcall
GetHGlobalFromILockBytes(
         LPLOCKBYTES plkbyt,
          HGLOBAL * phglobal
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
CreateILockBytesOnHGlobal(
             HGLOBAL hGlobal,
         BOOL fDeleteOnRelease,
             LPLOCKBYTES * pplkbyt
    );



extern "C" __declspec(dllimport) HRESULT __stdcall
GetConvertStg(
         LPSTORAGE pStg
    );
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 2 3



typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED = 0x2,



  COINIT_MULTITHREADED = COINITBASE_MULTITHREADED,
  COINIT_DISABLE_OLE1DDE = 0x4,
  COINIT_SPEED_OVER_MEMORY = 0x8,

} COINIT;
# 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 3
extern "C" __declspec(dllimport) DWORD __stdcall CoBuildVersion( void );



               extern "C" __declspec(dllimport) HRESULT __stdcall CoInitialize( LPVOID pvReserved);


               extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy);
               extern "C" __declspec(dllimport) HRESULT __stdcall CoRevokeMallocSpy(void);
extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateStandardMalloc( DWORD memctx, IMalloc * * ppMalloc);




               extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterInitializeSpy( IInitializeSpy *pSpy, ULARGE_INTEGER *puliCookie);
               extern "C" __declspec(dllimport) HRESULT __stdcall CoRevokeInitializeSpy( ULARGE_INTEGER uliCookie);



typedef enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,
    SD_ACCESSPERMISSIONS = 1,
    SD_LAUNCHRESTRICTIONS = 2,
    SD_ACCESSRESTRICTIONS = 3

} COMSD;
               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);





extern "C" __declspec(dllimport) HINSTANCE __stdcall CoLoadLibrary( LPOLESTR lpszLibName, BOOL bAutoFree);
extern "C" __declspec(dllimport) void __stdcall CoFreeLibrary( HINSTANCE hInst);
extern "C" __declspec(dllimport) void __stdcall CoFreeAllLibraries(void);





               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromFile(
             COSERVERINFO * pServerInfo,
             CLSID * pClsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
         DWORD grfMode,
                           OLECHAR * pwszName,
         DWORD dwCount,
                             MULTI_QI * pResults );


               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromIStorage(
             COSERVERINFO * pServerInfo,
             CLSID * pClsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
         struct IStorage * pstg,
         DWORD dwCount,
                             MULTI_QI * pResults );







extern "C" __declspec(dllimport) HRESULT __stdcall CoAllowSetForegroundWindow( IUnknown *pUnk, LPVOID lpvReserved);


extern "C" __declspec(dllimport) HRESULT __stdcall DcomChannelSetHResult( LPVOID pvReserved, ULONG* pulReserved, HRESULT appsHR);




extern "C" __declspec(dllimport) BOOL __stdcall CoIsOle1Class( const IID & rclsid);
               extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromProgIDEx ( LPCOLESTR lpszProgID, LPCLSID lpclsid);

extern "C" __declspec(dllimport) BOOL __stdcall CoFileTimeToDosDateTime(
                      FILETIME * lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern "C" __declspec(dllimport) BOOL __stdcall CoDosDateTimeToFileTime(
                            WORD nDosDate, WORD nDosTime, FILETIME * lpFileTime);
extern "C" __declspec(dllimport) HRESULT __stdcall CoFileTimeNow( FILETIME * lpFileTime );

               extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter,
                                                              LPMESSAGEFILTER * lplpMessageFilter );



extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterChannelHook( const GUID & ExtensionUuid, IChannelHook *pChannelHook );





               extern "C" __declspec(dllimport) HRESULT __stdcall CoTreatAsClass( const IID & clsidOld, const IID & clsidNew);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataCache( LPUNKNOWN pUnkOuter, const IID & rclsid,
                               const IID & iid, LPVOID * ppv);





               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes *pflb,
                  DWORD grfMode,
                  DWORD asyncFlags,
                      IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes( ILockBytes *pilb,
                      IFillLockBytes** ppflb);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnFile( OLECHAR const *pwcsName,
                      IFillLockBytes** ppflb);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenLayoutDocfile( OLECHAR const *pwcsDfName,
                  DWORD grfMode,
                  DWORD reserved,
                      IStorage** ppstgOpen);







extern "C" __declspec(dllimport) HRESULT __stdcall CoInstall(
         IBindCtx * pbc,
         DWORD dwFlags,
         uCLSSPEC * pClassSpec,
         QUERYCONTEXT * pQuery,
         LPWSTR pszCodeBase);
# 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 3
               extern "C" __declspec(dllimport) HRESULT __stdcall BindMoniker( LPMONIKER pmk, DWORD grfOpt, const IID & iidResult, LPVOID * ppvResult);

               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetObject( LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID & riid, void **ppv);
               extern "C" __declspec(dllimport) HRESULT __stdcall MkParseDisplayName( LPBC pbc, LPCOLESTR szUserName,
                      ULONG * pchEaten, LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall MonikerRelativePathTo( LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER
                   * ppmkRelPath, BOOL dwReserved);
               extern "C" __declspec(dllimport) HRESULT __stdcall MonikerCommonPrefixWith( LPMONIKER pmkThis, LPMONIKER pmkOther,
                         LPMONIKER * ppmkCommon);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateBindCtx( DWORD reserved, LPBC * ppbc);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateGenericComposite( LPMONIKER pmkFirst, LPMONIKER pmkRest,
                         LPMONIKER * ppmkComposite);
               extern "C" __declspec(dllimport) HRESULT __stdcall GetClassFile ( LPCOLESTR szFilename, CLSID * pclsid);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateClassMoniker( const IID & rclsid, LPMONIKER * ppmk);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateFileMoniker( LPCOLESTR lpszPathName, LPMONIKER * ppmk);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateItemMoniker( LPCOLESTR lpszDelim, LPCOLESTR lpszItem,
                                   LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateAntiMoniker( LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreatePointerMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateObjrefMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);







               extern "C" __declspec(dllimport) HRESULT __stdcall GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE * pprot);





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
typedef struct IPersistMoniker IPersistMoniker;






typedef struct IMonikerProp IMonikerProp;






typedef struct IBindProtocol IBindProtocol;






typedef struct IBinding IBinding;






typedef struct IBindStatusCallback IBindStatusCallback;






typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;






typedef struct IAuthenticate IAuthenticate;






typedef struct IAuthenticateEx IAuthenticateEx;






typedef struct IHttpNegotiate IHttpNegotiate;






typedef struct IHttpNegotiate2 IHttpNegotiate2;






typedef struct IHttpNegotiate3 IHttpNegotiate3;






typedef struct IWinInetFileStream IWinInetFileStream;






typedef struct IWindowForBindingUI IWindowForBindingUI;






typedef struct ICodeInstall ICodeInstall;






typedef struct IUri IUri;






typedef struct IUriContainer IUriContainer;






typedef struct IUriBuilder IUriBuilder;






typedef struct IUriBuilderFactory IUriBuilderFactory;






typedef struct IWinInetInfo IWinInetInfo;






typedef struct IHttpSecurity IHttpSecurity;






typedef struct IWinInetHttpInfo IWinInetHttpInfo;






typedef struct IWinInetHttpTimeouts IWinInetHttpTimeouts;






typedef struct IWinInetCacheHints IWinInetCacheHints;






typedef struct IWinInetCacheHints2 IWinInetCacheHints2;






typedef struct IBindHost IBindHost;






typedef struct IInternet IInternet;






typedef struct IInternetBindInfo IInternetBindInfo;






typedef struct IInternetBindInfoEx IInternetBindInfoEx;






typedef struct IInternetProtocolRoot IInternetProtocolRoot;






typedef struct IInternetProtocol IInternetProtocol;






typedef struct IInternetProtocolEx IInternetProtocolEx;






typedef struct IInternetProtocolSink IInternetProtocolSink;






typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;






typedef struct IInternetSession IInternetSession;






typedef struct IInternetThreadSwitch IInternetThreadSwitch;






typedef struct IInternetPriority IInternetPriority;






typedef struct IInternetProtocolInfo IInternetProtocolInfo;






typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;






typedef struct IInternetSecurityManager IInternetSecurityManager;






typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;






typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;






typedef struct IZoneIdentifier IZoneIdentifier;






typedef struct IZoneIdentifier2 IZoneIdentifier2;






typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;






typedef struct IInternetZoneManager IInternetZoneManager;






typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;






typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;






typedef struct ISoftDistExt ISoftDistExt;






typedef struct ICatalogFileInfo ICatalogFileInfo;






typedef struct IDataFilter IDataFilter;






typedef struct IEncodingFilterFactory IEncodingFilterFactory;






typedef struct IWrappedProtocol IWrappedProtocol;






typedef struct IGetBindHandle IGetBindHandle;






typedef struct IBindCallbackRedirect IBindCallbackRedirect;






typedef struct IBindHttpSecurity IBindHttpSecurity;







# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef struct IOleAdviseHolder IOleAdviseHolder;






typedef struct IOleCache IOleCache;






typedef struct IOleCache2 IOleCache2;






typedef struct IOleCacheControl IOleCacheControl;






typedef struct IParseDisplayName IParseDisplayName;






typedef struct IOleContainer IOleContainer;






typedef struct IOleClientSite IOleClientSite;






typedef struct IOleObject IOleObject;






typedef struct IOleWindow IOleWindow;






typedef struct IOleLink IOleLink;






typedef struct IOleItemContainer IOleItemContainer;






typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;






typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;






typedef struct IOleInPlaceFrame IOleInPlaceFrame;






typedef struct IOleInPlaceObject IOleInPlaceObject;






typedef struct IOleInPlaceSite IOleInPlaceSite;






typedef struct IContinue IContinue;






typedef struct IViewObject IViewObject;






typedef struct IViewObject2 IViewObject2;






typedef struct IDropSource IDropSource;






typedef struct IDropTarget IDropTarget;






typedef struct IDropSourceNotify IDropSourceNotify;






typedef struct IEnterpriseDropTarget IEnterpriseDropTarget;






typedef struct IEnumOLEVERB IEnumOLEVERB;
# 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
extern "C"{
# 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)







extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec;







typedef IOleAdviseHolder *LPOLEADVISEHOLDER;


extern "C" const IID IID_IOleAdviseHolder;



    struct __declspec(uuid("00000111-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise(

                  IAdviseSink *pAdvise,

                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(

                      IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall SendOnRename(

                  IMoniker *pmk) = 0;

        virtual HRESULT __stdcall SendOnSave( void) = 0;

        virtual HRESULT __stdcall SendOnClose( void) = 0;

    };
# 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec;







typedef IOleCache *LPOLECACHE;


extern "C" const IID IID_IOleCache;



    struct __declspec(uuid("0000011e-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cache(
                                             FORMATETC *pformatetc,
                       DWORD advf,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Uncache(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumCache(
                                             IEnumSTATDATA **ppenumSTATDATA) = 0;

        virtual HRESULT __stdcall InitCache(
                                             IDataObject *pDataObject) = 0;

        virtual HRESULT __stdcall SetData(
                                             FORMATETC *pformatetc,
                                             STGMEDIUM *pmedium,
                       BOOL fRelease) = 0;

    };
# 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleCache2 *LPOLECACHE2;
# 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef
enum tagDISCARDCACHE
    {
        DISCARDCACHE_SAVEIFDIRTY = 0,
        DISCARDCACHE_NOSAVE = 1
    } DISCARDCACHE;


extern "C" const IID IID_IOleCache2;



    struct __declspec(uuid("00000128-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache2 : public IOleCache
    {
    public:
        virtual HRESULT __stdcall UpdateCache(

                  LPDATAOBJECT pDataObject,

                  DWORD grfUpdf,

                        LPVOID pReserved) = 0;

        virtual HRESULT __stdcall DiscardCache(
                       DWORD dwDiscardOptions) = 0;

    };
# 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
                HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy(
              IOleCache2 * This,
                             LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LONG_PTR pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec;







typedef IOleCacheControl *LPOLECACHECONTROL;


extern "C" const IID IID_IOleCacheControl;



    struct __declspec(uuid("00000129-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCacheControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnRun(
                          LPDATAOBJECT pDataObject) = 0;

        virtual HRESULT __stdcall OnStop( void) = 0;

    };
# 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IParseDisplayName *LPPARSEDISPLAYNAME;


extern "C" const IID IID_IParseDisplayName;



    struct __declspec(uuid("0000011a-0000-0000-C000-000000000046")) __declspec(novtable)
    IParseDisplayName : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseDisplayName(
                                             IBindCtx *pbc,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut) = 0;

    };
# 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleContainer *LPOLECONTAINER;


extern "C" const IID IID_IOleContainer;



    struct __declspec(uuid("0000011b-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleContainer : public IParseDisplayName
    {
    public:
        virtual HRESULT __stdcall EnumObjects(
                       DWORD grfFlags,
                                             IEnumUnknown **ppenum) = 0;

        virtual HRESULT __stdcall LockContainer(
                       BOOL fLock) = 0;

    };
# 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleClientSite *LPOLECLIENTSITE;


extern "C" const IID IID_IOleClientSite;



    struct __declspec(uuid("00000118-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleClientSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SaveObject( void) = 0;

        virtual HRESULT __stdcall GetMoniker(
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall GetContainer(
                                             IOleContainer **ppContainer) = 0;

        virtual HRESULT __stdcall ShowObject( void) = 0;

        virtual HRESULT __stdcall OnShowWindow(
                       BOOL fShow) = 0;

        virtual HRESULT __stdcall RequestNewObjectLayout( void) = 0;

    };
# 1136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleObject *LPOLEOBJECT;

typedef
enum tagOLEGETMONIKER
    {
        OLEGETMONIKER_ONLYIFTHERE = 1,
        OLEGETMONIKER_FORCEASSIGN = 2,
        OLEGETMONIKER_UNASSIGN = 3,
        OLEGETMONIKER_TEMPFORUSER = 4
    } OLEGETMONIKER;

typedef
enum tagOLEWHICHMK
    {
        OLEWHICHMK_CONTAINER = 1,
        OLEWHICHMK_OBJREL = 2,
        OLEWHICHMK_OBJFULL = 3
    } OLEWHICHMK;

typedef
enum tagUSERCLASSTYPE
    {
        USERCLASSTYPE_FULL = 1,
        USERCLASSTYPE_SHORT = 2,
        USERCLASSTYPE_APPNAME = 3
    } USERCLASSTYPE;

typedef
enum tagOLEMISC
    {
        OLEMISC_RECOMPOSEONRESIZE = 0x1,
        OLEMISC_ONLYICONIC = 0x2,
        OLEMISC_INSERTNOTREPLACE = 0x4,
        OLEMISC_STATIC = 0x8,
        OLEMISC_CANTLINKINSIDE = 0x10,
        OLEMISC_CANLINKBYOLE1 = 0x20,
        OLEMISC_ISLINKOBJECT = 0x40,
        OLEMISC_INSIDEOUT = 0x80,
        OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
        OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
        OLEMISC_INVISIBLEATRUNTIME = 0x400,
        OLEMISC_ALWAYSRUN = 0x800,
        OLEMISC_ACTSLIKEBUTTON = 0x1000,
        OLEMISC_ACTSLIKELABEL = 0x2000,
        OLEMISC_NOUIACTIVATE = 0x4000,
        OLEMISC_ALIGNABLE = 0x8000,
        OLEMISC_SIMPLEFRAME = 0x10000,
        OLEMISC_SETCLIENTSITEFIRST = 0x20000,
        OLEMISC_IMEMODE = 0x40000,
        OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
        OLEMISC_WANTSTOMENUMERGE = 0x100000,
        OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
    } OLEMISC;

typedef
enum tagOLECLOSE
    {
        OLECLOSE_SAVEIFDIRTY = 0,
        OLECLOSE_NOSAVE = 1,
        OLECLOSE_PROMPTSAVE = 2
    } OLECLOSE;


extern "C" const IID IID_IOleObject;



    struct __declspec(uuid("00000112-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetClientSite(
                                             IOleClientSite *pClientSite) = 0;

        virtual HRESULT __stdcall GetClientSite(
                                             IOleClientSite **ppClientSite) = 0;

        virtual HRESULT __stdcall SetHostNames(
                                 LPCOLESTR szContainerApp,
                                             LPCOLESTR szContainerObj) = 0;

        virtual HRESULT __stdcall Close(
                       DWORD dwSaveOption) = 0;

        virtual HRESULT __stdcall SetMoniker(
                       DWORD dwWhichMoniker,
                                             IMoniker *pmk) = 0;

        virtual HRESULT __stdcall GetMoniker(
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall InitFromData(
                                             IDataObject *pDataObject,
                       BOOL fCreation,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall GetClipboardData(
                       DWORD dwReserved,
                                             IDataObject **ppDataObject) = 0;

        virtual HRESULT __stdcall DoVerb(
                       LONG iVerb,
                                             LPMSG lpmsg,
                                             IOleClientSite *pActiveSite,
                       LONG lindex,
                                 HWND hwndParent,
                                             LPCRECT lprcPosRect) = 0;

        virtual HRESULT __stdcall EnumVerbs(
                                             IEnumOLEVERB **ppEnumOleVerb) = 0;

        virtual HRESULT __stdcall Update( void) = 0;

        virtual HRESULT __stdcall IsUpToDate( void) = 0;

        virtual HRESULT __stdcall GetUserClassID(
                                   CLSID *pClsid) = 0;

        virtual HRESULT __stdcall GetUserType(
                       DWORD dwFormOfType,
                                             LPOLESTR *pszUserType) = 0;

        virtual HRESULT __stdcall SetExtent(
                       DWORD dwDrawAspect,
                                 SIZEL *psizel) = 0;

        virtual HRESULT __stdcall GetExtent(
                       DWORD dwDrawAspect,
                                   SIZEL *psizel) = 0;

        virtual HRESULT __stdcall Advise(
                                             IAdviseSink *pAdvSink,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(
                                             IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall GetMiscStatus(
                       DWORD dwAspect,
                                   DWORD *pdwStatus) = 0;

        virtual HRESULT __stdcall SetColorScheme(
                                 LOGPALETTE *pLogpal) = 0;

    };
# 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef
enum tagOLERENDER
    {
        OLERENDER_NONE = 0,
        OLERENDER_DRAW = 1,
        OLERENDER_FORMAT = 2,
        OLERENDER_ASIS = 3
    } OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    } OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
# 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleWindow *LPOLEWINDOW;


extern "C" const IID IID_IOleWindow;



    struct __declspec(uuid("00000114-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleWindow : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                                             HWND *phwnd) = 0;

        virtual HRESULT __stdcall ContextSensitiveHelp(
                       BOOL fEnterMode) = 0;

    };
# 1645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleLink *LPOLELINK;

typedef
enum tagOLEUPDATE
    {
        OLEUPDATE_ALWAYS = 1,
        OLEUPDATE_ONCALL = 3
    } OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef
enum tagOLELINKBIND
    {
        OLELINKBIND_EVENIFCLASSDIFF = 1
    } OLELINKBIND;


extern "C" const IID IID_IOleLink;



    struct __declspec(uuid("0000011d-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleLink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetUpdateOptions(
                       DWORD dwUpdateOpt) = 0;

        virtual HRESULT __stdcall GetUpdateOptions(
                                   DWORD *pdwUpdateOpt) = 0;

        virtual HRESULT __stdcall SetSourceMoniker(
                                             IMoniker *pmk,
                                 const IID & rclsid) = 0;

        virtual HRESULT __stdcall GetSourceMoniker(
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall SetSourceDisplayName(
                                 LPCOLESTR pszStatusText) = 0;

        virtual HRESULT __stdcall GetSourceDisplayName(
                                             LPOLESTR *ppszDisplayName) = 0;

        virtual HRESULT __stdcall BindToSource(
                       DWORD bindflags,
                                             IBindCtx *pbc) = 0;

        virtual HRESULT __stdcall BindIfRunning( void) = 0;

        virtual HRESULT __stdcall GetBoundSource(
                                             IUnknown **ppunk) = 0;

        virtual HRESULT __stdcall UnbindSource( void) = 0;

        virtual HRESULT __stdcall Update(
                                             IBindCtx *pbc) = 0;

    };
# 1844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleItemContainer *LPOLEITEMCONTAINER;

typedef
enum tagBINDSPEED
    {
        BINDSPEED_INDEFINITE = 1,
        BINDSPEED_MODERATE = 2,
        BINDSPEED_IMMEDIATE = 3
    } BINDSPEED;

typedef
enum tagOLECONTF
    {
        OLECONTF_EMBEDDINGS = 1,
        OLECONTF_LINKS = 2,
        OLECONTF_OTHERS = 4,
        OLECONTF_ONLYUSER = 8,
        OLECONTF_ONLYIFRUNNING = 16
    } OLECONTF;


extern "C" const IID IID_IOleItemContainer;



    struct __declspec(uuid("0000011c-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleItemContainer : public IOleContainer
    {
    public:
        virtual HRESULT __stdcall GetObjectW(
                                 LPOLESTR pszItem,
                       DWORD dwSpeedNeeded,
                                             IBindCtx *pbc,
                                 const IID & riid,
                                                     void **ppvObject) = 0;

        virtual HRESULT __stdcall GetObjectStorage(
                                 LPOLESTR pszItem,
                                             IBindCtx *pbc,
                                 const IID & riid,
                                                     void **ppvStorage) = 0;

        virtual HRESULT __stdcall IsRunning(
                                 LPOLESTR pszItem) = 0;

    };
# 2005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern "C" const IID IID_IOleInPlaceUIWindow;



    struct __declspec(uuid("00000115-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceUIWindow : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall GetBorder(
                                   LPRECT lprectBorder) = 0;

        virtual HRESULT __stdcall RequestBorderSpace(
                                             LPCBORDERWIDTHS pborderwidths) = 0;

        virtual HRESULT __stdcall SetBorderSpace(
                                             LPCBORDERWIDTHS pborderwidths) = 0;

        virtual HRESULT __stdcall SetActiveObject(
                                             IOleInPlaceActiveObject *pActiveObject,
                                                            LPCOLESTR pszObjName) = 0;

    };
# 2140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;


extern "C" const IID IID_IOleInPlaceActiveObject;



    struct __declspec(uuid("00000117-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceActiveObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall TranslateAcceleratorW(

                      LPMSG lpmsg) = 0;

        virtual HRESULT __stdcall OnFrameWindowActivate(
                       BOOL fActivate) = 0;

        virtual HRESULT __stdcall OnDocWindowActivate(
                       BOOL fActivate) = 0;

        virtual HRESULT __stdcall ResizeBorder(

                  LPCRECT prcBorder,

                  IOleInPlaceUIWindow *pUIWindow,

                  BOOL fFrameWindow) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

    };
# 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
                HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
              IOleInPlaceActiveObject * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                            HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
              IOleInPlaceActiveObject * This,
                         LPCRECT prcBorder,
                         const IID & riid,
                                             IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    } OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    } OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern "C" const IID IID_IOleInPlaceFrame;



    struct __declspec(uuid("00000116-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceFrame : public IOleInPlaceUIWindow
    {
    public:
        virtual HRESULT __stdcall InsertMenus(
                                 HMENU hmenuShared,
                                         LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;

        virtual HRESULT __stdcall SetMenu(
                                 HMENU hmenuShared,
                                 HOLEMENU holemenu,
                                 HWND hwndActiveObject) = 0;

        virtual HRESULT __stdcall RemoveMenus(
                                 HMENU hmenuShared) = 0;

        virtual HRESULT __stdcall SetStatusText(
                                             LPCOLESTR pszStatusText) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 LPMSG lpmsg,
                       WORD wID) = 0;

    };
# 2520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;


extern "C" const IID IID_IOleInPlaceObject;



    struct __declspec(uuid("00000113-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall InPlaceDeactivate( void) = 0;

        virtual HRESULT __stdcall UIDeactivate( void) = 0;

        virtual HRESULT __stdcall SetObjectRects(
                                 LPCRECT lprcPosRect,
                                 LPCRECT lprcClipRect) = 0;

        virtual HRESULT __stdcall ReactivateAndUndo( void) = 0;

    };
# 2643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IOleInPlaceSite *LPOLEINPLACESITE;


extern "C" const IID IID_IOleInPlaceSite;



    struct __declspec(uuid("00000119-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceSite : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall CanInPlaceActivate( void) = 0;

        virtual HRESULT __stdcall OnInPlaceActivate( void) = 0;

        virtual HRESULT __stdcall OnUIActivate( void) = 0;

        virtual HRESULT __stdcall GetWindowContext(
                                             IOleInPlaceFrame **ppFrame,
                                             IOleInPlaceUIWindow **ppDoc,
                                   LPRECT lprcPosRect,
                                   LPRECT lprcClipRect,
                                         LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;

        virtual HRESULT __stdcall Scroll(
                       SIZE scrollExtant) = 0;

        virtual HRESULT __stdcall OnUIDeactivate(
                       BOOL fUndoable) = 0;

        virtual HRESULT __stdcall OnInPlaceDeactivate( void) = 0;

        virtual HRESULT __stdcall DiscardUndoState( void) = 0;

        virtual HRESULT __stdcall DeactivateAndUndo( void) = 0;

        virtual HRESULT __stdcall OnPosRectChange(
                                 LPCRECT lprcPosRect) = 0;

    };
# 2827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
extern "C" const IID IID_IContinue;



    struct __declspec(uuid("0000012a-0000-0000-C000-000000000046")) __declspec(novtable)
    IContinue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FContinue( void) = 0;

    };
# 2904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IViewObject *LPVIEWOBJECT;


extern "C" const IID IID_IViewObject;



    struct __declspec(uuid("0000010d-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Draw(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hdcTargetDev,

                  HDC hdcDraw,

                      LPCRECTL lprcBounds,

                      LPCRECTL lprcWBounds,

                      BOOL ( __stdcall *pfnContinue )(
                ULONG_PTR dwContinue),

                  ULONG_PTR dwContinue) = 0;

        virtual HRESULT __stdcall GetColorSet(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hicTargetDev,

                      LOGPALETTE **ppColorSet) = 0;

        virtual HRESULT __stdcall Freeze(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                   DWORD *pdwFreeze) = 0;

        virtual HRESULT __stdcall Unfreeze(
                       DWORD dwFreeze) = 0;

        virtual HRESULT __stdcall SetAdvise(
                       DWORD aspects,
                       DWORD advf,
                                             IAdviseSink *pAdvSink) = 0;

        virtual HRESULT __stdcall GetAdvise(

                       DWORD *pAspects,

                       DWORD *pAdvf,

                      IAdviseSink **ppAdvSink) = 0;

    };
# 3116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
                HRESULT __stdcall IViewObject_RemoteDraw_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
                         HDC hdcTargetDev,
                         HDC hdcDraw,
                                     LPCRECTL lprcBounds,
                                     LPCRECTL lprcWBounds,
                             IContinue *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
               ULONG_PTR hicTargetDev,
                                     LOGPALETTE **ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteFreeze_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                           DWORD *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy(
              IViewObject * This,
                           DWORD *pAspects,
                           DWORD *pAdvf,
                                     IAdviseSink **ppAdvSink);


void __stdcall IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IViewObject2 *LPVIEWOBJECT2;


extern "C" const IID IID_IViewObject2;



    struct __declspec(uuid("00000127-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject2 : public IViewObject
    {
    public:
        virtual HRESULT __stdcall GetExtent(
                       DWORD dwDrawAspect,
                       LONG lindex,
                                             DVTARGETDEVICE *ptd,
                                   LPSIZEL lpsizel) = 0;

    };
# 3368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IDropSource *LPDROPSOURCE;


extern "C" const IID IID_IDropSource;



    struct __declspec(uuid("00000121-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSource : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryContinueDrag(

                  BOOL fEscapePressed,

                  DWORD grfKeyState) = 0;

        virtual HRESULT __stdcall GiveFeedback(

                  DWORD dwEffect) = 0;

    };
# 3468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
typedef IDropTarget *LPDROPTARGET;
# 3503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
extern "C" const IID IID_IDropTarget;



    struct __declspec(uuid("00000122-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropTarget : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnter(
                                             IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

        virtual HRESULT __stdcall DragOver(
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

        virtual HRESULT __stdcall DragLeave( void) = 0;

        virtual HRESULT __stdcall Drop(
                                             IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

    };
# 3627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
extern "C" const IID IID_IDropSourceNotify;



    struct __declspec(uuid("0000012B-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSourceNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnterTarget(

                  HWND hwndTarget) = 0;

        virtual HRESULT __stdcall DragLeaveTarget( void) = 0;

    };
# 3717 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
extern "C" const IID IID_IEnterpriseDropTarget;



    struct __declspec(uuid("390E3878-FD55-4E18-819D-4682081C0CFD")) __declspec(novtable)
    IEnterpriseDropTarget : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetDropSourceEnterpriseId(
                                 LPCWSTR identity) = 0;

        virtual HRESULT __stdcall IsEvaluatingEdpPolicy(
                                           BOOL *value) = 0;

    };
# 3810 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec;







typedef IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    } OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef
enum tagOLEVERBATTRIB
    {
        OLEVERBATTRIB_NEVERDIRTIES = 1,
        OLEVERBATTRIB_ONCONTAINERMENU = 2
    } OLEVERBATTRIB;


extern "C" const IID IID_IEnumOLEVERB;



    struct __declspec(uuid("00000104-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumOLEVERB : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(

                  ULONG celt,

                                                  LPOLEVERB rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumOLEVERB **ppenum) = 0;

    };
# 3946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
                HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy(
              IEnumOLEVERB * This,
               ULONG celt,
                                                                                LPOLEVERB rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/oleidl.h" 3
#pragma warning(pop)



extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec;



unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HGLOBAL_UserSize( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserMarshal( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserUnmarshal( unsigned long *, unsigned char *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree( unsigned long *, HGLOBAL * );

unsigned long __stdcall HMENU_UserSize( unsigned long *, unsigned long , HMENU * );
unsigned char * __stdcall HMENU_UserMarshal( unsigned long *, unsigned char *, HMENU * );
unsigned char * __stdcall HMENU_UserUnmarshal( unsigned long *, unsigned char *, HMENU * );
void __stdcall HMENU_UserFree( unsigned long *, HMENU * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize64( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal64( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal64( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree64( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HGLOBAL_UserSize64( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserMarshal64( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserUnmarshal64( unsigned long *, unsigned char *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree64( unsigned long *, HGLOBAL * );

unsigned long __stdcall HMENU_UserSize64( unsigned long *, unsigned long , HMENU * );
unsigned char * __stdcall HMENU_UserMarshal64( unsigned long *, unsigned char *, HMENU * );
unsigned char * __stdcall HMENU_UserUnmarshal64( unsigned long *, unsigned char *, HMENU * );
void __stdcall HMENU_UserFree64( unsigned long *, HMENU * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

unsigned long __stdcall STGMEDIUM_UserSize64( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( unsigned long *, STGMEDIUM * );

              HRESULT __stdcall IOleCache2_UpdateCache_Proxy(
    IOleCache2 * This,

          LPDATAOBJECT pDataObject,

          DWORD grfUpdf,

                LPVOID pReserved);


                HRESULT __stdcall IOleCache2_UpdateCache_Stub(
              IOleCache2 * This,
                             LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LONG_PTR pReserved);

              HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject * This,

              LPMSG lpmsg);


                HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub(
              IOleInPlaceActiveObject * This);

              HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject * This,

          LPCRECT prcBorder,

          IOleInPlaceUIWindow *pUIWindow,

          BOOL fFrameWindow);


                            HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub(
              IOleInPlaceActiveObject * This,
                         LPCRECT prcBorder,
                         const IID & riid,
                                             IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);

              HRESULT __stdcall IViewObject_Draw_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

              DVTARGETDEVICE *ptd,

              HDC hdcTargetDev,

          HDC hdcDraw,

              LPCRECTL lprcBounds,

              LPCRECTL lprcWBounds,

              BOOL ( __stdcall *pfnContinue )(
        ULONG_PTR dwContinue),

          ULONG_PTR dwContinue);


                HRESULT __stdcall IViewObject_Draw_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
                         HDC hdcTargetDev,
                         HDC hdcDraw,
                                     LPCRECTL lprcBounds,
                                     LPCRECTL lprcWBounds,
                             IContinue *pContinue);

              HRESULT __stdcall IViewObject_GetColorSet_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

              DVTARGETDEVICE *ptd,

              HDC hicTargetDev,

              LOGPALETTE **ppColorSet);


                HRESULT __stdcall IViewObject_GetColorSet_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
               ULONG_PTR hicTargetDev,
                                     LOGPALETTE **ppColorSet);

              HRESULT __stdcall IViewObject_Freeze_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

           DWORD *pdwFreeze);


                HRESULT __stdcall IViewObject_Freeze_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                           DWORD *pdwFreeze);

              HRESULT __stdcall IViewObject_GetAdvise_Proxy(
    IViewObject * This,

               DWORD *pAspects,

               DWORD *pAdvf,

              IAdviseSink **ppAdvSink);


                HRESULT __stdcall IViewObject_GetAdvise_Stub(
              IViewObject * This,
                           DWORD *pAspects,
                           DWORD *pAdvf,
                                     IAdviseSink **ppAdvSink);

              HRESULT __stdcall IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB * This,

          ULONG celt,

                                          LPOLEVERB rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumOLEVERB_Next_Stub(
              IEnumOLEVERB * This,
               ULONG celt,
                                                                                LPOLEVERB rgelt,
                           ULONG *pceltFetched);






}
# 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/servprov.h" 1 3
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/servprov.h" 3
typedef struct IServiceProvider IServiceProvider;
# 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/servprov.h" 3
extern "C"{
# 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/servprov.h" 3
#pragma comment(lib,"uuid.lib")
# 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/servprov.h" 3
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;







typedef IServiceProvider *LPSERVICEPROVIDER;


    extern "C" const IID IID_IServiceProvider;
    extern "C++"
    {
        struct __declspec(uuid("6d5140c1-7436-11ce-8034-00aa006009fa")) __declspec(novtable)
        IServiceProvider : public IUnknown
        {
        public:
            virtual HRESULT __stdcall QueryService(
                                const GUID & guidService,
                                const IID & riid,
                                     void * *ppvObject) = 0;

            template <class Q>
            HRESULT __stdcall QueryService( const GUID & guidService, Q** pp)
            {
                return QueryService(guidService, __uuidof(Q), (void **)pp);
            }
        };
    }

                    HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy(
             IServiceProvider * This,
                        const GUID & guidService,
                        const IID & riid,
                                     IUnknown * *ppvObject);

    void __stdcall IServiceProvider_RemoteQueryService_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
# 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/servprov.h" 3
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;



              HRESULT __stdcall IServiceProvider_QueryService_Proxy(
    IServiceProvider * This,

          const GUID & guidService,

          const IID & riid,

              void **ppvObject);


                HRESULT __stdcall IServiceProvider_QueryService_Stub(
              IServiceProvider * This,
                         const GUID & guidService,
                         const IID & riid,
                                             IUnknown **ppvObject);






}
# 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 1 3
# 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef struct IXMLDOMImplementation IXMLDOMImplementation;






typedef struct IXMLDOMNode IXMLDOMNode;






typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;






typedef struct IXMLDOMDocument IXMLDOMDocument;






typedef struct IXMLDOMNodeList IXMLDOMNodeList;






typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;






typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;






typedef struct IXMLDOMAttribute IXMLDOMAttribute;






typedef struct IXMLDOMElement IXMLDOMElement;






typedef struct IXMLDOMText IXMLDOMText;






typedef struct IXMLDOMComment IXMLDOMComment;






typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;






typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;






typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;






typedef struct IXMLDOMNotation IXMLDOMNotation;






typedef struct IXMLDOMEntity IXMLDOMEntity;






typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;






typedef struct IXMLDOMParseError IXMLDOMParseError;






typedef struct IXTLRuntime IXTLRuntime;






typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
# 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef class DOMDocument DOMDocument;
# 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef class DOMFreeThreadedDocument DOMFreeThreadedDocument;
# 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef struct IXMLHttpRequest IXMLHttpRequest;
# 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef class XMLHTTPRequest XMLHTTPRequest;
# 223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef struct IXMLDSOControl IXMLDSOControl;
# 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef class XMLDSOControl XMLDSOControl;
# 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef struct IXMLElementCollection IXMLElementCollection;






typedef struct IXMLDocument IXMLDocument;






typedef struct IXMLDocument2 IXMLDocument2;






typedef struct IXMLElement IXMLElement;






typedef struct IXMLElement2 IXMLElement2;






typedef struct IXMLAttribute IXMLAttribute;






typedef struct IXMLError IXMLError;
# 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef class XMLDocument XMLDocument;
# 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C"{
# 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)

#pragma warning(push)
#pragma warning(disable: 4001)

#pragma warning(pop)
#pragma warning(pop)




#pragma warning(push)
#pragma warning(disable: 4820)



typedef struct _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } XML_ERROR;



extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec;
# 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef
enum tagDOMNodeType
    {
        NODE_INVALID = 0,
        NODE_ELEMENT = ( NODE_INVALID + 1 ) ,
        NODE_ATTRIBUTE = ( NODE_ELEMENT + 1 ) ,
        NODE_TEXT = ( NODE_ATTRIBUTE + 1 ) ,
        NODE_CDATA_SECTION = ( NODE_TEXT + 1 ) ,
        NODE_ENTITY_REFERENCE = ( NODE_CDATA_SECTION + 1 ) ,
        NODE_ENTITY = ( NODE_ENTITY_REFERENCE + 1 ) ,
        NODE_PROCESSING_INSTRUCTION = ( NODE_ENTITY + 1 ) ,
        NODE_COMMENT = ( NODE_PROCESSING_INSTRUCTION + 1 ) ,
        NODE_DOCUMENT = ( NODE_COMMENT + 1 ) ,
        NODE_DOCUMENT_TYPE = ( NODE_DOCUMENT + 1 ) ,
        NODE_DOCUMENT_FRAGMENT = ( NODE_DOCUMENT_TYPE + 1 ) ,
        NODE_NOTATION = ( NODE_DOCUMENT_FRAGMENT + 1 )
    } DOMNodeType;
# 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
typedef
enum tagXMLEMEM_TYPE
    {
        XMLELEMTYPE_ELEMENT = 0,
        XMLELEMTYPE_TEXT = ( XMLELEMTYPE_ELEMENT + 1 ) ,
        XMLELEMTYPE_COMMENT = ( XMLELEMTYPE_TEXT + 1 ) ,
        XMLELEMTYPE_DOCUMENT = ( XMLELEMTYPE_COMMENT + 1 ) ,
        XMLELEMTYPE_DTD = ( XMLELEMTYPE_DOCUMENT + 1 ) ,
        XMLELEMTYPE_PI = ( XMLELEMTYPE_DTD + 1 ) ,
        XMLELEMTYPE_OTHER = ( XMLELEMTYPE_PI + 1 )
    } XMLELEM_TYPE;


extern "C" const IID LIBID_MSXML;
# 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMImplementation;



    struct __declspec(uuid("2933BF8F-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMImplementation : public IDispatch
    {
    public:
        virtual HRESULT __stdcall hasFeature(
                       BSTR feature,
                       BSTR version,
                                VARIANT_BOOL *hasFeature) = 0;

    };
# 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMNode;



    struct __declspec(uuid("2933BF80-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNode : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_nodeName(
                                BSTR *name) = 0;

        virtual HRESULT __stdcall get_nodeValue(
                                VARIANT *value) = 0;

        virtual HRESULT __stdcall put_nodeValue(
                       VARIANT value) = 0;

        virtual HRESULT __stdcall get_nodeType(
                                DOMNodeType *type) = 0;

        virtual HRESULT __stdcall get_parentNode(
                                IXMLDOMNode **parent) = 0;

        virtual HRESULT __stdcall get_childNodes(
                                IXMLDOMNodeList **childList) = 0;

        virtual HRESULT __stdcall get_firstChild(
                                IXMLDOMNode **firstChild) = 0;

        virtual HRESULT __stdcall get_lastChild(
                                IXMLDOMNode **lastChild) = 0;

        virtual HRESULT __stdcall get_previousSibling(
                                IXMLDOMNode **previousSibling) = 0;

        virtual HRESULT __stdcall get_nextSibling(
                                IXMLDOMNode **nextSibling) = 0;

        virtual HRESULT __stdcall get_attributes(
                                IXMLDOMNamedNodeMap **attributeMap) = 0;

        virtual HRESULT __stdcall insertBefore(
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild) = 0;

        virtual HRESULT __stdcall replaceChild(
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild) = 0;

        virtual HRESULT __stdcall appendChild(
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild) = 0;

        virtual HRESULT __stdcall hasChildNodes(
                                VARIANT_BOOL *hasChild) = 0;

        virtual HRESULT __stdcall get_ownerDocument(
                                IXMLDOMDocument **XMLDOMDocument) = 0;

        virtual HRESULT __stdcall cloneNode(
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot) = 0;

        virtual HRESULT __stdcall get_nodeTypeString(
                                BSTR *nodeType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *text) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR text) = 0;

        virtual HRESULT __stdcall get_specified(
                                VARIANT_BOOL *isSpecified) = 0;

        virtual HRESULT __stdcall get_definition(
                                IXMLDOMNode **definitionNode) = 0;

        virtual HRESULT __stdcall get_nodeTypedValue(
                                VARIANT *typedValue) = 0;

        virtual HRESULT __stdcall put_nodeTypedValue(
                       VARIANT typedValue) = 0;

        virtual HRESULT __stdcall get_dataType(
                                VARIANT *dataTypeName) = 0;

        virtual HRESULT __stdcall put_dataType(
                       BSTR dataTypeName) = 0;

        virtual HRESULT __stdcall get_xml(
                                BSTR *xmlString) = 0;

        virtual HRESULT __stdcall transformNode(
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString) = 0;

        virtual HRESULT __stdcall selectNodes(
                       BSTR queryString,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall selectSingleNode(
                       BSTR queryString,
                                IXMLDOMNode **resultNode) = 0;

        virtual HRESULT __stdcall get_parsed(
                                VARIANT_BOOL *isParsed) = 0;

        virtual HRESULT __stdcall get_namespaceURI(
                                BSTR *namespaceURI) = 0;

        virtual HRESULT __stdcall get_prefix(
                                BSTR *prefixString) = 0;

        virtual HRESULT __stdcall get_baseName(
                                BSTR *nameString) = 0;

        virtual HRESULT __stdcall transformNodeToObject(
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject) = 0;

    };
# 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMDocumentFragment;



    struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMDocumentFragment : public IXMLDOMNode
    {
    public:
    };
# 1464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMDocument;



    struct __declspec(uuid("2933BF81-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocument : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_doctype(
                                IXMLDOMDocumentType **documentType) = 0;

        virtual HRESULT __stdcall get_implementation(
                                IXMLDOMImplementation **impl) = 0;

        virtual HRESULT __stdcall get_documentElement(
                                IXMLDOMElement **DOMElement) = 0;

        virtual HRESULT __stdcall putref_documentElement(
                       IXMLDOMElement *DOMElement) = 0;

        virtual HRESULT __stdcall createElement(
                       BSTR tagName,
                                IXMLDOMElement **element) = 0;

        virtual HRESULT __stdcall createDocumentFragment(
                                IXMLDOMDocumentFragment **docFrag) = 0;

        virtual HRESULT __stdcall createTextNode(
                       BSTR data,
                                IXMLDOMText **text) = 0;

        virtual HRESULT __stdcall createComment(
                       BSTR data,
                                IXMLDOMComment **comment) = 0;

        virtual HRESULT __stdcall createCDATASection(
                       BSTR data,
                                IXMLDOMCDATASection **cdata) = 0;

        virtual HRESULT __stdcall createProcessingInstruction(
                       BSTR target,
                       BSTR data,
                                IXMLDOMProcessingInstruction **pi) = 0;

        virtual HRESULT __stdcall createAttribute(
                       BSTR name,
                                IXMLDOMAttribute **attribute) = 0;

        virtual HRESULT __stdcall createEntityReference(
                       BSTR name,
                                IXMLDOMEntityReference **entityRef) = 0;

        virtual HRESULT __stdcall getElementsByTagName(
                       BSTR tagName,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall createNode(
                       VARIANT Type,
                       BSTR name,
                       BSTR namespaceURI,
                                IXMLDOMNode **node) = 0;

        virtual HRESULT __stdcall nodeFromID(
                       BSTR idString,
                                IXMLDOMNode **node) = 0;

        virtual HRESULT __stdcall load(
                       VARIANT xmlSource,
                                VARIANT_BOOL *isSuccessful) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *value) = 0;

        virtual HRESULT __stdcall get_parseError(
                                IXMLDOMParseError **errorObj) = 0;

        virtual HRESULT __stdcall get_url(
                                BSTR *urlString) = 0;

        virtual HRESULT __stdcall get_async(
                                VARIANT_BOOL *isAsync) = 0;

        virtual HRESULT __stdcall put_async(
                       VARIANT_BOOL isAsync) = 0;

        virtual HRESULT __stdcall abort( void) = 0;

        virtual HRESULT __stdcall loadXML(
                       BSTR bstrXML,
                                VARIANT_BOOL *isSuccessful) = 0;

        virtual HRESULT __stdcall save(
                       VARIANT destination) = 0;

        virtual HRESULT __stdcall get_validateOnParse(
                                VARIANT_BOOL *isValidating) = 0;

        virtual HRESULT __stdcall put_validateOnParse(
                       VARIANT_BOOL isValidating) = 0;

        virtual HRESULT __stdcall get_resolveExternals(
                                VARIANT_BOOL *isResolving) = 0;

        virtual HRESULT __stdcall put_resolveExternals(
                       VARIANT_BOOL isResolving) = 0;

        virtual HRESULT __stdcall get_preserveWhiteSpace(
                                VARIANT_BOOL *isPreserving) = 0;

        virtual HRESULT __stdcall put_preserveWhiteSpace(
                       VARIANT_BOOL isPreserving) = 0;

        virtual HRESULT __stdcall put_onreadystatechange(
                       VARIANT readystatechangeSink) = 0;

        virtual HRESULT __stdcall put_ondataavailable(
                       VARIANT ondataavailableSink) = 0;

        virtual HRESULT __stdcall put_ontransformnode(
                       VARIANT ontransformnodeSink) = 0;

    };
# 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMNodeList;



    struct __declspec(uuid("2933BF82-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNodeList : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_item(
                       long index,
                                IXMLDOMNode **listItem) = 0;

        virtual HRESULT __stdcall get_length(
                                long *listLength) = 0;

        virtual HRESULT __stdcall nextNode(
                                IXMLDOMNode **nextItem) = 0;

        virtual HRESULT __stdcall reset( void) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

    };
# 2376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMNamedNodeMap;



    struct __declspec(uuid("2933BF83-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNamedNodeMap : public IDispatch
    {
    public:
        virtual HRESULT __stdcall getNamedItem(
                       BSTR name,
                                IXMLDOMNode **namedItem) = 0;

        virtual HRESULT __stdcall setNamedItem(
                       IXMLDOMNode *newItem,
                                IXMLDOMNode **nameItem) = 0;

        virtual HRESULT __stdcall removeNamedItem(
                       BSTR name,
                                IXMLDOMNode **namedItem) = 0;

        virtual HRESULT __stdcall get_item(
                       long index,
                                IXMLDOMNode **listItem) = 0;

        virtual HRESULT __stdcall get_length(
                                long *listLength) = 0;

        virtual HRESULT __stdcall getQualifiedItem(
                       BSTR baseName,
                       BSTR namespaceURI,
                                IXMLDOMNode **qualifiedItem) = 0;

        virtual HRESULT __stdcall removeQualifiedItem(
                       BSTR baseName,
                       BSTR namespaceURI,
                                IXMLDOMNode **qualifiedItem) = 0;

        virtual HRESULT __stdcall nextNode(
                                IXMLDOMNode **nextItem) = 0;

        virtual HRESULT __stdcall reset( void) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

    };
# 2610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMCharacterData;



    struct __declspec(uuid("2933BF84-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCharacterData : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_data(
                                BSTR *data) = 0;

        virtual HRESULT __stdcall put_data(
                       BSTR data) = 0;

        virtual HRESULT __stdcall get_length(
                                long *dataLength) = 0;

        virtual HRESULT __stdcall substringData(
                       long offset,
                       long count,
                                BSTR *data) = 0;

        virtual HRESULT __stdcall appendData(
                       BSTR data) = 0;

        virtual HRESULT __stdcall insertData(
                       long offset,
                       BSTR data) = 0;

        virtual HRESULT __stdcall deleteData(
                       long offset,
                       long count) = 0;

        virtual HRESULT __stdcall replaceData(
                       long offset,
                       long count,
                       BSTR data) = 0;

    };
# 3086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMAttribute;



    struct __declspec(uuid("2933BF85-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMAttribute : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *attributeName) = 0;

        virtual HRESULT __stdcall get_value(
                                VARIANT *attributeValue) = 0;

        virtual HRESULT __stdcall put_value(
                       VARIANT attributeValue) = 0;

    };
# 3500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMElement;



    struct __declspec(uuid("2933BF86-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMElement : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *tagName) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR name,
                                VARIANT *value) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR name,
                       VARIANT value) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR name) = 0;

        virtual HRESULT __stdcall getAttributeNode(
                       BSTR name,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall setAttributeNode(
                       IXMLDOMAttribute *DOMAttribute,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall removeAttributeNode(
                       IXMLDOMAttribute *DOMAttribute,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall getElementsByTagName(
                       BSTR tagName,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall normalize( void) = 0;

    };
# 3984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMText;



    struct __declspec(uuid("2933BF87-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMText : public IXMLDOMCharacterData
    {
    public:
        virtual HRESULT __stdcall splitText(
                       long offset,
                                IXMLDOMText **rightHandTextNode) = 0;

    };
# 4443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMComment;



    struct __declspec(uuid("2933BF88-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMComment : public IXMLDOMCharacterData
    {
    public:
    };
# 4890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMProcessingInstruction;



    struct __declspec(uuid("2933BF89-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMProcessingInstruction : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_target(
                                BSTR *name) = 0;

        virtual HRESULT __stdcall get_data(
                                BSTR *value) = 0;

        virtual HRESULT __stdcall put_data(
                       BSTR value) = 0;

    };
# 5304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMCDATASection;



    struct __declspec(uuid("2933BF8A-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCDATASection : public IXMLDOMText
    {
    public:
    };
# 5760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMDocumentType;



    struct __declspec(uuid("2933BF8B-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocumentType : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *rootName) = 0;

        virtual HRESULT __stdcall get_entities(
                                IXMLDOMNamedNodeMap **entityMap) = 0;

        virtual HRESULT __stdcall get_notations(
                                IXMLDOMNamedNodeMap **notationMap) = 0;

    };
# 6174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMNotation;



    struct __declspec(uuid("2933BF8C-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNotation : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_publicId(
                                VARIANT *publicID) = 0;

        virtual HRESULT __stdcall get_systemId(
                                VARIANT *systemID) = 0;

    };
# 6578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMEntity;



    struct __declspec(uuid("2933BF8D-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntity : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_publicId(
                                VARIANT *publicID) = 0;

        virtual HRESULT __stdcall get_systemId(
                                VARIANT *systemID) = 0;

        virtual HRESULT __stdcall get_notationName(
                                BSTR *name) = 0;

    };
# 6992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMEntityReference;



    struct __declspec(uuid("2933BF8E-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntityReference : public IXMLDOMNode
    {
    public:
    };
# 7376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDOMParseError;



    struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMParseError : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_errorCode(
                                long *errorCode) = 0;

        virtual HRESULT __stdcall get_url(
                                BSTR *urlString) = 0;

        virtual HRESULT __stdcall get_reason(
                                BSTR *reasonString) = 0;

        virtual HRESULT __stdcall get_srcText(
                                BSTR *sourceString) = 0;

        virtual HRESULT __stdcall get_line(
                                long *lineNumber) = 0;

        virtual HRESULT __stdcall get_linepos(
                                long *linePosition) = 0;

        virtual HRESULT __stdcall get_filepos(
                                long *filePosition) = 0;

    };
# 7566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXTLRuntime;



    struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXTLRuntime : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall uniqueID(
                       IXMLDOMNode *pNode,
                                long *pID) = 0;

        virtual HRESULT __stdcall depth(
                       IXMLDOMNode *pNode,
                                long *pDepth) = 0;

        virtual HRESULT __stdcall childNumber(
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall ancestorChildNumber(
                       BSTR bstrNodeName,
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall absoluteChildNumber(
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall formatIndex(
                       long lIndex,
                       BSTR bstrFormat,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatNumber(
                       double dblNumber,
                       BSTR bstrFormat,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatDate(
                       VARIANT varDate,
                       BSTR bstrFormat,
                                 VARIANT varDestLocale,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatTime(
                       VARIANT varTime,
                       BSTR bstrFormat,
                                 VARIANT varDestLocale,
                                BSTR *pbstrFormattedString) = 0;

    };
# 8072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID DIID_XMLDOMDocumentEvents;



    struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    XMLDOMDocumentEvents : public IDispatch
    {
    };
# 8180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const CLSID CLSID_DOMDocument;



class __declspec(uuid("2933BF90-7B36-11d2-B20E-00C04F983E60"))
DOMDocument;


extern "C" const CLSID CLSID_DOMFreeThreadedDocument;



class __declspec(uuid("2933BF91-7B36-11d2-B20E-00C04F983E60"))
DOMFreeThreadedDocument;
# 8203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLHttpRequest;



    struct __declspec(uuid("ED8C108D-4349-11D2-91A4-00C04F7969E8")) __declspec(novtable)
    IXMLHttpRequest : public IDispatch
    {
    public:
        virtual HRESULT __stdcall open(
                                 BSTR bstrMethod,
                                 BSTR bstrUrl,
                                 VARIANT varAsync,
                                 VARIANT bstrUser,
                                 VARIANT bstrPassword) = 0;

        virtual HRESULT __stdcall setRequestHeader(
                                 BSTR bstrHeader,
                                 BSTR bstrValue) = 0;

        virtual HRESULT __stdcall getResponseHeader(
                                 BSTR bstrHeader,
                                                     BSTR *pbstrValue) = 0;

        virtual HRESULT __stdcall getAllResponseHeaders(
                                                     BSTR *pbstrHeaders) = 0;

        virtual HRESULT __stdcall send(
                                 VARIANT varBody) = 0;

        virtual HRESULT __stdcall abort( void) = 0;

        virtual HRESULT __stdcall get_status(
                                           long *plStatus) = 0;

        virtual HRESULT __stdcall get_statusText(
                                                     BSTR *pbstrStatus) = 0;

        virtual HRESULT __stdcall get_responseXML(
                                                     IDispatch **ppBody) = 0;

        virtual HRESULT __stdcall get_responseText(
                                                     BSTR *pbstrBody) = 0;

        virtual HRESULT __stdcall get_responseBody(
                                           VARIANT *pvarBody) = 0;

        virtual HRESULT __stdcall get_responseStream(
                                           VARIANT *pvarBody) = 0;

        virtual HRESULT __stdcall get_readyState(
                                           long *plState) = 0;

        virtual HRESULT __stdcall put_onreadystatechange(
                                     IDispatch *pReadyStateSink) = 0;

    };
# 8466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const CLSID CLSID_XMLHTTPRequest;



class __declspec(uuid("ED8C108E-4349-11D2-91A4-00C04F7969E8"))
XMLHTTPRequest;
# 8481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDSOControl;



    struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39")) __declspec(novtable)
    IXMLDSOControl : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_XMLDocument(
                                IXMLDOMDocument **ppDoc) = 0;

        virtual HRESULT __stdcall put_XMLDocument(
                       IXMLDOMDocument *ppDoc) = 0;

        virtual HRESULT __stdcall get_JavaDSOCompatible(
                                BOOL *fJavaDSOCompatible) = 0;

        virtual HRESULT __stdcall put_JavaDSOCompatible(
                       BOOL fJavaDSOCompatible) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *state) = 0;

    };
# 8644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const CLSID CLSID_XMLDSOControl;



class __declspec(uuid("550dda30-0541-11d2-9ca9-0060b0ec3d39"))
XMLDSOControl;
# 8659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLElementCollection;



    struct __declspec(uuid("65725580-9B5D-11d0-9BFE-00C04FC99C8E")) __declspec(novtable)
    IXMLElementCollection : public IDispatch
    {
    public:
        virtual HRESULT __stdcall put_length(
                       long v) = 0;

        virtual HRESULT __stdcall get_length(
                                long *p) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

        virtual HRESULT __stdcall item(
                                 VARIANT var1,
                                 VARIANT var2,
                                IDispatch **ppDisp) = 0;

    };
# 8823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDocument;



    struct __declspec(uuid("F52E2B61-18A1-11d1-B105-00805F49916B")) __declspec(novtable)
    IXMLDocument : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_root(
                                IXMLElement **p) = 0;

        virtual HRESULT __stdcall get_fileSize(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileModifiedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileUpdatedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_URL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_URL(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_mimeType(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *pl) = 0;

        virtual HRESULT __stdcall get_charset(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_charset(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_version(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_doctype(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_dtdURL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall createElement(
                       VARIANT vType,
                                 VARIANT var1,
                                IXMLElement **ppElem) = 0;

    };
# 9087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLDocument2;



    struct __declspec(uuid("2B8DE2FE-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLDocument2 : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_root(
                                IXMLElement2 **p) = 0;

        virtual HRESULT __stdcall get_fileSize(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileModifiedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileUpdatedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_URL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_URL(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_mimeType(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *pl) = 0;

        virtual HRESULT __stdcall get_charset(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_charset(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_version(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_doctype(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_dtdURL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall createElement(
                       VARIANT vType,
                                 VARIANT var1,
                                IXMLElement2 **ppElem) = 0;

        virtual HRESULT __stdcall get_async(
                                VARIANT_BOOL *pf) = 0;

        virtual HRESULT __stdcall put_async(
                       VARIANT_BOOL f) = 0;

    };
# 9371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLElement;



    struct __declspec(uuid("3F7F31AC-E15F-11d0-9C25-00C04FC99C8E")) __declspec(novtable)
    IXMLElement : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_tagName(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_parent(
                                IXMLElement **ppParent) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR strPropertyName,
                       VARIANT PropertyValue) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR strPropertyName,
                                VARIANT *PropertyValue) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR strPropertyName) = 0;

        virtual HRESULT __stdcall get_children(
                                IXMLElementCollection **pp) = 0;

        virtual HRESULT __stdcall get_type(
                                long *plType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR p) = 0;

        virtual HRESULT __stdcall addChild(
                       IXMLElement *pChildElem,
            long lIndex,
            long lReserved) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLElement *pChildElem) = 0;

    };
# 9619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLElement2;



    struct __declspec(uuid("2B8DE2FF-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLElement2 : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_tagName(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_parent(
                                IXMLElement2 **ppParent) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR strPropertyName,
                       VARIANT PropertyValue) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR strPropertyName,
                                VARIANT *PropertyValue) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR strPropertyName) = 0;

        virtual HRESULT __stdcall get_children(
                                IXMLElementCollection **pp) = 0;

        virtual HRESULT __stdcall get_type(
                                long *plType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR p) = 0;

        virtual HRESULT __stdcall addChild(
                       IXMLElement2 *pChildElem,
            long lIndex,
            long lReserved) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLElement2 *pChildElem) = 0;

        virtual HRESULT __stdcall get_attributes(
                                IXMLElementCollection **pp) = 0;

    };
# 9877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLAttribute;



    struct __declspec(uuid("D4D4A0FC-3B73-11d1-B2B4-00C04FB92596")) __declspec(novtable)
    IXMLAttribute : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *n) = 0;

        virtual HRESULT __stdcall get_value(
                                BSTR *v) = 0;

    };
# 10017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const IID IID_IXMLError;



    struct __declspec(uuid("948C5AD3-C58D-11d0-9C0B-00C04FC99C8E")) __declspec(novtable)
    IXMLError : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetErrorInfo(
            XML_ERROR *pErrorReturn) = 0;

    };
# 10090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
extern "C" const CLSID CLSID_XMLDocument;



class __declspec(uuid("CFC399AF-D876-11d0-9C10-00C04FC99C8E"))
XMLDocument;
# 10105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/msxml.h" 3
#pragma warning(pop)



extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec;






}
# 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 2 3



extern "C"{
# 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
#pragma comment(lib,"uuid.lib")






#pragma warning(push)



#pragma warning(disable: 4820)
# 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID CLSID_SBS_StdURLMoniker;
extern "C" const IID CLSID_SBS_HttpProtocol;
extern "C" const IID CLSID_SBS_FtpProtocol;
extern "C" const IID CLSID_SBS_GopherProtocol;
extern "C" const IID CLSID_SBS_HttpSProtocol;
extern "C" const IID CLSID_SBS_FileProtocol;
extern "C" const IID CLSID_SBS_MkProtocol;
extern "C" const IID CLSID_SBS_UrlMkBindCtx;
extern "C" const IID CLSID_SBS_SoftDistExt;
extern "C" const IID CLSID_SBS_CdlProtocol;
extern "C" const IID CLSID_SBS_ClassInstallFilter;
extern "C" const IID CLSID_SBS_InternetSecurityManager;
extern "C" const IID CLSID_SBS_InternetZoneManager;







extern "C" const IID IID_IAsyncMoniker;
extern "C" const IID CLSID_StdURLMoniker;
extern "C" const IID CLSID_HttpProtocol;
extern "C" const IID CLSID_FtpProtocol;
extern "C" const IID CLSID_GopherProtocol;
extern "C" const IID CLSID_HttpSProtocol;
extern "C" const IID CLSID_FileProtocol;
extern "C" const IID CLSID_ResProtocol;
extern "C" const IID CLSID_AboutProtocol;
extern "C" const IID CLSID_JSProtocol;
extern "C" const IID CLSID_MailtoProtocol;
extern "C" const IID CLSID_IE4_PROTOCOLS;
extern "C" const IID CLSID_MkProtocol;
extern "C" const IID CLSID_StdURLProtocol;
extern "C" const IID CLSID_TBAuthProtocol;
extern "C" const IID CLSID_UrlMkBindCtx;
extern "C" const IID CLSID_CdlProtocol;
extern "C" const IID CLSID_ClassInstallFilter;
extern "C" const IID IID_IAsyncBindCtx;
# 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall CreateURLMoniker( LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk);
extern "C" HRESULT __stdcall CreateURLMonikerEx( LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk, DWORD dwFlags);
extern "C" HRESULT __stdcall GetClassURL( LPCWSTR szURL, CLSID *pClsID);
extern "C" HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb,
                                         IEnumFORMATETC *pEFetc, IBindCtx **ppBC);

extern "C" HRESULT __stdcall CreateURLMonikerEx2( LPMONIKER pMkCtx, IUri* pUri, LPMONIKER * ppmk, DWORD dwFlags);

extern "C" HRESULT __stdcall CreateAsyncBindCtxEx( IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,
                                     IBindCtx **ppBC, DWORD reserved);
extern "C" HRESULT __stdcall MkParseDisplayNameEx( IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,
                                         LPMONIKER *ppmk);
extern "C" HRESULT __stdcall RegisterBindStatusCallback( LPBC pBC, IBindStatusCallback *pBSCb,
                                         IBindStatusCallback** ppBSCBPrev, DWORD dwReserved);
extern "C" HRESULT __stdcall RevokeBindStatusCallback( LPBC pBC, IBindStatusCallback *pBSCb);
extern "C" HRESULT __stdcall GetClassFileOrMime( LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid);
extern "C" HRESULT __stdcall IsValidURL( LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
extern "C" HRESULT __stdcall CoGetClassObjectFromURL( const IID & rCLASSID,
                 LPCWSTR szCODE, DWORD dwFileVersionMS,
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
                 LPBINDCTX pBindCtx, DWORD dwClsContext,
                       LPVOID pvReserved, const IID & riid, LPVOID * ppv);
extern "C" HRESULT __stdcall IEInstallScope( LPDWORD pdwScope);
extern "C" HRESULT __stdcall FaultInIEFeature( HWND hWnd,
                 uCLSSPEC *pClassSpec,
                        QUERYCONTEXT *pQuery, DWORD dwFlags);
extern "C" HRESULT __stdcall GetComponentIDFromCLSSPEC( uCLSSPEC *pClassspec,
                     LPSTR * ppszComponentID);
# 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall IsAsyncMoniker( IMoniker* pmk);
extern "C" HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);

extern "C" HRESULT __stdcall RegisterMediaTypes( UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);
extern "C" HRESULT __stdcall FindMediaType( LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);
extern "C" HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc);
extern "C" HRESULT __stdcall RegisterFormatEnumerator( LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);
extern "C" HRESULT __stdcall RevokeFormatEnumerator( LPBC pBC, IEnumFORMATETC *pEFetc);
extern "C" HRESULT __stdcall RegisterMediaTypeClass( LPBC pBC, UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);
extern "C" HRESULT __stdcall FindMediaTypeClass( LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);




extern "C" HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
extern "C" HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved);




extern "C" HRESULT __stdcall FindMimeFromData(
                                 LPBC pBC,
                                 LPCWSTR pwzUrl,
                                 LPVOID pBuffer,
                                 DWORD cbSize,
                                 LPCWSTR pwzMimeProposed,
                                 DWORD dwMimeFlags,
                                 LPWSTR *ppwzMimeOut,
                                 DWORD dwReserved);
# 607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall ObtainUserAgentString(
                                         DWORD dwOption,
                                         LPSTR pszUAOut,
                                         DWORD *cbSize);
extern "C" HRESULT __stdcall CompareSecurityIds( BYTE* pbSecurityId1, DWORD dwLen1, BYTE* pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
extern "C" HRESULT __stdcall CompatFlagsFromClsid( CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);




typedef enum IEObjectType
{
    IE_EPM_OBJECT_EVENT,
    IE_EPM_OBJECT_MUTEX,
    IE_EPM_OBJECT_SEMAPHORE,
    IE_EPM_OBJECT_SHARED_MEMORY,
    IE_EPM_OBJECT_WAITABLE_TIMER,
    IE_EPM_OBJECT_FILE,
    IE_EPM_OBJECT_NAMED_PIPE,
    IE_EPM_OBJECT_REGISTRY,
} IEObjectType;

extern "C" HRESULT __stdcall SetAccessForIEAppContainer(
         HANDLE hObject,
         IEObjectType ieObjectType,
         DWORD dwAccessMask
    );
# 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec;







typedef IPersistMoniker *LPPERSISTMONIKER;


extern "C" const IID IID_IPersistMoniker;



    struct __declspec(uuid("79eac9c9-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IPersistMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID(
                                   CLSID *pClassID) = 0;

        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                       BOOL fFullyAvailable,
                                     IMoniker *pimkName,
                                     LPBC pibc,
                       DWORD grfMode) = 0;

        virtual HRESULT __stdcall Save(
                                     IMoniker *pimkName,
                                     LPBC pbc,
                       BOOL fRemember) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                     IMoniker *pimkName,
                                     LPBC pibc) = 0;

        virtual HRESULT __stdcall GetCurMoniker(
                                             IMoniker **ppimkName) = 0;

    };
# 931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec;







typedef IMonikerProp *LPMONIKERPROP;

typedef
enum __MIDL_IMonikerProp_0001
    {
        MIMETYPEPROP = 0,
        USE_SRC_URL = 0x1,
        CLASSIDPROP = 0x2,
        TRUSTEDDOWNLOADPROP = 0x3,
        POPUPLEVELPROP = 0x4
    } MONIKERPROPERTY;


extern "C" const IID IID_IMonikerProp;



    struct __declspec(uuid("a5ca5f7f-1847-4d87-9c5b-918509f7511d")) __declspec(novtable)
    IMonikerProp : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PutProperty(
                       MONIKERPROPERTY mkp,
                                 LPCWSTR val) = 0;

    };
# 1036 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec;







typedef IBindProtocol *LPBINDPROTOCOL;


extern "C" const IID IID_IBindProtocol;



    struct __declspec(uuid("79eac9cd-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateBinding(
                       LPCWSTR szUrl,
                       IBindCtx *pbc,
                        IBinding **ppb) = 0;

    };
# 1133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec;







typedef IBinding *LPBINDING;


extern "C" const IID IID_IBinding;



    struct __declspec(uuid("79eac9c0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBinding : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Abort( void) = 0;

        virtual HRESULT __stdcall Suspend( void) = 0;

        virtual HRESULT __stdcall Resume( void) = 0;

        virtual HRESULT __stdcall SetPriority(
                       LONG nPriority) = 0;

        virtual HRESULT __stdcall GetPriority(
                                   LONG *pnPriority) = 0;

        virtual HRESULT __stdcall GetBindResult(
                        CLSID *pclsidProtocol,
                        DWORD *pdwResult,

                        LPOLESTR *pszResult,
                            DWORD *pdwReserved) = 0;

    };
# 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
                HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy(
              IBinding * This,
                           CLSID *pclsidProtocol,
                           DWORD *pdwResult,
                                     LPOLESTR *pszResult,
               DWORD dwReserved);


void __stdcall IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec;







typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef
enum __MIDL_IBindStatusCallback_0001
    {
        BINDVERB_GET = 0,
        BINDVERB_POST = 0x1,
        BINDVERB_PUT = 0x2,
        BINDVERB_CUSTOM = 0x3,
        BINDVERB_RESERVED1 = 0x4
    } BINDVERB;

typedef
enum __MIDL_IBindStatusCallback_0002
    {
        BINDINFOF_URLENCODESTGMEDDATA = 0x1,
        BINDINFOF_URLENCODEDEXTRAINFO = 0x2
    } BINDINFOF;

typedef
enum __MIDL_IBindStatusCallback_0003
    {
        BINDF_ASYNCHRONOUS = 0x1,
        BINDF_ASYNCSTORAGE = 0x2,
        BINDF_NOPROGRESSIVERENDERING = 0x4,
        BINDF_OFFLINEOPERATION = 0x8,
        BINDF_GETNEWESTVERSION = 0x10,
        BINDF_NOWRITECACHE = 0x20,
        BINDF_NEEDFILE = 0x40,
        BINDF_PULLDATA = 0x80,
        BINDF_IGNORESECURITYPROBLEM = 0x100,
        BINDF_RESYNCHRONIZE = 0x200,
        BINDF_HYPERLINK = 0x400,
        BINDF_NO_UI = 0x800,
        BINDF_SILENTOPERATION = 0x1000,
        BINDF_PRAGMA_NO_CACHE = 0x2000,
        BINDF_GETCLASSOBJECT = 0x4000,
        BINDF_RESERVED_1 = 0x8000,
        BINDF_FREE_THREADED = 0x10000,
        BINDF_DIRECT_READ = 0x20000,
        BINDF_FORMS_SUBMIT = 0x40000,
        BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
        BINDF_FROMURLMON = 0x100000,
        BINDF_FWD_BACK = 0x200000,
        BINDF_PREFERDEFAULTHANDLER = 0x400000,
        BINDF_ENFORCERESTRICTED = 0x800000,
        BINDF_RESERVED_2 = 0x80000000,
        BINDF_RESERVED_3 = 0x1000000,
        BINDF_RESERVED_4 = 0x2000000,
        BINDF_RESERVED_5 = 0x4000000,
        BINDF_RESERVED_6 = 0x8000000,
        BINDF_RESERVED_7 = 0x40000000,
        BINDF_RESERVED_8 = 0x20000000
    } BINDF;

typedef
enum __MIDL_IBindStatusCallback_0004
    {
        URL_ENCODING_NONE = 0,
        URL_ENCODING_ENABLE_UTF8 = 0x10000000,
        URL_ENCODING_DISABLE_UTF8 = 0x20000000
    } URL_ENCODING;

typedef struct _tagBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES
    {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
    } REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } RemBINDINFO;

typedef struct tagRemFORMATETC
    {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } RemFORMATETC;

typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef
enum __MIDL_IBindStatusCallback_0005
    {
        BINDINFO_OPTIONS_WININETFLAG = 0x10000,
        BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
        BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
        BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
        BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
        BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
        BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
        BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
        BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
        BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
        BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
        BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
        BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
        BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
        BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = ( int )0x80000000
    } BINDINFO_OPTIONS;

typedef
enum __MIDL_IBindStatusCallback_0006
    {
        BSCF_FIRSTDATANOTIFICATION = 0x1,
        BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
        BSCF_LASTDATANOTIFICATION = 0x4,
        BSCF_DATAFULLYAVAILABLE = 0x8,
        BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
        BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
        BSCF_64BITLENGTHDOWNLOAD = 0x40
    } BSCF;

typedef
enum tagBINDSTATUS
    {
        BINDSTATUS_FINDINGRESOURCE = 1,
        BINDSTATUS_CONNECTING = ( BINDSTATUS_FINDINGRESOURCE + 1 ) ,
        BINDSTATUS_REDIRECTING = ( BINDSTATUS_CONNECTING + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADDATA = ( BINDSTATUS_REDIRECTING + 1 ) ,
        BINDSTATUS_DOWNLOADINGDATA = ( BINDSTATUS_BEGINDOWNLOADDATA + 1 ) ,
        BINDSTATUS_ENDDOWNLOADDATA = ( BINDSTATUS_DOWNLOADINGDATA + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADCOMPONENTS = ( BINDSTATUS_ENDDOWNLOADDATA + 1 ) ,
        BINDSTATUS_INSTALLINGCOMPONENTS = ( BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_ENDDOWNLOADCOMPONENTS = ( BINDSTATUS_INSTALLINGCOMPONENTS + 1 ) ,
        BINDSTATUS_USINGCACHEDCOPY = ( BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_SENDINGREQUEST = ( BINDSTATUS_USINGCACHEDCOPY + 1 ) ,
        BINDSTATUS_CLASSIDAVAILABLE = ( BINDSTATUS_SENDINGREQUEST + 1 ) ,
        BINDSTATUS_MIMETYPEAVAILABLE = ( BINDSTATUS_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_CACHEFILENAMEAVAILABLE = ( BINDSTATUS_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_BEGINSYNCOPERATION = ( BINDSTATUS_CACHEFILENAMEAVAILABLE + 1 ) ,
        BINDSTATUS_ENDSYNCOPERATION = ( BINDSTATUS_BEGINSYNCOPERATION + 1 ) ,
        BINDSTATUS_BEGINUPLOADDATA = ( BINDSTATUS_ENDSYNCOPERATION + 1 ) ,
        BINDSTATUS_UPLOADINGDATA = ( BINDSTATUS_BEGINUPLOADDATA + 1 ) ,
        BINDSTATUS_ENDUPLOADDATA = ( BINDSTATUS_UPLOADINGDATA + 1 ) ,
        BINDSTATUS_PROTOCOLCLASSID = ( BINDSTATUS_ENDUPLOADDATA + 1 ) ,
        BINDSTATUS_ENCODING = ( BINDSTATUS_PROTOCOLCLASSID + 1 ) ,
        BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = ( BINDSTATUS_ENCODING + 1 ) ,
        BINDSTATUS_CLASSINSTALLLOCATION = ( BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_DECODING = ( BINDSTATUS_CLASSINSTALLLOCATION + 1 ) ,
        BINDSTATUS_LOADINGMIMEHANDLER = ( BINDSTATUS_DECODING + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONATTACH = ( BINDSTATUS_LOADINGMIMEHANDLER + 1 ) ,
        BINDSTATUS_FILTERREPORTMIMETYPE = ( BINDSTATUS_CONTENTDISPOSITIONATTACH + 1 ) ,
        BINDSTATUS_CLSIDCANINSTANTIATE = ( BINDSTATUS_FILTERREPORTMIMETYPE + 1 ) ,
        BINDSTATUS_IUNKNOWNAVAILABLE = ( BINDSTATUS_CLSIDCANINSTANTIATE + 1 ) ,
        BINDSTATUS_DIRECTBIND = ( BINDSTATUS_IUNKNOWNAVAILABLE + 1 ) ,
        BINDSTATUS_RAWMIMETYPE = ( BINDSTATUS_DIRECTBIND + 1 ) ,
        BINDSTATUS_PROXYDETECTING = ( BINDSTATUS_RAWMIMETYPE + 1 ) ,
        BINDSTATUS_ACCEPTRANGES = ( BINDSTATUS_PROXYDETECTING + 1 ) ,
        BINDSTATUS_COOKIE_SENT = ( BINDSTATUS_ACCEPTRANGES + 1 ) ,
        BINDSTATUS_COMPACT_POLICY_RECEIVED = ( BINDSTATUS_COOKIE_SENT + 1 ) ,
        BINDSTATUS_COOKIE_SUPPRESSED = ( BINDSTATUS_COMPACT_POLICY_RECEIVED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_UNKNOWN = ( BINDSTATUS_COOKIE_SUPPRESSED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_ACCEPT = ( BINDSTATUS_COOKIE_STATE_UNKNOWN + 1 ) ,
        BINDSTATUS_COOKIE_STATE_REJECT = ( BINDSTATUS_COOKIE_STATE_ACCEPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_PROMPT = ( BINDSTATUS_COOKIE_STATE_REJECT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_LEASH = ( BINDSTATUS_COOKIE_STATE_PROMPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_DOWNGRADE = ( BINDSTATUS_COOKIE_STATE_LEASH + 1 ) ,
        BINDSTATUS_POLICY_HREF = ( BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1 ) ,
        BINDSTATUS_P3P_HEADER = ( BINDSTATUS_POLICY_HREF + 1 ) ,
        BINDSTATUS_SESSION_COOKIE_RECEIVED = ( BINDSTATUS_P3P_HEADER + 1 ) ,
        BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = ( BINDSTATUS_SESSION_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_SESSION_COOKIES_ALLOWED = ( BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_CACHECONTROL = ( BINDSTATUS_SESSION_COOKIES_ALLOWED + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONFILENAME = ( BINDSTATUS_CACHECONTROL + 1 ) ,
        BINDSTATUS_MIMETEXTPLAINMISMATCH = ( BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1 ) ,
        BINDSTATUS_PUBLISHERAVAILABLE = ( BINDSTATUS_MIMETEXTPLAINMISMATCH + 1 ) ,
        BINDSTATUS_DISPLAYNAMEAVAILABLE = ( BINDSTATUS_PUBLISHERAVAILABLE + 1 ) ,
        BINDSTATUS_SSLUX_NAVBLOCKED = ( BINDSTATUS_DISPLAYNAMEAVAILABLE + 1 ) ,
        BINDSTATUS_SERVER_MIMETYPEAVAILABLE = ( BINDSTATUS_SSLUX_NAVBLOCKED + 1 ) ,
        BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = ( BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_64BIT_PROGRESS = ( BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS,
        BINDSTATUS_RESERVED_0 = ( BINDSTATUS_LAST + 1 ) ,
        BINDSTATUS_RESERVED_1 = ( BINDSTATUS_RESERVED_0 + 1 ) ,
        BINDSTATUS_RESERVED_2 = ( BINDSTATUS_RESERVED_1 + 1 ) ,
        BINDSTATUS_RESERVED_3 = ( BINDSTATUS_RESERVED_2 + 1 ) ,
        BINDSTATUS_RESERVED_4 = ( BINDSTATUS_RESERVED_3 + 1 ) ,
        BINDSTATUS_RESERVED_5 = ( BINDSTATUS_RESERVED_4 + 1 ) ,
        BINDSTATUS_RESERVED_6 = ( BINDSTATUS_RESERVED_5 + 1 ) ,
        BINDSTATUS_RESERVED_7 = ( BINDSTATUS_RESERVED_6 + 1 ) ,
        BINDSTATUS_RESERVED_8 = ( BINDSTATUS_RESERVED_7 + 1 ) ,
        BINDSTATUS_RESERVED_9 = ( BINDSTATUS_RESERVED_8 + 1 ) ,
        BINDSTATUS_RESERVED_A = ( BINDSTATUS_RESERVED_9 + 1 ) ,
        BINDSTATUS_RESERVED_B = ( BINDSTATUS_RESERVED_A + 1 ) ,
        BINDSTATUS_RESERVED_C = ( BINDSTATUS_RESERVED_B + 1 ) ,
        BINDSTATUS_RESERVED_D = ( BINDSTATUS_RESERVED_C + 1 ) ,
        BINDSTATUS_RESERVED_E = ( BINDSTATUS_RESERVED_D + 1 ) ,
        BINDSTATUS_RESERVED_F = ( BINDSTATUS_RESERVED_E + 1 ) ,
        BINDSTATUS_RESERVED_10 = ( BINDSTATUS_RESERVED_F + 1 ) ,
        BINDSTATUS_RESERVED_11 = ( BINDSTATUS_RESERVED_10 + 1 ) ,
        BINDSTATUS_RESERVED_12 = ( BINDSTATUS_RESERVED_11 + 1 ) ,
        BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_12
    } BINDSTATUS;


extern "C" const IID IID_IBindStatusCallback;



    struct __declspec(uuid("79eac9c1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindStatusCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStartBinding(
                       DWORD dwReserved,
                                     IBinding *pib) = 0;

        virtual HRESULT __stdcall GetPriority(
                                   LONG *pnPriority) = 0;

        virtual HRESULT __stdcall OnLowResource(
                       DWORD reserved) = 0;

        virtual HRESULT __stdcall OnProgress(
                       ULONG ulProgress,
                       ULONG ulProgressMax,
                       ULONG ulStatusCode,
                                             LPCWSTR szStatusText) = 0;

        virtual HRESULT __stdcall OnStopBinding(
                       HRESULT hresult,
                                             LPCWSTR szError) = 0;

        virtual HRESULT __stdcall GetBindInfo(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo) = 0;

        virtual HRESULT __stdcall OnDataAvailable(
                       DWORD grfBSCF,
                       DWORD dwSize,
                       FORMATETC *pformatetc,
                       STGMEDIUM *pstgmed) = 0;

        virtual HRESULT __stdcall OnObjectAvailable(
                                 const IID & riid,
                                             IUnknown *punk) = 0;

    };
# 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
                HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy(
              IBindStatusCallback * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy(
              IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
                         RemFORMATETC *pformatetc,
                         RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec;







typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

typedef
enum __MIDL_IBindStatusCallbackEx_0001
    {
        BINDF2_DISABLEBASICOVERHTTP = 0x1,
        BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
        BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
        BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
        BINDF2_SETDOWNLOADMODE = 0x20,
        BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
        BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
        BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
        BINDF2_RESERVED_17 = 0x200,
        BINDF2_RESERVED_16 = 0x400,
        BINDF2_RESERVED_15 = 0x800,
        BINDF2_RESERVED_14 = 0x1000,
        BINDF2_RESERVED_13 = 0x2000,
        BINDF2_RESERVED_12 = 0x4000,
        BINDF2_RESERVED_11 = 0x8000,
        BINDF2_RESERVED_10 = 0x10000,
        BINDF2_RESERVED_F = 0x20000,
        BINDF2_RESERVED_E = 0x40000,
        BINDF2_RESERVED_D = 0x80000,
        BINDF2_RESERVED_C = 0x100000,
        BINDF2_RESERVED_B = 0x200000,
        BINDF2_RESERVED_A = 0x400000,
        BINDF2_RESERVED_9 = 0x800000,
        BINDF2_RESERVED_8 = 0x1000000,
        BINDF2_RESERVED_7 = 0x2000000,
        BINDF2_RESERVED_6 = 0x4000000,
        BINDF2_RESERVED_5 = 0x8000000,
        BINDF2_RESERVED_4 = 0x10000000,
        BINDF2_RESERVED_3 = 0x20000000,
        BINDF2_RESERVED_2 = 0x40000000,
        BINDF2_RESERVED_1 = 0x80000000
    } BINDF2;


extern "C" const IID IID_IBindStatusCallbackEx;



    struct __declspec(uuid("aaa74ef9-8ee7-4659-88d9-f8c504da73cc")) __declspec(novtable)
    IBindStatusCallbackEx : public IBindStatusCallback
    {
    public:
        virtual HRESULT __stdcall GetBindInfoEx(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo,
                        DWORD *grfBINDF2,
                        DWORD *pdwReserved) = 0;

    };
# 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
                HRESULT __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
              IBindStatusCallbackEx * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed,
                           DWORD *grfBINDF2,
                           DWORD *pdwReserved);


void __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec;







typedef IAuthenticate *LPAUTHENTICATION;


extern "C" const IID IID_IAuthenticate;



    struct __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IAuthenticate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Authenticate(
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword) = 0;

    };
# 2060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec;







typedef IAuthenticateEx *LPAUTHENTICATIONEX;

typedef
enum __MIDL_IAuthenticateEx_0001
    {
        AUTHENTICATEF_PROXY = 0x1,
        AUTHENTICATEF_BASIC = 0x2,
        AUTHENTICATEF_HTTP = 0x4
    } AUTHENTICATEF;

typedef struct _tagAUTHENTICATEINFO
    {
    DWORD dwFlags;
    DWORD dwReserved;
    } AUTHENTICATEINFO;


extern "C" const IID IID_IAuthenticateEx;



    struct __declspec(uuid("2ad1edaf-d83d-48b5-9adf-03dbe19f53bd")) __declspec(novtable)
    IAuthenticateEx : public IAuthenticate
    {
    public:
        virtual HRESULT __stdcall AuthenticateEx(
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword,
                                 AUTHENTICATEINFO *pauthinfo) = 0;

    };
# 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec;







typedef IHttpNegotiate *LPHTTPNEGOTIATE;


extern "C" const IID IID_IHttpNegotiate;



    struct __declspec(uuid("79eac9d2-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall BeginningTransaction(
                                 LPCWSTR szURL,
                                             LPCWSTR szHeaders,
                       DWORD dwReserved,
                                             LPWSTR *pszAdditionalHeaders) = 0;

        virtual HRESULT __stdcall OnResponse(
                       DWORD dwResponseCode,
                                             LPCWSTR szResponseHeaders,
                                             LPCWSTR szRequestHeaders,
                                             LPWSTR *pszAdditionalRequestHeaders) = 0;

    };
# 2298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec;







typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;


extern "C" const IID IID_IHttpNegotiate2;



    struct __declspec(uuid("4F9F9FCB-E0F4-48eb-B7AB-FA2EA9365CB4")) __declspec(novtable)
    IHttpNegotiate2 : public IHttpNegotiate
    {
    public:
        virtual HRESULT __stdcall GetRootSecurityId(
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

    };
# 2416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec;







typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;


extern "C" const IID IID_IHttpNegotiate3;



    struct __declspec(uuid("57b6c80a-34c2-4602-bc26-66a02fc57153")) __declspec(novtable)
    IHttpNegotiate3 : public IHttpNegotiate2
    {
    public:
        virtual HRESULT __stdcall GetSerializedClientCertContext(
                                                                                     BYTE **ppbCert,
                                   DWORD *pcbCert) = 0;

    };
# 2542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec;







typedef IWinInetFileStream *LPWININETFILESTREAM;


extern "C" const IID IID_IWinInetFileStream;



    struct __declspec(uuid("F134C4B7-B1F8-4e75-B886-74B90943BECB")) __declspec(novtable)
    IWinInetFileStream : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetHandleForUnlock(
                       DWORD_PTR hWinInetLockHandle,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall SetDeleteFile(
                       DWORD_PTR dwReserved) = 0;

    };
# 2647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec;







typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;


extern "C" const IID IID_IWindowForBindingUI;



    struct __declspec(uuid("79eac9d5-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWindowForBindingUI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                       const GUID & rguidReason,
                        HWND *phwnd) = 0;

    };
# 2742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec;







typedef ICodeInstall *LPCODEINSTALL;

typedef
enum __MIDL_ICodeInstall_0001
    {
        CIP_DISK_FULL = 0,
        CIP_ACCESS_DENIED = ( CIP_DISK_FULL + 1 ) ,
        CIP_NEWER_VERSION_EXISTS = ( CIP_ACCESS_DENIED + 1 ) ,
        CIP_OLDER_VERSION_EXISTS = ( CIP_NEWER_VERSION_EXISTS + 1 ) ,
        CIP_NAME_CONFLICT = ( CIP_OLDER_VERSION_EXISTS + 1 ) ,
        CIP_TRUST_VERIFICATION_COMPONENT_MISSING = ( CIP_NAME_CONFLICT + 1 ) ,
        CIP_EXE_SELF_REGISTERATION_TIMEOUT = ( CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1 ) ,
        CIP_UNSAFE_TO_ABORT = ( CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1 ) ,
        CIP_NEED_REBOOT = ( CIP_UNSAFE_TO_ABORT + 1 ) ,
        CIP_NEED_REBOOT_UI_PERMISSION = ( CIP_NEED_REBOOT + 1 )
    } CIP_STATUS;


extern "C" const IID IID_ICodeInstall;



    struct __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    ICodeInstall : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnCodeInstallProblem(
                       ULONG ulStatusCode,
                               LPCWSTR szDestination,
                               LPCWSTR szSource,
                       DWORD dwReserved) = 0;

    };
# 2870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec;







typedef
enum __MIDL_IUri_0001
    {
        Uri_PROPERTY_ABSOLUTE_URI = 0,
        Uri_PROPERTY_STRING_START = Uri_PROPERTY_ABSOLUTE_URI,
        Uri_PROPERTY_AUTHORITY = 1,
        Uri_PROPERTY_DISPLAY_URI = 2,
        Uri_PROPERTY_DOMAIN = 3,
        Uri_PROPERTY_EXTENSION = 4,
        Uri_PROPERTY_FRAGMENT = 5,
        Uri_PROPERTY_HOST = 6,
        Uri_PROPERTY_PASSWORD = 7,
        Uri_PROPERTY_PATH = 8,
        Uri_PROPERTY_PATH_AND_QUERY = 9,
        Uri_PROPERTY_QUERY = 10,
        Uri_PROPERTY_RAW_URI = 11,
        Uri_PROPERTY_SCHEME_NAME = 12,
        Uri_PROPERTY_USER_INFO = 13,
        Uri_PROPERTY_USER_NAME = 14,
        Uri_PROPERTY_STRING_LAST = Uri_PROPERTY_USER_NAME,
        Uri_PROPERTY_HOST_TYPE = 15,
        Uri_PROPERTY_DWORD_START = Uri_PROPERTY_HOST_TYPE,
        Uri_PROPERTY_PORT = 16,
        Uri_PROPERTY_SCHEME = 17,
        Uri_PROPERTY_ZONE = 18,
        Uri_PROPERTY_DWORD_LAST = Uri_PROPERTY_ZONE
    } Uri_PROPERTY;

typedef
enum __MIDL_IUri_0002
    {
        Uri_HOST_UNKNOWN = 0,
        Uri_HOST_DNS = ( Uri_HOST_UNKNOWN + 1 ) ,
        Uri_HOST_IPV4 = ( Uri_HOST_DNS + 1 ) ,
        Uri_HOST_IPV6 = ( Uri_HOST_IPV4 + 1 ) ,
        Uri_HOST_IDN = ( Uri_HOST_IPV6 + 1 )
    } Uri_HOST_TYPE;


extern "C" const IID IID_IUri;



    struct __declspec(uuid("A39EE748-6A27-4817-A6F2-13914BEF5890")) __declspec(novtable)
    IUri : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPropertyBSTR(
                              Uri_PROPERTY uriProp,
                                             BSTR *pbstrProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetPropertyLength(
                              Uri_PROPERTY uriProp,
                                   DWORD *pcchProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetPropertyDWORD(
                              Uri_PROPERTY uriProp,
                                   DWORD *pdwProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall HasProperty(
                              Uri_PROPERTY uriProp,
                                   BOOL *pfHasProperty) = 0;

        virtual HRESULT __stdcall GetAbsoluteUri(
                                             BSTR *pbstrAbsoluteUri) = 0;

        virtual HRESULT __stdcall GetAuthority(
                                             BSTR *pbstrAuthority) = 0;

        virtual HRESULT __stdcall GetDisplayUri(
                                             BSTR *pbstrDisplayString) = 0;

        virtual HRESULT __stdcall GetDomain(
                                             BSTR *pbstrDomain) = 0;

        virtual HRESULT __stdcall GetExtension(
                                             BSTR *pbstrExtension) = 0;

        virtual HRESULT __stdcall GetFragment(
                                             BSTR *pbstrFragment) = 0;

        virtual HRESULT __stdcall GetHost(
                                             BSTR *pbstrHost) = 0;

        virtual HRESULT __stdcall GetPassword(
                                             BSTR *pbstrPassword) = 0;

        virtual HRESULT __stdcall GetPath(
                                             BSTR *pbstrPath) = 0;

        virtual HRESULT __stdcall GetPathAndQuery(
                                             BSTR *pbstrPathAndQuery) = 0;

        virtual HRESULT __stdcall GetQuery(
                                             BSTR *pbstrQuery) = 0;

        virtual HRESULT __stdcall GetRawUri(
                                             BSTR *pbstrRawUri) = 0;

        virtual HRESULT __stdcall GetSchemeName(
                                             BSTR *pbstrSchemeName) = 0;

        virtual HRESULT __stdcall GetUserInfo(
                                             BSTR *pbstrUserInfo) = 0;

        virtual HRESULT __stdcall GetUserNameW(
                                             BSTR *pbstrUserName) = 0;

        virtual HRESULT __stdcall GetHostType(
                                   DWORD *pdwHostType) = 0;

        virtual HRESULT __stdcall GetPort(
                                   DWORD *pdwPort) = 0;

        virtual HRESULT __stdcall GetScheme(
                                   DWORD *pdwScheme) = 0;

        virtual HRESULT __stdcall GetZone(
                                   DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall GetProperties(
                                   LPDWORD pdwFlags) = 0;

        virtual HRESULT __stdcall IsEqual(
                                     IUri *pUri,
                                   BOOL *pfEqual) = 0;

    };
# 3250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall CreateUri( LPCWSTR pwzURI,
                      DWORD dwFlags,
                            DWORD_PTR dwReserved,
                          IUri** ppURI);

extern "C" HRESULT __stdcall CreateUriWithFragment(
                      LPCWSTR pwzURI,
                          LPCWSTR pwzFragment,
                      DWORD dwFlags,
                            DWORD_PTR dwReserved,
                          IUri** ppURI);






extern "C" HRESULT __stdcall CreateUriFromMultiByteString(
               LPCSTR pszANSIInputUri,
               DWORD dwEncodingFlags,
               DWORD dwCodePage,
               DWORD dwCreateFlags,
               DWORD_PTR dwReserved,
               IUri** ppUri);
# 3350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec;
# 3360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IUriContainer;



    struct __declspec(uuid("a158a630-ed6f-45fb-b987-f68676f57752")) __declspec(novtable)
    IUriContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetIUri(
                        IUri **ppIUri) = 0;

    };
# 3440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IUriBuilder;



    struct __declspec(uuid("4221B2E1-8955-46c0-BD5B-DE9897565DE7")) __declspec(novtable)
    IUriBuilder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateUriSimple(
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall CreateUri(
                       DWORD dwCreateFlags,
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall CreateUriWithFlags(
                       DWORD dwCreateFlags,
                       DWORD dwUriBuilderFlags,
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall GetIUri(

                                       IUri **ppIUri) = 0;

        virtual HRESULT __stdcall SetIUri(

                      IUri *pIUri) = 0;

        virtual HRESULT __stdcall GetFragment(

                   DWORD *pcchFragment,

                                       LPCWSTR *ppwzFragment) = 0;

        virtual HRESULT __stdcall GetHost(

                   DWORD *pcchHost,

                                       LPCWSTR *ppwzHost) = 0;

        virtual HRESULT __stdcall GetPassword(

                   DWORD *pcchPassword,

                                       LPCWSTR *ppwzPassword) = 0;

        virtual HRESULT __stdcall GetPath(

                   DWORD *pcchPath,

                                       LPCWSTR *ppwzPath) = 0;

        virtual HRESULT __stdcall GetPort(

                   BOOL *pfHasPort,

                   DWORD *pdwPort) = 0;

        virtual HRESULT __stdcall GetQuery(

                   DWORD *pcchQuery,

                                       LPCWSTR *ppwzQuery) = 0;

        virtual HRESULT __stdcall GetSchemeName(

                   DWORD *pcchSchemeName,

                                       LPCWSTR *ppwzSchemeName) = 0;

        virtual HRESULT __stdcall GetUserNameW(

                   DWORD *pcchUserName,

                                       LPCWSTR *ppwzUserName) = 0;

        virtual HRESULT __stdcall SetFragment(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetHost(

                  LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPassword(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPath(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPortW(
                       BOOL fHasPort,
                       DWORD dwNewValue) = 0;

        virtual HRESULT __stdcall SetQuery(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetSchemeName(

                  LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetUserName(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall RemoveProperties(
                       DWORD dwPropertyMask) = 0;

        virtual HRESULT __stdcall HasBeenModified(

                   BOOL *pfModified) = 0;

    };
# 3834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IUriBuilderFactory;



    struct __declspec(uuid("E982CE48-0B96-440c-BC37-0C869B27A29E")) __declspec(novtable)
    IUriBuilderFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateIUriBuilder(

                  DWORD dwFlags,

                  DWORD_PTR dwReserved,

                   IUriBuilder **ppIUriBuilder) = 0;

        virtual HRESULT __stdcall CreateInitializedIUriBuilder(

                  DWORD dwFlags,

                  DWORD_PTR dwReserved,

                   IUriBuilder **ppIUriBuilder) = 0;

    };
# 3940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall CreateIUriBuilder(
                 IUri *pIUri,
                 DWORD dwFlags,
                 DWORD_PTR dwReserved,
                 IUriBuilder **ppIUriBuilder
    );
# 3955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec;







typedef IWinInetInfo *LPWININETINFO;


extern "C" const IID IID_IWinInetInfo;



    struct __declspec(uuid("79eac9d6-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryOption(
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf) = 0;

    };
# 4040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
                HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy(
              IWinInetInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf);


void __stdcall IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec;







typedef IHttpSecurity *LPHTTPSECURITY;


extern "C" const IID IID_IHttpSecurity;



    struct __declspec(uuid("79eac9d7-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpSecurity : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnSecurityProblem(
                       DWORD dwProblem) = 0;

    };
# 4169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec;







typedef IWinInetHttpInfo *LPWININETHTTPINFO;


extern "C" const IID IID_IWinInetHttpInfo;



    struct __declspec(uuid("79eac9d8-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetHttpInfo : public IWinInetInfo
    {
    public:
        virtual HRESULT __stdcall QueryInfo(
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf,
                            DWORD *pdwFlags,
                            DWORD *pdwReserved) = 0;

    };
# 4268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
                HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy(
              IWinInetHttpInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf,
                                 DWORD *pdwFlags,
                                 DWORD *pdwReserved);


void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec;
# 4306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IWinInetHttpTimeouts;



    struct __declspec(uuid("F286FA56-C1FD-4270-8E67-B3EB790A81E8")) __declspec(novtable)
    IWinInetHttpTimeouts : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRequestTimeouts(

                   DWORD *pdwConnectTimeout,

                   DWORD *pdwSendTimeout,

                   DWORD *pdwReceiveTimeout) = 0;

    };
# 4398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec;







typedef IWinInetCacheHints *LPWININETCACHEHINTS;


extern "C" const IID IID_IWinInetCacheHints;



    struct __declspec(uuid("DD1EC3B3-8391-4fdb-A9E6-347C3CAAA7DD")) __declspec(novtable)
    IWinInetCacheHints : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetCacheExtension(
                       LPCWSTR pwzExt,
                                     LPVOID pszCacheFile,
                            DWORD *pcbCacheFile,
                            DWORD *pdwWinInetError,
                            DWORD *pdwReserved) = 0;

    };
# 4501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec;







typedef IWinInetCacheHints2 *LPWININETCACHEHINTS2;


extern "C" const IID IID_IWinInetCacheHints2;



    struct __declspec(uuid("7857AEAC-D31F-49bf-884E-DD46DF36780A")) __declspec(novtable)
    IWinInetCacheHints2 : public IWinInetCacheHints
    {
    public:
        virtual HRESULT __stdcall SetCacheExtension2(
                       LPCWSTR pwzExt,

                                               WCHAR *pwzCacheFile,
                            DWORD *pcchCacheFile,
                        DWORD *pdwWinInetError,
                        DWORD *pdwReserved) = 0;

    };
# 4617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const GUID SID_BindHost;


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec;







typedef IBindHost *LPBINDHOST;


extern "C" const IID IID_IBindHost;



    struct __declspec(uuid("fc4801a1-2ba9-11cf-a229-00aa003d7352")) __declspec(novtable)
    IBindHost : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateMoniker(
                                 LPOLESTR szName,
                                     IBindCtx *pBC,
                                             IMoniker **ppmk,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall MonikerBindToStorage(
                       IMoniker *pMk,
                       IBindCtx *pBC,
                       IBindStatusCallback *pBSC,
                       const IID & riid,
                        void **ppvObj) = 0;

        virtual HRESULT __stdcall MonikerBindToObject(
                       IMoniker *pMk,
                       IBindCtx *pBC,
                       IBindStatusCallback *pBSC,
                       const IID & riid,
                        void **ppvObj) = 0;

    };
# 4743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
                HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
struct IBindStatusCallback;
extern "C" HRESULT __stdcall HlinkSimpleNavigateToString(
             LPCWSTR szTarget,
             LPCWSTR szLocation,
             LPCWSTR szTargetFrameName,
             IUnknown *pUnk,
             IBindCtx *pbc,
             IBindStatusCallback *,
               DWORD grfHLNF,
               DWORD dwReserved
);

extern "C" HRESULT __stdcall HlinkSimpleNavigateToMoniker(
             IMoniker *pmkTarget,
             LPCWSTR szLocation,
             LPCWSTR szTargetFrameName,
             IUnknown *pUnk,
             IBindCtx *pbc,
             IBindStatusCallback *,
               DWORD grfHLNF,
               DWORD dwReserved
);

extern "C" HRESULT __stdcall URLOpenStreamA( LPUNKNOWN, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenStreamW( LPUNKNOWN, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenPullStreamA( LPUNKNOWN, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenPullStreamW( LPUNKNOWN, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToFileA( LPUNKNOWN, LPCSTR, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToFileW( LPUNKNOWN, LPCWSTR, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToCacheFileA( LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToCacheFileW( LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenBlockingStreamA( LPUNKNOWN, LPCSTR, LPSTREAM*,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenBlockingStreamW( LPUNKNOWN, LPCWSTR, LPSTREAM*,DWORD, LPBINDSTATUSCALLBACK);
# 4840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall HlinkGoBack( IUnknown *pUnk);
extern "C" HRESULT __stdcall HlinkGoForward( IUnknown *pUnk);
extern "C" HRESULT __stdcall HlinkNavigateString( IUnknown *pUnk, LPCWSTR szTarget);
extern "C" HRESULT __stdcall HlinkNavigateMoniker( IUnknown *pUnk, IMoniker *pmkTarget);
# 4860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec;







typedef IInternet *LPIINTERNET;


extern "C" const IID IID_IInternet;



    struct __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternet : public IUnknown
    {
    public:
    };
# 4943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec;







typedef IInternetBindInfo *LPIINTERNETBINDINFO;

typedef
enum tagBINDSTRING
    {
        BINDSTRING_HEADERS = 1,
        BINDSTRING_ACCEPT_MIMES = ( BINDSTRING_HEADERS + 1 ) ,
        BINDSTRING_EXTRA_URL = ( BINDSTRING_ACCEPT_MIMES + 1 ) ,
        BINDSTRING_LANGUAGE = ( BINDSTRING_EXTRA_URL + 1 ) ,
        BINDSTRING_USERNAME = ( BINDSTRING_LANGUAGE + 1 ) ,
        BINDSTRING_PASSWORD = ( BINDSTRING_USERNAME + 1 ) ,
        BINDSTRING_UA_PIXELS = ( BINDSTRING_PASSWORD + 1 ) ,
        BINDSTRING_UA_COLOR = ( BINDSTRING_UA_PIXELS + 1 ) ,
        BINDSTRING_OS = ( BINDSTRING_UA_COLOR + 1 ) ,
        BINDSTRING_USER_AGENT = ( BINDSTRING_OS + 1 ) ,
        BINDSTRING_ACCEPT_ENCODINGS = ( BINDSTRING_USER_AGENT + 1 ) ,
        BINDSTRING_POST_COOKIE = ( BINDSTRING_ACCEPT_ENCODINGS + 1 ) ,
        BINDSTRING_POST_DATA_MIME = ( BINDSTRING_POST_COOKIE + 1 ) ,
        BINDSTRING_URL = ( BINDSTRING_POST_DATA_MIME + 1 ) ,
        BINDSTRING_IID = ( BINDSTRING_URL + 1 ) ,
        BINDSTRING_FLAG_BIND_TO_OBJECT = ( BINDSTRING_IID + 1 ) ,
        BINDSTRING_PTR_BIND_CONTEXT = ( BINDSTRING_FLAG_BIND_TO_OBJECT + 1 ) ,
        BINDSTRING_XDR_ORIGIN = ( BINDSTRING_PTR_BIND_CONTEXT + 1 ) ,
        BINDSTRING_DOWNLOADPATH = ( BINDSTRING_XDR_ORIGIN + 1 ) ,
        BINDSTRING_ROOTDOC_URL = ( BINDSTRING_DOWNLOADPATH + 1 ) ,
        BINDSTRING_INITIAL_FILENAME = ( BINDSTRING_ROOTDOC_URL + 1 ) ,
        BINDSTRING_PROXY_USERNAME = ( BINDSTRING_INITIAL_FILENAME + 1 ) ,
        BINDSTRING_PROXY_PASSWORD = ( BINDSTRING_PROXY_USERNAME + 1 ) ,
        BINDSTRING_ENTERPRISE_ID = ( BINDSTRING_PROXY_PASSWORD + 1 ) ,
        BINDSTRING_DOC_URL = ( BINDSTRING_ENTERPRISE_ID + 1 )
    } BINDSTRING;


extern "C" const IID IID_IInternetBindInfo;



    struct __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetBindInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindInfo(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo) = 0;

        virtual HRESULT __stdcall GetBindString(
                       ULONG ulStringType,

                        LPOLESTR *ppwzStr,
                       ULONG cEl,
                            ULONG *pcElFetched) = 0;

    };
# 5086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec;







typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;


extern "C" const IID IID_IInternetBindInfoEx;



    struct __declspec(uuid("a3e015b7-a82c-4dcd-a150-569aeeed36ab")) __declspec(novtable)
    IInternetBindInfoEx : public IInternetBindInfo
    {
    public:
        virtual HRESULT __stdcall GetBindInfoEx(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo,
                        DWORD *grfBINDF2,
                        DWORD *pdwReserved) = 0;

    };
# 5205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec;







typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef
enum _tagPI_FLAGS
    {
        PI_PARSE_URL = 0x1,
        PI_FILTER_MODE = 0x2,
        PI_FORCE_ASYNC = 0x4,
        PI_USE_WORKERTHREAD = 0x8,
        PI_MIMEVERIFICATION = 0x10,
        PI_CLSIDLOOKUP = 0x20,
        PI_DATAPROGRESS = 0x40,
        PI_SYNCHRONOUS = 0x80,
        PI_APARTMENTTHREADED = 0x100,
        PI_CLASSINSTALL = 0x200,
        PI_PASSONBINDCTX = 0x2000,
        PI_NOMIMEHANDLER = 0x8000,
        PI_LOADAPPDIRECT = 0x4000,
        PD_FORCE_SWITCH = 0x10000,
        PI_PREFERDEFAULTHANDLER = 0x20000
    } PI_FLAGS;

typedef struct _tagPROTOCOLDATA
    {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
    } PROTOCOLDATA;

typedef struct _tagStartParam
    {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
    } StartParam;


extern "C" const IID IID_IInternetProtocolRoot;



    struct __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolRoot : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Start(
                       LPCWSTR szUrl,
                       IInternetProtocolSink *pOIProtSink,
                       IInternetBindInfo *pOIBindInfo,
                       DWORD grfPI,
                       HANDLE_PTR dwReserved) = 0;

        virtual HRESULT __stdcall Continue(
                       PROTOCOLDATA *pProtocolData) = 0;

        virtual HRESULT __stdcall Abort(
                       HRESULT hrReason,
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall Terminate(
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall Suspend( void) = 0;

        virtual HRESULT __stdcall Resume( void) = 0;

    };
# 5389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec;







typedef IInternetProtocol *LPIINTERNETPROTOCOL;


extern "C" const IID IID_IInternetProtocol;



    struct __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocol : public IInternetProtocolRoot
    {
    public:
        virtual HRESULT __stdcall Read(
                                                void *pv,
                       ULONG cb,
                        ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Seek(
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,
                        ULARGE_INTEGER *plibNewPosition) = 0;

        virtual HRESULT __stdcall LockRequest(
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall UnlockRequest( void) = 0;

    };
# 5565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec;
# 5575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetProtocolEx;



    struct __declspec(uuid("C7A98E66-1010-492c-A1C8-C809E1F75905")) __declspec(novtable)
    IInternetProtocolEx : public IInternetProtocol
    {
    public:
        virtual HRESULT __stdcall StartEx(
                       IUri *pUri,
                       IInternetProtocolSink *pOIProtSink,
                       IInternetBindInfo *pOIBindInfo,
                       DWORD grfPI,
                       HANDLE_PTR dwReserved) = 0;

    };
# 5743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec;







typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;


extern "C" const IID IID_IInternetProtocolSink;



    struct __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Switch(
                       PROTOCOLDATA *pProtocolData) = 0;

        virtual HRESULT __stdcall ReportProgress(
                       ULONG ulStatusCode,
                       LPCWSTR szStatusText) = 0;

        virtual HRESULT __stdcall ReportData(
                       DWORD grfBSCF,
                       ULONG ulProgress,
                       ULONG ulProgressMax) = 0;

        virtual HRESULT __stdcall ReportResult(
                       HRESULT hrResult,
                       DWORD dwError,
                       LPCWSTR szResult) = 0;

    };
# 5876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec;







typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;


extern "C" const IID IID_IInternetProtocolSinkStackable;



    struct __declspec(uuid("79eac9f0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSinkStackable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchSink(
                       IInternetProtocolSink *pOIProtSink) = 0;

        virtual HRESULT __stdcall CommitSwitch( void) = 0;

        virtual HRESULT __stdcall RollbackSwitch( void) = 0;

    };
# 5985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec;







typedef IInternetSession *LPIINTERNETSESSION;

typedef
enum _tagOIBDG_FLAGS
    {
        OIBDG_APARTMENTTHREADED = 0x100,
        OIBDG_DATAONLY = 0x1000
    } OIBDG_FLAGS;


extern "C" const IID IID_IInternetSession;



    struct __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSession : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterNameSpace(
                       IClassFactory *pCF,
                       const IID & rclsid,
                       LPCWSTR pwzProtocol,
                       ULONG cPatterns,
                       const LPCWSTR *ppwzPatterns,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall UnregisterNameSpace(
                       IClassFactory *pCF,
                       LPCWSTR pszProtocol) = 0;

        virtual HRESULT __stdcall RegisterMimeFilter(
                       IClassFactory *pCF,
                       const IID & rclsid,
                       LPCWSTR pwzType) = 0;

        virtual HRESULT __stdcall UnregisterMimeFilter(
                       IClassFactory *pCF,
                       LPCWSTR pwzType) = 0;

        virtual HRESULT __stdcall CreateBinding(
                       LPBC pBC,
                       LPCWSTR szUrl,
                       IUnknown *pUnkOuter,
                                IUnknown **ppUnk,
                                IInternetProtocol **ppOInetProt,
                       DWORD dwOption) = 0;

        virtual HRESULT __stdcall SetSessionOption(
                       DWORD dwOption,
                       LPVOID pBuffer,
                       DWORD dwBufferLength,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall GetSessionOption(
                       DWORD dwOption,
                            LPVOID pBuffer,
                            DWORD *pdwBufferLength,
                       DWORD dwReserved) = 0;

    };
# 6185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec;







typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;


extern "C" const IID IID_IInternetThreadSwitch;



    struct __declspec(uuid("79eac9e8-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetThreadSwitch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Prepare( void) = 0;

        virtual HRESULT __stdcall Continue( void) = 0;

    };
# 6284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec;







typedef IInternetPriority *LPIINTERNETPRIORITY;


extern "C" const IID IID_IInternetPriority;



    struct __declspec(uuid("79eac9eb-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetPriority : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPriority(
                       LONG nPriority) = 0;

        virtual HRESULT __stdcall GetPriority(
                        LONG *pnPriority) = 0;

    };
# 6387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec;







typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef
enum _tagPARSEACTION
    {
        PARSE_CANONICALIZE = 1,
        PARSE_FRIENDLY = ( PARSE_CANONICALIZE + 1 ) ,
        PARSE_SECURITY_URL = ( PARSE_FRIENDLY + 1 ) ,
        PARSE_ROOTDOCUMENT = ( PARSE_SECURITY_URL + 1 ) ,
        PARSE_DOCUMENT = ( PARSE_ROOTDOCUMENT + 1 ) ,
        PARSE_ANCHOR = ( PARSE_DOCUMENT + 1 ) ,
        PARSE_ENCODE_IS_UNESCAPE = ( PARSE_ANCHOR + 1 ) ,
        PARSE_DECODE_IS_ESCAPE = ( PARSE_ENCODE_IS_UNESCAPE + 1 ) ,
        PARSE_PATH_FROM_URL = ( PARSE_DECODE_IS_ESCAPE + 1 ) ,
        PARSE_URL_FROM_PATH = ( PARSE_PATH_FROM_URL + 1 ) ,
        PARSE_MIME = ( PARSE_URL_FROM_PATH + 1 ) ,
        PARSE_SERVER = ( PARSE_MIME + 1 ) ,
        PARSE_SCHEMA = ( PARSE_SERVER + 1 ) ,
        PARSE_SITE = ( PARSE_SCHEMA + 1 ) ,
        PARSE_DOMAIN = ( PARSE_SITE + 1 ) ,
        PARSE_LOCATION = ( PARSE_DOMAIN + 1 ) ,
        PARSE_SECURITY_DOMAIN = ( PARSE_LOCATION + 1 ) ,
        PARSE_ESCAPE = ( PARSE_SECURITY_DOMAIN + 1 ) ,
        PARSE_UNESCAPE = ( PARSE_ESCAPE + 1 )
    } PARSEACTION;

typedef
enum _tagPSUACTION
    {
        PSU_DEFAULT = 1,
        PSU_SECURITY_URL_ONLY = ( PSU_DEFAULT + 1 )
    } PSUACTION;

typedef
enum _tagQUERYOPTION
    {
        QUERY_EXPIRATION_DATE = 1,
        QUERY_TIME_OF_LAST_CHANGE = ( QUERY_EXPIRATION_DATE + 1 ) ,
        QUERY_CONTENT_ENCODING = ( QUERY_TIME_OF_LAST_CHANGE + 1 ) ,
        QUERY_CONTENT_TYPE = ( QUERY_CONTENT_ENCODING + 1 ) ,
        QUERY_REFRESH = ( QUERY_CONTENT_TYPE + 1 ) ,
        QUERY_RECOMBINE = ( QUERY_REFRESH + 1 ) ,
        QUERY_CAN_NAVIGATE = ( QUERY_RECOMBINE + 1 ) ,
        QUERY_USES_NETWORK = ( QUERY_CAN_NAVIGATE + 1 ) ,
        QUERY_IS_CACHED = ( QUERY_USES_NETWORK + 1 ) ,
        QUERY_IS_INSTALLEDENTRY = ( QUERY_IS_CACHED + 1 ) ,
        QUERY_IS_CACHED_OR_MAPPED = ( QUERY_IS_INSTALLEDENTRY + 1 ) ,
        QUERY_USES_CACHE = ( QUERY_IS_CACHED_OR_MAPPED + 1 ) ,
        QUERY_IS_SECURE = ( QUERY_USES_CACHE + 1 ) ,
        QUERY_IS_SAFE = ( QUERY_IS_SECURE + 1 ) ,
        QUERY_USES_HISTORYFOLDER = ( QUERY_IS_SAFE + 1 ) ,
        QUERY_IS_CACHED_AND_USABLE_OFFLINE = ( QUERY_USES_HISTORYFOLDER + 1 )
    } QUERYOPTION;


extern "C" const IID IID_IInternetProtocolInfo;



    struct __declspec(uuid("79eac9ec-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseUrl(
                       LPCWSTR pwzUrl,
                       PARSEACTION ParseAction,
                       DWORD dwParseFlags,

                        LPWSTR pwzResult,
                       DWORD cchResult,
                        DWORD *pcchResult,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall CombineUrl(
                       LPCWSTR pwzBaseUrl,
                       LPCWSTR pwzRelativeUrl,
                       DWORD dwCombineFlags,

                       LPWSTR pwzResult,
                       DWORD cchResult,
                        DWORD *pcchResult,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall CompareUrl(
                       LPCWSTR pwzUrl1,
                       LPCWSTR pwzUrl2,
                       DWORD dwCompareFlags) = 0;

        virtual HRESULT __stdcall QueryInfo(
                       LPCWSTR pwzUrl,
                       QUERYOPTION OueryOption,
                       DWORD dwQueryFlags,
                                     LPVOID pBuffer,
                       DWORD cbBuffer,
                            DWORD *pcbBuf,
                       DWORD dwReserved) = 0;

    };
# 6650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall CoInternetParseUrl(
                                             LPCWSTR pwzUrl,
                                             PARSEACTION ParseAction,
                                             DWORD dwFlags,
                                             LPWSTR pszResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD dwReserved
    );

extern "C" HRESULT __stdcall CoInternetParseIUri(
                                             IUri *pIUri,
                                             PARSEACTION ParseAction,
                                             DWORD dwFlags,
                                             LPWSTR pwzResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD_PTR dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCombineUrl(
                                             LPCWSTR pwzBaseUrl,
                                             LPCWSTR pwzRelativeUrl,
                                             DWORD dwCombineFlags,
                                             LPWSTR pszResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCombineUrlEx(
                 IUri *pBaseUri,
                 LPCWSTR pwzRelativeUrl,
                 DWORD dwCombineFlags,
                 IUri **ppCombinedUri,
                 DWORD_PTR dwReserved
    );
extern "C" HRESULT __stdcall CoInternetCombineIUri (
                 IUri *pBaseUri,
                 IUri *pRelativeUri,
                 DWORD dwCombineFlags,
                 IUri **ppCombinedUri,
                 DWORD_PTR dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCompareUrl(
    LPCWSTR pwzUrl1,
    LPCWSTR pwzUrl2,
    DWORD dwFlags
    );
extern "C" HRESULT __stdcall CoInternetGetProtocolFlags(
             LPCWSTR pwzUrl,
             DWORD *pdwFlags,
             DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetQueryInfo(
                                                 LPCWSTR pwzUrl,
                                                 QUERYOPTION QueryOptions,
                                                 DWORD dwQueryFlags,
                                                 LPVOID pvBuffer,
                                                 DWORD cbBuffer,
                                                 DWORD *pcbBuffer,
                                                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetGetSession(
                 DWORD dwSessionMode,
                 IInternetSession **ppIInternetSession,
                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetGetSecurityUrl(
                 LPCWSTR pwszUrl,
                 LPWSTR *ppwszSecUrl,
                 PSUACTION psuAction,
                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall AsyncInstallDistributionUnit(
         LPCWSTR szDistUnit,
             LPCWSTR szTYPE,
             LPCWSTR szExt,
    DWORD dwFileVersionMS,
    DWORD dwFileVersionLS,
             LPCWSTR szURL,
         IBindCtx *pbc,
               LPVOID pvReserved,
    DWORD flags
    );

extern "C" HRESULT __stdcall CoInternetGetSecurityUrlEx(
                 IUri *pUri,
                 IUri **ppSecUri,
                 PSUACTION psuAction,
                 DWORD_PTR dwReserved
    );




typedef
enum _tagINTERNETFEATURELIST
    {
        FEATURE_OBJECT_CACHING = 0,
        FEATURE_ZONE_ELEVATION = ( FEATURE_OBJECT_CACHING + 1 ) ,
        FEATURE_MIME_HANDLING = ( FEATURE_ZONE_ELEVATION + 1 ) ,
        FEATURE_MIME_SNIFFING = ( FEATURE_MIME_HANDLING + 1 ) ,
        FEATURE_WINDOW_RESTRICTIONS = ( FEATURE_MIME_SNIFFING + 1 ) ,
        FEATURE_WEBOC_POPUPMANAGEMENT = ( FEATURE_WINDOW_RESTRICTIONS + 1 ) ,
        FEATURE_BEHAVIORS = ( FEATURE_WEBOC_POPUPMANAGEMENT + 1 ) ,
        FEATURE_DISABLE_MK_PROTOCOL = ( FEATURE_BEHAVIORS + 1 ) ,
        FEATURE_LOCALMACHINE_LOCKDOWN = ( FEATURE_DISABLE_MK_PROTOCOL + 1 ) ,
        FEATURE_SECURITYBAND = ( FEATURE_LOCALMACHINE_LOCKDOWN + 1 ) ,
        FEATURE_RESTRICT_ACTIVEXINSTALL = ( FEATURE_SECURITYBAND + 1 ) ,
        FEATURE_VALIDATE_NAVIGATE_URL = ( FEATURE_RESTRICT_ACTIVEXINSTALL + 1 ) ,
        FEATURE_RESTRICT_FILEDOWNLOAD = ( FEATURE_VALIDATE_NAVIGATE_URL + 1 ) ,
        FEATURE_ADDON_MANAGEMENT = ( FEATURE_RESTRICT_FILEDOWNLOAD + 1 ) ,
        FEATURE_PROTOCOL_LOCKDOWN = ( FEATURE_ADDON_MANAGEMENT + 1 ) ,
        FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = ( FEATURE_PROTOCOL_LOCKDOWN + 1 ) ,
        FEATURE_SAFE_BINDTOOBJECT = ( FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1 ) ,
        FEATURE_UNC_SAVEDFILECHECK = ( FEATURE_SAFE_BINDTOOBJECT + 1 ) ,
        FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = ( FEATURE_UNC_SAVEDFILECHECK + 1 ) ,
        FEATURE_TABBED_BROWSING = ( FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1 ) ,
        FEATURE_SSLUX = ( FEATURE_TABBED_BROWSING + 1 ) ,
        FEATURE_DISABLE_NAVIGATION_SOUNDS = ( FEATURE_SSLUX + 1 ) ,
        FEATURE_DISABLE_LEGACY_COMPRESSION = ( FEATURE_DISABLE_NAVIGATION_SOUNDS + 1 ) ,
        FEATURE_FORCE_ADDR_AND_STATUS = ( FEATURE_DISABLE_LEGACY_COMPRESSION + 1 ) ,
        FEATURE_XMLHTTP = ( FEATURE_FORCE_ADDR_AND_STATUS + 1 ) ,
        FEATURE_DISABLE_TELNET_PROTOCOL = ( FEATURE_XMLHTTP + 1 ) ,
        FEATURE_FEEDS = ( FEATURE_DISABLE_TELNET_PROTOCOL + 1 ) ,
        FEATURE_BLOCK_INPUT_PROMPTS = ( FEATURE_FEEDS + 1 ) ,
        FEATURE_ENTRY_COUNT = ( FEATURE_BLOCK_INPUT_PROMPTS + 1 )
    } INTERNETFEATURELIST;
# 6807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall CoInternetSetFeatureEnabled(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
    BOOL fEnable
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabled(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForUrl(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
             LPCWSTR szURL,
             IInternetSecurityManager *pSecMgr
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForIUri(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
             IUri * pIUri,
             IInternetSecurityManagerEx2 *pSecMgr
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureZoneElevationEnabled(
             LPCWSTR szFromURL,
         LPCWSTR szToURL,
             IInternetSecurityManager *pSecMgr,
    DWORD dwFlags
    );


extern "C" HRESULT __stdcall CopyStgMedium( const STGMEDIUM * pcstgmedSrc,
                                STGMEDIUM * pstgmedDest);
extern "C" HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc,
                               BINDINFO * pbiDest );
extern "C" void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );
# 6863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" PWSTR __stdcall IEGetUserPrivateNamespaceName(void);



extern "C" HRESULT __stdcall CoInternetCreateSecurityManager( IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

extern "C" HRESULT __stdcall CoInternetCreateZoneManager( IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);



extern "C" const IID CLSID_InternetSecurityManager;
extern "C" const IID CLSID_InternetZoneManager;

extern "C" const IID CLSID_PersistentZoneIdentifier;
# 6895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec;
# 6905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetSecurityMgrSite;



    struct __declspec(uuid("79eac9ed-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityMgrSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                        HWND *phwnd) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

    };
# 6996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec;
# 7019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
typedef
enum __MIDL_IInternetSecurityManager_0001
    {
        PUAF_DEFAULT = 0,
        PUAF_NOUI = 0x1,
        PUAF_ISFILE = 0x2,
        PUAF_WARN_IF_DENIED = 0x4,
        PUAF_FORCEUI_FOREGROUND = 0x8,
        PUAF_CHECK_TIFS = 0x10,
        PUAF_DONTCHECKBOXINDIALOG = 0x20,
        PUAF_TRUSTED = 0x40,
        PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
        PUAF_ENFORCERESTRICTED = 0x100,
        PUAF_NOSAVEDFILECHECK = 0x200,
        PUAF_REQUIRESAVEDFILECHECK = 0x400,
        PUAF_DONT_USE_CACHE = 0x1000,
        PUAF_RESERVED1 = 0x2000,
        PUAF_RESERVED2 = 0x4000,
        PUAF_LMZ_UNLOCKED = 0x10000,
        PUAF_LMZ_LOCKED = 0x20000,
        PUAF_DEFAULTZONEPOL = 0x40000,
        PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
        PUAF_NOUIIFLOCKED = 0x100000,
        PUAF_DRAGPROTOCOLCHECK = 0x200000
    } PUAF;

typedef
enum __MIDL_IInternetSecurityManager_0002
    {
        PUAFOUT_DEFAULT = 0,
        PUAFOUT_ISLOCKZONEPOLICY = 0x1
    } PUAFOUT;







typedef
enum __MIDL_IInternetSecurityManager_0003
    {
        SZM_CREATE = 0,
        SZM_DELETE = 0x1
    } SZM_FLAGS;
# 7080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetSecurityManager;



    struct __declspec(uuid("79eac9ee-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSecuritySite(
                                             IInternetSecurityMgrSite *pSite) = 0;

        virtual HRESULT __stdcall GetSecuritySite(
                                             IInternetSecurityMgrSite **ppSite) = 0;

        virtual HRESULT __stdcall MapUrlToZone(
                                 LPCWSTR pwszUrl,
                                   DWORD *pdwZone,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetSecurityId(

                  LPCWSTR pwszUrl,

                                                                         BYTE *pbSecurityId,

                                                                                                                      DWORD *pcbSecurityId,

                  DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall ProcessUrlAction(
                                 LPCWSTR pwszUrl,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                             BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicy(
                                 LPCWSTR pwszUrl,
                                 const GUID & guidKey,
                                                                                       BYTE **ppPolicy,
                                   DWORD *pcbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall SetZoneMapping(
                       DWORD dwZone,
                                 LPCWSTR lpszPattern,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneMappings(
                       DWORD dwZone,
                                             IEnumString **ppenumString,
                       DWORD dwFlags) = 0;

    };
# 7284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec;
# 7299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetSecurityManagerEx;



    struct __declspec(uuid("F164EDF1-CC7C-4f0d-9A94-34222625C393")) __declspec(novtable)
    IInternetSecurityManagerEx : public IInternetSecurityManager
    {
    public:
        virtual HRESULT __stdcall ProcessUrlActionEx(
                                 LPCWSTR pwszUrl,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved,
                                   DWORD *pdwOutFlags) = 0;

    };
# 7481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec;
# 7493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetSecurityManagerEx2;



    struct __declspec(uuid("F1E50292-A795-4117-8E09-2B560A72AC60")) __declspec(novtable)
    IInternetSecurityManagerEx2 : public IInternetSecurityManagerEx
    {
    public:
        virtual HRESULT __stdcall MapUrlToZoneEx2(

                  IUri *pUri,
                                   DWORD *pdwZone,
                       DWORD dwFlags,

                          LPWSTR *ppwszMappedUrl,

                       DWORD *pdwOutFlags) = 0;

        virtual HRESULT __stdcall ProcessUrlActionEx2(

                  IUri *pUri,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                             BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD_PTR dwReserved,
                                   DWORD *pdwOutFlags) = 0;

        virtual HRESULT __stdcall GetSecurityIdEx2(

                  IUri *pUri,

                                                                         BYTE *pbSecurityId,

                                                                                                                      DWORD *pcbSecurityId,

                  DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicyEx2(

                  IUri *pUri,
                                 const GUID & guidKey,
                                                                                       BYTE **ppPolicy,
                                   DWORD *pcbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD_PTR dwReserved) = 0;

    };
# 7763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec;
# 7773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IZoneIdentifier;



    struct __declspec(uuid("cd45f185-1b21-48e2-967b-ead743a8914e")) __declspec(novtable)
    IZoneIdentifier : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetId(
                                   DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall SetId(
                       DWORD dwZone) = 0;

        virtual HRESULT __stdcall Remove( void) = 0;

    };
# 7871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec;
# 7881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IZoneIdentifier2;



    struct __declspec(uuid("EB5E760C-09EF-45C0-B510-70830CE31E6A")) __declspec(novtable)
    IZoneIdentifier2 : public IZoneIdentifier
    {
    public:
        virtual HRESULT __stdcall GetLastWriterPackageFamilyName(
                                             LPWSTR *packageFamilyName) = 0;

        virtual HRESULT __stdcall SetLastWriterPackageFamilyName(
                                 LPCWSTR packageFamilyName) = 0;

        virtual HRESULT __stdcall RemoveLastWriterPackageFamilyName( void) = 0;

        virtual HRESULT __stdcall GetAppZoneId(
                                   DWORD *zone) = 0;

        virtual HRESULT __stdcall SetAppZoneId(
                       DWORD zone) = 0;

        virtual HRESULT __stdcall RemoveAppZoneId( void) = 0;

    };
# 8032 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec;
# 8042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetHostSecurityManager;



    struct __declspec(uuid("3af280b6-cb3f-11d0-891e-00c04fb6bfc4")) __declspec(novtable)
    IInternetHostSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetSecurityId(

                                          BYTE *pbSecurityId,

                                                                                                                 DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall ProcessUrlAction(
                       DWORD dwAction,

                                        BYTE *pPolicy,
                       DWORD cbPolicy,

                                       BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicy(
                       const GUID & guidKey,

                                                              BYTE **ppPolicy,

                   DWORD *pcbPolicy,

                                   BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwReserved) = 0;

    };
# 8442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED;





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec;







typedef IInternetZoneManager *LPURLZONEMANAGER;

typedef
enum tagURLZONE
    {
        URLZONE_INVALID = -1,
        URLZONE_PREDEFINED_MIN = 0,
        URLZONE_LOCAL_MACHINE = 0,
        URLZONE_INTRANET = ( URLZONE_LOCAL_MACHINE + 1 ) ,
        URLZONE_TRUSTED = ( URLZONE_INTRANET + 1 ) ,
        URLZONE_INTERNET = ( URLZONE_TRUSTED + 1 ) ,
        URLZONE_UNTRUSTED = ( URLZONE_INTERNET + 1 ) ,
        URLZONE_PREDEFINED_MAX = 999,
        URLZONE_USER_MIN = 1000,
        URLZONE_USER_MAX = 10000
    } URLZONE;



typedef
enum tagURLTEMPLATE
    {
        URLTEMPLATE_CUSTOM = 0,
        URLTEMPLATE_PREDEFINED_MIN = 0x10000,
        URLTEMPLATE_LOW = 0x10000,
        URLTEMPLATE_MEDLOW = 0x10500,
        URLTEMPLATE_MEDIUM = 0x11000,
        URLTEMPLATE_MEDHIGH = 0x11500,
        URLTEMPLATE_HIGH = 0x12000,
        URLTEMPLATE_PREDEFINED_MAX = 0x20000
    } URLTEMPLATE;


enum __MIDL_IInternetZoneManager_0001
    {
        MAX_ZONE_PATH = 260,
        MAX_ZONE_DESCRIPTION = 200
    } ;
typedef
enum __MIDL_IInternetZoneManager_0002
    {
        ZAFLAGS_CUSTOM_EDIT = 0x1,
        ZAFLAGS_ADD_SITES = 0x2,
        ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
        ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
        ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
        ZAFLAGS_NO_UI = 0x20,
        ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
        ZAFLAGS_UNC_AS_INTRANET = 0x80,
        ZAFLAGS_DETECT_INTRANET = 0x100,
        ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
        ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
        ZAFLAGS_NO_CACHE = 0x40000
    } ZAFLAGS;

typedef struct _ZONEATTRIBUTES
    {
    ULONG cbSize;
    WCHAR szDisplayName[ 260 ];
    WCHAR szDescription[ 200 ];
    WCHAR szIconPath[ 260 ];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
    } ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
# 8542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
typedef
enum _URLZONEREG
    {
        URLZONEREG_DEFAULT = 0,
        URLZONEREG_HKLM = ( URLZONEREG_DEFAULT + 1 ) ,
        URLZONEREG_HKCU = ( URLZONEREG_HKLM + 1 )
    } URLZONEREG;
# 8581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetZoneManager;



    struct __declspec(uuid("79eac9ef-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetZoneManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributes(
                       DWORD dwZone,

                     ZONEATTRIBUTES *pZoneAttributes) = 0;

        virtual HRESULT __stdcall SetZoneAttributes(
                       DWORD dwZone,

                  ZONEATTRIBUTES *pZoneAttributes) = 0;

        virtual HRESULT __stdcall GetZoneCustomPolicy(
                       DWORD dwZone,
                       const GUID & guidKey,

                                                BYTE **ppPolicy,

                   DWORD *pcbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall SetZoneCustomPolicy(
                       DWORD dwZone,
                       const GUID & guidKey,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall GetZoneActionPolicy(
                       DWORD dwZone,
                       DWORD dwAction,

                                    BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall SetZoneActionPolicy(
                       DWORD dwZone,
                       DWORD dwAction,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall PromptAction(
                       DWORD dwAction,
                       HWND hwndParent,
                       LPCWSTR pwszUrl,
                       LPCWSTR pwszText,
                       DWORD dwPromptFlags) = 0;

        virtual HRESULT __stdcall LogAction(
                       DWORD dwAction,
                       LPCWSTR pwszUrl,
                       LPCWSTR pwszText,
                       DWORD dwLogFlags) = 0;

        virtual HRESULT __stdcall CreateZoneEnumerator(
                        DWORD *pdwEnum,
                        DWORD *pdwCount,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneAt(
                       DWORD dwEnum,
                       DWORD dwIndex,
                        DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall DestroyZoneEnumerator(
                       DWORD dwEnum) = 0;

        virtual HRESULT __stdcall CopyTemplatePoliciesToZone(
                       DWORD dwTemplate,
                       DWORD dwZone,
                       DWORD dwReserved) = 0;

    };
# 8849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec;
# 8867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetZoneManagerEx;



    struct __declspec(uuid("A4C23339-8E06-431e-9BF4-7E711C085648")) __declspec(novtable)
    IInternetZoneManagerEx : public IInternetZoneManager
    {
    public:
        virtual HRESULT __stdcall GetZoneActionPolicyEx(
                       DWORD dwZone,
                       DWORD dwAction,

                                    BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall SetZoneActionPolicyEx(
                       DWORD dwZone,
                       DWORD dwAction,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg,
                       DWORD dwFlags) = 0;

    };
# 9109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec;
# 9122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IInternetZoneManagerEx2;



    struct __declspec(uuid("EDC17559-DD5D-4846-8EEF-8BECBA5A4ABF")) __declspec(novtable)
    IInternetZoneManagerEx2 : public IInternetZoneManagerEx
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributesEx(
                       DWORD dwZone,
                                    ZONEATTRIBUTES *pZoneAttributes,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneSecurityState(
                       DWORD dwZoneIndex,
                       BOOL fRespectPolicy,
                            LPDWORD pdwState,
                            BOOL *pfPolicyEncountered) = 0;

        virtual HRESULT __stdcall GetIESecurityState(
                       BOOL fRespectPolicy,
                            LPDWORD pdwState,
                            BOOL *pfPolicyEncountered,
                       BOOL fNoCache) = 0;

        virtual HRESULT __stdcall FixUnsecureSettings( void) = 0;

    };
# 9394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID CLSID_SoftDistExt;
# 9409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
typedef struct _tagCODEBASEHOLD
    {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
    } CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO
    {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
    } SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec;
# 9452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_ISoftDistExt;



    struct __declspec(uuid("B15B8DC1-C7E1-11d0-8680-00AA00BDCB71")) __declspec(novtable)
    ISoftDistExt : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ProcessSoftDist(
                       LPCWSTR szCDFURL,
                       IXMLElement *pSoftDistElement,
                            LPSOFTDISTINFO lpsdi) = 0;

        virtual HRESULT __stdcall GetFirstCodeBase(

                       LPWSTR *szCodeBase,
                       LPDWORD dwMaxSize) = 0;

        virtual HRESULT __stdcall GetNextCodeBase(

                       LPWSTR *szCodeBase,
                       LPDWORD dwMaxSize) = 0;

        virtual HRESULT __stdcall AsyncInstallDistributionUnit(
                       IBindCtx *pbc,
                       LPVOID pvReserved,
                       DWORD flags,
                       LPCODEBASEHOLD lpcbh) = 0;

    };
# 9576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern "C" HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec;







typedef ICatalogFileInfo *LPCATALOGFILEINFO;


extern "C" const IID IID_ICatalogFileInfo;



    struct __declspec(uuid("711C7600-6B48-11d1-B403-00AA00B92AF1")) __declspec(novtable)
    ICatalogFileInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCatalogFile(

                        LPSTR *ppszCatalogFile) = 0;

        virtual HRESULT __stdcall GetJavaTrust(
                        void **ppJavaTrust) = 0;

    };
# 9688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec;







typedef IDataFilter *LPDATAFILTER;


extern "C" const IID IID_IDataFilter;



    struct __declspec(uuid("69d14c80-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IDataFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DoEncode(
                       DWORD dwFlags,
                       LONG lInBufferSize,
                                                                     BYTE *pbInBuffer,
                       LONG lOutBufferSize,
                                                                        BYTE *pbOutBuffer,
                       LONG lInBytesAvailable,
                                   LONG *plInBytesRead,
                                   LONG *plOutBytesWritten,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall DoDecode(
                       DWORD dwFlags,
                       LONG lInBufferSize,
                                                                     BYTE *pbInBuffer,
                       LONG lOutBufferSize,
                                                                        BYTE *pbOutBuffer,
                       LONG lInBytesAvailable,
                                   LONG *plInBytesRead,
                                   LONG *plOutBytesWritten,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall SetEncodingLevel(
                       DWORD dwEncLevel) = 0;

    };
# 9831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
typedef struct _tagPROTOCOLFILTERDATA
    {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
    } PROTOCOLFILTERDATA;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec;







typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO
    {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
    } DATAINFO;


extern "C" const IID IID_IEncodingFilterFactory;



    struct __declspec(uuid("70bdde00-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IEncodingFilterFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FindBestFilter(
                       LPCWSTR pwzCodeIn,
                       LPCWSTR pwzCodeOut,
                       DATAINFO info,
                        IDataFilter **ppDF) = 0;

        virtual HRESULT __stdcall GetDefaultFilter(
                       LPCWSTR pwzCodeIn,
                       LPCWSTR pwzCodeOut,
                        IDataFilter **ppDF) = 0;

    };
# 9962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
BOOL __stdcall IsLoggingEnabledA( LPCSTR pszUrl);
BOOL __stdcall IsLoggingEnabledW( LPCWSTR pwszUrl);





typedef struct _tagHIT_LOGGING_INFO
    {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
    } HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

BOOL __stdcall WriteHitLogging( LPHIT_LOGGING_INFO lpLogginginfo);

struct CONFIRMSAFETY
    {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
    } ;
extern "C" const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec;







typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;


extern "C" const IID IID_IWrappedProtocol;



    struct __declspec(uuid("53c84785-8425-4dc5-971b-e58d9c19f9b6")) __declspec(novtable)
    IWrappedProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWrapperCode(
                        LONG *pnCode,
                       DWORD_PTR dwReserved) = 0;

    };
# 10089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec;







typedef IGetBindHandle *LPGETBINDHANDLE;

typedef
enum __MIDL_IGetBindHandle_0001
    {
        BINDHANDLETYPES_APPCACHE = 0,
        BINDHANDLETYPES_DEPENDENCY = 0x1,
        BINDHANDLETYPES_COUNT = ( BINDHANDLETYPES_DEPENDENCY + 1 )
    } BINDHANDLETYPES;


extern "C" const IID IID_IGetBindHandle;



    struct __declspec(uuid("AF0FF408-129D-4b20-91F0-02BD23D88352")) __declspec(novtable)
    IGetBindHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindHandle(
                       BINDHANDLETYPES enumRequestedHandle,
                        HANDLE *pRetHandle) = 0;

    };
# 10190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
typedef struct _tagPROTOCOL_ARGUMENT
    {
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
    } PROTOCOL_ARGUMENT;

typedef struct _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;






extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec;







typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;


extern "C" const IID IID_IBindCallbackRedirect;



    struct __declspec(uuid("11C81BC2-121E-4ed5-B9C4-B430BD54F2C0")) __declspec(novtable)
    IBindCallbackRedirect : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Redirect(
                       LPCWSTR lpcUrl,
                        VARIANT_BOOL *vbCancel) = 0;

    };
# 10298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec;
# 10308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
extern "C" const IID IID_IBindHttpSecurity;



    struct __declspec(uuid("a9eda967-f50e-4a33-b358-206f6ef3086d")) __declspec(novtable)
    IBindHttpSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetIgnoreCertMask(
                                        DWORD *pdwIgnoreCertMask) = 0;

    };
# 10388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\urlmon.h" 3
#pragma warning(pop)



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

              HRESULT __stdcall IBinding_GetBindResult_Proxy(
    IBinding * This,
                CLSID *pclsidProtocol,
                DWORD *pdwResult,

                LPOLESTR *pszResult,
                    DWORD *pdwReserved);


                HRESULT __stdcall IBinding_GetBindResult_Stub(
              IBinding * This,
                           CLSID *pclsidProtocol,
                           DWORD *pdwResult,
                                     LPOLESTR *pszResult,
               DWORD dwReserved);

              HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy(
    IBindStatusCallback * This,
                DWORD *grfBINDF,
                            BINDINFO *pbindinfo);


                HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub(
              IBindStatusCallback * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed);

              HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy(
    IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
               FORMATETC *pformatetc,
               STGMEDIUM *pstgmed);


                HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub(
              IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
                         RemFORMATETC *pformatetc,
                         RemSTGMEDIUM *pstgmed);

              HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Proxy(
    IBindStatusCallbackEx * This,
                DWORD *grfBINDF,
                            BINDINFO *pbindinfo,
                DWORD *grfBINDF2,
                DWORD *pdwReserved);


                HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Stub(
              IBindStatusCallbackEx * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed,
                           DWORD *grfBINDF2,
                           DWORD *pdwReserved);

              HRESULT __stdcall IWinInetInfo_QueryOption_Proxy(
    IWinInetInfo * This,
               DWORD dwOption,
                             LPVOID pBuffer,
                    DWORD *pcbBuf);


                HRESULT __stdcall IWinInetInfo_QueryOption_Stub(
              IWinInetInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf);

              HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy(
    IWinInetHttpInfo * This,
               DWORD dwOption,
                             LPVOID pBuffer,
                    DWORD *pcbBuf,
                    DWORD *pdwFlags,
                    DWORD *pdwReserved);


                HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub(
              IWinInetHttpInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf,
                                 DWORD *pdwFlags,
                                 DWORD *pdwReserved);

              HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy(
    IBindHost * This,
               IMoniker *pMk,
               IBindCtx *pBC,
               IBindStatusCallback *pBSC,
               const IID & riid,
                void **ppvObj);


                HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy(
    IBindHost * This,
               IMoniker *pMk,
               IBindCtx *pBC,
               IBindStatusCallback *pBSC,
               const IID & riid,
                void **ppvObj);


                HRESULT __stdcall IBindHost_MonikerBindToObject_Stub(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);






}
# 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidl.h" 1 3
# 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidl.h" 3
extern "C"{
# 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidl.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)

#pragma warning(disable: 4201)
#pragma warning(disable: 4237)
# 1154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidl.h" 3
enum PIDMSI_STATUS_VALUE
    {
        PIDMSI_STATUS_NORMAL = 0,
        PIDMSI_STATUS_NEW = ( PIDMSI_STATUS_NORMAL + 1 ) ,
        PIDMSI_STATUS_PRELIM = ( PIDMSI_STATUS_NEW + 1 ) ,
        PIDMSI_STATUS_DRAFT = ( PIDMSI_STATUS_PRELIM + 1 ) ,
        PIDMSI_STATUS_INPROGRESS = ( PIDMSI_STATUS_DRAFT + 1 ) ,
        PIDMSI_STATUS_EDIT = ( PIDMSI_STATUS_INPROGRESS + 1 ) ,
        PIDMSI_STATUS_REVIEW = ( PIDMSI_STATUS_EDIT + 1 ) ,
        PIDMSI_STATUS_PROOF = ( PIDMSI_STATUS_REVIEW + 1 ) ,
        PIDMSI_STATUS_FINAL = ( PIDMSI_STATUS_PROOF + 1 ) ,
        PIDMSI_STATUS_OTHER = 0x7fff
    } ;




               extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantCopy(
                  PROPVARIANT* pvarDest,
                 const PROPVARIANT * pvarSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantClear( PROPVARIANT* pvar);

extern "C" __declspec(dllimport) HRESULT __stdcall FreePropVariantArray(
                 ULONG cVariants,
                                       PROPVARIANT* rgvars);
# 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidl.h" 3
inline void PropVariantInit ( PROPVARIANT * pvar )
{
    memset ( pvar, 0, sizeof(PROPVARIANT) );
}
# 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\propidl.h" 3
typedef struct tagSERIALIZEDPROPERTYVALUE
{
    DWORD dwType;
    BYTE rgb[1];
} SERIALIZEDPROPERTYVALUE;


extern "C"

SERIALIZEDPROPERTYVALUE* __stdcall
StgConvertVariantToProperty(
                 const PROPVARIANT* pvar,
                 USHORT CodePage,
                                         SERIALIZEDPROPERTYVALUE* pprop,
                    ULONG* pcb,
                 PROPID pid,
                       BOOLEAN fReserved,
                        ULONG* pcIndirect);


class PMemoryAllocator;

extern "C"

BOOLEAN __stdcall
StgConvertPropertyToVariant(
                 const SERIALIZEDPROPERTYVALUE* pprop,
                 USHORT CodePage,
                  PROPVARIANT* pvar,
                 PMemoryAllocator* pma);






#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree( unsigned long *, LPSAFEARRAY * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize64( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree64( unsigned long *, LPSAFEARRAY * );

              HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt,

                                          STATPROPSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,

                                          STATPROPSETSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);






}
# 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 2 3








extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdProgressIndicator( HWND hwndParent,
                                        LPCOLESTR pszTitle,
                                        IBindStatusCallback * pIbscCaller,
                                            IBindStatusCallback ** ppIbsc);







# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\objbase.h" 2 3
# 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/ole2.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 1 3



#pragma warning(push)
#pragma warning(disable: 4001)
#pragma warning(disable: 4820)
# 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack8.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 2 3
# 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" const IID IID_StdOle;
# 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocString( const OLECHAR * psz);
extern "C" __declspec(dllimport) INT __stdcall SysReAllocString( BSTR* pbstr, const OLECHAR* psz);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringLen( const OLECHAR * strIn, UINT ui);
               extern "C" __declspec(dllimport) INT __stdcall SysReAllocStringLen( BSTR* pbstr, const OLECHAR* psz, unsigned int len);
extern "C" __declspec(dllimport) HRESULT __stdcall SysAddRefString( BSTR bstrString);
extern "C" __declspec(dllimport) void __stdcall SysReleaseString( BSTR bstrString);
extern "C" __declspec(dllimport) void __stdcall SysFreeString( BSTR bstrString);
extern "C" __declspec(dllimport) UINT __stdcall SysStringLen( BSTR pbstr);


extern "C" __declspec(dllimport) UINT __stdcall SysStringByteLen( BSTR bstr);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringByteLen( LPCSTR psz, UINT len);
# 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) INT __stdcall DosDateTimeToVariantTime( USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

extern "C" __declspec(dllimport) INT __stdcall VariantTimeToDosDateTime( DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);
# 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) INT __stdcall SystemTimeToVariantTime( LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
extern "C" __declspec(dllimport) INT __stdcall VariantTimeToSystemTime( DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
# 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptor( UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptorEx( VARTYPE vt, UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreate( VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateEx( VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound, PVOID pvExtra);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopyData( SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern "C" __declspec(dllimport) void __stdcall SafeArrayReleaseDescriptor( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyDescriptor( SAFEARRAY * psa);
extern "C" __declspec(dllimport) void __stdcall SafeArrayReleaseData( PVOID pData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAddRef( SAFEARRAY * psa, PVOID *ppDataToRelease);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroy( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayRedim( SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetDim( SAFEARRAY * psa);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetElemsize( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetUBound( SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetLBound( SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayLock( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnlock( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAccessData( SAFEARRAY * psa, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnaccessData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetElement( SAFEARRAY * psa, LONG * rgIndices, void * pv);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPutElement( SAFEARRAY * psa, LONG * rgIndices, void * pv);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopy( SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPtrOfIndex( SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetRecordInfo( SAFEARRAY * psa, IRecordInfo * prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetRecordInfo( SAFEARRAY * psa, IRecordInfo ** prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetIID( SAFEARRAY * psa, const GUID & guid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetIID( SAFEARRAY * psa, GUID * pguid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetVartype( SAFEARRAY * psa, VARTYPE * pvt);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVector( VARTYPE vt, LONG lLbound, ULONG cElements);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVectorEx( VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);
# 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) void __stdcall VariantInit( VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantClear( VARIANTARG * pvarg);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopy( VARIANTARG * pvargDest, const VARIANTARG * pvargSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopyInd( VARIANT * pvarDest, const VARIANTARG * pvargSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeType( VARIANTARG * pvargDest,
                    const VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeTypeEx( VARIANTARG * pvargDest,
                    const VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);
# 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall VectorFromBstr ( BSTR bstr, SAFEARRAY ** ppsa);

extern "C" __declspec(dllimport) HRESULT __stdcall BstrFromVector ( SAFEARRAY *psa, BSTR *pbstr);
# 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI8(LONG64 i64In, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI8(ULONG64 ui64In, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDec( const DECIMAL *pdecIn, BYTE *pbOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI8(LONG64 i64In, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI8(ULONG64 ui64In, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDec( const DECIMAL *pdecIn, SHORT *psOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDec( const DECIMAL *pdecIn, LONG *plOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI1(BYTE bIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI2(SHORT sIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR4(FLOAT fltIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR8(DOUBLE dblIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromCy( CY cyIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDate(DATE dateIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDisp(IDispatch * pdispIn, LCID lcid, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromBool(VARIANT_BOOL boolIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI1(CHAR cIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI2(USHORT uiIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI4(ULONG ulIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI8(ULONG64 ui64In, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDec( const DECIMAL *pdecIn, LONG64 * pi64Out);





extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI8(LONG64 i64In, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI8(ULONG64 ui64In, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDec( const DECIMAL *pdecIn, FLOAT *pfltOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI8(LONG64 i64In, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI8(ULONG64 ui64In, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDec( const DECIMAL *pdecIn, DOUBLE *pdblOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI8(LONG64 i64In, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI8(ULONG64 ui64In, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDec( const DECIMAL *pdecIn, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI8(LONG64 i64In, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDisp( IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI8(ULONG64 ui64In, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDec( const DECIMAL *pdecIn, CY *pcyOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDate( DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDec( const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
               extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI2( SHORT sIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI8(LONG64 i64In, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDec( const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI1(
         BYTE bIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI2(
         SHORT uiIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI4(
         LONG lIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI8(
         LONG64 i64In,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromR4(
         FLOAT fltIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromR8(
         DOUBLE dblIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDate(
         DATE dateIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromCy(
         CY cyIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromStr(
         LPCOLESTR strIn,
         LCID lcid,
         ULONG dwFlags,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDisp(
         IDispatch *pdispIn,
         LCID lcid,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromBool(
         VARIANT_BOOL boolIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI2(
         USHORT uiIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI4(
         ULONG ulIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI8(
         ULONG64 i64In,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDec(
         const DECIMAL *pdecIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI8(LONG64 i64In, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDisp( IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDec( const DECIMAL *pdecIn, USHORT *puiOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI2( SHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI8(LONG64 i64In, ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDisp( IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDec( const DECIMAL *pdecIn, ULONG *pulOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI1(BYTE bIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI2(SHORT sIn, ULONG64 * pi64Out);







extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI4(LONG lIn, ULONG64 * pi64Out);







extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI8(LONG64 ui64In, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR4(FLOAT fltIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR8(DOUBLE dblIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromCy(CY cyIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDate(DATE dateIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDisp( IDispatch * pdispIn, LCID lcid, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI1(CHAR cIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI2(USHORT uiIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI4(ULONG ulIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDec( const DECIMAL *pdecIn, ULONG64 * pi64Out);






extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI1( BYTE bIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI2( SHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI4( LONG lIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR4( FLOAT fltIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR8( DOUBLE dblIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDate( DATE dateIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromCy( CY cyIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDisp( IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromBool( VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI1( CHAR cIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI2( USHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI4( ULONG ulIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut);
# 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG *plOut);
# 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
typedef struct {
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
} NUMPARSE;
# 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall VarParseNumFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags,
                  NUMPARSE * pnumprs, BYTE * rgbDig);


extern "C" __declspec(dllimport) HRESULT __stdcall VarNumFromParseNum( NUMPARSE * pnumprs, BYTE * rgbDig,
                 ULONG dwVtBits, VARIANT * pvar);
# 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" HRESULT __stdcall VarAdd( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarAnd( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarCat( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarDiv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarEqv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarIdiv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarImp( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMod( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMul( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarOr( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarPow( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarSub( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarXor( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarAbs( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarFix( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarInt( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNeg( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNot( LPVARIANT pvarIn, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarRound( LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);


extern "C" HRESULT __stdcall VarCmp( LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);





extern "C++" {





__inline
HRESULT

__stdcall

VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid) {
    return VarCmp(pvarLeft, pvarRight, lcid, 0);
}




}
# 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" HRESULT __stdcall VarDecAdd( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecDiv( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecMul( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecSub( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecAbs( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecFix( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecInt( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecNeg( LPDECIMAL pdecIn, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecRound( LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecCmp( LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
extern "C" HRESULT __stdcall VarDecCmpR8( LPDECIMAL pdecLeft, double dblRight);




extern "C" HRESULT __stdcall VarCyAdd( CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMul( CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI4( CY cyLeft, LONG lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI8( CY cyLeft, LONG64 lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCySub( CY cyLeft, CY cyRight, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyAbs( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyFix( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyInt( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyNeg( CY cyIn, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyRound( CY cyIn, int cDecimals, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyCmp( CY cyLeft, CY cyRight);
extern "C" HRESULT __stdcall VarCyCmpR8( CY cyLeft, double dblRight);




extern "C" HRESULT __stdcall VarBstrCat( BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
extern "C" HRESULT __stdcall VarBstrCmp( BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags);
extern "C" HRESULT __stdcall VarR8Pow( double dblLeft, double dblRight, double *pdblResult);
extern "C" HRESULT __stdcall VarR4CmpR8( float fltLeft, double dblRight);
extern "C" HRESULT __stdcall VarR8Round( double dblIn, int cDecimals, double *pdblResult);
# 930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
typedef struct {
    SYSTEMTIME st;
    USHORT wDayOfYear;
} UDATE;
# 944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdate( UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdateEx( UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUdateFromDate( DATE dateIn, ULONG dwFlags, UDATE *pudateOut);
# 959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);
# 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormat(
      LPVARIANT pvarIn,
          LPOLESTR pstrFormat,
 int iFirstDay,
 int iFirstWeek,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatDateTime(
      LPVARIANT pvarIn,
 int iNamedFormat,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatNumber(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatPercent(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatCurrency(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarWeekdayName(
 int iWeekday,
 int fAbbrev,
 int iFirstDay,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarMonthName(
 int iMonth,
 int fAbbrev,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatFromTokens(
      LPVARIANT pvarIn,
          LPOLESTR pstrFormat,
                                                             LPBYTE pbTokCur,
 ULONG dwFlags,
       BSTR *pbstrOut,
 LCID lcid
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarTokenizeFormatString(
          LPOLESTR pstrFormat,
         LPBYTE rgbTok,
 int cbTok,
 int iFirstDay,
 int iFirstWeek,
 LCID lcid,
          int *pcbActual
 );
# 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
typedef ITypeLib *LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;
# 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
typedef ITypeInfo *LPTYPEINFO;






typedef ITypeComp *LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;
# 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);



extern "C" __declspec(dllimport) ULONG __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);
# 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLib( LPCOLESTR szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;
# 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);




extern "C" __declspec(dllimport) HRESULT __stdcall LoadRegTypeLib(const GUID & rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID & guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);




extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib, LPCOLESTR szFullPath,
                     LPCOLESTR szHelpDir);





extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLib(const GUID & libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);



extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath,
            OLECHAR *szHelpDir);



extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLibForUser(
    const GUID & libID,
    WORD wMajorVerNum,
    WORD wMinorVerNum,
    LCID lcid,
    SYSKIND syskind);


extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib ** ppctlib);


extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef IDispatch *LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;
    VARTYPE vt;
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;
    PARAMDATA * ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;
    UINT cMembers;
} INTERFACEDATA, * LPINTERFACEDATA;







extern "C" __declspec(dllimport) HRESULT __stdcall DispGetParam(
      DISPPARAMS * pdispparams,
 UINT position,
 VARTYPE vtTarg,
       VARIANT * pvarResult,
           UINT * puArgErr
 );



               extern "C" __declspec(dllimport) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);
# 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);
# 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern "C" __declspec(dllimport) HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG_PTR oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);
# 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const IID & rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern "C" __declspec(dllimport) HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall GetActiveObject(const IID & rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern "C" __declspec(dllimport) HRESULT __stdcall SetErrorInfo( ULONG dwReserved, IErrorInfo * perrinfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetErrorInfo( ULONG dwReserved, IErrorInfo ** pperrinfo);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateErrorInfo( ICreateErrorInfo ** pperrinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo,
            IRecordInfo ** ppRecInfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromGuids(const GUID & rGuidTypeLib,
            ULONG uVerMajor, ULONG uVerMinor, LCID lcid,
            const GUID & rGuidTypeInfo, IRecordInfo ** ppRecInfo);





extern "C" __declspec(dllimport) ULONG __stdcall OaBuildVersion(void);

extern "C" __declspec(dllimport) void __stdcall ClearCustData(LPCUSTDATA pCustData);


extern "C" __declspec(dllimport) void __stdcall OaEnablePerUserTLibRegistration(void);
# 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\oleauto.h" 2 3






#pragma warning(pop)
# 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/ole2.h" 2 3
# 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/ole2.h" 3
extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);




extern "C" __declspec(dllimport) DWORD __stdcall OleBuildVersion( void );

               extern "C" __declspec(dllimport) HRESULT __stdcall WriteFmtUserTypeStg ( LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadFmtUserTypeStg ( LPSTORAGE pstg, CLIPFORMAT * pcf, LPOLESTR * lplpszUserType);




               extern "C" __declspec(dllimport) HRESULT __stdcall OleInitialize( LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall OleUninitialize(void);





extern "C" __declspec(dllimport) HRESULT __stdcall OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject);
extern "C" __declspec(dllimport) HRESULT __stdcall OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject);




extern "C" __declspec(dllimport) HRESULT __stdcall OleCreate( const IID & rclsid, const IID & riid, DWORD renderopt,
                   LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateEx( const IID & rclsid, const IID & riid, DWORD dwFlags,
                   DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                    DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromData( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                    DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                       DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj, const IID & iid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLink( LPMONIKER pmkLinkSrc, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkEx( LPMONIKER pmkLinkSrc, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkToFile( LPCOLESTR lpszFileName, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkToFileEx( LPCOLESTR lpszFileName, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromFile( const IID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromFileEx( const IID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoad( LPSTORAGE pStg, const IID & riid, LPOLECLIENTSITE pClientSite,
                LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleSave( LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadFromStream( LPSTREAM pStm, const IID & iidInterface, LPVOID * ppvObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );


extern "C" __declspec(dllimport) HRESULT __stdcall OleSetContainedObject( LPUNKNOWN pUnknown, BOOL fContained);
extern "C" __declspec(dllimport) HRESULT __stdcall OleNoteObjectVisible( LPUNKNOWN pUnknown, BOOL fVisible);




extern "C" __declspec(dllimport) HRESULT __stdcall RegisterDragDrop( HWND hwnd, LPDROPTARGET pDropTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall RevokeDragDrop( HWND hwnd);
extern "C" __declspec(dllimport) HRESULT __stdcall DoDragDrop( LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource,
               DWORD dwOKEffects, LPDWORD pdwEffect);



extern "C" __declspec(dllimport) HRESULT __stdcall OleSetClipboard( LPDATAOBJECT pDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetClipboard( LPDATAOBJECT * ppDataObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleGetClipboardWithEnterpriseInfo( IDataObject** dataObject,
                                          PWSTR* dataEnterpriseId,
                                          PWSTR* sourceDescription,
                                          PWSTR* targetDescription,
                                          PWSTR* dataDescription);

extern "C" __declspec(dllimport) HRESULT __stdcall OleFlushClipboard(void);
extern "C" __declspec(dllimport) HRESULT __stdcall OleIsCurrentClipboard( LPDATAOBJECT pDataObj);



extern "C" __declspec(dllimport) HOLEMENU __stdcall OleCreateMenuDescriptor ( HMENU hmenuCombined,
                                   LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetMenuDescriptor ( HOLEMENU holemenu, HWND hwndFrame,
                                   HWND hwndActiveObject,
                                   LPOLEINPLACEFRAME lpFrame,
                                   LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleDestroyMenuDescriptor ( HOLEMENU holemenu);

extern "C" __declspec(dllimport) HRESULT __stdcall OleTranslateAccelerator ( LPOLEINPLACEFRAME lpFrame,
                               LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);




extern "C" __declspec(dllimport) HANDLE __stdcall OleDuplicateData ( HANDLE hSrc, CLIPFORMAT cfFormat,
                           UINT uiFlags);



extern "C" __declspec(dllimport) HRESULT __stdcall OleDraw ( LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw,
                       LPCRECT lprcBounds);

               extern "C" __declspec(dllimport) HRESULT __stdcall OleRun( LPUNKNOWN pUnknown);
extern "C" __declspec(dllimport) BOOL __stdcall OleIsRunning( LPOLEOBJECT pObject);
extern "C" __declspec(dllimport) HRESULT __stdcall OleLockRunning( LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);

extern "C" __declspec(dllimport) void __stdcall ReleaseStgMedium( LPSTGMEDIUM);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateOleAdviseHolder( LPOLEADVISEHOLDER * ppOAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateDefaultHandler( const IID & clsid, LPUNKNOWN pUnkOuter,
                       const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateEmbeddingHelper( const IID & clsid, LPUNKNOWN pUnkOuter,
                       DWORD flags, LPCLASSFACTORY pCF,
                       const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) BOOL __stdcall IsAccelerator( HACCEL hAccel, int cAccelEntries, LPMSG lpMsg,
                                            WORD * lpwCmd);


extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfFile( LPOLESTR lpszPath, BOOL fUseFileAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfClass( const IID & rclsid, LPOLESTR lpszLabel,
                                           BOOL fUseTypeAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel( HICON hIcon, LPOLESTR lpszLabel,
                                             LPOLESTR lpszSourceFile, UINT iIconIndex);





               extern "C" __declspec(dllimport) HRESULT __stdcall OleRegGetUserType ( const IID & clsid, DWORD dwFormOfType,
                                                 LPOLESTR * pszUserType);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegGetMiscStatus ( const IID & clsid, DWORD dwAspect,
                                            DWORD * pdwStatus);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegEnumFormatEtc( const IID & clsid, DWORD dwDirection,
                                       LPENUMFORMATETC * ppenum);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegEnumVerbs ( const IID & clsid, LPENUMOLEVERB * ppenum);






typedef struct _OLESTREAM * LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL * LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorage
    ( LPOLESTREAM lpolestream,
        LPSTORAGE pstg,
       const DVTARGETDEVICE * ptd);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAM
    ( LPSTORAGE pstg,
        LPOLESTREAM lpolestream);




extern "C" __declspec(dllimport) HRESULT __stdcall OleDoAutoConvert( LPSTORAGE pStg, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetAutoConvert( const IID & clsidOld, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetAutoConvert( const IID & clsidOld, const IID & clsidNew);

extern "C" __declspec(dllimport) HRESULT __stdcall SetConvertStg( LPSTORAGE pStg, BOOL fConvert);


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
    ( LPSTORAGE pstg,

        CLIPFORMAT cfFormat,
        LONG lWidth,
        LONG lHeight,
        DWORD dwSize,
        LPSTGMEDIUM pmedium,
         LPOLESTREAM polestm);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
    ( LPOLESTREAM polestm,
         LPSTORAGE pstg,

         CLIPFORMAT * pcfFormat,
         LONG * plwWidth,
         LONG * plHeight,
         DWORD * pdwSize,
         LPSTGMEDIUM pmedium);






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/ole2.h" 2 3







#pragma warning(pop)
# 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/windows.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)
#pragma warning(disable: 4820)
# 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
extern "C" const GUID IID_IPrintDialogCallback;






extern "C" const GUID IID_IPrintDialogServices;
# 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4820)
# 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\prsht.h" 3
#pragma warning(pop)
# 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 2 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 1 3
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\pshpack1.h" 3
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 2 3




extern "C" {
# 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef UINT_PTR (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
# 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef struct tagOFN_NT4A {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCSTR lpstrFilter;
   LPSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPSTR lpstrFile;
   DWORD nMaxFile;
   LPSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCSTR lpstrInitialDir;
   LPCSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} OPENFILENAME_NT4A, *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCWSTR lpstrFilter;
   LPWSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPWSTR lpstrFile;
   DWORD nMaxFile;
   LPWSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCWSTR lpstrInitialDir;
   LPCWSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCWSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} OPENFILENAME_NT4W, *LPOPENFILENAME_NT4W;

typedef OPENFILENAME_NT4W OPENFILENAME_NT4;
typedef LPOPENFILENAME_NT4W LPOPENFILENAME_NT4;





typedef struct tagOFNA {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCSTR lpstrFilter;
   LPSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPSTR lpstrFile;
   DWORD nMaxFile;
   LPSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCSTR lpstrInitialDir;
   LPCSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;





   void * pvReserved;
   DWORD dwReserved;
   DWORD FlagsEx;

} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCWSTR lpstrFilter;
   LPWSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPWSTR lpstrFile;
   DWORD nMaxFile;
   LPWSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCWSTR lpstrInitialDir;
   LPCWSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCWSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;





   void * pvReserved;
   DWORD dwReserved;
   DWORD FlagsEx;

} OPENFILENAMEW, *LPOPENFILENAMEW;

typedef OPENFILENAMEW OPENFILENAME;
typedef LPOPENFILENAMEW LPOPENFILENAME;
# 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
__declspec(dllimport) BOOL __stdcall GetOpenFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL __stdcall GetOpenFileNameW(LPOPENFILENAMEW);





__declspec(dllimport) BOOL __stdcall GetSaveFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL __stdcall GetSaveFileNameW(LPOPENFILENAMEW);







__declspec(dllimport) short __stdcall GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize);
__declspec(dllimport) short __stdcall GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize);
# 329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef UINT_PTR (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



typedef struct _OFNOTIFYA
{
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR pszFile;
} OFNOTIFYA, *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR pszFile;
} OFNOTIFYW, *LPOFNOTIFYW;

typedef OFNOTIFYW OFNOTIFY;
typedef LPOFNOTIFYW LPOFNOTIFY;







typedef struct _OFNOTIFYEXA
{
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPVOID psf;
        LPVOID pidl;
} OFNOTIFYEXA, *LPOFNOTIFYEXA;

typedef struct _OFNOTIFYEXW
{
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPVOID psf;
        LPVOID pidl;
} OFNOTIFYEXW, *LPOFNOTIFYEXW;

typedef OFNOTIFYEXW OFNOTIFYEX;
typedef LPOFNOTIFYEXW LPOFNOTIFYEX;
# 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef struct tagCHOOSECOLORA {
   DWORD lStructSize;
   HWND hwndOwner;
   HWND hInstance;
   COLORREF rgbResult;
   COLORREF* lpCustColors;
   DWORD Flags;
   LPARAM lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
   DWORD lStructSize;
   HWND hwndOwner;
   HWND hInstance;
   COLORREF rgbResult;
   COLORREF* lpCustColors;
   DWORD Flags;
   LPARAM lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;

typedef CHOOSECOLORW CHOOSECOLOR;
typedef LPCHOOSECOLORW LPCHOOSECOLOR;
# 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
__declspec(dllimport) BOOL __stdcall ChooseColorA(LPCHOOSECOLORA);
__declspec(dllimport) BOOL __stdcall ChooseColorW(LPCHOOSECOLORW);
# 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef UINT_PTR (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagFINDREPLACEA {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;

   DWORD Flags;
   LPSTR lpstrFindWhat;
   LPSTR lpstrReplaceWith;
   WORD wFindWhatLen;
   WORD wReplaceWithLen;
   LPARAM lCustData;
   LPFRHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;

   DWORD Flags;
   LPWSTR lpstrFindWhat;
   LPWSTR lpstrReplaceWith;
   WORD wFindWhatLen;
   WORD wReplaceWithLen;
   LPARAM lCustData;
   LPFRHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} FINDREPLACEW, *LPFINDREPLACEW;

typedef FINDREPLACEW FINDREPLACE;
typedef LPFINDREPLACEW LPFINDREPLACE;
# 618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
__declspec(dllimport) HWND __stdcall FindTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall FindTextW(LPFINDREPLACEW);






__declspec(dllimport) HWND __stdcall ReplaceTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall ReplaceTextW(LPFINDREPLACEW);
# 663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef UINT_PTR (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSEFONTA {
   DWORD lStructSize;
   HWND hwndOwner;
   HDC hDC;
   LPLOGFONTA lpLogFont;
   INT iPointSize;
   DWORD Flags;
   COLORREF rgbColors;
   LPARAM lCustData;
   LPCFHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
   HINSTANCE hInstance;

   LPSTR lpszStyle;

   WORD nFontType;


   WORD ___MISSING_ALIGNMENT__;
   INT nSizeMin;
   INT nSizeMax;

} CHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
   DWORD lStructSize;
   HWND hwndOwner;
   HDC hDC;
   LPLOGFONTW lpLogFont;
   INT iPointSize;
   DWORD Flags;
   COLORREF rgbColors;
   LPARAM lCustData;
   LPCFHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
   HINSTANCE hInstance;

   LPWSTR lpszStyle;

   WORD nFontType;


   WORD ___MISSING_ALIGNMENT__;
   INT nSizeMin;
   INT nSizeMax;

} CHOOSEFONTW;

typedef CHOOSEFONTW CHOOSEFONT;



typedef CHOOSEFONTA *LPCHOOSEFONTA;
typedef CHOOSEFONTW *LPCHOOSEFONTW;

typedef LPCHOOSEFONTW LPCHOOSEFONT;



typedef const CHOOSEFONTA *PCCHOOSEFONTA;
typedef const CHOOSEFONTW *PCCHOOSEFONTW;

typedef CHOOSEFONTW CHOOSEFONT;
typedef PCCHOOSEFONTW PCCHOOSEFONT;





__declspec(dllimport) BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
__declspec(dllimport) BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);
# 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagPDA {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   WORD nFromPage;
   WORD nToPage;
   WORD nMinPage;
   WORD nMaxPage;
   WORD nCopies;
   HINSTANCE hInstance;
   LPARAM lCustData;
   LPPRINTHOOKPROC lpfnPrintHook;
   LPSETUPHOOKPROC lpfnSetupHook;
   LPCSTR lpPrintTemplateName;
   LPCSTR lpSetupTemplateName;
   HGLOBAL hPrintTemplate;
   HGLOBAL hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   WORD nFromPage;
   WORD nToPage;
   WORD nMinPage;
   WORD nMaxPage;
   WORD nCopies;
   HINSTANCE hInstance;
   LPARAM lCustData;
   LPPRINTHOOKPROC lpfnPrintHook;
   LPSETUPHOOKPROC lpfnSetupHook;
   LPCWSTR lpPrintTemplateName;
   LPCWSTR lpSetupTemplateName;
   HGLOBAL hPrintTemplate;
   HGLOBAL hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;

typedef PRINTDLGW PRINTDLG;
typedef LPPRINTDLGW LPPRINTDLG;





__declspec(dllimport) BOOL __stdcall PrintDlgA( LPPRINTDLGA pPD);
__declspec(dllimport) BOOL __stdcall PrintDlgW( LPPRINTDLGW pPD);
# 949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
struct __declspec(uuid("5852A2C3-6530-11D1-B6A3-0000F8757BF9")) __declspec(novtable) IPrintDialogCallback : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface ( const IID & riid, void **ppvObj) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef (void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall InitDone (void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SelectionChange (void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall HandleMessage ( HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult) = 0;
};
# 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
struct __declspec(uuid("509AAEDA-5639-11D1-B6A1-0000F8757BF9")) __declspec(novtable) IPrintDialogServices : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface ( const IID & riid, void **ppvObj) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef (void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentDevMode ( LPDEVMODE pDevMode, UINT *pcbSize) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentPrinterName ( LPWSTR pPrinterName, UINT *pcchSize) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentPortName ( LPWSTR pPortName, UINT *pcchSize) = 0;
};





typedef struct tagPRINTPAGERANGE {
   DWORD nFromPage;
   DWORD nToPage;
} PRINTPAGERANGE;
typedef PRINTPAGERANGE *LPPRINTPAGERANGE;
typedef const PRINTPAGERANGE *PCPRINTPAGERANGE;





typedef struct tagPDEXA {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   DWORD Flags2;
   DWORD ExclusionFlags;
   DWORD nPageRanges;
   DWORD nMaxPageRanges;
   LPPRINTPAGERANGE lpPageRanges;
   DWORD nMinPage;
   DWORD nMaxPage;
   DWORD nCopies;
   HINSTANCE hInstance;
   LPCSTR lpPrintTemplateName;
   LPUNKNOWN lpCallback;
   DWORD nPropertyPages;
   HPROPSHEETPAGE *lphPropertyPages;
   DWORD nStartPage;
   DWORD dwResultAction;
} PRINTDLGEXA, *LPPRINTDLGEXA;



typedef struct tagPDEXW {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   DWORD Flags2;
   DWORD ExclusionFlags;
   DWORD nPageRanges;
   DWORD nMaxPageRanges;
   LPPRINTPAGERANGE lpPageRanges;
   DWORD nMinPage;
   DWORD nMaxPage;
   DWORD nCopies;
   HINSTANCE hInstance;
   LPCWSTR lpPrintTemplateName;
   LPUNKNOWN lpCallback;
   DWORD nPropertyPages;
   HPROPSHEETPAGE *lphPropertyPages;
   DWORD nStartPage;
   DWORD dwResultAction;
} PRINTDLGEXW, *LPPRINTDLGEXW;

typedef PRINTDLGEXW PRINTDLGEX;
typedef LPPRINTDLGEXW LPPRINTDLGEX;







__declspec(dllimport) HRESULT __stdcall PrintDlgExA( LPPRINTDLGEXA pPD);
__declspec(dllimport) HRESULT __stdcall PrintDlgExW( LPPRINTDLGEXW pPD);
# 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef struct tagDEVNAMES {
   WORD wDriverOffset;
   WORD wDeviceOffset;
   WORD wOutputOffset;
   WORD wDefault;
} DEVNAMES;
typedef DEVNAMES *LPDEVNAMES;
typedef const DEVNAMES *PCDEVNAMES;




__declspec(dllimport) DWORD __stdcall CommDlgExtendedError(void);
# 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
typedef UINT_PTR (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT_PTR (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

typedef struct tagPSDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGW, * LPPAGESETUPDLGW;

typedef PAGESETUPDLGW PAGESETUPDLG;
typedef LPPAGESETUPDLGW LPPAGESETUPDLG;





__declspec(dllimport) BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
__declspec(dllimport) BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );
# 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 3
}




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 1 3
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\poppack.h" 3
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\commdlg.h" 2 3





#pragma warning(pop)
# 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/windows.h" 2 3




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\stralign.h" 1 3
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\stralign.h" 3
extern "C" {
# 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\stralign.h" 3
__inline
PUWSTR
static
__declspec(deprecated)
ua_wcscpy(
                                                       PUWSTR Destination,
         PCUWSTR Source
    )
{
#pragma warning(push)
#pragma warning(disable: 4995)
#pragma warning(disable: 4996)



 return wcscpy(Destination, Source);
#pragma warning(pop)
}
# 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\shared\\stralign.h" 3
}
# 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/windows.h" 2 3
# 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/windows.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 1 3
# 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)



extern "C" {
# 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
extern "C" const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;







extern "C" const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
# 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
extern "C" const GUID DOMAIN_JOIN_GUID;







extern "C" const GUID DOMAIN_LEAVE_GUID;
# 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
extern "C" const GUID FIREWALL_PORT_OPEN_GUID;







extern "C" const GUID FIREWALL_PORT_CLOSE_GUID;
# 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
extern "C" const GUID MACHINE_POLICY_PRESENT_GUID;







extern "C" const GUID USER_POLICY_PRESENT_GUID;
# 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
extern "C" const GUID RPC_INTERFACE_EVENT_GUID;







extern "C" const GUID NAMED_PIPE_EVENT_GUID;
# 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
extern "C" const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
# 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    union {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
# 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;

typedef SERVICE_DESCRIPTIONW SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONW LPSERVICE_DESCRIPTION;
# 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3,
        SC_ACTION_OWN_RESTART = 4
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;



    DWORD cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;



    DWORD cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;

typedef SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSW LPSERVICE_FAILURE_ACTIONS;
# 572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL fDelayedAutostart;
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;




typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL fFailureActionsOnNonCrashFailures;
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;




typedef struct _SERVICE_SID_INFO {
    DWORD dwServiceSidType;
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;




typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;



typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

typedef SERVICE_REQUIRED_PRIVILEGES_INFOW SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOW LPSERVICE_REQUIRED_PRIVILEGES_INFO;
# 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD dwPreshutdownTimeout;
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;




typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD dwDataType;



    DWORD cbData;



    PBYTE pData;
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;




typedef struct _SERVICE_TRIGGER
{
    DWORD dwTriggerType;
    DWORD dwAction;
    GUID * pTriggerSubtype;






    DWORD cDataItems;



    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;




typedef struct _SERVICE_TRIGGER_INFO {



    DWORD cTriggers;



    PSERVICE_TRIGGER pTriggers;
    PBYTE pReserved;
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;






typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT usPreferredNode;
    BOOLEAN fDelete;
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;




typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER liNewTime;
    LARGE_INTEGER liOldTime;
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;




typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
    DWORD dwLaunchProtected;
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO;





struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;

typedef ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSW LPENUM_SERVICE_STATUS;





typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;

typedef ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSW LPENUM_SERVICE_STATUS_PROCESS;
# 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef LPVOID SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;

typedef QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSW LPQUERY_SERVICE_LOCK_STATUS;
# 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;

typedef QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGW LPQUERY_SERVICE_CONFIG;
# 852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef void __stdcall SERVICE_MAIN_FUNCTIONW (
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void __stdcall SERVICE_MAIN_FUNCTIONA (
    DWORD dwNumServicesArgs,
    LPTSTR *lpServiceArgVectors
    );







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD dwNumServicesArgs,
    LPSTR *lpServiceArgVectors
    );
# 889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;

typedef SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYW LPSERVICE_TABLE_ENTRY;
# 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef void __stdcall HANDLER_FUNCTION (
    DWORD dwControl
    );

typedef DWORD __stdcall HANDLER_FUNCTION_EX (
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );

typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );




typedef
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
         PVOID pParameter
    );




typedef struct _SERVICE_NOTIFY_1 {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPSTR pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPWSTR pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;

typedef SERVICE_NOTIFY_2W SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2W PSERVICE_NOTIFY_2;





typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;

typedef SERVICE_NOTIFYW SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYW PSERVICE_NOTIFY;
# 990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD dwReason;
    LPSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;



typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD dwReason;
    LPWSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

typedef SERVICE_CONTROL_STATUS_REASON_PARAMSW SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSW PSERVICE_CONTROL_STATUS_REASON_PARAMS;
# 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef struct _SERVICE_START_REASON {
    DWORD dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;





__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
                SC_HANDLE hService,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCSTR lpBinaryPathName,
                LPCSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCSTR lpDependencies,
                LPCSTR lpServiceStartName,
                LPCSTR lpPassword,
                LPCSTR lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
                SC_HANDLE hService,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCWSTR lpBinaryPathName,
                LPCWSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCWSTR lpDependencies,
                LPCWSTR lpServiceStartName,
                LPCWSTR lpPassword,
                LPCWSTR lpDisplayName
    );






__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
                SC_HANDLE hService,
                DWORD dwInfoLevel,
                LPVOID lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
                SC_HANDLE hService,
                DWORD dwInfoLevel,
                LPVOID lpInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
                SC_HANDLE hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
                SC_HANDLE hService,
                DWORD dwControl,
                LPSERVICE_STATUS lpServiceStatus
    );


__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
                SC_HANDLE hSCManager,
                LPCSTR lpServiceName,
                LPCSTR lpDisplayName,
                DWORD dwDesiredAccess,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCSTR lpBinaryPathName,
                LPCSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCSTR lpDependencies,
                LPCSTR lpServiceStartName,
                LPCSTR lpPassword
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
                SC_HANDLE hSCManager,
                LPCWSTR lpServiceName,
                LPCWSTR lpDisplayName,
                DWORD dwDesiredAccess,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCWSTR lpBinaryPathName,
                LPCWSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCWSTR lpDependencies,
                LPCWSTR lpServiceStartName,
                LPCWSTR lpPassword
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteService(
                SC_HANDLE hService
    );


__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
                    SC_HANDLE hService,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSA lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned
    );

__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
                    SC_HANDLE hService,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSW lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned
    );
# 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
                    SC_HANDLE hSCManager,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSA lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
                    SC_HANDLE hSCManager,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSW lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle
    );
# 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
                    SC_HANDLE hSCManager,
                    SC_ENUM_TYPE InfoLevel,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPBYTE lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle,
                    LPCSTR pszGroupName
    );

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
                    SC_HANDLE hSCManager,
                    SC_ENUM_TYPE InfoLevel,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPBYTE lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle,
                    LPCWSTR pszGroupName
    );







__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpDisplayName,

                    LPSTR lpServiceName,
                    LPDWORD lpcchBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpDisplayName,

                    LPWSTR lpServiceName,
                    LPDWORD lpcchBuffer
    );







__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpServiceName,

                    LPSTR lpDisplayName,
                    LPDWORD lpcchBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpServiceName,

                    LPWSTR lpDisplayName,
                    LPDWORD lpcchBuffer
    );
# 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
                    SC_HANDLE hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
                    BOOL BootAcceptable
    );
# 1352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
                    LPCSTR lpMachineName,
                    LPCSTR lpDatabaseName,
                    DWORD dwDesiredAccess
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
                    LPCWSTR lpMachineName,
                    LPCWSTR lpDatabaseName,
                    DWORD dwDesiredAccess
    );







__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpServiceName,
                    DWORD dwDesiredAccess
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpServiceName,
                    DWORD dwDesiredAccess
    );







__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
                    SC_HANDLE hService,

                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
                    SC_HANDLE hService,

                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
# 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
                    SC_HANDLE hService,
                    DWORD dwInfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
# 1454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
                    SC_HANDLE hService,
                    DWORD dwInfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
# 1478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
                    SC_HANDLE hSCManager,

                    LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
                    SC_HANDLE hSCManager,

                    LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
# 1512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
                    SC_HANDLE hService,
                    SECURITY_INFORMATION dwSecurityInformation,

                    PSECURITY_DESCRIPTOR lpSecurityDescriptor,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );


__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
                    SC_HANDLE hService,
                    LPSERVICE_STATUS lpServiceStatus
    );


__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
                    SC_HANDLE hService,
                    SC_STATUS_TYPE InfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );


__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
            LPCSTR lpServiceName,

            LPHANDLER_FUNCTION lpHandlerProc
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
            LPCWSTR lpServiceName,

            LPHANDLER_FUNCTION lpHandlerProc
    );







__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
            LPCSTR lpServiceName,

            LPHANDLER_FUNCTION_EX lpHandlerProc,
             LPVOID lpContext
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
            LPCWSTR lpServiceName,

            LPHANDLER_FUNCTION_EX lpHandlerProc,
             LPVOID lpContext
    );






__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
                SC_HANDLE hService,
                SECURITY_INFORMATION dwSecurityInformation,
                PSECURITY_DESCRIPTOR lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
                SERVICE_STATUS_HANDLE hServiceStatus,
                LPSERVICE_STATUS lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
         const SERVICE_TABLE_ENTRYA *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
         const SERVICE_TABLE_ENTRYW *lpServiceStartTable
    );







__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
                    SC_HANDLE hService,
                    DWORD dwNumServiceArgs,

                    LPCSTR *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
                    SC_HANDLE hService,
                    DWORD dwNumServiceArgs,

                    LPCWSTR *lpServiceArgVectors
    );
# 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
                    SC_LOCK ScLock
    );
# 1677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeA (
                SC_HANDLE hService,
                DWORD dwNotifyMask,
                PSERVICE_NOTIFYA pNotifyBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeW (
                SC_HANDLE hService,
                DWORD dwNotifyMask,
                PSERVICE_NOTIFYW pNotifyBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
ControlServiceExA(
                SC_HANDLE hService,
                DWORD dwControl,
                DWORD dwInfoLevel,
                PVOID pControlParams
    );
__declspec(dllimport)
BOOL
__stdcall
ControlServiceExW(
                SC_HANDLE hService,
                DWORD dwControl,
                DWORD dwInfoLevel,
                PVOID pControlParams
    );






__declspec(dllimport)
BOOL
__stdcall
QueryServiceDynamicInformation (
                SERVICE_STATUS_HANDLE hServiceStatus,
                DWORD dwInfoLevel,
                PVOID * ppDynamicInfo
    );
# 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\winsvc.h" 3
typedef enum _SC_EVENT_TYPE {
    SC_EVENT_DATABASE_CHANGE,
    SC_EVENT_PROPERTY_CHANGE,
    SC_EVENT_STATUS_CHANGE
} SC_EVENT_TYPE, *PSC_EVENT_TYPE;

typedef
void
__stdcall
SC_NOTIFICATION_CALLBACK (
                DWORD dwNotify,
                PVOID pCallbackContext
    );
typedef SC_NOTIFICATION_CALLBACK* PSC_NOTIFICATION_CALLBACK;

typedef struct _SC_NOTIFICATION_REGISTRATION* PSC_NOTIFICATION_REGISTRATION;

__declspec(dllimport)
DWORD
__stdcall
SubscribeServiceChangeNotifications (
              SC_HANDLE hService,
              SC_EVENT_TYPE eEventType,
              PSC_NOTIFICATION_CALLBACK pCallback,
              PVOID pCallbackContext,
              PSC_NOTIFICATION_REGISTRATION* pSubscription
    );

__declspec(dllimport)
void
__stdcall
UnsubscribeServiceChangeNotifications (
              PSC_NOTIFICATION_REGISTRATION pSubscription
    );

__declspec(dllimport)
DWORD
__stdcall
WaitServiceState (
              SC_HANDLE hService,
              DWORD dwNotify,
              DWORD dwTimeout,
              HANDLE hCancelEvent
    );







}



#pragma warning(pop)
# 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/windows.h" 2 3





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mcx.h" 1 3
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mcx.h" 3
#pragma warning(push)
#pragma warning(disable: 4820)


typedef struct _MODEMDEVCAPS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;


    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;


    DWORD dwDialOptions;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwModemOptions;
    DWORD dwMaxDTERate;
    DWORD dwMaxDCERate;


    BYTE abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;


    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwPreferredModemOptions;


    DWORD dwNegotiatedModemOptions;
    DWORD dwNegotiatedDCERate;


    BYTE abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;
# 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\mcx.h" 3
#pragma warning(pop)
# 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/windows.h" 2 3




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)
# 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
typedef HKL *LPHKL;
typedef UINT *LPUINT;







typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM;
# 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST;
# 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;

typedef REGISTERWORDW REGISTERWORD;
typedef PREGISTERWORDW PREGISTERWORD;
typedef NPREGISTERWORDW NPREGISTERWORD;
typedef LPREGISTERWORDW LPREGISTERWORD;
# 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING;
# 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW;

typedef STYLEBUFW STYLEBUF;
typedef PSTYLEBUFW PSTYLEBUF;
typedef NPSTYLEBUFW NPSTYLEBUF;
typedef LPSTYLEBUFW LPSTYLEBUF;
# 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;

typedef IMEMENUITEMINFOW IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOW PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOW NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOW LPIMEMENUITEMINFO;







typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION;

typedef BOOL (__stdcall* IMCENUMPROC)(HIMC, LPARAM);
# 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
HKL __stdcall ImmInstallIMEA( LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL __stdcall ImmInstallIMEW( LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);






HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL, LPSTR lpszDescription, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL, LPWSTR lpszDescription, UINT uBufLen);






UINT __stdcall ImmGetIMEFileNameA( HKL, LPSTR lpszFileName, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL, LPWSTR lpszFileName, UINT uBufLen);






DWORD __stdcall ImmGetProperty( HKL, DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND, DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND, HIMC);
HIMC __stdcall ImmAssociateContext( HWND, HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND, HIMC, DWORD);


LONG __stdcall ImmGetCompositionStringA( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
LONG __stdcall ImmGetCompositionStringW( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);






BOOL __stdcall ImmSetCompositionStringA( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
BOOL __stdcall ImmSetCompositionStringW( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);






DWORD __stdcall ImmGetCandidateListCountA( HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC, LPDWORD lpdwListCount);






DWORD __stdcall ImmGetCandidateListA( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);






DWORD __stdcall ImmGetGuideLineA( HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW( HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen);






BOOL __stdcall ImmGetConversionStatus( HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC, BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC, LPLOGFONTW lplf);






BOOL __stdcall ImmSetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC, LPLOGFONTW lplf);







BOOL __stdcall ImmConfigureIMEA( HKL, HWND, DWORD, LPVOID);
BOOL __stdcall ImmConfigureIMEW( HKL, HWND, DWORD, LPVOID);






LRESULT __stdcall ImmEscapeA( HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW( HKL, HIMC, UINT, LPVOID);






DWORD __stdcall ImmGetConversionListA( HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
DWORD __stdcall ImmGetConversionListW( HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);






BOOL __stdcall ImmNotifyIME( HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC, DWORD, LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC, LPCANDIDATEFORM lpCandidate);

BOOL __stdcall ImmIsUIMessageA( HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND, UINT, WPARAM, LPARAM);






UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)( LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)( LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID);






BOOL __stdcall ImmRegisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);






BOOL __stdcall ImmUnregisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);






UINT __stdcall ImmGetRegisterWordStyleA( HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf);






UINT __stdcall ImmEnumRegisterWordA( HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);







BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize);






BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);



BOOL __stdcall ImmDisableLegacyIME(void);
# 635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\ime_cmodes.h" 1 3
# 635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 2 3
# 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um\\imm.h" 3
#pragma warning(pop)



}
# 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.16299.0\\um/windows.h" 2 3








#pragma warning(pop)
# 18 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2

# 1 "..\\Base\\MiniDump.h" 1
# 10 "..\\Base\\MiniDump.h"
class CMiniDump
{
public:
 static bool Begin(void);
 static bool End(void);
};
# 19 "c:\\mytest\\server\\namecheckserver\\main.cpp" 2
# 29 "c:\\mytest\\server\\namecheckserver\\main.cpp"
bool init()
{

 SetConsoleOutputCP(65001);

 if (!CMiniDump::Begin())
 {
  do{do { char temp_buf[1024 * 8] = {0}; _format_prefix_string_(g_filelog_obj_, enum_log_type_error, temp_buf, sizeof(temp_buf), "c:\\mytest\\server\\namecheckserver\\main.cpp", __FUNCTION__, 36); _filelog_write_(g_filelog_obj_, enum_log_type_error, "初始化MiniDump失败!", temp_buf, g_filelog_obj_); } while (0);}while(0);
  system("pause");
  return false;
 }


 if (!init_log("NameCheckServer_Log"))
 {
  do{do { char temp_buf[1024 * 8] = {0}; _format_prefix_string_(g_filelog_obj_, enum_log_type_error, temp_buf, sizeof(temp_buf), "c:\\mytest\\server\\namecheckserver\\main.cpp", __FUNCTION__, 44); _filelog_write_(g_filelog_obj_, enum_log_type_error, "初始化Log失败!", temp_buf, g_filelog_obj_); } while (0);}while(0);
  return false;
 }


 if (!CNetConfig::Instance().Init())
 {
  do{do { char temp_buf[1024 * 8] = {0}; _format_prefix_string_(g_filelog_obj_, enum_log_type_error, temp_buf, sizeof(temp_buf), "c:\\mytest\\server\\namecheckserver\\main.cpp", __FUNCTION__, 51); _filelog_write_(g_filelog_obj_, enum_log_type_error, "初始化NetConfig失败!", temp_buf, g_filelog_obj_); } while (0);}while(0);
  system("pause");
  return 0;
 }


 if (!CConfig::Instance().Init("NameCheckServer"))
 {
  do{do { char temp_buf[1024 * 8] = {0}; _format_prefix_string_(g_filelog_obj_, enum_log_type_error, temp_buf, sizeof(temp_buf), "c:\\mytest\\server\\namecheckserver\\main.cpp", __FUNCTION__, 59); _filelog_write_(g_filelog_obj_, enum_log_type_error, "初始化Config失败!", temp_buf, g_filelog_obj_); } while (0);}while(0);
  system("pause");
  return 0;
 }

 g_elapsed_log_flag = CConfig::Instance().IsOpenElapsedLog();

 do{do { char temp_buf[1024 * 8] = {0}; _format_prefix_string_(g_filelog_obj_, enum_log_type_log, temp_buf, sizeof(temp_buf), 0, 0, 0); _filelog_write_(g_filelog_obj_, enum_log_type_log, "名称检查服务器开始启动!", temp_buf, g_filelog_obj_); } while (0);}while(0);


 if (!lxnet::net_init(CNetConfig::Instance().GetBigBufSize(), CNetConfig::Instance().GetBigBufNum(),
  CNetConfig::Instance().GetSmallBufSize(), CNetConfig::Instance().GetSmallBufNum(),
  CNetConfig::Instance().GetListenerNum(), CNetConfig::Instance().GetSocketerNum(),
  CNetConfig::Instance().GetThreadNum()))
 {
  do{do { char temp_buf[1024 * 8] = {0}; _format_prefix_string_(g_filelog_obj_, enum_log_type_error, temp_buf, sizeof(temp_buf), "c:\\mytest\\server\\namecheckserver\\main.cpp", __FUNCTION__, 74); _filelog_write_(g_filelog_obj_, enum_log_type_error, "初始化网络库失败!", temp_buf, g_filelog_obj_); } while (0);}while(0);
  system("pause");
  return 0;
 }

 if (!CCheckNameServer::Instance().Init())
 {
  do{do { char temp_buf[1024 * 8] = {0}; _format_prefix_string_(g_filelog_obj_, enum_log_type_error, temp_buf, sizeof(temp_buf), "c:\\mytest\\server\\namecheckserver\\main.cpp", __FUNCTION__, 81); _filelog_write_(g_filelog_obj_, enum_log_type_error, "初始化失败!", temp_buf, g_filelog_obj_); } while (0);}while(0);
  system("pause");
  return 0;
 }

 CCheckNameServer::Instance().Run();
 do{do { char temp_buf[1024 * 8] = {0}; _format_prefix_string_(g_filelog_obj_, enum_log_type_log, temp_buf, sizeof(temp_buf), 0, 0, 0); _filelog_write_(g_filelog_obj_, enum_log_type_log, "名称检查服务器关闭!", temp_buf, g_filelog_obj_); } while (0);}while(0);

 CCheckNameServer::Instance().Release();
 lxnet::net_release();
 release_log();
 google::protobuf::ShutdownProtobufLibrary();

 CMiniDump::End();

 return true;
}

int main(void)
{
 init();
 return 0;
}
