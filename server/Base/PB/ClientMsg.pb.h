// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMsg.proto

#ifndef PROTOBUF_ClientMsg_2eproto_INCLUDED
#define PROTOBUF_ClientMsg_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ClientMsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPingImpl();
void InitDefaultsPing();
void InitDefaultsLoadPlayerDataFinishImpl();
void InitDefaultsLoadPlayerDataFinish();
void InitDefaultsLoadMapFinishImpl();
void InitDefaultsLoadMapFinish();
void InitDefaultsPlayerMoveImpl();
void InitDefaultsPlayerMove();
void InitDefaultsPlayerMoveRetImpl();
void InitDefaultsPlayerMoveRet();
void InitDefaultsChangeMapImpl();
void InitDefaultsChangeMap();
void InitDefaultsChangeMapRetImpl();
void InitDefaultsChangeMapRet();
inline void InitDefaults() {
  InitDefaultsPing();
  InitDefaultsLoadPlayerDataFinish();
  InitDefaultsLoadMapFinish();
  InitDefaultsPlayerMove();
  InitDefaultsPlayerMoveRet();
  InitDefaultsChangeMap();
  InitDefaultsChangeMapRet();
}
}  // namespace protobuf_ClientMsg_2eproto
namespace netData {
class ChangeMap;
class ChangeMapDefaultTypeInternal;
extern ChangeMapDefaultTypeInternal _ChangeMap_default_instance_;
class ChangeMapRet;
class ChangeMapRetDefaultTypeInternal;
extern ChangeMapRetDefaultTypeInternal _ChangeMapRet_default_instance_;
class LoadMapFinish;
class LoadMapFinishDefaultTypeInternal;
extern LoadMapFinishDefaultTypeInternal _LoadMapFinish_default_instance_;
class LoadPlayerDataFinish;
class LoadPlayerDataFinishDefaultTypeInternal;
extern LoadPlayerDataFinishDefaultTypeInternal _LoadPlayerDataFinish_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class PlayerMove;
class PlayerMoveDefaultTypeInternal;
extern PlayerMoveDefaultTypeInternal _PlayerMove_default_instance_;
class PlayerMoveRet;
class PlayerMoveRetDefaultTypeInternal;
extern PlayerMoveRetDefaultTypeInternal _PlayerMoveRet_default_instance_;
}  // namespace netData
namespace google {
namespace protobuf {
template<> ::netData::ChangeMap* Arena::Create< ::netData::ChangeMap>(Arena*);
template<> ::netData::ChangeMapRet* Arena::Create< ::netData::ChangeMapRet>(Arena*);
template<> ::netData::LoadMapFinish* Arena::Create< ::netData::LoadMapFinish>(Arena*);
template<> ::netData::LoadPlayerDataFinish* Arena::Create< ::netData::LoadPlayerDataFinish>(Arena*);
template<> ::netData::Ping* Arena::Create< ::netData::Ping>(Arena*);
template<> ::netData::PlayerMove* Arena::Create< ::netData::PlayerMove>(Arena*);
template<> ::netData::PlayerMoveRet* Arena::Create< ::netData::PlayerMoveRet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace netData {

enum LoadPlayerDataFinish_EC {
  LoadPlayerDataFinish_EC_EC_OTHER = 0,
  LoadPlayerDataFinish_EC_EC_SUCC = 1,
  LoadPlayerDataFinish_EC_EC_FAIL = 2,
  LoadPlayerDataFinish_EC_LoadPlayerDataFinish_EC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoadPlayerDataFinish_EC_LoadPlayerDataFinish_EC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoadPlayerDataFinish_EC_IsValid(int value);
const LoadPlayerDataFinish_EC LoadPlayerDataFinish_EC_EC_MIN = LoadPlayerDataFinish_EC_EC_OTHER;
const LoadPlayerDataFinish_EC LoadPlayerDataFinish_EC_EC_MAX = LoadPlayerDataFinish_EC_EC_FAIL;
const int LoadPlayerDataFinish_EC_EC_ARRAYSIZE = LoadPlayerDataFinish_EC_EC_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoadPlayerDataFinish_EC_descriptor();
inline const ::std::string& LoadPlayerDataFinish_EC_Name(LoadPlayerDataFinish_EC value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoadPlayerDataFinish_EC_descriptor(), value);
}
inline bool LoadPlayerDataFinish_EC_Parse(
    const ::std::string& name, LoadPlayerDataFinish_EC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoadPlayerDataFinish_EC>(
    LoadPlayerDataFinish_EC_descriptor(), name, value);
}
enum ChangeMapRet_EC {
  ChangeMapRet_EC_EC_OTHER = 0,
  ChangeMapRet_EC_EC_SUCC = 1,
  ChangeMapRet_EC_EC_FAIL = 2,
  ChangeMapRet_EC_EC_LINE = 4,
  ChangeMapRet_EC_EC_MAP = 5,
  ChangeMapRet_EC_ChangeMapRet_EC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChangeMapRet_EC_ChangeMapRet_EC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChangeMapRet_EC_IsValid(int value);
const ChangeMapRet_EC ChangeMapRet_EC_EC_MIN = ChangeMapRet_EC_EC_OTHER;
const ChangeMapRet_EC ChangeMapRet_EC_EC_MAX = ChangeMapRet_EC_EC_MAP;
const int ChangeMapRet_EC_EC_ARRAYSIZE = ChangeMapRet_EC_EC_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeMapRet_EC_descriptor();
inline const ::std::string& ChangeMapRet_EC_Name(ChangeMapRet_EC value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeMapRet_EC_descriptor(), value);
}
inline bool ChangeMapRet_EC_Parse(
    const ::std::string& name, ChangeMapRet_EC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeMapRet_EC>(
    ChangeMapRet_EC_descriptor(), name, value);
}
// ===================================================================

class Ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netData.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Ping* other);
  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Ping>(NULL);
  }

  Ping* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Ping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:netData.Ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_ClientMsg_2eproto::TableStruct;
  friend void ::protobuf_ClientMsg_2eproto::InitDefaultsPingImpl();
};
// -------------------------------------------------------------------

class LoadPlayerDataFinish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netData.LoadPlayerDataFinish) */ {
 public:
  LoadPlayerDataFinish();
  virtual ~LoadPlayerDataFinish();

  LoadPlayerDataFinish(const LoadPlayerDataFinish& from);

  inline LoadPlayerDataFinish& operator=(const LoadPlayerDataFinish& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadPlayerDataFinish(LoadPlayerDataFinish&& from) noexcept
    : LoadPlayerDataFinish() {
    *this = ::std::move(from);
  }

  inline LoadPlayerDataFinish& operator=(LoadPlayerDataFinish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadPlayerDataFinish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPlayerDataFinish* internal_default_instance() {
    return reinterpret_cast<const LoadPlayerDataFinish*>(
               &_LoadPlayerDataFinish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoadPlayerDataFinish* other);
  friend void swap(LoadPlayerDataFinish& a, LoadPlayerDataFinish& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadPlayerDataFinish* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LoadPlayerDataFinish>(NULL);
  }

  LoadPlayerDataFinish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LoadPlayerDataFinish>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoadPlayerDataFinish& from);
  void MergeFrom(const LoadPlayerDataFinish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadPlayerDataFinish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LoadPlayerDataFinish_EC EC;
  static const EC EC_OTHER =
    LoadPlayerDataFinish_EC_EC_OTHER;
  static const EC EC_SUCC =
    LoadPlayerDataFinish_EC_EC_SUCC;
  static const EC EC_FAIL =
    LoadPlayerDataFinish_EC_EC_FAIL;
  static inline bool EC_IsValid(int value) {
    return LoadPlayerDataFinish_EC_IsValid(value);
  }
  static const EC EC_MIN =
    LoadPlayerDataFinish_EC_EC_MIN;
  static const EC EC_MAX =
    LoadPlayerDataFinish_EC_EC_MAX;
  static const int EC_ARRAYSIZE =
    LoadPlayerDataFinish_EC_EC_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EC_descriptor() {
    return LoadPlayerDataFinish_EC_descriptor();
  }
  static inline const ::std::string& EC_Name(EC value) {
    return LoadPlayerDataFinish_EC_Name(value);
  }
  static inline bool EC_Parse(const ::std::string& name,
      EC* value) {
    return LoadPlayerDataFinish_EC_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 nCode = 1;
  void clear_ncode();
  static const int kNCodeFieldNumber = 1;
  ::google::protobuf::int32 ncode() const;
  void set_ncode(::google::protobuf::int32 value);

  // uint32 nTempID = 2;
  void clear_ntempid();
  static const int kNTempIDFieldNumber = 2;
  ::google::protobuf::uint32 ntempid() const;
  void set_ntempid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:netData.LoadPlayerDataFinish)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ncode_;
  ::google::protobuf::uint32 ntempid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ClientMsg_2eproto::TableStruct;
  friend void ::protobuf_ClientMsg_2eproto::InitDefaultsLoadPlayerDataFinishImpl();
};
// -------------------------------------------------------------------

class LoadMapFinish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netData.LoadMapFinish) */ {
 public:
  LoadMapFinish();
  virtual ~LoadMapFinish();

  LoadMapFinish(const LoadMapFinish& from);

  inline LoadMapFinish& operator=(const LoadMapFinish& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadMapFinish(LoadMapFinish&& from) noexcept
    : LoadMapFinish() {
    *this = ::std::move(from);
  }

  inline LoadMapFinish& operator=(LoadMapFinish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadMapFinish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadMapFinish* internal_default_instance() {
    return reinterpret_cast<const LoadMapFinish*>(
               &_LoadMapFinish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LoadMapFinish* other);
  friend void swap(LoadMapFinish& a, LoadMapFinish& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadMapFinish* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LoadMapFinish>(NULL);
  }

  LoadMapFinish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LoadMapFinish>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoadMapFinish& from);
  void MergeFrom(const LoadMapFinish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadMapFinish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:netData.LoadMapFinish)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_ClientMsg_2eproto::TableStruct;
  friend void ::protobuf_ClientMsg_2eproto::InitDefaultsLoadMapFinishImpl();
};
// -------------------------------------------------------------------

class PlayerMove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netData.PlayerMove) */ {
 public:
  PlayerMove();
  virtual ~PlayerMove();

  PlayerMove(const PlayerMove& from);

  inline PlayerMove& operator=(const PlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMove(PlayerMove&& from) noexcept
    : PlayerMove() {
    *this = ::std::move(from);
  }

  inline PlayerMove& operator=(PlayerMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMove* internal_default_instance() {
    return reinterpret_cast<const PlayerMove*>(
               &_PlayerMove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerMove* other);
  friend void swap(PlayerMove& a, PlayerMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMove* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PlayerMove>(NULL);
  }

  PlayerMove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PlayerMove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMove& from);
  void MergeFrom(const PlayerMove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:netData.PlayerMove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_ClientMsg_2eproto::TableStruct;
  friend void ::protobuf_ClientMsg_2eproto::InitDefaultsPlayerMoveImpl();
};
// -------------------------------------------------------------------

class PlayerMoveRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netData.PlayerMoveRet) */ {
 public:
  PlayerMoveRet();
  virtual ~PlayerMoveRet();

  PlayerMoveRet(const PlayerMoveRet& from);

  inline PlayerMoveRet& operator=(const PlayerMoveRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMoveRet(PlayerMoveRet&& from) noexcept
    : PlayerMoveRet() {
    *this = ::std::move(from);
  }

  inline PlayerMoveRet& operator=(PlayerMoveRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoveRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMoveRet* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveRet*>(
               &_PlayerMoveRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PlayerMoveRet* other);
  friend void swap(PlayerMoveRet& a, PlayerMoveRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveRet* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PlayerMoveRet>(NULL);
  }

  PlayerMoveRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PlayerMoveRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMoveRet& from);
  void MergeFrom(const PlayerMoveRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMoveRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // uint32 nTempID = 4;
  void clear_ntempid();
  static const int kNTempIDFieldNumber = 4;
  ::google::protobuf::uint32 ntempid() const;
  void set_ntempid(::google::protobuf::uint32 value);

  // int32 nCode = 5;
  void clear_ncode();
  static const int kNCodeFieldNumber = 5;
  ::google::protobuf::int32 ncode() const;
  void set_ncode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:netData.PlayerMoveRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  ::google::protobuf::uint32 ntempid_;
  ::google::protobuf::int32 ncode_;
  mutable int _cached_size_;
  friend struct ::protobuf_ClientMsg_2eproto::TableStruct;
  friend void ::protobuf_ClientMsg_2eproto::InitDefaultsPlayerMoveRetImpl();
};
// -------------------------------------------------------------------

class ChangeMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netData.ChangeMap) */ {
 public:
  ChangeMap();
  virtual ~ChangeMap();

  ChangeMap(const ChangeMap& from);

  inline ChangeMap& operator=(const ChangeMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeMap(ChangeMap&& from) noexcept
    : ChangeMap() {
    *this = ::std::move(from);
  }

  inline ChangeMap& operator=(ChangeMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeMap* internal_default_instance() {
    return reinterpret_cast<const ChangeMap*>(
               &_ChangeMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ChangeMap* other);
  friend void swap(ChangeMap& a, ChangeMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeMap* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChangeMap>(NULL);
  }

  ChangeMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChangeMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeMap& from);
  void MergeFrom(const ChangeMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sEtoken = 2;
  void clear_setoken();
  static const int kSEtokenFieldNumber = 2;
  const ::std::string& setoken() const;
  void set_setoken(const ::std::string& value);
  #if LANG_CXX11
  void set_setoken(::std::string&& value);
  #endif
  void set_setoken(const char* value);
  void set_setoken(const char* value, size_t size);
  ::std::string* mutable_setoken();
  ::std::string* release_setoken();
  void set_allocated_setoken(::std::string* setoken);

  // bytes sSecret = 3;
  void clear_ssecret();
  static const int kSSecretFieldNumber = 3;
  const ::std::string& ssecret() const;
  void set_ssecret(const ::std::string& value);
  #if LANG_CXX11
  void set_ssecret(::std::string&& value);
  #endif
  void set_ssecret(const char* value);
  void set_ssecret(const void* value, size_t size);
  ::std::string* mutable_ssecret();
  ::std::string* release_ssecret();
  void set_allocated_ssecret(::std::string* ssecret);

  // int32 nMapID = 1;
  void clear_nmapid();
  static const int kNMapIDFieldNumber = 1;
  ::google::protobuf::int32 nmapid() const;
  void set_nmapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:netData.ChangeMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr setoken_;
  ::google::protobuf::internal::ArenaStringPtr ssecret_;
  ::google::protobuf::int32 nmapid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ClientMsg_2eproto::TableStruct;
  friend void ::protobuf_ClientMsg_2eproto::InitDefaultsChangeMapImpl();
};
// -------------------------------------------------------------------

class ChangeMapRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netData.ChangeMapRet) */ {
 public:
  ChangeMapRet();
  virtual ~ChangeMapRet();

  ChangeMapRet(const ChangeMapRet& from);

  inline ChangeMapRet& operator=(const ChangeMapRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeMapRet(ChangeMapRet&& from) noexcept
    : ChangeMapRet() {
    *this = ::std::move(from);
  }

  inline ChangeMapRet& operator=(ChangeMapRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeMapRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeMapRet* internal_default_instance() {
    return reinterpret_cast<const ChangeMapRet*>(
               &_ChangeMapRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ChangeMapRet* other);
  friend void swap(ChangeMapRet& a, ChangeMapRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeMapRet* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChangeMapRet>(NULL);
  }

  ChangeMapRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChangeMapRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeMapRet& from);
  void MergeFrom(const ChangeMapRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeMapRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChangeMapRet_EC EC;
  static const EC EC_OTHER =
    ChangeMapRet_EC_EC_OTHER;
  static const EC EC_SUCC =
    ChangeMapRet_EC_EC_SUCC;
  static const EC EC_FAIL =
    ChangeMapRet_EC_EC_FAIL;
  static const EC EC_LINE =
    ChangeMapRet_EC_EC_LINE;
  static const EC EC_MAP =
    ChangeMapRet_EC_EC_MAP;
  static inline bool EC_IsValid(int value) {
    return ChangeMapRet_EC_IsValid(value);
  }
  static const EC EC_MIN =
    ChangeMapRet_EC_EC_MIN;
  static const EC EC_MAX =
    ChangeMapRet_EC_EC_MAX;
  static const int EC_ARRAYSIZE =
    ChangeMapRet_EC_EC_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EC_descriptor() {
    return ChangeMapRet_EC_descriptor();
  }
  static inline const ::std::string& EC_Name(EC value) {
    return ChangeMapRet_EC_Name(value);
  }
  static inline bool EC_Parse(const ::std::string& name,
      EC* value) {
    return ChangeMapRet_EC_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string sIP = 4;
  void clear_sip();
  static const int kSIPFieldNumber = 4;
  const ::std::string& sip() const;
  void set_sip(const ::std::string& value);
  #if LANG_CXX11
  void set_sip(::std::string&& value);
  #endif
  void set_sip(const char* value);
  void set_sip(const char* value, size_t size);
  ::std::string* mutable_sip();
  ::std::string* release_sip();
  void set_allocated_sip(::std::string* sip);

  // int32 nCode = 1;
  void clear_ncode();
  static const int kNCodeFieldNumber = 1;
  ::google::protobuf::int32 ncode() const;
  void set_ncode(::google::protobuf::int32 value);

  // bool bChangeIP = 2;
  void clear_bchangeip();
  static const int kBChangeIPFieldNumber = 2;
  bool bchangeip() const;
  void set_bchangeip(bool value);

  // int32 nServerID = 3;
  void clear_nserverid();
  static const int kNServerIDFieldNumber = 3;
  ::google::protobuf::int32 nserverid() const;
  void set_nserverid(::google::protobuf::int32 value);

  // int32 nPort = 5;
  void clear_nport();
  static const int kNPortFieldNumber = 5;
  ::google::protobuf::int32 nport() const;
  void set_nport(::google::protobuf::int32 value);

  // int32 nMapID = 6;
  void clear_nmapid();
  static const int kNMapIDFieldNumber = 6;
  ::google::protobuf::int32 nmapid() const;
  void set_nmapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:netData.ChangeMapRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sip_;
  ::google::protobuf::int32 ncode_;
  bool bchangeip_;
  ::google::protobuf::int32 nserverid_;
  ::google::protobuf::int32 nport_;
  ::google::protobuf::int32 nmapid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ClientMsg_2eproto::TableStruct;
  friend void ::protobuf_ClientMsg_2eproto::InitDefaultsChangeMapRetImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ping

// -------------------------------------------------------------------

// LoadPlayerDataFinish

// int32 nCode = 1;
inline void LoadPlayerDataFinish::clear_ncode() {
  ncode_ = 0;
}
inline ::google::protobuf::int32 LoadPlayerDataFinish::ncode() const {
  // @@protoc_insertion_point(field_get:netData.LoadPlayerDataFinish.nCode)
  return ncode_;
}
inline void LoadPlayerDataFinish::set_ncode(::google::protobuf::int32 value) {
  
  ncode_ = value;
  // @@protoc_insertion_point(field_set:netData.LoadPlayerDataFinish.nCode)
}

// uint32 nTempID = 2;
inline void LoadPlayerDataFinish::clear_ntempid() {
  ntempid_ = 0u;
}
inline ::google::protobuf::uint32 LoadPlayerDataFinish::ntempid() const {
  // @@protoc_insertion_point(field_get:netData.LoadPlayerDataFinish.nTempID)
  return ntempid_;
}
inline void LoadPlayerDataFinish::set_ntempid(::google::protobuf::uint32 value) {
  
  ntempid_ = value;
  // @@protoc_insertion_point(field_set:netData.LoadPlayerDataFinish.nTempID)
}

// -------------------------------------------------------------------

// LoadMapFinish

// -------------------------------------------------------------------

// PlayerMove

// float x = 1;
inline void PlayerMove::clear_x() {
  x_ = 0;
}
inline float PlayerMove::x() const {
  // @@protoc_insertion_point(field_get:netData.PlayerMove.x)
  return x_;
}
inline void PlayerMove::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:netData.PlayerMove.x)
}

// float y = 2;
inline void PlayerMove::clear_y() {
  y_ = 0;
}
inline float PlayerMove::y() const {
  // @@protoc_insertion_point(field_get:netData.PlayerMove.y)
  return y_;
}
inline void PlayerMove::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:netData.PlayerMove.y)
}

// float z = 3;
inline void PlayerMove::clear_z() {
  z_ = 0;
}
inline float PlayerMove::z() const {
  // @@protoc_insertion_point(field_get:netData.PlayerMove.z)
  return z_;
}
inline void PlayerMove::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:netData.PlayerMove.z)
}

// -------------------------------------------------------------------

// PlayerMoveRet

// float x = 1;
inline void PlayerMoveRet::clear_x() {
  x_ = 0;
}
inline float PlayerMoveRet::x() const {
  // @@protoc_insertion_point(field_get:netData.PlayerMoveRet.x)
  return x_;
}
inline void PlayerMoveRet::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:netData.PlayerMoveRet.x)
}

// float y = 2;
inline void PlayerMoveRet::clear_y() {
  y_ = 0;
}
inline float PlayerMoveRet::y() const {
  // @@protoc_insertion_point(field_get:netData.PlayerMoveRet.y)
  return y_;
}
inline void PlayerMoveRet::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:netData.PlayerMoveRet.y)
}

// float z = 3;
inline void PlayerMoveRet::clear_z() {
  z_ = 0;
}
inline float PlayerMoveRet::z() const {
  // @@protoc_insertion_point(field_get:netData.PlayerMoveRet.z)
  return z_;
}
inline void PlayerMoveRet::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:netData.PlayerMoveRet.z)
}

// uint32 nTempID = 4;
inline void PlayerMoveRet::clear_ntempid() {
  ntempid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerMoveRet::ntempid() const {
  // @@protoc_insertion_point(field_get:netData.PlayerMoveRet.nTempID)
  return ntempid_;
}
inline void PlayerMoveRet::set_ntempid(::google::protobuf::uint32 value) {
  
  ntempid_ = value;
  // @@protoc_insertion_point(field_set:netData.PlayerMoveRet.nTempID)
}

// int32 nCode = 5;
inline void PlayerMoveRet::clear_ncode() {
  ncode_ = 0;
}
inline ::google::protobuf::int32 PlayerMoveRet::ncode() const {
  // @@protoc_insertion_point(field_get:netData.PlayerMoveRet.nCode)
  return ncode_;
}
inline void PlayerMoveRet::set_ncode(::google::protobuf::int32 value) {
  
  ncode_ = value;
  // @@protoc_insertion_point(field_set:netData.PlayerMoveRet.nCode)
}

// -------------------------------------------------------------------

// ChangeMap

// int32 nMapID = 1;
inline void ChangeMap::clear_nmapid() {
  nmapid_ = 0;
}
inline ::google::protobuf::int32 ChangeMap::nmapid() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMap.nMapID)
  return nmapid_;
}
inline void ChangeMap::set_nmapid(::google::protobuf::int32 value) {
  
  nmapid_ = value;
  // @@protoc_insertion_point(field_set:netData.ChangeMap.nMapID)
}

// string sEtoken = 2;
inline void ChangeMap::clear_setoken() {
  setoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeMap::setoken() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMap.sEtoken)
  return setoken_.GetNoArena();
}
inline void ChangeMap::set_setoken(const ::std::string& value) {
  
  setoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netData.ChangeMap.sEtoken)
}
#if LANG_CXX11
inline void ChangeMap::set_setoken(::std::string&& value) {
  
  setoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netData.ChangeMap.sEtoken)
}
#endif
inline void ChangeMap::set_setoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  setoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netData.ChangeMap.sEtoken)
}
inline void ChangeMap::set_setoken(const char* value, size_t size) {
  
  setoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netData.ChangeMap.sEtoken)
}
inline ::std::string* ChangeMap::mutable_setoken() {
  
  // @@protoc_insertion_point(field_mutable:netData.ChangeMap.sEtoken)
  return setoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeMap::release_setoken() {
  // @@protoc_insertion_point(field_release:netData.ChangeMap.sEtoken)
  
  return setoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeMap::set_allocated_setoken(::std::string* setoken) {
  if (setoken != NULL) {
    
  } else {
    
  }
  setoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), setoken);
  // @@protoc_insertion_point(field_set_allocated:netData.ChangeMap.sEtoken)
}

// bytes sSecret = 3;
inline void ChangeMap::clear_ssecret() {
  ssecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeMap::ssecret() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMap.sSecret)
  return ssecret_.GetNoArena();
}
inline void ChangeMap::set_ssecret(const ::std::string& value) {
  
  ssecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netData.ChangeMap.sSecret)
}
#if LANG_CXX11
inline void ChangeMap::set_ssecret(::std::string&& value) {
  
  ssecret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netData.ChangeMap.sSecret)
}
#endif
inline void ChangeMap::set_ssecret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ssecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netData.ChangeMap.sSecret)
}
inline void ChangeMap::set_ssecret(const void* value, size_t size) {
  
  ssecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netData.ChangeMap.sSecret)
}
inline ::std::string* ChangeMap::mutable_ssecret() {
  
  // @@protoc_insertion_point(field_mutable:netData.ChangeMap.sSecret)
  return ssecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeMap::release_ssecret() {
  // @@protoc_insertion_point(field_release:netData.ChangeMap.sSecret)
  
  return ssecret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeMap::set_allocated_ssecret(::std::string* ssecret) {
  if (ssecret != NULL) {
    
  } else {
    
  }
  ssecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssecret);
  // @@protoc_insertion_point(field_set_allocated:netData.ChangeMap.sSecret)
}

// -------------------------------------------------------------------

// ChangeMapRet

// int32 nCode = 1;
inline void ChangeMapRet::clear_ncode() {
  ncode_ = 0;
}
inline ::google::protobuf::int32 ChangeMapRet::ncode() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMapRet.nCode)
  return ncode_;
}
inline void ChangeMapRet::set_ncode(::google::protobuf::int32 value) {
  
  ncode_ = value;
  // @@protoc_insertion_point(field_set:netData.ChangeMapRet.nCode)
}

// bool bChangeIP = 2;
inline void ChangeMapRet::clear_bchangeip() {
  bchangeip_ = false;
}
inline bool ChangeMapRet::bchangeip() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMapRet.bChangeIP)
  return bchangeip_;
}
inline void ChangeMapRet::set_bchangeip(bool value) {
  
  bchangeip_ = value;
  // @@protoc_insertion_point(field_set:netData.ChangeMapRet.bChangeIP)
}

// int32 nServerID = 3;
inline void ChangeMapRet::clear_nserverid() {
  nserverid_ = 0;
}
inline ::google::protobuf::int32 ChangeMapRet::nserverid() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMapRet.nServerID)
  return nserverid_;
}
inline void ChangeMapRet::set_nserverid(::google::protobuf::int32 value) {
  
  nserverid_ = value;
  // @@protoc_insertion_point(field_set:netData.ChangeMapRet.nServerID)
}

// string sIP = 4;
inline void ChangeMapRet::clear_sip() {
  sip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeMapRet::sip() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMapRet.sIP)
  return sip_.GetNoArena();
}
inline void ChangeMapRet::set_sip(const ::std::string& value) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netData.ChangeMapRet.sIP)
}
#if LANG_CXX11
inline void ChangeMapRet::set_sip(::std::string&& value) {
  
  sip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netData.ChangeMapRet.sIP)
}
#endif
inline void ChangeMapRet::set_sip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netData.ChangeMapRet.sIP)
}
inline void ChangeMapRet::set_sip(const char* value, size_t size) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netData.ChangeMapRet.sIP)
}
inline ::std::string* ChangeMapRet::mutable_sip() {
  
  // @@protoc_insertion_point(field_mutable:netData.ChangeMapRet.sIP)
  return sip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeMapRet::release_sip() {
  // @@protoc_insertion_point(field_release:netData.ChangeMapRet.sIP)
  
  return sip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeMapRet::set_allocated_sip(::std::string* sip) {
  if (sip != NULL) {
    
  } else {
    
  }
  sip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sip);
  // @@protoc_insertion_point(field_set_allocated:netData.ChangeMapRet.sIP)
}

// int32 nPort = 5;
inline void ChangeMapRet::clear_nport() {
  nport_ = 0;
}
inline ::google::protobuf::int32 ChangeMapRet::nport() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMapRet.nPort)
  return nport_;
}
inline void ChangeMapRet::set_nport(::google::protobuf::int32 value) {
  
  nport_ = value;
  // @@protoc_insertion_point(field_set:netData.ChangeMapRet.nPort)
}

// int32 nMapID = 6;
inline void ChangeMapRet::clear_nmapid() {
  nmapid_ = 0;
}
inline ::google::protobuf::int32 ChangeMapRet::nmapid() const {
  // @@protoc_insertion_point(field_get:netData.ChangeMapRet.nMapID)
  return nmapid_;
}
inline void ChangeMapRet::set_nmapid(::google::protobuf::int32 value) {
  
  nmapid_ = value;
  // @@protoc_insertion_point(field_set:netData.ChangeMapRet.nMapID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace netData

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::netData::LoadPlayerDataFinish_EC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::netData::LoadPlayerDataFinish_EC>() {
  return ::netData::LoadPlayerDataFinish_EC_descriptor();
}
template <> struct is_proto_enum< ::netData::ChangeMapRet_EC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::netData::ChangeMapRet_EC>() {
  return ::netData::ChangeMapRet_EC_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientMsg_2eproto_INCLUDED
