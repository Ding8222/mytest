// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace netData {
class HandShakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HandShake>
      _instance;
} _HandShake_default_instance_;
class HandShakeRetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HandShakeRet>
      _instance;
} _HandShakeRet_default_instance_;
class ChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Challenge>
      _instance;
} _Challenge_default_instance_;
class ChallengeRetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChallengeRet>
      _instance;
} _ChallengeRet_default_instance_;
class AuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Auth>
      _instance;
} _Auth_default_instance_;
class AuthRetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthRet>
      _instance;
} _AuthRet_default_instance_;
class LoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Login>
      _instance;
} _Login_default_instance_;
}  // namespace netData
namespace protobuf_Login_2eproto {
void InitDefaultsHandShakeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::netData::_HandShake_default_instance_;
    new (ptr) ::netData::HandShake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netData::HandShake::InitAsDefaultInstance();
}

void InitDefaultsHandShake() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHandShakeImpl);
}

void InitDefaultsHandShakeRetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::netData::_HandShakeRet_default_instance_;
    new (ptr) ::netData::HandShakeRet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netData::HandShakeRet::InitAsDefaultInstance();
}

void InitDefaultsHandShakeRet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHandShakeRetImpl);
}

void InitDefaultsChallengeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::netData::_Challenge_default_instance_;
    new (ptr) ::netData::Challenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netData::Challenge::InitAsDefaultInstance();
}

void InitDefaultsChallenge() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChallengeImpl);
}

void InitDefaultsChallengeRetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::netData::_ChallengeRet_default_instance_;
    new (ptr) ::netData::ChallengeRet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netData::ChallengeRet::InitAsDefaultInstance();
}

void InitDefaultsChallengeRet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChallengeRetImpl);
}

void InitDefaultsAuthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::netData::_Auth_default_instance_;
    new (ptr) ::netData::Auth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netData::Auth::InitAsDefaultInstance();
}

void InitDefaultsAuth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthImpl);
}

void InitDefaultsAuthRetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::netData::_AuthRet_default_instance_;
    new (ptr) ::netData::AuthRet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netData::AuthRet::InitAsDefaultInstance();
}

void InitDefaultsAuthRet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthRetImpl);
}

void InitDefaultsLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::netData::_Login_default_instance_;
    new (ptr) ::netData::Login();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netData::Login::InitAsDefaultInstance();
}

void InitDefaultsLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginImpl);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::HandShake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::HandShake, sclientkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::HandShakeRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::HandShakeRet, schallenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::HandShakeRet, sserverkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::Challenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::Challenge, shmac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::ChallengeRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::ChallengeRet, ncode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::Auth, setoken_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::AuthRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::AuthRet, ncode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netData::Login, shandshakekey_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::netData::HandShake)},
  { 6, -1, sizeof(::netData::HandShakeRet)},
  { 13, -1, sizeof(::netData::Challenge)},
  { 19, -1, sizeof(::netData::ChallengeRet)},
  { 25, -1, sizeof(::netData::Auth)},
  { 31, -1, sizeof(::netData::AuthRet)},
  { 37, -1, sizeof(::netData::Login)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::netData::_HandShake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netData::_HandShakeRet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netData::_Challenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netData::_ChallengeRet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netData::_Auth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netData::_AuthRet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netData::_Login_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Login.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013Login.proto\022\007netData\"\037\n\tHandShake\022\022\n\ns"
      "ClientKey\030\001 \001(\014\"6\n\014HandShakeRet\022\022\n\nsChal"
      "lenge\030\001 \001(\014\022\022\n\nsServerKey\030\002 \001(\014\"\032\n\tChall"
      "enge\022\r\n\005sHmac\030\001 \001(\t\"K\n\014ChallengeRet\022\r\n\005n"
      "Code\030\001 \001(\005\",\n\002EC\022\014\n\010EC_OTHER\020\000\022\013\n\007EC_SUC"
      "C\020\001\022\013\n\007EC_FAIL\020\002\"\027\n\004Auth\022\017\n\007sEtoken\030\001 \001("
      "\t\"F\n\007AuthRet\022\r\n\005nCode\030\001 \001(\005\",\n\002EC\022\014\n\010EC_"
      "OTHER\020\000\022\013\n\007EC_SUCC\020\001\022\013\n\007EC_FAIL\020\002\"\036\n\005Log"
      "in\022\025\n\rsHandShakeKey\030\001 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Login.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Login_2eproto
namespace netData {
const ::google::protobuf::EnumDescriptor* ChallengeRet_EC_descriptor() {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Login_2eproto::file_level_enum_descriptors[0];
}
bool ChallengeRet_EC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChallengeRet_EC ChallengeRet::EC_OTHER;
const ChallengeRet_EC ChallengeRet::EC_SUCC;
const ChallengeRet_EC ChallengeRet::EC_FAIL;
const ChallengeRet_EC ChallengeRet::EC_MIN;
const ChallengeRet_EC ChallengeRet::EC_MAX;
const int ChallengeRet::EC_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AuthRet_EC_descriptor() {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Login_2eproto::file_level_enum_descriptors[1];
}
bool AuthRet_EC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthRet_EC AuthRet::EC_OTHER;
const AuthRet_EC AuthRet::EC_SUCC;
const AuthRet_EC AuthRet::EC_FAIL;
const AuthRet_EC AuthRet::EC_MIN;
const AuthRet_EC AuthRet::EC_MAX;
const int AuthRet::EC_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void HandShake::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandShake::kSClientKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandShake::HandShake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Login_2eproto::InitDefaultsHandShake();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netData.HandShake)
}
HandShake::HandShake(const HandShake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sclientkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sclientkey().size() > 0) {
    sclientkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sclientkey_);
  }
  // @@protoc_insertion_point(copy_constructor:netData.HandShake)
}

void HandShake::SharedCtor() {
  sclientkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HandShake::~HandShake() {
  // @@protoc_insertion_point(destructor:netData.HandShake)
  SharedDtor();
}

void HandShake::SharedDtor() {
  sclientkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HandShake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandShake::descriptor() {
  ::protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HandShake& HandShake::default_instance() {
  ::protobuf_Login_2eproto::InitDefaultsHandShake();
  return *internal_default_instance();
}

HandShake* HandShake::New(::google::protobuf::Arena* arena) const {
  HandShake* n = new HandShake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandShake::Clear() {
// @@protoc_insertion_point(message_clear_start:netData.HandShake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sclientkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HandShake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netData.HandShake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sClientKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sclientkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netData.HandShake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netData.HandShake)
  return false;
#undef DO_
}

void HandShake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netData.HandShake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sClientKey = 1;
  if (this->sclientkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sclientkey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netData.HandShake)
}

::google::protobuf::uint8* HandShake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netData.HandShake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sClientKey = 1;
  if (this->sclientkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sclientkey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netData.HandShake)
  return target;
}

size_t HandShake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netData.HandShake)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes sClientKey = 1;
  if (this->sclientkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sclientkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandShake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netData.HandShake)
  GOOGLE_DCHECK_NE(&from, this);
  const HandShake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HandShake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netData.HandShake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netData.HandShake)
    MergeFrom(*source);
  }
}

void HandShake::MergeFrom(const HandShake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netData.HandShake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sclientkey().size() > 0) {

    sclientkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sclientkey_);
  }
}

void HandShake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netData.HandShake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandShake::CopyFrom(const HandShake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netData.HandShake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandShake::IsInitialized() const {
  return true;
}

void HandShake::Swap(HandShake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandShake::InternalSwap(HandShake* other) {
  using std::swap;
  sclientkey_.Swap(&other->sclientkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HandShake::GetMetadata() const {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HandShakeRet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandShakeRet::kSChallengeFieldNumber;
const int HandShakeRet::kSServerKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandShakeRet::HandShakeRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Login_2eproto::InitDefaultsHandShakeRet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netData.HandShakeRet)
}
HandShakeRet::HandShakeRet(const HandShakeRet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schallenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schallenge().size() > 0) {
    schallenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schallenge_);
  }
  sserverkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sserverkey().size() > 0) {
    sserverkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sserverkey_);
  }
  // @@protoc_insertion_point(copy_constructor:netData.HandShakeRet)
}

void HandShakeRet::SharedCtor() {
  schallenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sserverkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HandShakeRet::~HandShakeRet() {
  // @@protoc_insertion_point(destructor:netData.HandShakeRet)
  SharedDtor();
}

void HandShakeRet::SharedDtor() {
  schallenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sserverkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HandShakeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandShakeRet::descriptor() {
  ::protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HandShakeRet& HandShakeRet::default_instance() {
  ::protobuf_Login_2eproto::InitDefaultsHandShakeRet();
  return *internal_default_instance();
}

HandShakeRet* HandShakeRet::New(::google::protobuf::Arena* arena) const {
  HandShakeRet* n = new HandShakeRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandShakeRet::Clear() {
// @@protoc_insertion_point(message_clear_start:netData.HandShakeRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schallenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sserverkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HandShakeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netData.HandShakeRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sChallenge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schallenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sServerKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sserverkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netData.HandShakeRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netData.HandShakeRet)
  return false;
#undef DO_
}

void HandShakeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netData.HandShakeRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sChallenge = 1;
  if (this->schallenge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->schallenge(), output);
  }

  // bytes sServerKey = 2;
  if (this->sserverkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sserverkey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netData.HandShakeRet)
}

::google::protobuf::uint8* HandShakeRet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netData.HandShakeRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sChallenge = 1;
  if (this->schallenge().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->schallenge(), target);
  }

  // bytes sServerKey = 2;
  if (this->sserverkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sserverkey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netData.HandShakeRet)
  return target;
}

size_t HandShakeRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netData.HandShakeRet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes sChallenge = 1;
  if (this->schallenge().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->schallenge());
  }

  // bytes sServerKey = 2;
  if (this->sserverkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sserverkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandShakeRet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netData.HandShakeRet)
  GOOGLE_DCHECK_NE(&from, this);
  const HandShakeRet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HandShakeRet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netData.HandShakeRet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netData.HandShakeRet)
    MergeFrom(*source);
  }
}

void HandShakeRet::MergeFrom(const HandShakeRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netData.HandShakeRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schallenge().size() > 0) {

    schallenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schallenge_);
  }
  if (from.sserverkey().size() > 0) {

    sserverkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sserverkey_);
  }
}

void HandShakeRet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netData.HandShakeRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandShakeRet::CopyFrom(const HandShakeRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netData.HandShakeRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandShakeRet::IsInitialized() const {
  return true;
}

void HandShakeRet::Swap(HandShakeRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandShakeRet::InternalSwap(HandShakeRet* other) {
  using std::swap;
  schallenge_.Swap(&other->schallenge_);
  sserverkey_.Swap(&other->sserverkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HandShakeRet::GetMetadata() const {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Challenge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Challenge::kSHmacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Challenge::Challenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Login_2eproto::InitDefaultsChallenge();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netData.Challenge)
}
Challenge::Challenge(const Challenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shmac().size() > 0) {
    shmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shmac_);
  }
  // @@protoc_insertion_point(copy_constructor:netData.Challenge)
}

void Challenge::SharedCtor() {
  shmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Challenge::~Challenge() {
  // @@protoc_insertion_point(destructor:netData.Challenge)
  SharedDtor();
}

void Challenge::SharedDtor() {
  shmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Challenge::descriptor() {
  ::protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Challenge& Challenge::default_instance() {
  ::protobuf_Login_2eproto::InitDefaultsChallenge();
  return *internal_default_instance();
}

Challenge* Challenge::New(::google::protobuf::Arena* arena) const {
  Challenge* n = new Challenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Challenge::Clear() {
// @@protoc_insertion_point(message_clear_start:netData.Challenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netData.Challenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sHmac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shmac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shmac().data(), static_cast<int>(this->shmac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netData.Challenge.sHmac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netData.Challenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netData.Challenge)
  return false;
#undef DO_
}

void Challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netData.Challenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sHmac = 1;
  if (this->shmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shmac().data(), static_cast<int>(this->shmac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netData.Challenge.sHmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shmac(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netData.Challenge)
}

::google::protobuf::uint8* Challenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netData.Challenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sHmac = 1;
  if (this->shmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shmac().data(), static_cast<int>(this->shmac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netData.Challenge.sHmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shmac(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netData.Challenge)
  return target;
}

size_t Challenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netData.Challenge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sHmac = 1;
  if (this->shmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shmac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Challenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netData.Challenge)
  GOOGLE_DCHECK_NE(&from, this);
  const Challenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Challenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netData.Challenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netData.Challenge)
    MergeFrom(*source);
  }
}

void Challenge::MergeFrom(const Challenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netData.Challenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shmac().size() > 0) {

    shmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shmac_);
  }
}

void Challenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netData.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Challenge::CopyFrom(const Challenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netData.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Challenge::IsInitialized() const {
  return true;
}

void Challenge::Swap(Challenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Challenge::InternalSwap(Challenge* other) {
  using std::swap;
  shmac_.Swap(&other->shmac_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Challenge::GetMetadata() const {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChallengeRet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChallengeRet::kNCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChallengeRet::ChallengeRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Login_2eproto::InitDefaultsChallengeRet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netData.ChallengeRet)
}
ChallengeRet::ChallengeRet(const ChallengeRet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ncode_ = from.ncode_;
  // @@protoc_insertion_point(copy_constructor:netData.ChallengeRet)
}

void ChallengeRet::SharedCtor() {
  ncode_ = 0;
  _cached_size_ = 0;
}

ChallengeRet::~ChallengeRet() {
  // @@protoc_insertion_point(destructor:netData.ChallengeRet)
  SharedDtor();
}

void ChallengeRet::SharedDtor() {
}

void ChallengeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeRet::descriptor() {
  ::protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChallengeRet& ChallengeRet::default_instance() {
  ::protobuf_Login_2eproto::InitDefaultsChallengeRet();
  return *internal_default_instance();
}

ChallengeRet* ChallengeRet::New(::google::protobuf::Arena* arena) const {
  ChallengeRet* n = new ChallengeRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeRet::Clear() {
// @@protoc_insertion_point(message_clear_start:netData.ChallengeRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ncode_ = 0;
  _internal_metadata_.Clear();
}

bool ChallengeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netData.ChallengeRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netData.ChallengeRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netData.ChallengeRet)
  return false;
#undef DO_
}

void ChallengeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netData.ChallengeRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nCode = 1;
  if (this->ncode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netData.ChallengeRet)
}

::google::protobuf::uint8* ChallengeRet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netData.ChallengeRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nCode = 1;
  if (this->ncode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netData.ChallengeRet)
  return target;
}

size_t ChallengeRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netData.ChallengeRet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 nCode = 1;
  if (this->ncode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeRet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netData.ChallengeRet)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeRet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChallengeRet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netData.ChallengeRet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netData.ChallengeRet)
    MergeFrom(*source);
  }
}

void ChallengeRet::MergeFrom(const ChallengeRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netData.ChallengeRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ncode() != 0) {
    set_ncode(from.ncode());
  }
}

void ChallengeRet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netData.ChallengeRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeRet::CopyFrom(const ChallengeRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netData.ChallengeRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeRet::IsInitialized() const {
  return true;
}

void ChallengeRet::Swap(ChallengeRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeRet::InternalSwap(ChallengeRet* other) {
  using std::swap;
  swap(ncode_, other->ncode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeRet::GetMetadata() const {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Auth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Auth::kSEtokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Auth::Auth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Login_2eproto::InitDefaultsAuth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netData.Auth)
}
Auth::Auth(const Auth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  setoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.setoken().size() > 0) {
    setoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setoken_);
  }
  // @@protoc_insertion_point(copy_constructor:netData.Auth)
}

void Auth::SharedCtor() {
  setoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Auth::~Auth() {
  // @@protoc_insertion_point(destructor:netData.Auth)
  SharedDtor();
}

void Auth::SharedDtor() {
  setoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auth::descriptor() {
  ::protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Auth& Auth::default_instance() {
  ::protobuf_Login_2eproto::InitDefaultsAuth();
  return *internal_default_instance();
}

Auth* Auth::New(::google::protobuf::Arena* arena) const {
  Auth* n = new Auth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:netData.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netData.Auth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sEtoken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_setoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->setoken().data(), static_cast<int>(this->setoken().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netData.Auth.sEtoken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netData.Auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netData.Auth)
  return false;
#undef DO_
}

void Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netData.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sEtoken = 1;
  if (this->setoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setoken().data(), static_cast<int>(this->setoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netData.Auth.sEtoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->setoken(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netData.Auth)
}

::google::protobuf::uint8* Auth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netData.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sEtoken = 1;
  if (this->setoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setoken().data(), static_cast<int>(this->setoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netData.Auth.sEtoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->setoken(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netData.Auth)
  return target;
}

size_t Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netData.Auth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sEtoken = 1;
  if (this->setoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->setoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netData.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const Auth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Auth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netData.Auth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netData.Auth)
    MergeFrom(*source);
  }
}

void Auth::MergeFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netData.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.setoken().size() > 0) {

    setoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setoken_);
  }
}

void Auth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netData.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auth::CopyFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netData.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth::IsInitialized() const {
  return true;
}

void Auth::Swap(Auth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Auth::InternalSwap(Auth* other) {
  using std::swap;
  setoken_.Swap(&other->setoken_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Auth::GetMetadata() const {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthRet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRet::kNCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRet::AuthRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Login_2eproto::InitDefaultsAuthRet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netData.AuthRet)
}
AuthRet::AuthRet(const AuthRet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ncode_ = from.ncode_;
  // @@protoc_insertion_point(copy_constructor:netData.AuthRet)
}

void AuthRet::SharedCtor() {
  ncode_ = 0;
  _cached_size_ = 0;
}

AuthRet::~AuthRet() {
  // @@protoc_insertion_point(destructor:netData.AuthRet)
  SharedDtor();
}

void AuthRet::SharedDtor() {
}

void AuthRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRet::descriptor() {
  ::protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthRet& AuthRet::default_instance() {
  ::protobuf_Login_2eproto::InitDefaultsAuthRet();
  return *internal_default_instance();
}

AuthRet* AuthRet::New(::google::protobuf::Arena* arena) const {
  AuthRet* n = new AuthRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRet::Clear() {
// @@protoc_insertion_point(message_clear_start:netData.AuthRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ncode_ = 0;
  _internal_metadata_.Clear();
}

bool AuthRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netData.AuthRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netData.AuthRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netData.AuthRet)
  return false;
#undef DO_
}

void AuthRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netData.AuthRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nCode = 1;
  if (this->ncode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netData.AuthRet)
}

::google::protobuf::uint8* AuthRet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netData.AuthRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nCode = 1;
  if (this->ncode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netData.AuthRet)
  return target;
}

size_t AuthRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netData.AuthRet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 nCode = 1;
  if (this->ncode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netData.AuthRet)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netData.AuthRet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netData.AuthRet)
    MergeFrom(*source);
  }
}

void AuthRet::MergeFrom(const AuthRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netData.AuthRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ncode() != 0) {
    set_ncode(from.ncode());
  }
}

void AuthRet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netData.AuthRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRet::CopyFrom(const AuthRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netData.AuthRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRet::IsInitialized() const {
  return true;
}

void AuthRet::Swap(AuthRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRet::InternalSwap(AuthRet* other) {
  using std::swap;
  swap(ncode_, other->ncode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRet::GetMetadata() const {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Login::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kSHandShakeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Login_2eproto::InitDefaultsLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netData.Login)
}
Login::Login(const Login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shandshakekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shandshakekey().size() > 0) {
    shandshakekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shandshakekey_);
  }
  // @@protoc_insertion_point(copy_constructor:netData.Login)
}

void Login::SharedCtor() {
  shandshakekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:netData.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  shandshakekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  ::protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Login& Login::default_instance() {
  ::protobuf_Login_2eproto::InitDefaultsLogin();
  return *internal_default_instance();
}

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:netData.Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shandshakekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netData.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sHandShakeKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shandshakekey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shandshakekey().data(), static_cast<int>(this->shandshakekey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netData.Login.sHandShakeKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netData.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netData.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netData.Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sHandShakeKey = 1;
  if (this->shandshakekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shandshakekey().data(), static_cast<int>(this->shandshakekey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netData.Login.sHandShakeKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shandshakekey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netData.Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netData.Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sHandShakeKey = 1;
  if (this->shandshakekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shandshakekey().data(), static_cast<int>(this->shandshakekey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netData.Login.sHandShakeKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shandshakekey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netData.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netData.Login)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sHandShakeKey = 1;
  if (this->shandshakekey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shandshakekey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netData.Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netData.Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netData.Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netData.Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shandshakekey().size() > 0) {

    shandshakekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shandshakekey_);
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netData.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netData.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  using std::swap;
  shandshakekey_.Swap(&other->shandshakekey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_Login_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Login_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace netData

// @@protoc_insertion_point(global_scope)
