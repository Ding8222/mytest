// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMsg.proto

#ifndef PROTOBUF_ServerMsg_2eproto_INCLUDED
#define PROTOBUF_ServerMsg_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ServerMsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPingImpl();
void InitDefaultsPing();
void InitDefaultsServerRegisterImpl();
void InitDefaultsServerRegister();
void InitDefaultsServerRegisterRetImpl();
void InitDefaultsServerRegisterRet();
void InitDefaultsServerLoadInfoImpl();
void InitDefaultsServerLoadInfo();
void InitDefaultsUpdateServerLoadImpl();
void InitDefaultsUpdateServerLoad();
void InitDefaultsAddNewClientImpl();
void InitDefaultsAddNewClient();
void InitDefaultsAddNewClientRetImpl();
void InitDefaultsAddNewClientRet();
void InitDefaultsDelClientImpl();
void InitDefaultsDelClient();
void InitDefaultsClientAccountImpl();
void InitDefaultsClientAccount();
void InitDefaultsLoadPlayerDataImpl();
void InitDefaultsLoadPlayerData();
void InitDefaultsChangeLineImpl();
void InitDefaultsChangeLine();
void InitDefaultsChangeLineRetImpl();
void InitDefaultsChangeLineRet();
void InitDefaultsKickClientImpl();
void InitDefaultsKickClient();
inline void InitDefaults() {
  InitDefaultsPing();
  InitDefaultsServerRegister();
  InitDefaultsServerRegisterRet();
  InitDefaultsServerLoadInfo();
  InitDefaultsUpdateServerLoad();
  InitDefaultsAddNewClient();
  InitDefaultsAddNewClientRet();
  InitDefaultsDelClient();
  InitDefaultsClientAccount();
  InitDefaultsLoadPlayerData();
  InitDefaultsChangeLine();
  InitDefaultsChangeLineRet();
  InitDefaultsKickClient();
}
}  // namespace protobuf_ServerMsg_2eproto
namespace svrData {
class AddNewClient;
class AddNewClientDefaultTypeInternal;
extern AddNewClientDefaultTypeInternal _AddNewClient_default_instance_;
class AddNewClientRet;
class AddNewClientRetDefaultTypeInternal;
extern AddNewClientRetDefaultTypeInternal _AddNewClientRet_default_instance_;
class ChangeLine;
class ChangeLineDefaultTypeInternal;
extern ChangeLineDefaultTypeInternal _ChangeLine_default_instance_;
class ChangeLineRet;
class ChangeLineRetDefaultTypeInternal;
extern ChangeLineRetDefaultTypeInternal _ChangeLineRet_default_instance_;
class ClientAccount;
class ClientAccountDefaultTypeInternal;
extern ClientAccountDefaultTypeInternal _ClientAccount_default_instance_;
class DelClient;
class DelClientDefaultTypeInternal;
extern DelClientDefaultTypeInternal _DelClient_default_instance_;
class KickClient;
class KickClientDefaultTypeInternal;
extern KickClientDefaultTypeInternal _KickClient_default_instance_;
class LoadPlayerData;
class LoadPlayerDataDefaultTypeInternal;
extern LoadPlayerDataDefaultTypeInternal _LoadPlayerData_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class ServerLoadInfo;
class ServerLoadInfoDefaultTypeInternal;
extern ServerLoadInfoDefaultTypeInternal _ServerLoadInfo_default_instance_;
class ServerRegister;
class ServerRegisterDefaultTypeInternal;
extern ServerRegisterDefaultTypeInternal _ServerRegister_default_instance_;
class ServerRegisterRet;
class ServerRegisterRetDefaultTypeInternal;
extern ServerRegisterRetDefaultTypeInternal _ServerRegisterRet_default_instance_;
class UpdateServerLoad;
class UpdateServerLoadDefaultTypeInternal;
extern UpdateServerLoadDefaultTypeInternal _UpdateServerLoad_default_instance_;
}  // namespace svrData
namespace google {
namespace protobuf {
template<> ::svrData::AddNewClient* Arena::Create< ::svrData::AddNewClient>(Arena*);
template<> ::svrData::AddNewClientRet* Arena::Create< ::svrData::AddNewClientRet>(Arena*);
template<> ::svrData::ChangeLine* Arena::Create< ::svrData::ChangeLine>(Arena*);
template<> ::svrData::ChangeLineRet* Arena::Create< ::svrData::ChangeLineRet>(Arena*);
template<> ::svrData::ClientAccount* Arena::Create< ::svrData::ClientAccount>(Arena*);
template<> ::svrData::DelClient* Arena::Create< ::svrData::DelClient>(Arena*);
template<> ::svrData::KickClient* Arena::Create< ::svrData::KickClient>(Arena*);
template<> ::svrData::LoadPlayerData* Arena::Create< ::svrData::LoadPlayerData>(Arena*);
template<> ::svrData::Ping* Arena::Create< ::svrData::Ping>(Arena*);
template<> ::svrData::ServerLoadInfo* Arena::Create< ::svrData::ServerLoadInfo>(Arena*);
template<> ::svrData::ServerRegister* Arena::Create< ::svrData::ServerRegister>(Arena*);
template<> ::svrData::ServerRegisterRet* Arena::Create< ::svrData::ServerRegisterRet>(Arena*);
template<> ::svrData::UpdateServerLoad* Arena::Create< ::svrData::UpdateServerLoad>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace svrData {

enum ServerRegisterRet_EC {
  ServerRegisterRet_EC_EC_OTHER = 0,
  ServerRegisterRet_EC_EC_SUCC = 1,
  ServerRegisterRet_EC_EC_SERVER_ID_EXIST = 2,
  ServerRegisterRet_EC_EC_TO_CONNECT_ID_NOT_EQUAL = 3,
  ServerRegisterRet_EC_ServerRegisterRet_EC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerRegisterRet_EC_ServerRegisterRet_EC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerRegisterRet_EC_IsValid(int value);
const ServerRegisterRet_EC ServerRegisterRet_EC_EC_MIN = ServerRegisterRet_EC_EC_OTHER;
const ServerRegisterRet_EC ServerRegisterRet_EC_EC_MAX = ServerRegisterRet_EC_EC_TO_CONNECT_ID_NOT_EQUAL;
const int ServerRegisterRet_EC_EC_ARRAYSIZE = ServerRegisterRet_EC_EC_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerRegisterRet_EC_descriptor();
inline const ::std::string& ServerRegisterRet_EC_Name(ServerRegisterRet_EC value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerRegisterRet_EC_descriptor(), value);
}
inline bool ServerRegisterRet_EC_Parse(
    const ::std::string& name, ServerRegisterRet_EC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerRegisterRet_EC>(
    ServerRegisterRet_EC_descriptor(), name, value);
}
enum AddNewClientRet_EC {
  AddNewClientRet_EC_EC_OTHER = 0,
  AddNewClientRet_EC_EC_SUCC = 1,
  AddNewClientRet_EC_EC_FAIL = 2,
  AddNewClientRet_EC_AddNewClientRet_EC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddNewClientRet_EC_AddNewClientRet_EC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddNewClientRet_EC_IsValid(int value);
const AddNewClientRet_EC AddNewClientRet_EC_EC_MIN = AddNewClientRet_EC_EC_OTHER;
const AddNewClientRet_EC AddNewClientRet_EC_EC_MAX = AddNewClientRet_EC_EC_FAIL;
const int AddNewClientRet_EC_EC_ARRAYSIZE = AddNewClientRet_EC_EC_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddNewClientRet_EC_descriptor();
inline const ::std::string& AddNewClientRet_EC_Name(AddNewClientRet_EC value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddNewClientRet_EC_descriptor(), value);
}
inline bool AddNewClientRet_EC_Parse(
    const ::std::string& name, AddNewClientRet_EC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddNewClientRet_EC>(
    AddNewClientRet_EC_descriptor(), name, value);
}
enum ChangeLineRet_EC {
  ChangeLineRet_EC_EC_OTHER = 0,
  ChangeLineRet_EC_EC_SUCC = 1,
  ChangeLineRet_EC_EC_FAIL = 2,
  ChangeLineRet_EC_EC_SERVER = 3,
  ChangeLineRet_EC_ChangeLineRet_EC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChangeLineRet_EC_ChangeLineRet_EC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChangeLineRet_EC_IsValid(int value);
const ChangeLineRet_EC ChangeLineRet_EC_EC_MIN = ChangeLineRet_EC_EC_OTHER;
const ChangeLineRet_EC ChangeLineRet_EC_EC_MAX = ChangeLineRet_EC_EC_SERVER;
const int ChangeLineRet_EC_EC_ARRAYSIZE = ChangeLineRet_EC_EC_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeLineRet_EC_descriptor();
inline const ::std::string& ChangeLineRet_EC_Name(ChangeLineRet_EC value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeLineRet_EC_descriptor(), value);
}
inline bool ChangeLineRet_EC_Parse(
    const ::std::string& name, ChangeLineRet_EC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeLineRet_EC>(
    ChangeLineRet_EC_descriptor(), name, value);
}
// ===================================================================

class Ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Ping* other);
  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Ping>(NULL);
  }

  Ping* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Ping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svrData.Ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsPingImpl();
};
// -------------------------------------------------------------------

class ServerRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.ServerRegister) */ {
 public:
  ServerRegister();
  virtual ~ServerRegister();

  ServerRegister(const ServerRegister& from);

  inline ServerRegister& operator=(const ServerRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRegister(ServerRegister&& from) noexcept
    : ServerRegister() {
    *this = ::std::move(from);
  }

  inline ServerRegister& operator=(ServerRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRegister* internal_default_instance() {
    return reinterpret_cast<const ServerRegister*>(
               &_ServerRegister_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServerRegister* other);
  friend void swap(ServerRegister& a, ServerRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRegister* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ServerRegister>(NULL);
  }

  ServerRegister* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ServerRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerRegister& from);
  void MergeFrom(const ServerRegister& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 nServerID = 1;
  void clear_nserverid();
  static const int kNServerIDFieldNumber = 1;
  ::google::protobuf::int32 nserverid() const;
  void set_nserverid(::google::protobuf::int32 value);

  // int32 nServerType = 2;
  void clear_nservertype();
  static const int kNServerTypeFieldNumber = 2;
  ::google::protobuf::int32 nservertype() const;
  void set_nservertype(::google::protobuf::int32 value);

  // int32 nConnectID = 3;
  void clear_nconnectid();
  static const int kNConnectIDFieldNumber = 3;
  ::google::protobuf::int32 nconnectid() const;
  void set_nconnectid(::google::protobuf::int32 value);

  // int32 nPort = 4;
  void clear_nport();
  static const int kNPortFieldNumber = 4;
  ::google::protobuf::int32 nport() const;
  void set_nport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.ServerRegister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 nserverid_;
  ::google::protobuf::int32 nservertype_;
  ::google::protobuf::int32 nconnectid_;
  ::google::protobuf::int32 nport_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsServerRegisterImpl();
};
// -------------------------------------------------------------------

class ServerRegisterRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.ServerRegisterRet) */ {
 public:
  ServerRegisterRet();
  virtual ~ServerRegisterRet();

  ServerRegisterRet(const ServerRegisterRet& from);

  inline ServerRegisterRet& operator=(const ServerRegisterRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRegisterRet(ServerRegisterRet&& from) noexcept
    : ServerRegisterRet() {
    *this = ::std::move(from);
  }

  inline ServerRegisterRet& operator=(ServerRegisterRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRegisterRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRegisterRet* internal_default_instance() {
    return reinterpret_cast<const ServerRegisterRet*>(
               &_ServerRegisterRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ServerRegisterRet* other);
  friend void swap(ServerRegisterRet& a, ServerRegisterRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRegisterRet* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ServerRegisterRet>(NULL);
  }

  ServerRegisterRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ServerRegisterRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerRegisterRet& from);
  void MergeFrom(const ServerRegisterRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerRegisterRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServerRegisterRet_EC EC;
  static const EC EC_OTHER =
    ServerRegisterRet_EC_EC_OTHER;
  static const EC EC_SUCC =
    ServerRegisterRet_EC_EC_SUCC;
  static const EC EC_SERVER_ID_EXIST =
    ServerRegisterRet_EC_EC_SERVER_ID_EXIST;
  static const EC EC_TO_CONNECT_ID_NOT_EQUAL =
    ServerRegisterRet_EC_EC_TO_CONNECT_ID_NOT_EQUAL;
  static inline bool EC_IsValid(int value) {
    return ServerRegisterRet_EC_IsValid(value);
  }
  static const EC EC_MIN =
    ServerRegisterRet_EC_EC_MIN;
  static const EC EC_MAX =
    ServerRegisterRet_EC_EC_MAX;
  static const int EC_ARRAYSIZE =
    ServerRegisterRet_EC_EC_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EC_descriptor() {
    return ServerRegisterRet_EC_descriptor();
  }
  static inline const ::std::string& EC_Name(EC value) {
    return ServerRegisterRet_EC_Name(value);
  }
  static inline bool EC_Parse(const ::std::string& name,
      EC* value) {
    return ServerRegisterRet_EC_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string sIP = 2;
  void clear_sip();
  static const int kSIPFieldNumber = 2;
  const ::std::string& sip() const;
  void set_sip(const ::std::string& value);
  #if LANG_CXX11
  void set_sip(::std::string&& value);
  #endif
  void set_sip(const char* value);
  void set_sip(const char* value, size_t size);
  ::std::string* mutable_sip();
  ::std::string* release_sip();
  void set_allocated_sip(::std::string* sip);

  // int32 nRetCode = 1;
  void clear_nretcode();
  static const int kNRetCodeFieldNumber = 1;
  ::google::protobuf::int32 nretcode() const;
  void set_nretcode(::google::protobuf::int32 value);

  // int32 nPort = 3;
  void clear_nport();
  static const int kNPortFieldNumber = 3;
  ::google::protobuf::int32 nport() const;
  void set_nport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.ServerRegisterRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sip_;
  ::google::protobuf::int32 nretcode_;
  ::google::protobuf::int32 nport_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsServerRegisterRetImpl();
};
// -------------------------------------------------------------------

class ServerLoadInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.ServerLoadInfo) */ {
 public:
  ServerLoadInfo();
  virtual ~ServerLoadInfo();

  ServerLoadInfo(const ServerLoadInfo& from);

  inline ServerLoadInfo& operator=(const ServerLoadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerLoadInfo(ServerLoadInfo&& from) noexcept
    : ServerLoadInfo() {
    *this = ::std::move(from);
  }

  inline ServerLoadInfo& operator=(ServerLoadInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerLoadInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerLoadInfo* internal_default_instance() {
    return reinterpret_cast<const ServerLoadInfo*>(
               &_ServerLoadInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ServerLoadInfo* other);
  friend void swap(ServerLoadInfo& a, ServerLoadInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerLoadInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ServerLoadInfo>(NULL);
  }

  ServerLoadInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ServerLoadInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerLoadInfo& from);
  void MergeFrom(const ServerLoadInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerLoadInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 mapid = 6;
  int mapid_size() const;
  void clear_mapid();
  static const int kMapidFieldNumber = 6;
  ::google::protobuf::int32 mapid(int index) const;
  void set_mapid(int index, ::google::protobuf::int32 value);
  void add_mapid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mapid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mapid();

  // string sIP = 5;
  void clear_sip();
  static const int kSIPFieldNumber = 5;
  const ::std::string& sip() const;
  void set_sip(const ::std::string& value);
  #if LANG_CXX11
  void set_sip(::std::string&& value);
  #endif
  void set_sip(const char* value);
  void set_sip(const char* value, size_t size);
  ::std::string* mutable_sip();
  ::std::string* release_sip();
  void set_allocated_sip(::std::string* sip);

  // int32 nLineID = 1;
  void clear_nlineid();
  static const int kNLineIDFieldNumber = 1;
  ::google::protobuf::int32 nlineid() const;
  void set_nlineid(::google::protobuf::int32 value);

  // int32 nMaxClient = 2;
  void clear_nmaxclient();
  static const int kNMaxClientFieldNumber = 2;
  ::google::protobuf::int32 nmaxclient() const;
  void set_nmaxclient(::google::protobuf::int32 value);

  // int32 nNowClient = 3;
  void clear_nnowclient();
  static const int kNNowClientFieldNumber = 3;
  ::google::protobuf::int32 nnowclient() const;
  void set_nnowclient(::google::protobuf::int32 value);

  // int32 nPort = 4;
  void clear_nport();
  static const int kNPortFieldNumber = 4;
  ::google::protobuf::int32 nport() const;
  void set_nport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.ServerLoadInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mapid_;
  mutable int _mapid_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr sip_;
  ::google::protobuf::int32 nlineid_;
  ::google::protobuf::int32 nmaxclient_;
  ::google::protobuf::int32 nnowclient_;
  ::google::protobuf::int32 nport_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsServerLoadInfoImpl();
};
// -------------------------------------------------------------------

class UpdateServerLoad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.UpdateServerLoad) */ {
 public:
  UpdateServerLoad();
  virtual ~UpdateServerLoad();

  UpdateServerLoad(const UpdateServerLoad& from);

  inline UpdateServerLoad& operator=(const UpdateServerLoad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateServerLoad(UpdateServerLoad&& from) noexcept
    : UpdateServerLoad() {
    *this = ::std::move(from);
  }

  inline UpdateServerLoad& operator=(UpdateServerLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateServerLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateServerLoad* internal_default_instance() {
    return reinterpret_cast<const UpdateServerLoad*>(
               &_UpdateServerLoad_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UpdateServerLoad* other);
  friend void swap(UpdateServerLoad& a, UpdateServerLoad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateServerLoad* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateServerLoad>(NULL);
  }

  UpdateServerLoad* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateServerLoad>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateServerLoad& from);
  void MergeFrom(const UpdateServerLoad& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateServerLoad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 nClientCountNow = 1;
  void clear_nclientcountnow();
  static const int kNClientCountNowFieldNumber = 1;
  ::google::protobuf::int32 nclientcountnow() const;
  void set_nclientcountnow(::google::protobuf::int32 value);

  // int32 nClientCountMax = 2;
  void clear_nclientcountmax();
  static const int kNClientCountMaxFieldNumber = 2;
  ::google::protobuf::int32 nclientcountmax() const;
  void set_nclientcountmax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.UpdateServerLoad)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 nclientcountnow_;
  ::google::protobuf::int32 nclientcountmax_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsUpdateServerLoadImpl();
};
// -------------------------------------------------------------------

class AddNewClient : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.AddNewClient) */ {
 public:
  AddNewClient();
  virtual ~AddNewClient();

  AddNewClient(const AddNewClient& from);

  inline AddNewClient& operator=(const AddNewClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNewClient(AddNewClient&& from) noexcept
    : AddNewClient() {
    *this = ::std::move(from);
  }

  inline AddNewClient& operator=(AddNewClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNewClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNewClient* internal_default_instance() {
    return reinterpret_cast<const AddNewClient*>(
               &_AddNewClient_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AddNewClient* other);
  friend void swap(AddNewClient& a, AddNewClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNewClient* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AddNewClient>(NULL);
  }

  AddNewClient* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AddNewClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddNewClient& from);
  void MergeFrom(const AddNewClient& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddNewClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // int32 nGameID = 1;
  void clear_ngameid();
  static const int kNGameIDFieldNumber = 1;
  ::google::protobuf::int32 ngameid() const;
  void set_ngameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.AddNewClient)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::int32 ngameid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsAddNewClientImpl();
};
// -------------------------------------------------------------------

class AddNewClientRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.AddNewClientRet) */ {
 public:
  AddNewClientRet();
  virtual ~AddNewClientRet();

  AddNewClientRet(const AddNewClientRet& from);

  inline AddNewClientRet& operator=(const AddNewClientRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNewClientRet(AddNewClientRet&& from) noexcept
    : AddNewClientRet() {
    *this = ::std::move(from);
  }

  inline AddNewClientRet& operator=(AddNewClientRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNewClientRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNewClientRet* internal_default_instance() {
    return reinterpret_cast<const AddNewClientRet*>(
               &_AddNewClientRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AddNewClientRet* other);
  friend void swap(AddNewClientRet& a, AddNewClientRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNewClientRet* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AddNewClientRet>(NULL);
  }

  AddNewClientRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AddNewClientRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddNewClientRet& from);
  void MergeFrom(const AddNewClientRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddNewClientRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AddNewClientRet_EC EC;
  static const EC EC_OTHER =
    AddNewClientRet_EC_EC_OTHER;
  static const EC EC_SUCC =
    AddNewClientRet_EC_EC_SUCC;
  static const EC EC_FAIL =
    AddNewClientRet_EC_EC_FAIL;
  static inline bool EC_IsValid(int value) {
    return AddNewClientRet_EC_IsValid(value);
  }
  static const EC EC_MIN =
    AddNewClientRet_EC_EC_MIN;
  static const EC EC_MAX =
    AddNewClientRet_EC_EC_MAX;
  static const int EC_ARRAYSIZE =
    AddNewClientRet_EC_EC_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EC_descriptor() {
    return AddNewClientRet_EC_descriptor();
  }
  static inline const ::std::string& EC_Name(EC value) {
    return AddNewClientRet_EC_Name(value);
  }
  static inline bool EC_Parse(const ::std::string& name,
      EC* value) {
    return AddNewClientRet_EC_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 nCode = 1;
  void clear_ncode();
  static const int kNCodeFieldNumber = 1;
  ::google::protobuf::int32 ncode() const;
  void set_ncode(::google::protobuf::int32 value);

  // int32 nCenterClientID = 2;
  void clear_ncenterclientid();
  static const int kNCenterClientIDFieldNumber = 2;
  ::google::protobuf::int32 ncenterclientid() const;
  void set_ncenterclientid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.AddNewClientRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ncode_;
  ::google::protobuf::int32 ncenterclientid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsAddNewClientRetImpl();
};
// -------------------------------------------------------------------

class DelClient : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.DelClient) */ {
 public:
  DelClient();
  virtual ~DelClient();

  DelClient(const DelClient& from);

  inline DelClient& operator=(const DelClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelClient(DelClient&& from) noexcept
    : DelClient() {
    *this = ::std::move(from);
  }

  inline DelClient& operator=(DelClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelClient* internal_default_instance() {
    return reinterpret_cast<const DelClient*>(
               &_DelClient_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DelClient* other);
  friend void swap(DelClient& a, DelClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelClient* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<DelClient>(NULL);
  }

  DelClient* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<DelClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelClient& from);
  void MergeFrom(const DelClient& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:svrData.DelClient)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsDelClientImpl();
};
// -------------------------------------------------------------------

class ClientAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.ClientAccount) */ {
 public:
  ClientAccount();
  virtual ~ClientAccount();

  ClientAccount(const ClientAccount& from);

  inline ClientAccount& operator=(const ClientAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientAccount(ClientAccount&& from) noexcept
    : ClientAccount() {
    *this = ::std::move(from);
  }

  inline ClientAccount& operator=(ClientAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientAccount* internal_default_instance() {
    return reinterpret_cast<const ClientAccount*>(
               &_ClientAccount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ClientAccount* other);
  friend void swap(ClientAccount& a, ClientAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientAccount* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ClientAccount>(NULL);
  }

  ClientAccount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ClientAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientAccount& from);
  void MergeFrom(const ClientAccount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // bytes Secret = 3;
  void clear_secret();
  static const int kSecretFieldNumber = 3;
  const ::std::string& secret() const;
  void set_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_secret(::std::string&& value);
  #endif
  void set_secret(const char* value);
  void set_secret(const void* value, size_t size);
  ::std::string* mutable_secret();
  ::std::string* release_secret();
  void set_allocated_secret(::std::string* secret);

  // .svrData.LoadPlayerData Data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::svrData::LoadPlayerData& data() const;
  ::svrData::LoadPlayerData* release_data();
  ::svrData::LoadPlayerData* mutable_data();
  void set_allocated_data(::svrData::LoadPlayerData* data);

  // int32 nGameID = 1;
  void clear_ngameid();
  static const int kNGameIDFieldNumber = 1;
  ::google::protobuf::int32 ngameid() const;
  void set_ngameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.ClientAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr secret_;
  ::svrData::LoadPlayerData* data_;
  ::google::protobuf::int32 ngameid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsClientAccountImpl();
};
// -------------------------------------------------------------------

class LoadPlayerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.LoadPlayerData) */ {
 public:
  LoadPlayerData();
  virtual ~LoadPlayerData();

  LoadPlayerData(const LoadPlayerData& from);

  inline LoadPlayerData& operator=(const LoadPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadPlayerData(LoadPlayerData&& from) noexcept
    : LoadPlayerData() {
    *this = ::std::move(from);
  }

  inline LoadPlayerData& operator=(LoadPlayerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadPlayerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPlayerData* internal_default_instance() {
    return reinterpret_cast<const LoadPlayerData*>(
               &_LoadPlayerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(LoadPlayerData* other);
  friend void swap(LoadPlayerData& a, LoadPlayerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadPlayerData* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LoadPlayerData>(NULL);
  }

  LoadPlayerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LoadPlayerData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoadPlayerData& from);
  void MergeFrom(const LoadPlayerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadPlayerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 14;
  void clear_data();
  static const int kDataFieldNumber = 14;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 nCenterClientID = 1;
  void clear_ncenterclientid();
  static const int kNCenterClientIDFieldNumber = 1;
  ::google::protobuf::int32 ncenterclientid() const;
  void set_ncenterclientid(::google::protobuf::int32 value);

  // int32 sex = 5;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // int64 guid = 4;
  void clear_guid();
  static const int kGuidFieldNumber = 4;
  ::google::protobuf::int64 guid() const;
  void set_guid(::google::protobuf::int64 value);

  // int32 job = 6;
  void clear_job();
  static const int kJobFieldNumber = 6;
  ::google::protobuf::int32 job() const;
  void set_job(::google::protobuf::int32 value);

  // int32 level = 7;
  void clear_level();
  static const int kLevelFieldNumber = 7;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int64 createtime = 8;
  void clear_createtime();
  static const int kCreatetimeFieldNumber = 8;
  ::google::protobuf::int64 createtime() const;
  void set_createtime(::google::protobuf::int64 value);

  // int64 logintime = 9;
  void clear_logintime();
  static const int kLogintimeFieldNumber = 9;
  ::google::protobuf::int64 logintime() const;
  void set_logintime(::google::protobuf::int64 value);

  // int32 mapid = 10;
  void clear_mapid();
  static const int kMapidFieldNumber = 10;
  ::google::protobuf::int32 mapid() const;
  void set_mapid(::google::protobuf::int32 value);

  // float x = 11;
  void clear_x();
  static const int kXFieldNumber = 11;
  float x() const;
  void set_x(float value);

  // float y = 12;
  void clear_y();
  static const int kYFieldNumber = 12;
  float y() const;
  void set_y(float value);

  // float z = 13;
  void clear_z();
  static const int kZFieldNumber = 13;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:svrData.LoadPlayerData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 ncenterclientid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 logintime_;
  ::google::protobuf::int32 mapid_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsLoadPlayerDataImpl();
};
// -------------------------------------------------------------------

class ChangeLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.ChangeLine) */ {
 public:
  ChangeLine();
  virtual ~ChangeLine();

  ChangeLine(const ChangeLine& from);

  inline ChangeLine& operator=(const ChangeLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeLine(ChangeLine&& from) noexcept
    : ChangeLine() {
    *this = ::std::move(from);
  }

  inline ChangeLine& operator=(ChangeLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLine* internal_default_instance() {
    return reinterpret_cast<const ChangeLine*>(
               &_ChangeLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ChangeLine* other);
  friend void swap(ChangeLine& a, ChangeLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLine* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChangeLine>(NULL);
  }

  ChangeLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChangeLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeLine& from);
  void MergeFrom(const ChangeLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .svrData.LoadPlayerData Data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::svrData::LoadPlayerData& data() const;
  ::svrData::LoadPlayerData* release_data();
  ::svrData::LoadPlayerData* mutable_data();
  void set_allocated_data(::svrData::LoadPlayerData* data);

  // int32 nMapID = 1;
  void clear_nmapid();
  static const int kNMapIDFieldNumber = 1;
  ::google::protobuf::int32 nmapid() const;
  void set_nmapid(::google::protobuf::int32 value);

  // int32 nLineID = 2;
  void clear_nlineid();
  static const int kNLineIDFieldNumber = 2;
  ::google::protobuf::int32 nlineid() const;
  void set_nlineid(::google::protobuf::int32 value);

  // int32 nGameID = 3;
  void clear_ngameid();
  static const int kNGameIDFieldNumber = 3;
  ::google::protobuf::int32 ngameid() const;
  void set_ngameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.ChangeLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::svrData::LoadPlayerData* data_;
  ::google::protobuf::int32 nmapid_;
  ::google::protobuf::int32 nlineid_;
  ::google::protobuf::int32 ngameid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsChangeLineImpl();
};
// -------------------------------------------------------------------

class ChangeLineRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.ChangeLineRet) */ {
 public:
  ChangeLineRet();
  virtual ~ChangeLineRet();

  ChangeLineRet(const ChangeLineRet& from);

  inline ChangeLineRet& operator=(const ChangeLineRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeLineRet(ChangeLineRet&& from) noexcept
    : ChangeLineRet() {
    *this = ::std::move(from);
  }

  inline ChangeLineRet& operator=(ChangeLineRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLineRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLineRet* internal_default_instance() {
    return reinterpret_cast<const ChangeLineRet*>(
               &_ChangeLineRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ChangeLineRet* other);
  friend void swap(ChangeLineRet& a, ChangeLineRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLineRet* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChangeLineRet>(NULL);
  }

  ChangeLineRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChangeLineRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeLineRet& from);
  void MergeFrom(const ChangeLineRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeLineRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChangeLineRet_EC EC;
  static const EC EC_OTHER =
    ChangeLineRet_EC_EC_OTHER;
  static const EC EC_SUCC =
    ChangeLineRet_EC_EC_SUCC;
  static const EC EC_FAIL =
    ChangeLineRet_EC_EC_FAIL;
  static const EC EC_SERVER =
    ChangeLineRet_EC_EC_SERVER;
  static inline bool EC_IsValid(int value) {
    return ChangeLineRet_EC_IsValid(value);
  }
  static const EC EC_MIN =
    ChangeLineRet_EC_EC_MIN;
  static const EC EC_MAX =
    ChangeLineRet_EC_EC_MAX;
  static const int EC_ARRAYSIZE =
    ChangeLineRet_EC_EC_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EC_descriptor() {
    return ChangeLineRet_EC_descriptor();
  }
  static inline const ::std::string& EC_Name(EC value) {
    return ChangeLineRet_EC_Name(value);
  }
  static inline bool EC_Parse(const ::std::string& name,
      EC* value) {
    return ChangeLineRet_EC_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 nCode = 1;
  void clear_ncode();
  static const int kNCodeFieldNumber = 1;
  ::google::protobuf::int32 ncode() const;
  void set_ncode(::google::protobuf::int32 value);

  // int32 nGameID = 2;
  void clear_ngameid();
  static const int kNGameIDFieldNumber = 2;
  ::google::protobuf::int32 ngameid() const;
  void set_ngameid(::google::protobuf::int32 value);

  // int32 nMapID = 3;
  void clear_nmapid();
  static const int kNMapIDFieldNumber = 3;
  ::google::protobuf::int32 nmapid() const;
  void set_nmapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svrData.ChangeLineRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ncode_;
  ::google::protobuf::int32 ngameid_;
  ::google::protobuf::int32 nmapid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsChangeLineRetImpl();
};
// -------------------------------------------------------------------

class KickClient : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svrData.KickClient) */ {
 public:
  KickClient();
  virtual ~KickClient();

  KickClient(const KickClient& from);

  inline KickClient& operator=(const KickClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickClient(KickClient&& from) noexcept
    : KickClient() {
    *this = ::std::move(from);
  }

  inline KickClient& operator=(KickClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickClient* internal_default_instance() {
    return reinterpret_cast<const KickClient*>(
               &_KickClient_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(KickClient* other);
  friend void swap(KickClient& a, KickClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickClient* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<KickClient>(NULL);
  }

  KickClient* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<KickClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KickClient& from);
  void MergeFrom(const KickClient& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KickClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svrData.KickClient)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
  friend void ::protobuf_ServerMsg_2eproto::InitDefaultsKickClientImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ping

// -------------------------------------------------------------------

// ServerRegister

// int32 nServerID = 1;
inline void ServerRegister::clear_nserverid() {
  nserverid_ = 0;
}
inline ::google::protobuf::int32 ServerRegister::nserverid() const {
  // @@protoc_insertion_point(field_get:svrData.ServerRegister.nServerID)
  return nserverid_;
}
inline void ServerRegister::set_nserverid(::google::protobuf::int32 value) {
  
  nserverid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerRegister.nServerID)
}

// int32 nServerType = 2;
inline void ServerRegister::clear_nservertype() {
  nservertype_ = 0;
}
inline ::google::protobuf::int32 ServerRegister::nservertype() const {
  // @@protoc_insertion_point(field_get:svrData.ServerRegister.nServerType)
  return nservertype_;
}
inline void ServerRegister::set_nservertype(::google::protobuf::int32 value) {
  
  nservertype_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerRegister.nServerType)
}

// int32 nConnectID = 3;
inline void ServerRegister::clear_nconnectid() {
  nconnectid_ = 0;
}
inline ::google::protobuf::int32 ServerRegister::nconnectid() const {
  // @@protoc_insertion_point(field_get:svrData.ServerRegister.nConnectID)
  return nconnectid_;
}
inline void ServerRegister::set_nconnectid(::google::protobuf::int32 value) {
  
  nconnectid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerRegister.nConnectID)
}

// int32 nPort = 4;
inline void ServerRegister::clear_nport() {
  nport_ = 0;
}
inline ::google::protobuf::int32 ServerRegister::nport() const {
  // @@protoc_insertion_point(field_get:svrData.ServerRegister.nPort)
  return nport_;
}
inline void ServerRegister::set_nport(::google::protobuf::int32 value) {
  
  nport_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerRegister.nPort)
}

// -------------------------------------------------------------------

// ServerRegisterRet

// int32 nRetCode = 1;
inline void ServerRegisterRet::clear_nretcode() {
  nretcode_ = 0;
}
inline ::google::protobuf::int32 ServerRegisterRet::nretcode() const {
  // @@protoc_insertion_point(field_get:svrData.ServerRegisterRet.nRetCode)
  return nretcode_;
}
inline void ServerRegisterRet::set_nretcode(::google::protobuf::int32 value) {
  
  nretcode_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerRegisterRet.nRetCode)
}

// string sIP = 2;
inline void ServerRegisterRet::clear_sip() {
  sip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerRegisterRet::sip() const {
  // @@protoc_insertion_point(field_get:svrData.ServerRegisterRet.sIP)
  return sip_.GetNoArena();
}
inline void ServerRegisterRet::set_sip(const ::std::string& value) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.ServerRegisterRet.sIP)
}
#if LANG_CXX11
inline void ServerRegisterRet::set_sip(::std::string&& value) {
  
  sip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.ServerRegisterRet.sIP)
}
#endif
inline void ServerRegisterRet::set_sip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.ServerRegisterRet.sIP)
}
inline void ServerRegisterRet::set_sip(const char* value, size_t size) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.ServerRegisterRet.sIP)
}
inline ::std::string* ServerRegisterRet::mutable_sip() {
  
  // @@protoc_insertion_point(field_mutable:svrData.ServerRegisterRet.sIP)
  return sip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerRegisterRet::release_sip() {
  // @@protoc_insertion_point(field_release:svrData.ServerRegisterRet.sIP)
  
  return sip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerRegisterRet::set_allocated_sip(::std::string* sip) {
  if (sip != NULL) {
    
  } else {
    
  }
  sip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sip);
  // @@protoc_insertion_point(field_set_allocated:svrData.ServerRegisterRet.sIP)
}

// int32 nPort = 3;
inline void ServerRegisterRet::clear_nport() {
  nport_ = 0;
}
inline ::google::protobuf::int32 ServerRegisterRet::nport() const {
  // @@protoc_insertion_point(field_get:svrData.ServerRegisterRet.nPort)
  return nport_;
}
inline void ServerRegisterRet::set_nport(::google::protobuf::int32 value) {
  
  nport_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerRegisterRet.nPort)
}

// -------------------------------------------------------------------

// ServerLoadInfo

// int32 nLineID = 1;
inline void ServerLoadInfo::clear_nlineid() {
  nlineid_ = 0;
}
inline ::google::protobuf::int32 ServerLoadInfo::nlineid() const {
  // @@protoc_insertion_point(field_get:svrData.ServerLoadInfo.nLineID)
  return nlineid_;
}
inline void ServerLoadInfo::set_nlineid(::google::protobuf::int32 value) {
  
  nlineid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerLoadInfo.nLineID)
}

// int32 nMaxClient = 2;
inline void ServerLoadInfo::clear_nmaxclient() {
  nmaxclient_ = 0;
}
inline ::google::protobuf::int32 ServerLoadInfo::nmaxclient() const {
  // @@protoc_insertion_point(field_get:svrData.ServerLoadInfo.nMaxClient)
  return nmaxclient_;
}
inline void ServerLoadInfo::set_nmaxclient(::google::protobuf::int32 value) {
  
  nmaxclient_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerLoadInfo.nMaxClient)
}

// int32 nNowClient = 3;
inline void ServerLoadInfo::clear_nnowclient() {
  nnowclient_ = 0;
}
inline ::google::protobuf::int32 ServerLoadInfo::nnowclient() const {
  // @@protoc_insertion_point(field_get:svrData.ServerLoadInfo.nNowClient)
  return nnowclient_;
}
inline void ServerLoadInfo::set_nnowclient(::google::protobuf::int32 value) {
  
  nnowclient_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerLoadInfo.nNowClient)
}

// int32 nPort = 4;
inline void ServerLoadInfo::clear_nport() {
  nport_ = 0;
}
inline ::google::protobuf::int32 ServerLoadInfo::nport() const {
  // @@protoc_insertion_point(field_get:svrData.ServerLoadInfo.nPort)
  return nport_;
}
inline void ServerLoadInfo::set_nport(::google::protobuf::int32 value) {
  
  nport_ = value;
  // @@protoc_insertion_point(field_set:svrData.ServerLoadInfo.nPort)
}

// string sIP = 5;
inline void ServerLoadInfo::clear_sip() {
  sip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerLoadInfo::sip() const {
  // @@protoc_insertion_point(field_get:svrData.ServerLoadInfo.sIP)
  return sip_.GetNoArena();
}
inline void ServerLoadInfo::set_sip(const ::std::string& value) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.ServerLoadInfo.sIP)
}
#if LANG_CXX11
inline void ServerLoadInfo::set_sip(::std::string&& value) {
  
  sip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.ServerLoadInfo.sIP)
}
#endif
inline void ServerLoadInfo::set_sip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.ServerLoadInfo.sIP)
}
inline void ServerLoadInfo::set_sip(const char* value, size_t size) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.ServerLoadInfo.sIP)
}
inline ::std::string* ServerLoadInfo::mutable_sip() {
  
  // @@protoc_insertion_point(field_mutable:svrData.ServerLoadInfo.sIP)
  return sip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerLoadInfo::release_sip() {
  // @@protoc_insertion_point(field_release:svrData.ServerLoadInfo.sIP)
  
  return sip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerLoadInfo::set_allocated_sip(::std::string* sip) {
  if (sip != NULL) {
    
  } else {
    
  }
  sip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sip);
  // @@protoc_insertion_point(field_set_allocated:svrData.ServerLoadInfo.sIP)
}

// repeated int32 mapid = 6;
inline int ServerLoadInfo::mapid_size() const {
  return mapid_.size();
}
inline void ServerLoadInfo::clear_mapid() {
  mapid_.Clear();
}
inline ::google::protobuf::int32 ServerLoadInfo::mapid(int index) const {
  // @@protoc_insertion_point(field_get:svrData.ServerLoadInfo.mapid)
  return mapid_.Get(index);
}
inline void ServerLoadInfo::set_mapid(int index, ::google::protobuf::int32 value) {
  mapid_.Set(index, value);
  // @@protoc_insertion_point(field_set:svrData.ServerLoadInfo.mapid)
}
inline void ServerLoadInfo::add_mapid(::google::protobuf::int32 value) {
  mapid_.Add(value);
  // @@protoc_insertion_point(field_add:svrData.ServerLoadInfo.mapid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ServerLoadInfo::mapid() const {
  // @@protoc_insertion_point(field_list:svrData.ServerLoadInfo.mapid)
  return mapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ServerLoadInfo::mutable_mapid() {
  // @@protoc_insertion_point(field_mutable_list:svrData.ServerLoadInfo.mapid)
  return &mapid_;
}

// -------------------------------------------------------------------

// UpdateServerLoad

// int32 nClientCountNow = 1;
inline void UpdateServerLoad::clear_nclientcountnow() {
  nclientcountnow_ = 0;
}
inline ::google::protobuf::int32 UpdateServerLoad::nclientcountnow() const {
  // @@protoc_insertion_point(field_get:svrData.UpdateServerLoad.nClientCountNow)
  return nclientcountnow_;
}
inline void UpdateServerLoad::set_nclientcountnow(::google::protobuf::int32 value) {
  
  nclientcountnow_ = value;
  // @@protoc_insertion_point(field_set:svrData.UpdateServerLoad.nClientCountNow)
}

// int32 nClientCountMax = 2;
inline void UpdateServerLoad::clear_nclientcountmax() {
  nclientcountmax_ = 0;
}
inline ::google::protobuf::int32 UpdateServerLoad::nclientcountmax() const {
  // @@protoc_insertion_point(field_get:svrData.UpdateServerLoad.nClientCountMax)
  return nclientcountmax_;
}
inline void UpdateServerLoad::set_nclientcountmax(::google::protobuf::int32 value) {
  
  nclientcountmax_ = value;
  // @@protoc_insertion_point(field_set:svrData.UpdateServerLoad.nClientCountMax)
}

// -------------------------------------------------------------------

// AddNewClient

// int32 nGameID = 1;
inline void AddNewClient::clear_ngameid() {
  ngameid_ = 0;
}
inline ::google::protobuf::int32 AddNewClient::ngameid() const {
  // @@protoc_insertion_point(field_get:svrData.AddNewClient.nGameID)
  return ngameid_;
}
inline void AddNewClient::set_ngameid(::google::protobuf::int32 value) {
  
  ngameid_ = value;
  // @@protoc_insertion_point(field_set:svrData.AddNewClient.nGameID)
}

// string Account = 2;
inline void AddNewClient::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddNewClient::account() const {
  // @@protoc_insertion_point(field_get:svrData.AddNewClient.Account)
  return account_.GetNoArena();
}
inline void AddNewClient::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.AddNewClient.Account)
}
#if LANG_CXX11
inline void AddNewClient::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.AddNewClient.Account)
}
#endif
inline void AddNewClient::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.AddNewClient.Account)
}
inline void AddNewClient::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.AddNewClient.Account)
}
inline ::std::string* AddNewClient::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:svrData.AddNewClient.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddNewClient::release_account() {
  // @@protoc_insertion_point(field_release:svrData.AddNewClient.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddNewClient::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:svrData.AddNewClient.Account)
}

// -------------------------------------------------------------------

// AddNewClientRet

// int32 nCode = 1;
inline void AddNewClientRet::clear_ncode() {
  ncode_ = 0;
}
inline ::google::protobuf::int32 AddNewClientRet::ncode() const {
  // @@protoc_insertion_point(field_get:svrData.AddNewClientRet.nCode)
  return ncode_;
}
inline void AddNewClientRet::set_ncode(::google::protobuf::int32 value) {
  
  ncode_ = value;
  // @@protoc_insertion_point(field_set:svrData.AddNewClientRet.nCode)
}

// int32 nCenterClientID = 2;
inline void AddNewClientRet::clear_ncenterclientid() {
  ncenterclientid_ = 0;
}
inline ::google::protobuf::int32 AddNewClientRet::ncenterclientid() const {
  // @@protoc_insertion_point(field_get:svrData.AddNewClientRet.nCenterClientID)
  return ncenterclientid_;
}
inline void AddNewClientRet::set_ncenterclientid(::google::protobuf::int32 value) {
  
  ncenterclientid_ = value;
  // @@protoc_insertion_point(field_set:svrData.AddNewClientRet.nCenterClientID)
}

// -------------------------------------------------------------------

// DelClient

// string Account = 1;
inline void DelClient::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DelClient::account() const {
  // @@protoc_insertion_point(field_get:svrData.DelClient.Account)
  return account_.GetNoArena();
}
inline void DelClient::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.DelClient.Account)
}
#if LANG_CXX11
inline void DelClient::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.DelClient.Account)
}
#endif
inline void DelClient::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.DelClient.Account)
}
inline void DelClient::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.DelClient.Account)
}
inline ::std::string* DelClient::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:svrData.DelClient.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelClient::release_account() {
  // @@protoc_insertion_point(field_release:svrData.DelClient.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelClient::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:svrData.DelClient.Account)
}

// -------------------------------------------------------------------

// ClientAccount

// int32 nGameID = 1;
inline void ClientAccount::clear_ngameid() {
  ngameid_ = 0;
}
inline ::google::protobuf::int32 ClientAccount::ngameid() const {
  // @@protoc_insertion_point(field_get:svrData.ClientAccount.nGameID)
  return ngameid_;
}
inline void ClientAccount::set_ngameid(::google::protobuf::int32 value) {
  
  ngameid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ClientAccount.nGameID)
}

// string Account = 2;
inline void ClientAccount::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientAccount::account() const {
  // @@protoc_insertion_point(field_get:svrData.ClientAccount.Account)
  return account_.GetNoArena();
}
inline void ClientAccount::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.ClientAccount.Account)
}
#if LANG_CXX11
inline void ClientAccount::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.ClientAccount.Account)
}
#endif
inline void ClientAccount::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.ClientAccount.Account)
}
inline void ClientAccount::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.ClientAccount.Account)
}
inline ::std::string* ClientAccount::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:svrData.ClientAccount.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientAccount::release_account() {
  // @@protoc_insertion_point(field_release:svrData.ClientAccount.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientAccount::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:svrData.ClientAccount.Account)
}

// bytes Secret = 3;
inline void ClientAccount::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientAccount::secret() const {
  // @@protoc_insertion_point(field_get:svrData.ClientAccount.Secret)
  return secret_.GetNoArena();
}
inline void ClientAccount::set_secret(const ::std::string& value) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.ClientAccount.Secret)
}
#if LANG_CXX11
inline void ClientAccount::set_secret(::std::string&& value) {
  
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.ClientAccount.Secret)
}
#endif
inline void ClientAccount::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.ClientAccount.Secret)
}
inline void ClientAccount::set_secret(const void* value, size_t size) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.ClientAccount.Secret)
}
inline ::std::string* ClientAccount::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:svrData.ClientAccount.Secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientAccount::release_secret() {
  // @@protoc_insertion_point(field_release:svrData.ClientAccount.Secret)
  
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientAccount::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:svrData.ClientAccount.Secret)
}

// .svrData.LoadPlayerData Data = 4;
inline bool ClientAccount::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void ClientAccount::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::svrData::LoadPlayerData& ClientAccount::data() const {
  const ::svrData::LoadPlayerData* p = data_;
  // @@protoc_insertion_point(field_get:svrData.ClientAccount.Data)
  return p != NULL ? *p : *reinterpret_cast<const ::svrData::LoadPlayerData*>(
      &::svrData::_LoadPlayerData_default_instance_);
}
inline ::svrData::LoadPlayerData* ClientAccount::release_data() {
  // @@protoc_insertion_point(field_release:svrData.ClientAccount.Data)
  
  ::svrData::LoadPlayerData* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::svrData::LoadPlayerData* ClientAccount::mutable_data() {
  
  if (data_ == NULL) {
    data_ = ::google::protobuf::Arena::Create< ::svrData::LoadPlayerData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:svrData.ClientAccount.Data)
  return data_;
}
inline void ClientAccount::set_allocated_data(::svrData::LoadPlayerData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:svrData.ClientAccount.Data)
}

// -------------------------------------------------------------------

// LoadPlayerData

// int32 nCenterClientID = 1;
inline void LoadPlayerData::clear_ncenterclientid() {
  ncenterclientid_ = 0;
}
inline ::google::protobuf::int32 LoadPlayerData::ncenterclientid() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.nCenterClientID)
  return ncenterclientid_;
}
inline void LoadPlayerData::set_ncenterclientid(::google::protobuf::int32 value) {
  
  ncenterclientid_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.nCenterClientID)
}

// string account = 2;
inline void LoadPlayerData::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadPlayerData::account() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.account)
  return account_.GetNoArena();
}
inline void LoadPlayerData::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.account)
}
#if LANG_CXX11
inline void LoadPlayerData::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.LoadPlayerData.account)
}
#endif
inline void LoadPlayerData::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.LoadPlayerData.account)
}
inline void LoadPlayerData::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.LoadPlayerData.account)
}
inline ::std::string* LoadPlayerData::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:svrData.LoadPlayerData.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadPlayerData::release_account() {
  // @@protoc_insertion_point(field_release:svrData.LoadPlayerData.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPlayerData::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:svrData.LoadPlayerData.account)
}

// string name = 3;
inline void LoadPlayerData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadPlayerData::name() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.name)
  return name_.GetNoArena();
}
inline void LoadPlayerData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.name)
}
#if LANG_CXX11
inline void LoadPlayerData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.LoadPlayerData.name)
}
#endif
inline void LoadPlayerData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.LoadPlayerData.name)
}
inline void LoadPlayerData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.LoadPlayerData.name)
}
inline ::std::string* LoadPlayerData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:svrData.LoadPlayerData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadPlayerData::release_name() {
  // @@protoc_insertion_point(field_release:svrData.LoadPlayerData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPlayerData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:svrData.LoadPlayerData.name)
}

// int64 guid = 4;
inline void LoadPlayerData::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LoadPlayerData::guid() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.guid)
  return guid_;
}
inline void LoadPlayerData::set_guid(::google::protobuf::int64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.guid)
}

// int32 sex = 5;
inline void LoadPlayerData::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 LoadPlayerData::sex() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.sex)
  return sex_;
}
inline void LoadPlayerData::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.sex)
}

// int32 job = 6;
inline void LoadPlayerData::clear_job() {
  job_ = 0;
}
inline ::google::protobuf::int32 LoadPlayerData::job() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.job)
  return job_;
}
inline void LoadPlayerData::set_job(::google::protobuf::int32 value) {
  
  job_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.job)
}

// int32 level = 7;
inline void LoadPlayerData::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 LoadPlayerData::level() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.level)
  return level_;
}
inline void LoadPlayerData::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.level)
}

// int64 createtime = 8;
inline void LoadPlayerData::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LoadPlayerData::createtime() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.createtime)
  return createtime_;
}
inline void LoadPlayerData::set_createtime(::google::protobuf::int64 value) {
  
  createtime_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.createtime)
}

// int64 logintime = 9;
inline void LoadPlayerData::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LoadPlayerData::logintime() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.logintime)
  return logintime_;
}
inline void LoadPlayerData::set_logintime(::google::protobuf::int64 value) {
  
  logintime_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.logintime)
}

// int32 mapid = 10;
inline void LoadPlayerData::clear_mapid() {
  mapid_ = 0;
}
inline ::google::protobuf::int32 LoadPlayerData::mapid() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.mapid)
  return mapid_;
}
inline void LoadPlayerData::set_mapid(::google::protobuf::int32 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.mapid)
}

// float x = 11;
inline void LoadPlayerData::clear_x() {
  x_ = 0;
}
inline float LoadPlayerData::x() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.x)
  return x_;
}
inline void LoadPlayerData::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.x)
}

// float y = 12;
inline void LoadPlayerData::clear_y() {
  y_ = 0;
}
inline float LoadPlayerData::y() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.y)
  return y_;
}
inline void LoadPlayerData::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.y)
}

// float z = 13;
inline void LoadPlayerData::clear_z() {
  z_ = 0;
}
inline float LoadPlayerData::z() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.z)
  return z_;
}
inline void LoadPlayerData::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.z)
}

// bytes data = 14;
inline void LoadPlayerData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadPlayerData::data() const {
  // @@protoc_insertion_point(field_get:svrData.LoadPlayerData.data)
  return data_.GetNoArena();
}
inline void LoadPlayerData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svrData.LoadPlayerData.data)
}
#if LANG_CXX11
inline void LoadPlayerData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svrData.LoadPlayerData.data)
}
#endif
inline void LoadPlayerData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svrData.LoadPlayerData.data)
}
inline void LoadPlayerData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svrData.LoadPlayerData.data)
}
inline ::std::string* LoadPlayerData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:svrData.LoadPlayerData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadPlayerData::release_data() {
  // @@protoc_insertion_point(field_release:svrData.LoadPlayerData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPlayerData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:svrData.LoadPlayerData.data)
}

// -------------------------------------------------------------------

// ChangeLine

// int32 nMapID = 1;
inline void ChangeLine::clear_nmapid() {
  nmapid_ = 0;
}
inline ::google::protobuf::int32 ChangeLine::nmapid() const {
  // @@protoc_insertion_point(field_get:svrData.ChangeLine.nMapID)
  return nmapid_;
}
inline void ChangeLine::set_nmapid(::google::protobuf::int32 value) {
  
  nmapid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ChangeLine.nMapID)
}

// int32 nLineID = 2;
inline void ChangeLine::clear_nlineid() {
  nlineid_ = 0;
}
inline ::google::protobuf::int32 ChangeLine::nlineid() const {
  // @@protoc_insertion_point(field_get:svrData.ChangeLine.nLineID)
  return nlineid_;
}
inline void ChangeLine::set_nlineid(::google::protobuf::int32 value) {
  
  nlineid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ChangeLine.nLineID)
}

// int32 nGameID = 3;
inline void ChangeLine::clear_ngameid() {
  ngameid_ = 0;
}
inline ::google::protobuf::int32 ChangeLine::ngameid() const {
  // @@protoc_insertion_point(field_get:svrData.ChangeLine.nGameID)
  return ngameid_;
}
inline void ChangeLine::set_ngameid(::google::protobuf::int32 value) {
  
  ngameid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ChangeLine.nGameID)
}

// .svrData.LoadPlayerData Data = 4;
inline bool ChangeLine::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void ChangeLine::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::svrData::LoadPlayerData& ChangeLine::data() const {
  const ::svrData::LoadPlayerData* p = data_;
  // @@protoc_insertion_point(field_get:svrData.ChangeLine.Data)
  return p != NULL ? *p : *reinterpret_cast<const ::svrData::LoadPlayerData*>(
      &::svrData::_LoadPlayerData_default_instance_);
}
inline ::svrData::LoadPlayerData* ChangeLine::release_data() {
  // @@protoc_insertion_point(field_release:svrData.ChangeLine.Data)
  
  ::svrData::LoadPlayerData* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::svrData::LoadPlayerData* ChangeLine::mutable_data() {
  
  if (data_ == NULL) {
    data_ = ::google::protobuf::Arena::Create< ::svrData::LoadPlayerData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:svrData.ChangeLine.Data)
  return data_;
}
inline void ChangeLine::set_allocated_data(::svrData::LoadPlayerData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:svrData.ChangeLine.Data)
}

// -------------------------------------------------------------------

// ChangeLineRet

// int32 nCode = 1;
inline void ChangeLineRet::clear_ncode() {
  ncode_ = 0;
}
inline ::google::protobuf::int32 ChangeLineRet::ncode() const {
  // @@protoc_insertion_point(field_get:svrData.ChangeLineRet.nCode)
  return ncode_;
}
inline void ChangeLineRet::set_ncode(::google::protobuf::int32 value) {
  
  ncode_ = value;
  // @@protoc_insertion_point(field_set:svrData.ChangeLineRet.nCode)
}

// int32 nGameID = 2;
inline void ChangeLineRet::clear_ngameid() {
  ngameid_ = 0;
}
inline ::google::protobuf::int32 ChangeLineRet::ngameid() const {
  // @@protoc_insertion_point(field_get:svrData.ChangeLineRet.nGameID)
  return ngameid_;
}
inline void ChangeLineRet::set_ngameid(::google::protobuf::int32 value) {
  
  ngameid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ChangeLineRet.nGameID)
}

// int32 nMapID = 3;
inline void ChangeLineRet::clear_nmapid() {
  nmapid_ = 0;
}
inline ::google::protobuf::int32 ChangeLineRet::nmapid() const {
  // @@protoc_insertion_point(field_get:svrData.ChangeLineRet.nMapID)
  return nmapid_;
}
inline void ChangeLineRet::set_nmapid(::google::protobuf::int32 value) {
  
  nmapid_ = value;
  // @@protoc_insertion_point(field_set:svrData.ChangeLineRet.nMapID)
}

// -------------------------------------------------------------------

// KickClient

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace svrData

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::svrData::ServerRegisterRet_EC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svrData::ServerRegisterRet_EC>() {
  return ::svrData::ServerRegisterRet_EC_descriptor();
}
template <> struct is_proto_enum< ::svrData::AddNewClientRet_EC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svrData::AddNewClientRet_EC>() {
  return ::svrData::AddNewClientRet_EC_descriptor();
}
template <> struct is_proto_enum< ::svrData::ChangeLineRet_EC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svrData::ChangeLineRet_EC>() {
  return ::svrData::ChangeLineRet_EC_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerMsg_2eproto_INCLUDED
