// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBServer.proto

#ifndef PROTOBUF_DBServer_2eproto__INCLUDED
#define PROTOBUF_DBServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_DBServer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsExecuteImpl();
void InitDefaultsExecute();
void InitDefaultsExecuteRetImpl();
void InitDefaultsExecuteRet();
inline void InitDefaults() {
  InitDefaultsExecute();
  InitDefaultsExecuteRet();
}
}  // namespace protobuf_DBServer_2eproto
namespace SvrData {
class Execute;
class ExecuteDefaultTypeInternal;
extern ExecuteDefaultTypeInternal _Execute_default_instance_;
class ExecuteRet;
class ExecuteRetDefaultTypeInternal;
extern ExecuteRetDefaultTypeInternal _ExecuteRet_default_instance_;
}  // namespace SvrData
namespace SvrData {

// ===================================================================

class Execute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrData.Execute) */ {
 public:
  Execute();
  virtual ~Execute();

  Execute(const Execute& from);

  inline Execute& operator=(const Execute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Execute(Execute&& from) noexcept
    : Execute() {
    *this = ::std::move(from);
  }

  inline Execute& operator=(Execute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Execute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Execute* internal_default_instance() {
    return reinterpret_cast<const Execute*>(
               &_Execute_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Execute* other);
  friend void swap(Execute& a, Execute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Execute* New() const PROTOBUF_FINAL { return New(NULL); }

  Execute* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Execute& from);
  void MergeFrom(const Execute& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Execute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string sql = 2;
  void clear_sql();
  static const int kSqlFieldNumber = 2;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:SvrData.Execute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  mutable int _cached_size_;
  friend struct ::protobuf_DBServer_2eproto::TableStruct;
  friend void ::protobuf_DBServer_2eproto::InitDefaultsExecuteImpl();
};
// -------------------------------------------------------------------

class ExecuteRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrData.ExecuteRet) */ {
 public:
  ExecuteRet();
  virtual ~ExecuteRet();

  ExecuteRet(const ExecuteRet& from);

  inline ExecuteRet& operator=(const ExecuteRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteRet(ExecuteRet&& from) noexcept
    : ExecuteRet() {
    *this = ::std::move(from);
  }

  inline ExecuteRet& operator=(ExecuteRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteRet* internal_default_instance() {
    return reinterpret_cast<const ExecuteRet*>(
               &_ExecuteRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ExecuteRet* other);
  friend void swap(ExecuteRet& a, ExecuteRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteRet* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecuteRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecuteRet& from);
  void MergeFrom(const ExecuteRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecuteRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string res = 1;
  void clear_res();
  static const int kResFieldNumber = 1;
  const ::std::string& res() const;
  void set_res(const ::std::string& value);
  #if LANG_CXX11
  void set_res(::std::string&& value);
  #endif
  void set_res(const char* value);
  void set_res(const char* value, size_t size);
  ::std::string* mutable_res();
  ::std::string* release_res();
  void set_allocated_res(::std::string* res);

  // @@protoc_insertion_point(class_scope:SvrData.ExecuteRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr res_;
  mutable int _cached_size_;
  friend struct ::protobuf_DBServer_2eproto::TableStruct;
  friend void ::protobuf_DBServer_2eproto::InitDefaultsExecuteRetImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Execute

// string type = 1;
inline void Execute::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Execute::type() const {
  // @@protoc_insertion_point(field_get:SvrData.Execute.type)
  return type_.GetNoArena();
}
inline void Execute::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrData.Execute.type)
}
#if LANG_CXX11
inline void Execute::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrData.Execute.type)
}
#endif
inline void Execute::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrData.Execute.type)
}
inline void Execute::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrData.Execute.type)
}
inline ::std::string* Execute::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:SvrData.Execute.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Execute::release_type() {
  // @@protoc_insertion_point(field_release:SvrData.Execute.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Execute::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:SvrData.Execute.type)
}

// string sql = 2;
inline void Execute::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Execute::sql() const {
  // @@protoc_insertion_point(field_get:SvrData.Execute.sql)
  return sql_.GetNoArena();
}
inline void Execute::set_sql(const ::std::string& value) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrData.Execute.sql)
}
#if LANG_CXX11
inline void Execute::set_sql(::std::string&& value) {
  
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrData.Execute.sql)
}
#endif
inline void Execute::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrData.Execute.sql)
}
inline void Execute::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrData.Execute.sql)
}
inline ::std::string* Execute::mutable_sql() {
  
  // @@protoc_insertion_point(field_mutable:SvrData.Execute.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Execute::release_sql() {
  // @@protoc_insertion_point(field_release:SvrData.Execute.sql)
  
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Execute::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:SvrData.Execute.sql)
}

// -------------------------------------------------------------------

// ExecuteRet

// string res = 1;
inline void ExecuteRet::clear_res() {
  res_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteRet::res() const {
  // @@protoc_insertion_point(field_get:SvrData.ExecuteRet.res)
  return res_.GetNoArena();
}
inline void ExecuteRet::set_res(const ::std::string& value) {
  
  res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrData.ExecuteRet.res)
}
#if LANG_CXX11
inline void ExecuteRet::set_res(::std::string&& value) {
  
  res_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrData.ExecuteRet.res)
}
#endif
inline void ExecuteRet::set_res(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrData.ExecuteRet.res)
}
inline void ExecuteRet::set_res(const char* value, size_t size) {
  
  res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrData.ExecuteRet.res)
}
inline ::std::string* ExecuteRet::mutable_res() {
  
  // @@protoc_insertion_point(field_mutable:SvrData.ExecuteRet.res)
  return res_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteRet::release_res() {
  // @@protoc_insertion_point(field_release:SvrData.ExecuteRet.res)
  
  return res_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteRet::set_allocated_res(::std::string* res) {
  if (res != NULL) {
    
  } else {
    
  }
  res_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res);
  // @@protoc_insertion_point(field_set_allocated:SvrData.ExecuteRet.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SvrData

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBServer_2eproto__INCLUDED
